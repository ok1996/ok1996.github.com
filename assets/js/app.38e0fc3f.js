(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,s,o=e[0],l=e[1],c=e[2],d=0,m=[];d<o.length;d++)s=o[d],Object.prototype.hasOwnProperty.call(a,s)&&a[s]&&m.push(a[s][0]),a[s]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(p&&p(e);m.length;)m.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,o=1;o<t.length;o++){var l=t[o];0!==a[l]&&(r=!1)}r&&(i.splice(e--,1),n=s(s.s=t[0]))}return n}var r={},a={1:0},i=[];function s(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,s),t.l=!0,t.exports}s.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var i,o=document.createElement("script");o.charset="utf-8",o.timeout=120,s.nc&&o.setAttribute("nonce",s.nc),o.src=function(n){return s.p+"assets/js/"+({}[n]||n)+"."+{2:"d249d5e2",3:"2e83debd",4:"5d7951a0",5:"003e6d77",6:"df389ccb",7:"120138e9",8:"72fe3337",9:"37199ea7",10:"16ec566a",11:"de143323",12:"b039a80d",13:"be22eb21",14:"462f4905",15:"4646c1d3",16:"3439aa2b",17:"b1703aa1",18:"793edf95",19:"c5b8741c",20:"96ae768c",21:"931de875",22:"70c1ae1a",23:"196e10fe",24:"82e0f460",25:"3b7131cc",26:"3fba5ad0",27:"f5af2eb9",28:"94f55e91",29:"b258ac48",30:"b7740642",31:"3a8a1e5d",32:"0ed64c5b",33:"abb9cc7d",34:"daa268e3",35:"3086a466",36:"d0a16cac",37:"b8dd54f6",38:"05b676d8",39:"3b2dd6d5",40:"cbabffbd",41:"b3514cf7",42:"1c7f7ff2",43:"597af2f7",44:"b664778f",45:"036a637f",46:"eef34a58",47:"3a91887a",48:"94b87f24",49:"e9d23440",50:"682ad716",51:"34365680",52:"78718e9f",53:"1a933c46",54:"798b0e81",55:"04e17e2b",56:"b36365e2",57:"419bad71",58:"f0cc2c64",59:"e25b47a7",60:"f26bca75",61:"2b260658",62:"17260e13",63:"59e2be4a",64:"1f339f87",65:"1f5b38de",66:"e0f2fc09",67:"529db72a",68:"2a1bf857",69:"fd5e4553",70:"b9f0901a",71:"d6c520b6",72:"6668398c",73:"d1cbede3",74:"0d24a1a6",75:"c7d3f917",76:"c7b3f764",77:"96cb87b4",78:"e01feba6",79:"2693cbe4",80:"be792466",81:"42ea7686",82:"5dddd69e",83:"ed105b15",84:"b3b7c03f",85:"9458da43",86:"370af017",87:"958a6766",88:"711ab6ed",89:"b04b7ca8",90:"5aff308e"}[n]+".js"}(n);var l=new Error;i=function(e){o.onerror=o.onload=null,clearTimeout(c);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",l.name="ChunkLoadError",l.type=r,l.request=i,t[1](l)}a[n]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:o})}),12e4);o.onerror=o.onload=i,document.head.appendChild(o)}return Promise.all(e)},s.m=n,s.c=r,s.d=function(n,e,t){s.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},s.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},s.t=function(n,e){if(1&e&&(n=s(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)s.d(t,r,function(e){return n[e]}.bind(null,r));return t},s.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return s.d(e,"a",e),e},s.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},s.p="/",s.oe=function(n){throw console.error(n),n};var o=window.webpackJsonp=window.webpackJsonp||[],l=o.push.bind(o);o.push=e,o=o.slice();for(var c=0;c<o.length;c++)e(o[c]);var p=l;i.push([102,0]),t()}([function(n,e,t){var r=t(55),a=r.all;n.exports=r.IS_HTMLDDA?function(n){return"function"==typeof n||n===a}:function(n){return"function"==typeof n}},function(n,e,t){var r=t(27),a=Function.prototype,i=a.call,s=r&&a.bind.bind(i,i);n.exports=r?s:function(n){return function(){return i.apply(n,arguments)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(2);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(69),a="object"==typeof self&&self&&self.Object===Object&&self,i=r||a||Function("return this")();n.exports=i},function(n,e,t){"use strict";function r(n,e,t,r,a,i,s,o){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),s?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(s)},c._ssrRegister=l):a&&(l=o?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var p=c.render;c.render=function(n,e){return l.call(e),p(n,e)}}else{var d=c.beforeCreate;c.beforeCreate=d?[].concat(d,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r=t(1),a=t(32),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(a(n),e)}},function(n,e,t){var r=t(0),a=t(55),i=a.all;n.exports=a.IS_HTMLDDA?function(n){return"object"==typeof n?null!==n:r(n)||n===i}:function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(163),a=t(166);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return s})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return p})),t.d(e,"c",(function(){return d})),t.d(e,"f",(function(){return m})),t.d(e,"l",(function(){return u})),t.d(e,"m",(function(){return g})),t.d(e,"d",(function(){return f})),t.d(e,"k",(function(){return b})),t.d(e,"n",(function(){return v})),t.d(e,"a",(function(){return y}));t(16);const r=/#.*$/,a=/\.(md|html)$/,i=/\/$/,s=/^[a-z]+:/i;function o(n){return decodeURI(n).replace(r,"").replace(a,"")}function l(n){return s.test(n)}function c(n){return/^mailto:/.test(n)}function p(n){return/^tel:/.test(n)}function d(n){if(l(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",a=o(n);return i.test(a)?n:a+".html"+t}function m(n,e){const t=n.hash,a=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(a&&t!==a)return!1;return o(n.path)===o(e)}function u(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const a=e.split("/");t&&a[a.length-1]||a.pop();const i=n.replace(/^\//,"").split("/");for(let n=0;n<i.length;n++){const e=i[n];".."===e?a.pop():"."!==e&&a.push(e)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));const r=o(e);for(let e=0;e<n.length;e++)if(o(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:d(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function g(n,e,t,r){const{pages:a,themeConfig:i}=t,s=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||s.sidebar||i.sidebar))return h(n);const o=s.sidebar||i.sidebar;if(o){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,o);return"auto"===r?h(n):r?r.map(n=>function n(e,t,r,a=1){if("string"==typeof e)return u(t,e,r);if(Array.isArray(e))return Object.assign(u(t,e[0],r),{title:e[1]});{a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const i=e.children||[];return 0===i.length&&e.path?Object.assign(u(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map(e=>n(e,t,r,a+1)),collapsable:!1!==e.collapsable}}}(n,a,t)):[]}return[]}function h(n){const e=f(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function f(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function b(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function v(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function k(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function y(n,e){return k(e)-k(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(15),a=t(148),i=t(149),s=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":s&&s in Object(n)?a(n):i(n)}},function(n,e,t){var r=t(4),a=t(17),i=t(35);n.exports=r?function(n,e,t){return a.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(6).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(26),a=t(32),i=t(33),s=t(127),o=t(129);r({target:"Array",proto:!0,arity:1,forced:t(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=a(this),t=i(e),r=arguments.length;o(t+r);for(var l=0;l<r;l++)e[t]=arguments[l],t++;return s(e,t),t}})},function(n,e,t){var r=t(4),a=t(64),i=t(98),s=t(25),o=t(54),l=TypeError,c=Object.defineProperty,p=Object.getOwnPropertyDescriptor;e.f=r?i?function(n,e,t){if(s(n),e=o(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=p(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(s(n),e=o(e),s(t),a)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(1),a=r({}.toString),i=r("".slice);n.exports=function(n){return i(a(n),8,-1)}},function(n,e,t){var r=t(153),a=t(154),i=t(155),s=t(156),o=t(157);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=s,l.prototype.set=o,n.exports=l},function(n,e,t){var r=t(71);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(175);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(45);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),p=r.speed,d=r.easing;return l.offsetWidth,s((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),o(c,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,a}(n,p,d)),1===n?(o(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){o(l,{transition:"all "+p+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),p)}),p)):setTimeout(e,p)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,s=e.querySelector(r.barSelector),l=n?"-100":i(t.status||0),p=document.querySelector(r.parent);return o(s,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&m(a),p!=document.body&&c(p,"nprogress-custom-parent"),p.appendChild(e),e},t.remove=function(){p(document.documentElement,"nprogress-busy"),p(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&m(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var s=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),o=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,i=arguments;if(2==i.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,i[1],i[2])}}();function l(n,e){return("string"==typeof n?n:d(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=d(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function p(n,e){var t,r=d(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function d(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function m(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n,e,t){var r=t(9),a=String,i=TypeError;n.exports=function(n){if(r(n))return n;throw i(a(n)+" is not an object")}},function(n,e,t){var r=t(3),a=t(51).f,i=t(14),s=t(110),o=t(37),l=t(65),c=t(123);n.exports=function(n,e){var t,p,d,m,u,g=n.target,h=n.global,f=n.stat;if(t=h?r:f?r[g]||o(g,{}):(r[g]||{}).prototype)for(p in e){if(m=e[p],d=n.dontCallGetSet?(u=a(t,p))&&u.value:t[p],!c(h?p:g+(f?".":"#")+p,n.forced)&&void 0!==d){if(typeof m==typeof d)continue;l(m,d)}(n.sham||d&&d.sham)&&i(m,"sham",!0),s(t,p,m,n)}}},function(n,e,t){var r=t(2);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(47),a=t(52);n.exports=function(n){return r(a(n))}},function(n,e,t){var r=t(3),a=t(0),i=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(0),a=t(108),i=TypeError;n.exports=function(n){if(r(n))return n;throw i(a(n)+" is not a function")}},function(n,e,t){var r=t(3),a=t(61),i=t(8),s=t(63),o=t(59),l=t(58),c=r.Symbol,p=a("wks"),d=l?c.for||c:c&&c.withoutSetter||s;n.exports=function(n){return i(p,n)||(p[n]=o&&i(c,n)?c[n]:d("Symbol."+n)),p[n]}},function(n,e,t){var r=t(52),a=Object;n.exports=function(n){return a(r(n))}},function(n,e,t){var r=t(121);n.exports=function(n){return r(n.length)}},function(n,e,t){var r=t(27),a=Function.prototype.call;n.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(3),a=t(37),i=r["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(3),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(147),a=t(12),i=Object.prototype,s=i.hasOwnProperty,o=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return a(n)&&s.call(n,"callee")&&!o.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(10)(t(6),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(167),a=t(174),i=t(176),s=t(177),o=t(178);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=s,l.prototype.set=o,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(5),a=t(45),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,s=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(s.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(13),a=t(12);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var r=t(1),a=t(2),i=t(18),s=Object,o=r("".split);n.exports=a((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==i(n)?o(n,""):s(n)}:s},function(n,e){n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,s=parseInt,o="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=o||l||Function("return this")(),p=Object.prototype.toString,d=Math.max,m=Math.min,u=function(){return c.Date.now()};function g(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==p.call(n)}(n))return NaN;if(g(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=g(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var o=a.test(n);return o||i.test(n)?s(n.slice(2),o?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,i,s,o,l,c=0,p=!1,f=!1,b=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function v(e){var t=r,i=a;return r=a=void 0,c=e,s=n.apply(i,t)}function k(n){return c=n,o=setTimeout(x,e),p?v(n):s}function y(n){var t=n-l;return void 0===l||t>=e||t<0||f&&n-c>=i}function x(){var n=u();if(y(n))return _(n);o=setTimeout(x,function(n){var t=e-(n-l);return f?m(t,i-(n-c)):t}(n))}function _(n){return o=void 0,b&&r?v(n):(r=a=void 0,s)}function w(){var n=u(),t=y(n);if(r=arguments,a=this,l=n,t){if(void 0===o)return k(l);if(f)return o=setTimeout(x,e),v(l)}return void 0===o&&(o=setTimeout(x,e)),s}return e=h(e)||0,g(t)&&(p=!!t.leading,i=(f="maxWait"in t)?d(h(t.maxWait)||0,e):i,b="trailing"in t?!!t.trailing:b),w.cancel=function(){void 0!==o&&clearTimeout(o),c=0,r=l=a=o=void 0},w.flush=function(){return void 0===o?s:_(u())},w}},function(n,e,t){var r=t(4),a=t(34),i=t(104),s=t(35),o=t(28),l=t(54),c=t(8),p=t(64),d=Object.getOwnPropertyDescriptor;e.f=r?d:function(n,e){if(n=o(n),e=l(e),p)try{return d(n,e)}catch(n){}if(c(n,e))return s(!a(i.f,n,e),n[e])}},function(n,e,t){var r=t(53),a=TypeError;n.exports=function(n){if(r(n))throw a("Can't call method on "+n);return n}},function(n,e){n.exports=function(n){return null==n}},function(n,e,t){var r=t(105),a=t(56);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e){var t="object"==typeof document&&document.all,r=void 0===t&&void 0!==t;n.exports={all:t,IS_HTMLDDA:r}},function(n,e,t){var r=t(29),a=t(0),i=t(57),s=t(58),o=Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return a(e)&&i(e.prototype,o(n))}},function(n,e,t){var r=t(1);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(59);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(60),a=t(2);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r,a,i=t(3),s=t(106),o=i.process,l=i.Deno,c=o&&o.versions||l&&l.version,p=c&&c.v8;p&&(a=(r=p.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&s&&(!(r=s.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=s.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){var r=t(62),a=t(36);(n.exports=function(n,e){return a[n]||(a[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.29.0",mode:r?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.29.0/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e){n.exports=!1},function(n,e,t){var r=t(1),a=0,i=Math.random(),s=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+s(++a+i,36)}},function(n,e,t){var r=t(4),a=t(2),i=t(97);n.exports=!r&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(8),a=t(116),i=t(51),s=t(17);n.exports=function(n,e,t){for(var o=a(e),l=s.f,c=i.f,p=0;p<o.length;p++){var d=o[p];r(n,d)||t&&r(t,d)||l(n,d,c(e,d))}}},function(n,e,t){var r=t(120);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){var r=t(133),a=t(25),i=t(134);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(19),a=t(158),i=t(159),s=t(160),o=t(161),l=t(162);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=a,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=o,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(13),a=t(40);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(179),a=t(12);n.exports=function n(e,t,i,s,o){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,i,s,n,o))}},function(n,e,t){var r=t(76),a=t(182),i=t(77);n.exports=function(n,e,t,s,o,l){var c=1&t,p=n.length,d=e.length;if(p!=d&&!(c&&d>p))return!1;var m=l.get(n),u=l.get(e);if(m&&u)return m==e&&u==n;var g=-1,h=!0,f=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++g<p;){var b=n[g],v=e[g];if(s)var k=c?s(v,b,g,e,n,l):s(b,v,g,n,e,l);if(void 0!==k){if(k)continue;h=!1;break}if(f){if(!a(e,(function(n,e){if(!i(f,e)&&(b===n||o(b,n,t,s,l)))return f.push(e)}))){h=!1;break}}else if(b!==v&&!o(b,v,t,s,l)){h=!1;break}}return l.delete(n),l.delete(e),h}},function(n,e,t){var r=t(41),a=t(180),i=t(181);function s(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}s.prototype.add=s.prototype.push=a,s.prototype.has=i,n.exports=s},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(192),a=t(198),i=t(82);n.exports=function(n){return i(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(6),a=t(194),i=e&&!e.nodeType&&e,s=i&&"object"==typeof n&&n&&!n.nodeType&&n,o=s&&s.exports===i?r.Buffer:void 0,l=(o?o.isBuffer:void 0)||a;n.exports=l}).call(this,t(49)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(195),a=t(196),i=t(197),s=i&&i.isTypedArray,o=s?a(s):r;n.exports=o},function(n,e,t){var r=t(72),a=t(43);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(6),"Set");n.exports=r},function(n,e,t){var r=t(40);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(87),a=t(23);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[a(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(5),a=t(44),i=t(209),s=t(212);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:i(s(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(145),a=t(150),i=t(221),s=t(229),o=t(238),l=t(101),c=i((function(n){var e=l(n);return o(e)&&(e=void 0),s(r(n,1,o,!0),a(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var i="",s=0,o=0;for(s=a.index;s<t.length;s++){switch(t.charCodeAt(s)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}o!==s&&(i+=t.substring(o,s)),o=s+1,i+=e}return o!==s?i+t.substring(o,s):i}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(241),t(7)),i=Object(a.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"5a3e6e86",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},a=(t(242),t(7)),i=Object(a.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"392329f0",null);e.default=i.exports},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var r=t(3),a=t(9),i=r.document,s=a(i)&&a(i.createElement);n.exports=function(n){return s?i.createElement(n):{}}},function(n,e,t){var r=t(4),a=t(2);n.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(61),a=t(63),i=r("keys");n.exports=function(n){return i[n]||(i[n]=a(n))}},function(n,e,t){var r=t(1),a=t(8),i=t(28),s=t(118).indexOf,o=t(48),l=r([].push);n.exports=function(n,e){var t,r=i(n),c=0,p=[];for(t in r)!a(o,t)&&a(r,t)&&l(p,t);for(;e.length>c;)a(r,t=e[c++])&&(~s(p,t)||l(p,t));return p}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(247)},function(n,e,t){"use strict";var r=t(26),a=t(124).left,i=t(125),s=t(60);r({target:"Array",proto:!0,forced:!t(126)&&s>79&&s<83||!i("reduce")},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);e.f=i?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(34),a=t(9),i=t(56),s=t(107),o=t(109),l=t(31),c=TypeError,p=l("toPrimitive");n.exports=function(n,e){if(!a(n)||i(n))return n;var t,l=s(n,p);if(l){if(void 0===e&&(e="default"),t=r(l,n,e),!a(t)||i(t))return t;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),o(n,e)}},function(n,e){n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){var r=t(30),a=t(53);n.exports=function(n,e){var t=n[e];return a(t)?void 0:r(t)}},function(n,e){var t=String;n.exports=function(n){try{return t(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(34),a=t(0),i=t(9),s=TypeError;n.exports=function(n,e){var t,o;if("string"===e&&a(t=n.toString)&&!i(o=r(t,n)))return o;if(a(t=n.valueOf)&&!i(o=r(t,n)))return o;if("string"!==e&&a(t=n.toString)&&!i(o=r(t,n)))return o;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),a=t(17),i=t(111),s=t(37);n.exports=function(n,e,t,o){o||(o={});var l=o.enumerable,c=void 0!==o.name?o.name:e;if(r(t)&&i(t,c,o),o.global)l?n[e]=t:s(e,t);else{try{o.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:a.f(n,e,{value:t,enumerable:!1,configurable:!o.nonConfigurable,writable:!o.nonWritable})}return n}},function(n,e,t){var r=t(1),a=t(2),i=t(0),s=t(8),o=t(4),l=t(112).CONFIGURABLE,c=t(113),p=t(114),d=p.enforce,m=p.get,u=String,g=Object.defineProperty,h=r("".slice),f=r("".replace),b=r([].join),v=o&&!a((function(){return 8!==g((function(){}),"length",{value:8}).length})),k=String(String).split("String"),y=n.exports=function(n,e,t){"Symbol("===h(u(e),0,7)&&(e="["+f(u(e),/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!s(n,"name")||l&&n.name!==e)&&(o?g(n,"name",{value:e,configurable:!0}):n.name=e),v&&t&&s(t,"arity")&&n.length!==t.arity&&g(n,"length",{value:t.arity});try{t&&s(t,"constructor")&&t.constructor?o&&g(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=d(n);return s(r,"source")||(r.source=b(k,"string"==typeof e?e:"")),n};Function.prototype.toString=y((function(){return i(this)&&m(this).source||c(this)}),"toString")},function(n,e,t){var r=t(4),a=t(8),i=Function.prototype,s=r&&Object.getOwnPropertyDescriptor,o=a(i,"name"),l=o&&"something"===function(){}.name,c=o&&(!r||r&&s(i,"name").configurable);n.exports={EXISTS:o,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var r=t(1),a=t(0),i=t(36),s=r(Function.toString);a(i.inspectSource)||(i.inspectSource=function(n){return s(n)}),n.exports=i.inspectSource},function(n,e,t){var r,a,i,s=t(115),o=t(3),l=t(9),c=t(14),p=t(8),d=t(36),m=t(99),u=t(48),g=o.TypeError,h=o.WeakMap;if(s||d.state){var f=d.state||(d.state=new h);f.get=f.get,f.has=f.has,f.set=f.set,r=function(n,e){if(f.has(n))throw g("Object already initialized");return e.facade=n,f.set(n,e),e},a=function(n){return f.get(n)||{}},i=function(n){return f.has(n)}}else{var b=m("state");u[b]=!0,r=function(n,e){if(p(n,b))throw g("Object already initialized");return e.facade=n,c(n,b,e),e},a=function(n){return p(n,b)?n[b]:{}},i=function(n){return p(n,b)}}n.exports={set:r,get:a,has:i,enforce:function(n){return i(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=a(e)).type!==n)throw g("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r=t(3),a=t(0),i=r.WeakMap;n.exports=a(i)&&/native code/.test(String(i))},function(n,e,t){var r=t(29),a=t(1),i=t(117),s=t(122),o=t(25),l=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(o(n)),t=s.f;return t?l(e,t(n)):e}},function(n,e,t){var r=t(100),a=t(96).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e,t){var r=t(28),a=t(119),i=t(33),s=function(n){return function(e,t,s){var o,l=r(e),c=i(l),p=a(s,c);if(n&&t!=t){for(;c>p;)if((o=l[p++])!=o)return!0}else for(;c>p;p++)if((n||p in l)&&l[p]===t)return n||p||0;return!n&&-1}};n.exports={includes:s(!0),indexOf:s(!1)}},function(n,e,t){var r=t(66),a=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):i(t,e)}},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?r:t)(e)}},function(n,e,t){var r=t(66),a=Math.min;n.exports=function(n){return n>0?a(r(n),9007199254740991):0}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(2),a=t(0),i=/#|\.prototype\./,s=function(n,e){var t=l[o(n)];return t==p||t!=c&&(a(e)?r(e):!!e)},o=s.normalize=function(n){return String(n).replace(i,".").toLowerCase()},l=s.data={},c=s.NATIVE="N",p=s.POLYFILL="P";n.exports=s},function(n,e,t){var r=t(30),a=t(32),i=t(47),s=t(33),o=TypeError,l=function(n){return function(e,t,l,c){r(t);var p=a(e),d=i(p),m=s(p),u=n?m-1:0,g=n?-1:1;if(l<2)for(;;){if(u in d){c=d[u],u+=g;break}if(u+=g,n?u<0:m<=u)throw o("Reduce of empty array with no initial value")}for(;n?u>=0:m>u;u+=g)u in d&&(c=t(c,d[u],u,p));return c}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r=t(2);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(18);n.exports="undefined"!=typeof process&&"process"==r(process)},function(n,e,t){"use strict";var r=t(4),a=t(128),i=TypeError,s=Object.getOwnPropertyDescriptor,o=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=o?function(n,e){if(a(n)&&!s(n,"length").writable)throw i("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){var r=t(18);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e){var t=TypeError;n.exports=function(n){if(n>9007199254740991)throw t("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(26),a=t(3),i=t(131),s=t(132),o=a.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=s(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},p=function(n,e){if(o&&o[n]){var t={};t[n]=s("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return i(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),c("URIError",(function(n){return function(e){return i(n,this,arguments)}})),p("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),p("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),p("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var r=t(27),a=Function.prototype,i=a.apply,s=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?s.bind(i):function(){return s.apply(i,arguments)})},function(n,e,t){"use strict";var r=t(29),a=t(8),i=t(14),s=t(57),o=t(67),l=t(65),c=t(135),p=t(136),d=t(137),m=t(141),u=t(142),g=t(4),h=t(62);n.exports=function(n,e,t,f){var b=f?2:1,v=n.split("."),k=v[v.length-1],y=r.apply(null,v);if(y){var x=y.prototype;if(!h&&a(x,"cause")&&delete x.cause,!t)return y;var _=r("Error"),w=e((function(n,e){var t=d(f?e:n,void 0),r=f?new y(n):new y;return void 0!==t&&i(r,"message",t),u(r,w,r.stack,2),this&&s(x,this)&&p(r,this,w),arguments.length>b&&m(r,arguments[b]),r}));if(w.prototype=x,"Error"!==k?o?o(w,_):l(w,_,{name:!0}):g&&"stackTraceLimit"in y&&(c(w,y,"stackTraceLimit"),c(w,y,"prepareStackTrace")),l(w,y),!h)try{x.name!==k&&i(x,"name",k),x.constructor=w}catch(n){}return w}}},function(n,e,t){var r=t(1),a=t(30);n.exports=function(n,e,t){try{return r(a(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){var r=t(0),a=String,i=TypeError;n.exports=function(n){if("object"==typeof n||r(n))return n;throw i("Can't set "+a(n)+" as a prototype")}},function(n,e,t){var r=t(17).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var r=t(0),a=t(9),i=t(67);n.exports=function(n,e,t){var s,o;return i&&r(s=e.constructor)&&s!==t&&a(o=s.prototype)&&o!==t.prototype&&i(n,o),n}},function(n,e,t){var r=t(138);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){var r=t(139),a=String;n.exports=function(n){if("Symbol"===r(n))throw TypeError("Cannot convert a Symbol value to a string");return a(n)}},function(n,e,t){var r=t(140),a=t(0),i=t(18),s=t(31)("toStringTag"),o=Object,l="Arguments"==i(function(){return arguments}());n.exports=r?i:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=o(n),s))?t:l?i(e):"Object"==(r=i(e))&&a(e.callee)?"Arguments":r}},function(n,e,t){var r={};r[t(31)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(9),a=t(14);n.exports=function(n,e){r(e)&&"cause"in e&&a(n,"cause",e.cause)}},function(n,e,t){var r=t(14),a=t(143),i=t(144),s=Error.captureStackTrace;n.exports=function(n,e,t,o){i&&(s?s(n,e):r(n,"stack",a(t,o)))}},function(n,e,t){var r=t(1),a=Error,i=r("".replace),s=String(a("zxcasd").stack),o=/\n\s*at [^:]*:[^\n]*/,l=o.test(s);n.exports=function(n,e){if(l&&"string"==typeof n&&!a.prepareStackTrace)for(;e--;)n=i(n,o,"");return n}},function(n,e,t){var r=t(2),a=t(35);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,e,t){var r=t(68),a=t(146);n.exports=function n(e,t,i,s,o){var l=-1,c=e.length;for(i||(i=a),o||(o=[]);++l<c;){var p=e[l];t>0&&i(p)?t>1?n(p,t-1,i,s,o):r(o,p):s||(o[o.length]=p)}return o}},function(n,e,t){var r=t(15),a=t(38),i=t(5),s=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||a(n)||!!(s&&n&&n[s])}},function(n,e,t){var r=t(13),a=t(12);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(15),a=Object.prototype,i=a.hasOwnProperty,s=a.toString,o=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,o),t=n[o];try{n[o]=void 0;var r=!0}catch(n){}var a=s.call(n);return r&&(e?n[o]=t:delete n[o]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(151),a=t(207),i=t(46),s=t(5),o=t(218);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?s(n)?a(n[0],n[1]):r(n):o(n)}},function(n,e,t){var r=t(152),a=t(206),i=t(85);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(70),a=t(74);n.exports=function(n,e,t,i){var s=t.length,o=s,l=!i;if(null==n)return!o;for(n=Object(n);s--;){var c=t[s];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++s<o;){var p=(c=t[s])[0],d=n[p],m=c[1];if(l&&c[2]){if(void 0===d&&!(p in n))return!1}else{var u=new r;if(i)var g=i(d,m,p,n,e,u);if(!(void 0===g?a(m,d,3,i,u):g))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(20),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(20);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(20);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(20);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(19);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(19),a=t(39),i=t(41);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var s=t.__data__;if(!a||s.length<199)return s.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(s)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(72),a=t(164),i=t(40),s=t(73),o=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,p=l.toString,d=c.hasOwnProperty,m=RegExp("^"+p.call(d).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||a(n))&&(r(n)?m:o).test(s(n))}},function(n,e,t){var r,a=t(165),i=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(6)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(168),a=t(19),i=t(39);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||a),string:new r}}},function(n,e,t){var r=t(169),a=t(170),i=t(171),s=t(172),o=t(173);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=s,l.prototype.set=o,n.exports=l},function(n,e,t){var r=t(21);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(21),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(21),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(21);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(22);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(22);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(70),a=t(75),i=t(183),s=t(186),o=t(202),l=t(5),c=t(79),p=t(81),d="[object Object]",m=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,u,g,h){var f=l(n),b=l(e),v=f?"[object Array]":o(n),k=b?"[object Array]":o(e),y=(v="[object Arguments]"==v?d:v)==d,x=(k="[object Arguments]"==k?d:k)==d,_=v==k;if(_&&c(n)){if(!c(e))return!1;f=!0,y=!1}if(_&&!y)return h||(h=new r),f||p(n)?a(n,e,t,u,g,h):i(n,e,v,t,u,g,h);if(!(1&t)){var w=y&&m.call(n,"__wrapped__"),S=x&&m.call(e,"__wrapped__");if(w||S){var T=w?n.value():n,j=S?e.value():e;return h||(h=new r),g(T,j,t,u,h)}}return!!_&&(h||(h=new r),s(n,e,t,u,g,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(15),a=t(184),i=t(71),s=t(75),o=t(185),l=t(42),c=r?r.prototype:void 0,p=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,d,m){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!d(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var u=o;case"[object Set]":var g=1&r;if(u||(u=l),n.size!=e.size&&!g)return!1;var h=m.get(n);if(h)return h==e;r|=2,m.set(n,e);var f=s(u(n),u(e),r,c,d,m);return m.delete(n),f;case"[object Symbol]":if(p)return p.call(n)==p.call(e)}return!1}},function(n,e,t){var r=t(6).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(187),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,s,o){var l=1&t,c=r(n),p=c.length;if(p!=r(e).length&&!l)return!1;for(var d=p;d--;){var m=c[d];if(!(l?m in e:a.call(e,m)))return!1}var u=o.get(n),g=o.get(e);if(u&&g)return u==e&&g==n;var h=!0;o.set(n,e),o.set(e,n);for(var f=l;++d<p;){var b=n[m=c[d]],v=e[m];if(i)var k=l?i(v,b,m,e,n,o):i(b,v,m,n,e,o);if(!(void 0===k?b===v||s(b,v,t,i,o):k)){h=!1;break}f||(f="constructor"==m)}if(h&&!f){var y=n.constructor,x=e.constructor;y==x||!("constructor"in n)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof x&&x instanceof x||(h=!1)}return o.delete(n),o.delete(e),h}},function(n,e,t){var r=t(188),a=t(189),i=t(78);n.exports=function(n){return r(n,i,a)}},function(n,e,t){var r=t(68),a=t(5);n.exports=function(n,e,t){var i=e(n);return a(n)?i:r(i,t(n))}},function(n,e,t){var r=t(190),a=t(191),i=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,o=s?function(n){return null==n?[]:(n=Object(n),r(s(n),(function(e){return i.call(n,e)})))}:a;n.exports=o},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,i=[];++t<r;){var s=n[t];e(s,t,n)&&(i[a++]=s)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(193),a=t(38),i=t(5),s=t(79),o=t(80),l=t(81),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),p=!t&&a(n),d=!t&&!p&&s(n),m=!t&&!p&&!d&&l(n),u=t||p||d||m,g=u?r(n.length,String):[],h=g.length;for(var f in n)!e&&!c.call(n,f)||u&&("length"==f||d&&("offset"==f||"parent"==f)||m&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||o(f,h))||g.push(f);return g}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(13),a=t(43),i=t(12),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&a(n.length)&&!!s[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(69),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,s=i&&i.exports===a&&r.process,o=function(){try{var n=i&&i.require&&i.require("util").types;return n||s&&s.binding&&s.binding("util")}catch(n){}}();n.exports=o}).call(this,t(49)(n))},function(n,e,t){var r=t(199),a=t(200),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(201)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(203),a=t(39),i=t(204),s=t(83),o=t(205),l=t(13),c=t(73),p=c(r),d=c(a),m=c(i),u=c(s),g=c(o),h=l;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=h(new a)||i&&"[object Promise]"!=h(i.resolve())||s&&"[object Set]"!=h(new s)||o&&"[object WeakMap]"!=h(new o))&&(h=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case p:return"[object DataView]";case d:return"[object Map]";case m:return"[object Promise]";case u:return"[object Set]";case g:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var r=t(10)(t(6),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(6),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(6),"WeakMap");n.exports=r},function(n,e,t){var r=t(84),a=t(78);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var i=e[t],s=n[i];e[t]=[i,s,r(s)]}return e}},function(n,e,t){var r=t(74),a=t(208),i=t(215),s=t(44),o=t(84),l=t(85),c=t(23);n.exports=function(n,e){return s(n)&&o(e)?l(c(n),e):function(t){var s=a(t,n);return void 0===s&&s===e?i(t,n):r(e,s,3)}}},function(n,e,t){var r=t(86);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(210),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,s=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(i,"$1"):t||n)})),e}));n.exports=s},function(n,e,t){var r=t(211);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(41);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],i=t.cache;if(i.has(a))return i.get(a);var s=n.apply(this,r);return t.cache=i.set(a,s)||i,s};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(213);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(15),a=t(214),i=t(5),s=t(45),o=r?r.prototype:void 0,l=o?o.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return a(e,n)+"";if(s(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(216),a=t(217);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(87),a=t(38),i=t(5),s=t(80),o=t(43),l=t(23);n.exports=function(n,e,t){for(var c=-1,p=(e=r(e,n)).length,d=!1;++c<p;){var m=l(e[c]);if(!(d=null!=n&&t(n,m)))break;n=n[m]}return d||++c!=p?d:!!(p=null==n?0:n.length)&&o(p)&&s(m,p)&&(i(n)||a(n))}},function(n,e,t){var r=t(219),a=t(220),i=t(44),s=t(23);n.exports=function(n){return i(n)?r(s(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(86);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(46),a=t(222),i=t(224);n.exports=function(n,e){return i(a(n,e,r),n+"")}},function(n,e,t){var r=t(223),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var i=arguments,s=-1,o=a(i.length-e,0),l=Array(o);++s<o;)l[s]=i[e+s];s=-1;for(var c=Array(e+1);++s<e;)c[s]=i[s];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(225),a=t(228)(r);n.exports=a},function(n,e,t){var r=t(226),a=t(227),i=t(46),s=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=s},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),i=16-(a-r);if(r=a,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(76),a=t(230),i=t(235),s=t(77),o=t(236),l=t(42);n.exports=function(n,e,t){var c=-1,p=a,d=n.length,m=!0,u=[],g=u;if(t)m=!1,p=i;else if(d>=200){var h=e?null:o(n);if(h)return l(h);m=!1,p=s,g=new r}else g=e?[]:u;n:for(;++c<d;){var f=n[c],b=e?e(f):f;if(f=t||0!==f?f:0,m&&b==b){for(var v=g.length;v--;)if(g[v]===b)continue n;e&&g.push(b),u.push(f)}else p(g,b,t)||(g!==u&&g.push(b),u.push(f))}return u}},function(n,e,t){var r=t(231);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(232),a=t(233),i=t(234);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,i=t+(r?1:-1);r?i--:++i<a;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(83),a=t(237),i=t(42),s=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=s},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(82),a=t(12);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t(91)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),a=Array.isArray;function i(n){return null==n}function s(n){return null!=n}function o(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function p(n){return null!==n&&"object"==typeof n}var d=Object.prototype.toString;function m(n){return"[object Object]"===d.call(n)}function u(n){return"[object RegExp]"===d.call(n)}function g(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function h(n){return s(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function f(n){return null==n?"":Array.isArray(n)||m(n)&&n.toString===d?JSON.stringify(n,null,2):String(n)}function b(n){var e=parseFloat(n);return isNaN(e)?n:e}function v(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}v("slot,component",!0);var k=v("key,ref,slot,slot-scope,is");function y(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var x=Object.prototype.hasOwnProperty;function _(n,e){return x.call(n,e)}function w(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var S=/-(\w)/g,T=w((function(n){return n.replace(S,(function(n,e){return e?e.toUpperCase():""}))})),j=w((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),I=/\B([A-Z])/g,z=w((function(n){return n.replace(I,"-$1").toLowerCase()}));var E=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function C(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function D(n,e){for(var t in e)n[t]=e[t];return n}function A(n){for(var e={},t=0;t<n.length;t++)n[t]&&D(e,n[t]);return e}function O(n,e,t){}var P=function(n,e,t){return!1},L=function(n){return n};function M(n,e){if(n===e)return!0;var t=p(n),r=p(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),i=Array.isArray(e);if(a&&i)return n.length===e.length&&n.every((function(n,t){return M(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||i)return!1;var s=Object.keys(n),o=Object.keys(e);return s.length===o.length&&s.every((function(t){return M(n[t],e[t])}))}catch(n){return!1}}function R(n,e){for(var t=0;t<n.length;t++)if(M(n[t],e))return t;return-1}function q(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function N(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var B=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],F={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:P,isReservedAttr:P,isUnknownElement:P,getTagNamespace:O,parsePlatformTagName:L,mustUseProp:P,async:!0,_lifecycleHooks:U},$=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function G(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function V(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var H=new RegExp("[^".concat($.source,".$_\\d]"));var K="__proto__"in{},J="undefined"!=typeof window,W=J&&window.navigator.userAgent.toLowerCase(),Y=W&&/msie|trident/.test(W),Z=W&&W.indexOf("msie 9.0")>0,X=W&&W.indexOf("edge/")>0;W&&W.indexOf("android");var Q=W&&/iphone|ipad|ipod|ios/.test(W);W&&/chrome\/\d+/.test(W),W&&/phantomjs/.test(W);var nn,en=W&&W.match(/firefox\/(\d+)/),tn={}.watch,rn=!1;if(J)try{var an={};Object.defineProperty(an,"passive",{get:function(){rn=!0}}),window.addEventListener("test-passive",null,an)}catch(n){}var sn=function(){return void 0===nn&&(nn=!J&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},on=J&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,pn="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);cn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var dn=null;function mn(n){void 0===n&&(n=null),n||dn&&dn._scope.off(),dn=n,n&&n._scope.on()}var un=function(){function n(n,e,t,r,a,i,s,o){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=o,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),gn=function(n){void 0===n&&(n="");var e=new un;return e.text=n,e.isComment=!0,e};function hn(n){return new un(void 0,void 0,void 0,String(n))}function fn(n){var e=new un(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var bn=0,vn=[],kn=function(){function n(){this._pending=!1,this.id=bn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,vn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();kn.target=null;var yn=[];function xn(n){yn.push(n),kn.target=n}function _n(){yn.pop(),kn.target=yn[yn.length-1]}var wn=Array.prototype,Sn=Object.create(wn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=wn[n];V(Sn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var a,i=e.apply(this,t),s=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&s.observeArray(a),s.dep.notify(),i}))}));var Tn=Object.getOwnPropertyNames(Sn),jn={},In=!0;function zn(n){In=n}var En={notify:O,depend:O,addSub:O,removeSub:O},Cn=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?En:new kn,this.vmCount=0,V(n,"__ob__",this),a(n)){if(!t)if(K)n.__proto__=Sn;else for(var r=0,i=Tn.length;r<i;r++){V(n,o=Tn[r],Sn[o])}e||this.observeArray(n)}else{var s=Object.keys(n);for(r=0;r<s.length;r++){var o;An(n,o=s[r],jn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Dn(n[e],!1,this.mock)},n}();function Dn(n,e,t){return n&&_(n,"__ob__")&&n.__ob__ instanceof Cn?n.__ob__:!In||!t&&sn()||!a(n)&&!m(n)||!Object.isExtensible(n)||n.__v_skip||Nn(n)||n instanceof un?void 0:new Cn(n,e,t)}function An(n,e,t,r,i,s){var o=new kn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var c=l&&l.get,p=l&&l.set;c&&!p||t!==jn&&2!==arguments.length||(t=n[e]);var d=!i&&Dn(t,!1,s);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(n):t;return kn.target&&(o.depend(),d&&(d.dep.depend(),a(e)&&Ln(e))),Nn(e)&&!i?e.value:e},set:function(e){var r=c?c.call(n):t;if(N(r,e)){if(p)p.call(n,e);else{if(c)return;if(!i&&Nn(r)&&!Nn(e))return void(r.value=e);t=e}d=!i&&Dn(e,!1,s),o.notify()}}}),o}}function On(n,e,t){if(!qn(n)){var r=n.__ob__;return a(n)&&g(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&Dn(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(An(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Pn(n,e){if(a(n)&&g(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||qn(n)||_(n,e)&&(delete n[e],t&&t.dep.notify())}}function Ln(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),a(e)&&Ln(e)}function Mn(n){return Rn(n,!0),V(n,"__v_isShallow",!0),n}function Rn(n,e){if(!qn(n)){Dn(n,e,sn());0}}function qn(n){return!(!n||!n.__v_isReadonly)}function Nn(n){return!(!n||!0!==n.__v_isRef)}function Bn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Nn(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];Nn(r)&&!Nn(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var Un;var Fn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Un,!n&&Un&&(this.index=(Un.scopes||(Un.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=Un;try{return Un=this,n()}finally{Un=e}}else 0},n.prototype.on=function(){Un=this},n.prototype.off=function(){Un=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function $n(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Gn=w((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Vn(n,e){function t(){var n=t.fns;if(!a(n))return Ie(n,null,arguments,e,"v-on handler");for(var r=n.slice(),i=0;i<r.length;i++)Ie(r[i],null,arguments,e,"v-on handler")}return t.fns=n,t}function Hn(n,e,t,r,a,s){var l,c,p,d;for(l in n)c=n[l],p=e[l],d=Gn(l),i(c)||(i(p)?(i(c.fns)&&(c=n[l]=Vn(c,s)),o(d.once)&&(c=n[l]=a(d.name,c,d.capture)),t(d.name,c,d.capture,d.passive,d.params)):c!==p&&(p.fns=c,n[l]=p));for(l in e)i(n[l])&&r((d=Gn(l)).name,e[l],d.capture)}function Kn(n,e,t){var r;n instanceof un&&(n=n.data.hook||(n.data.hook={}));var a=n[e];function l(){t.apply(this,arguments),y(r.fns,l)}i(a)?r=Vn([l]):s(a.fns)&&o(a.merged)?(r=a).fns.push(l):r=Vn([a,l]),r.merged=!0,n[e]=r}function Jn(n,e,t,r,a){if(s(e)){if(_(e,t))return n[t]=e[t],a||delete e[t],!0;if(_(e,r))return n[t]=e[r],a||delete e[r],!0}return!1}function Wn(n){return l(n)?[hn(n)]:a(n)?function n(e,t){var r,c,p,d,m=[];for(r=0;r<e.length;r++)i(c=e[r])||"boolean"==typeof c||(p=m.length-1,d=m[p],a(c)?c.length>0&&(Yn((c=n(c,"".concat(t||"","_").concat(r)))[0])&&Yn(d)&&(m[p]=hn(d.text+c[0].text),c.shift()),m.push.apply(m,c)):l(c)?Yn(d)?m[p]=hn(d.text+c):""!==c&&m.push(hn(c)):Yn(c)&&Yn(d)?m[p]=hn(d.text+c.text):(o(e._isVList)&&s(c.tag)&&i(c.key)&&s(t)&&(c.key="__vlist".concat(t,"_").concat(r,"__")),m.push(c)));return m}(n):void 0}function Yn(n){return s(n)&&s(n.text)&&!1===n.isComment}function Zn(n,e){var t,r,i,o,l=null;if(a(n)||"string"==typeof n)for(l=new Array(n.length),t=0,r=n.length;t<r;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(p(n))if(pn&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),d=c.next();!d.done;)l.push(e(d.value,l.length)),d=c.next()}else for(i=Object.keys(n),l=new Array(i.length),t=0,r=i.length;t<r;t++)o=i[t],l[t]=e(n[o],o,t);return s(l)||(l=[]),l._isVList=!0,l}function Xn(n,e,t,r){var a,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=D(D({},r),t)),a=i(t)||(c(e)?e():e)):a=this.$slots[n]||(c(e)?e():e);var s=t&&t.slot;return s?this.$createElement("template",{slot:s},a):a}function Qn(n){return Ct(this.$options,"filters",n,!0)||L}function ne(n,e){return a(n)?-1===n.indexOf(e):n!==e}function ee(n,e,t,r,a){var i=F.keyCodes[e]||t;return a&&r&&!F.keyCodes[e]?ne(a,r):i?ne(i,n):r?z(r)!==e:void 0===n}function te(n,e,t,r,i){if(t)if(p(t)){a(t)&&(t=A(t));var s=void 0,o=function(a){if("class"===a||"style"===a||k(a))s=n;else{var o=n.attrs&&n.attrs.type;s=r||F.mustUseProp(e,o,a)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=T(a),c=z(a);l in s||c in s||(s[a]=t[a],i&&((n.on||(n.on={}))["update:".concat(a)]=function(n){t[a]=n}))};for(var l in t)o(l)}else;return n}function re(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ie(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function ae(n,e,t){return ie(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ie(n,e,t){if(a(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&se(n[r],"".concat(e,"_").concat(r),t);else se(n,e,t)}function se(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function oe(n,e){if(e)if(m(e)){var t=n.on=n.on?D({},n.on):{};for(var r in e){var a=t[r],i=e[r];t[r]=a?[].concat(a,i):i}}else;return n}function le(n,e,t,r){e=e||{$stable:!t};for(var i=0;i<n.length;i++){var s=n[i];a(s)?le(s,e,t):s&&(s.proxy&&(s.fn.proxy=!0),e[s.key]=s.fn)}return r&&(e.$key=r),e}function ce(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function pe(n,e){return"string"==typeof n?e+n:n}function de(n){n._o=ae,n._n=b,n._s=f,n._l=Zn,n._t=Xn,n._q=M,n._i=R,n._m=re,n._f=Qn,n._k=ee,n._b=te,n._v=hn,n._e=gn,n._u=le,n._g=oe,n._d=ce,n._p=pe}function me(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var i=n[r],s=i.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,i.context!==e&&i.fnContext!==e||!s||null==s.slot)(t.default||(t.default=[])).push(i);else{var o=s.slot,l=t[o]||(t[o]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in t)t[c].every(ue)&&delete t[c];return t}function ue(n){return n.isComment&&!n.asyncFactory||" "===n.text}function ge(n){return n.isComment&&n.asyncFactory}function he(n,e,t,a){var i,s=Object.keys(t).length>0,o=e?!!e.$stable:!s,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(o&&a&&a!==r&&l===a.$key&&!s&&!a.$hasNormal)return a;for(var c in i={},e)e[c]&&"$"!==c[0]&&(i[c]=fe(n,t,c,e[c]))}else i={};for(var p in t)p in i||(i[p]=be(t,p));return e&&Object.isExtensible(e)&&(e._normalized=i),V(i,"$stable",o),V(i,"$key",l),V(i,"$hasNormal",s),i}function fe(n,e,t,r){var i=function(){var e=dn;mn(n);var t=arguments.length?r.apply(null,arguments):r({}),i=(t=t&&"object"==typeof t&&!a(t)?[t]:Wn(t))&&t[0];return mn(e),t&&(!i||1===t.length&&i.isComment&&!ge(i))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:i,enumerable:!0,configurable:!0}),i}function be(n,e){return function(){return n[e]}}function ve(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};V(e,"_v_attr_proxy",!0),ke(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||ke(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||xe(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:E(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Bn(n,e,t)}))}}}function ke(n,e,t,r,a){var i=!1;for(var s in e)s in n?e[s]!==t[s]&&(i=!0):(i=!0,ye(n,s,r,a));for(var s in n)s in e||(i=!0,delete n[s]);return i}function ye(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function xe(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var _e=null;function we(n,e){return(n.__esModule||pn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),p(n)?e.extend(n):n}function Se(n){if(a(n))for(var e=0;e<n.length;e++){var t=n[e];if(s(t)&&(s(t.componentOptions)||ge(t)))return t}}function Te(n,e,t,r,d,m){return(a(t)||l(t))&&(d=r,r=t,t=void 0),o(m)&&(d=2),function(n,e,t,r,l){if(s(t)&&s(t.__ob__))return gn();s(t)&&s(t.is)&&(e=t.is);if(!e)return gn();0;a(r)&&c(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Wn(r):1===l&&(r=function(n){for(var e=0;e<n.length;e++)if(a(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var d,m;if("string"==typeof e){var u=void 0;m=n.$vnode&&n.$vnode.ns||F.getTagNamespace(e),d=F.isReservedTag(e)?new un(F.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!s(u=Ct(n.$options,"components",e))?new un(e,t,r,void 0,void 0,n):yt(u,t,n,r,e)}else d=yt(e,t,n,r);return a(d)?d:s(d)?(s(m)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(s(e.children))for(var a=0,l=e.children.length;a<l;a++){var c=e.children[a];s(c.tag)&&(i(c.ns)||o(r)&&"svg"!==c.tag)&&n(c,t,r)}}(d,m),s(t)&&function(n){p(n.style)&&Fe(n.style);p(n.class)&&Fe(n.class)}(t),d):gn()}(n,e,t,r,d)}function je(n,e,t){xn();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var i=0;i<a.length;i++)try{if(!1===a[i].call(r,n,e,t))return}catch(n){ze(n,r,"errorCaptured hook")}}ze(n,e,t)}finally{_n()}}function Ie(n,e,t,r,a){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&h(i)&&!i._handled&&(i.catch((function(n){return je(n,r,a+" (Promise/async)")})),i._handled=!0)}catch(n){je(n,r,a)}return i}function ze(n,e,t){if(F.errorHandler)try{return F.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Ee(e,null,"config.errorHandler")}Ee(n,e,t)}function Ee(n,e,t){if(!J||"undefined"==typeof console)throw n;console.error(n)}var Ce,De=!1,Ae=[],Oe=!1;function Pe(){Oe=!1;var n=Ae.slice(0);Ae.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var Le=Promise.resolve();Ce=function(){Le.then(Pe),Q&&setTimeout(O)},De=!0}else if(Y||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ce="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(Pe)}:function(){setTimeout(Pe,0)};else{var Me=1,Re=new MutationObserver(Pe),qe=document.createTextNode(String(Me));Re.observe(qe,{characterData:!0}),Ce=function(){Me=(Me+1)%2,qe.data=String(Me)},De=!0}function Ne(n,e){var t;if(Ae.push((function(){if(n)try{n.call(e)}catch(n){je(n,e,"nextTick")}else t&&t(e)})),Oe||(Oe=!0,Ce()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function Be(n){return function(e,t){if(void 0===t&&(t=dn),t)return function(n,e,t){var r=n.$options;r[e]=jt(r[e],t)}(t,n,e)}}Be("beforeMount"),Be("mounted"),Be("beforeUpdate"),Be("updated"),Be("beforeDestroy"),Be("destroyed"),Be("activated"),Be("deactivated"),Be("serverPrefetch"),Be("renderTracked"),Be("renderTriggered"),Be("errorCaptured");var Ue=new cn;function Fe(n){return function n(e,t){var r,i,s=a(e);if(!s&&!p(e)||e.__v_skip||Object.isFrozen(e)||e instanceof un)return;if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(s)for(r=e.length;r--;)n(e[r],t);else if(Nn(e))n(e.value,t);else for(i=Object.keys(e),r=i.length;r--;)n(e[i[r]],t)}(n,Ue),Ue.clear(),n}var $e,Ge=0,Ve=function(){function n(n,e,t,r,a){var i,s;i=this,void 0===(s=Un&&!Un._vm?Un:n?n._scope:void 0)&&(s=Un),s&&s.active&&s.effects.push(i),(this.vm=n)&&a&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++Ge,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!H.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=O)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;xn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;je(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Fe(n),_n(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():mt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||p(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Ie(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&y(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function He(n,e){$e.$on(n,e)}function Ke(n,e){$e.$off(n,e)}function Je(n,e){var t=$e;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function We(n,e,t){$e=n,Hn(e,t||{},He,Ke,Je,n),$e=void 0}var Ye=null;function Ze(n){var e=Ye;return Ye=n,function(){Ye=e}}function Xe(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Qe(n,e){if(e){if(n._directInactive=!1,Xe(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Qe(n.$children[t]);nt(n,"activated")}}function nt(n,e,t,r){void 0===r&&(r=!0),xn();var a=dn;r&&mn(n);var i=n.$options[e],s="".concat(e," hook");if(i)for(var o=0,l=i.length;o<l;o++)Ie(i[o],n,t||null,n,s);n._hasHookEvent&&n.$emit("hook:"+e),r&&mn(a),_n()}var et=[],tt=[],rt={},at=!1,it=!1,st=0;var ot=0,lt=Date.now;if(J&&!Y){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var pt=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function dt(){var n,e;for(ot=lt(),it=!0,et.sort(pt),st=0;st<et.length;st++)(n=et[st]).before&&n.before(),e=n.id,rt[e]=null,n.run();var t=tt.slice(),r=et.slice();st=et.length=tt.length=0,rt={},at=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Qe(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&nt(r,"updated")}}(r),function(){for(var n=0;n<vn.length;n++){var e=vn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}vn.length=0}(),on&&F.devtools&&on.emit("flush")}function mt(n){var e=n.id;if(null==rt[e]&&(n!==kn.target||!n.noRecurse)){if(rt[e]=!0,it){for(var t=et.length-1;t>st&&et[t].id>n.id;)t--;et.splice(t+1,0,n)}else et.push(n);at||(at=!0,Ne(dt))}}function ut(n,e){if(n){for(var t=Object.create(null),r=pn?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var i=r[a];if("__ob__"!==i){var s=n[i].from;if(s in e._provided)t[i]=e._provided[s];else if("default"in n[i]){var o=n[i].default;t[i]=c(o)?o.call(e):o}else 0}}return t}}function gt(n,e,t,i,s){var l,c=this,p=s.options;_(i,"_uid")?(l=Object.create(i))._original=i:(l=i,i=i._original);var d=o(p._compiled),m=!d;this.data=n,this.props=e,this.children=t,this.parent=i,this.listeners=n.on||r,this.injections=ut(p.inject,i),this.slots=function(){return c.$slots||he(i,n.scopedSlots,c.$slots=me(t,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return he(i,n.scopedSlots,this.slots())}}),d&&(this.$options=p,this.$slots=this.slots(),this.$scopedSlots=he(i,n.scopedSlots,this.$slots)),p._scopeId?this._c=function(n,e,t,r){var s=Te(l,n,e,t,r,m);return s&&!a(s)&&(s.fnScopeId=p._scopeId,s.fnContext=i),s}:this._c=function(n,e,t,r){return Te(l,n,e,t,r,m)}}function ht(n,e,t,r,a){var i=fn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function ft(n,e){for(var t in e)n[T(t)]=e[t]}function bt(n){return n.name||n.__name||n._componentTag}de(gt.prototype);var vt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;vt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;s(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ye)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,a,i){var s=a.data.scopedSlots,o=n.$scopedSlots,l=!!(s&&!s.$stable||o!==r&&!o.$stable||s&&n.$scopedSlots.$key!==s.$key||!s&&n.$scopedSlots.$key),c=!!(i||n.$options._renderChildren||l),p=n.$vnode;n.$options._parentVnode=a,n.$vnode=a,n._vnode&&(n._vnode.parent=a),n.$options._renderChildren=i;var d=a.data.attrs||r;n._attrsProxy&&ke(n._attrsProxy,d,p.data&&p.data.attrs||r,n,"$attrs")&&(c=!0),n.$attrs=d,t=t||r;var m=n.$options._parentListeners;if(n._listenersProxy&&ke(n._listenersProxy,t,m||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,We(n,t,m),e&&n.$options.props){zn(!1);for(var u=n._props,g=n.$options._propKeys||[],h=0;h<g.length;h++){var f=g[h],b=n.$options.props;u[f]=Dt(f,b,e,n)}zn(!0),n.$options.propsData=e}c&&(n.$slots=me(i,a.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,nt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,tt.push(e)):Qe(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Xe(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);nt(e,"deactivated")}}(e,!0):e.$destroy())}},kt=Object.keys(vt);function yt(n,e,t,l,c){if(!i(n)){var d=t.$options._base;if(p(n)&&(n=d.extend(n)),"function"==typeof n){var m;if(i(n.cid)&&void 0===(n=function(n,e){if(o(n.error)&&s(n.errorComp))return n.errorComp;if(s(n.resolved))return n.resolved;var t=_e;if(t&&s(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),o(n.loading)&&s(n.loadingComp))return n.loadingComp;if(t&&!s(n.owners)){var r=n.owners=[t],a=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return y(r,t)}));var d=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},m=q((function(t){n.resolved=we(t,e),a?r.length=0:d(!0)})),u=q((function(e){s(n.errorComp)&&(n.error=!0,d(!0))})),g=n(m,u);return p(g)&&(h(g)?i(n.resolved)&&g.then(m,u):h(g.component)&&(g.component.then(m,u),s(g.error)&&(n.errorComp=we(g.error,e)),s(g.loading)&&(n.loadingComp=we(g.loading,e),0===g.delay?n.loading=!0:l=setTimeout((function(){l=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,d(!1))}),g.delay||200)),s(g.timeout)&&(c=setTimeout((function(){c=null,i(n.resolved)&&u(null)}),g.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(m=n,d)))return function(n,e,t,r,a){var i=gn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:a},i}(m,e,t,l,c);e=e||{},Vt(n),s(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var i=e.on||(e.on={}),o=i[r],l=e.model.callback;s(o)?(a(o)?-1===o.indexOf(l):o!==l)&&(i[r]=[l].concat(o)):i[r]=l}(n.options,e);var u=function(n,e,t){var r=e.options.props;if(!i(r)){var a={},o=n.attrs,l=n.props;if(s(o)||s(l))for(var c in r){var p=z(c);Jn(a,l,c,p,!0)||Jn(a,o,c,p,!1)}return a}}(e,n);if(o(n.options.functional))return function(n,e,t,i,o){var l=n.options,c={},p=l.props;if(s(p))for(var d in p)c[d]=Dt(d,p,e||r);else s(t.attrs)&&ft(c,t.attrs),s(t.props)&&ft(c,t.props);var m=new gt(t,c,o,i,n),u=l.render.call(null,m._c,m);if(u instanceof un)return ht(u,t,m.parent,l,m);if(a(u)){for(var g=Wn(u)||[],h=new Array(g.length),f=0;f<g.length;f++)h[f]=ht(g[f],t,m.parent,l,m);return h}}(n,u,e,t,l);var g=e.on;if(e.on=e.nativeOn,o(n.options.abstract)){var f=e.slot;e={},f&&(e.slot=f)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<kt.length;t++){var r=kt[t],a=e[r],i=vt[r];a===i||a&&a._merged||(e[r]=a?xt(i,a):i)}}(e);var b=bt(n.options)||c;return new un("vue-component-".concat(n.cid).concat(b?"-".concat(b):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:u,listeners:g,tag:c,children:l},m)}}}function xt(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var _t=O,wt=F.optionMergeStrategies;function St(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,a,i,s=pn?Reflect.ownKeys(e):Object.keys(e),o=0;o<s.length;o++)"__ob__"!==(r=s[o])&&(a=n[r],i=e[r],t&&_(n,r)?a!==i&&m(a)&&m(i)&&St(a,i):On(n,r,i));return n}function Tt(n,e,t){return t?function(){var r=c(e)?e.call(t,t):e,a=c(n)?n.call(t,t):n;return r?St(r,a):a}:e?n?function(){return St(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function jt(n,e){var t=e?n?n.concat(e):a(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function It(n,e,t,r){var a=Object.create(n||null);return e?D(a,e):a}wt.data=function(n,e,t){return t?Tt(n,e,t):e&&"function"!=typeof e?n:Tt(n,e)},U.forEach((function(n){wt[n]=jt})),B.forEach((function(n){wt[n+"s"]=It})),wt.watch=function(n,e,t,r){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var i={};for(var s in D(i,n),e){var o=i[s],l=e[s];o&&!a(o)&&(o=[o]),i[s]=o?o.concat(l):a(l)?l:[l]}return i},wt.props=wt.methods=wt.inject=wt.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return D(a,n),e&&D(a,e),a},wt.provide=function(n,e){return n?function(){var t=Object.create(null);return St(t,c(n)?n.call(this):n),e&&St(t,c(e)?e.call(this):e,!1),t}:e};var zt=function(n,e){return void 0===e?n:e};function Et(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,i,s={};if(a(t))for(r=t.length;r--;)"string"==typeof(i=t[r])&&(s[T(i)]={type:null});else if(m(t))for(var o in t)i=t[o],s[T(o)]=m(i)?i:{type:i};else 0;n.props=s}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(a(t))for(var i=0;i<t.length;i++)r[t[i]]={from:t[i]};else if(m(t))for(var s in t){var o=t[s];r[s]=m(o)?D({from:s},o):{from:o}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];c(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=Et(n,e.extends,t)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)n=Et(n,e.mixins[r],t);var s,o={};for(s in n)l(s);for(s in e)_(n,s)||l(s);function l(r){var a=wt[r]||zt;o[r]=a(n[r],e[r],t,r)}return o}function Ct(n,e,t,r){if("string"==typeof t){var a=n[e];if(_(a,t))return a[t];var i=T(t);if(_(a,i))return a[i];var s=j(i);return _(a,s)?a[s]:a[t]||a[i]||a[s]}}function Dt(n,e,t,r){var a=e[n],i=!_(t,n),s=t[n],o=Lt(Boolean,a.type);if(o>-1)if(i&&!_(a,"default"))s=!1;else if(""===s||s===z(n)){var l=Lt(String,a.type);(l<0||o<l)&&(s=!0)}if(void 0===s){s=function(n,e,t){if(!_(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(r)&&"Function"!==Ot(e.type)?r.call(n):r}(r,a,n);var p=In;zn(!0),Dn(s),zn(p)}return s}var At=/^\s*function (\w+)/;function Ot(n){var e=n&&n.toString().match(At);return e?e[1]:""}function Pt(n,e){return Ot(n)===Ot(e)}function Lt(n,e){if(!a(e))return Pt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Pt(e[t],n))return t;return-1}var Mt={enumerable:!0,configurable:!0,get:O,set:O};function Rt(n,e,t){Mt.get=function(){return this[e][t]},Mt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Mt)}function qt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Mn({}),a=n.$options._propKeys=[];n.$parent&&zn(!1);var i=function(i){a.push(i);var s=Dt(i,e,t,n);An(r,i,s),i in n||Rt(n,"_props",i)};for(var s in e)i(s);zn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=ve(n);mn(n),xn();var a=Ie(t,null,[n._props||Mn({}),r],n,"setup");if(_n(),mn(),c(a))e.render=a;else if(p(a))if(n._setupState=a,a.__sfc){var i=n._setupProxy={};for(var s in a)"__sfc"!==s&&Bn(i,a,s)}else for(var s in a)G(s)||Bn(n,a,s);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?O:E(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;m(e=n._data=c(e)?function(n,e){xn();try{return n.call(e,e)}catch(n){return je(n,e,"data()"),{}}finally{_n()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var i=t[a];0,r&&_(r,i)||G(i)||Rt(n,"_data",i)}var s=Dn(e);s&&s.vmCount++}(n);else{var t=Dn(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=sn();for(var a in e){var i=e[a],s=c(i)?i:i.get;0,r||(t[a]=new Ve(n,s||O,O,Nt)),a in n||Bt(n,a,i)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var r=e[t];if(a(r))for(var i=0;i<r.length;i++)$t(n,t,r[i]);else $t(n,t,r)}}(n,e.watch)}var Nt={lazy:!0};function Bt(n,e,t){var r=!sn();c(t)?(Mt.get=r?Ut(e):Ft(t),Mt.set=O):(Mt.get=t.get?r&&!1!==t.cache?Ut(e):Ft(t.get):O,Mt.set=t.set||O),Object.defineProperty(n,e,Mt)}function Ut(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),kn.target&&e.depend(),e.value}}function Ft(n){return function(){return n.call(this,this)}}function $t(n,e,t,r){return m(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Gt=0;function Vt(n){var e=n.options;if(n.super){var t=Vt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&D(n.extendOptions,r),(e=n.options=Et(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Ht(n){this._init(n)}function Kt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var i=bt(n)||bt(t.options);var s=function(n){this._init(n)};return(s.prototype=Object.create(t.prototype)).constructor=s,s.cid=e++,s.options=Et(t.options,n),s.super=t,s.options.props&&function(n){var e=n.options.props;for(var t in e)Rt(n.prototype,"_props",t)}(s),s.options.computed&&function(n){var e=n.options.computed;for(var t in e)Bt(n.prototype,t,e[t])}(s),s.extend=t.extend,s.mixin=t.mixin,s.use=t.use,B.forEach((function(n){s[n]=t[n]})),i&&(s.options.components[i]=s),s.superOptions=t.options,s.extendOptions=n,s.sealedOptions=D({},s.options),a[r]=s,s}}function Jt(n){return n&&(bt(n.Ctor.options)||n.tag)}function Wt(n,e){return a(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!u(n)&&n.test(e)}function Yt(n,e){var t=n.cache,r=n.keys,a=n._vnode;for(var i in t){var s=t[i];if(s){var o=s.name;o&&!e(o)&&Zt(t,i,r,a)}}}function Zt(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,y(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Gt++,e._isVue=!0,e.__v_skip=!0,e._scope=new Fn(!0),e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=Et(Vt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&We(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,a=t&&t.context;n.$slots=me(e._renderChildren,a),n.$scopedSlots=t?he(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,a){return Te(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return Te(n,e,t,r,a,!0)};var i=t&&t.data;An(n,"$attrs",i&&i.attrs||r,null,!0),An(n,"$listeners",e._parentListeners||r,null,!0)}(e),nt(e,"beforeCreate",void 0,!1),function(n){var e=ut(n.$options.inject,n);e&&(zn(!1),Object.keys(e).forEach((function(t){An(n,t,e[t])})),zn(!0))}(e),qt(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!p(t))return;for(var r=$n(n),a=pn?Reflect.ownKeys(t):Object.keys(t),i=0;i<a.length;i++){var s=a[i];Object.defineProperty(r,s,Object.getOwnPropertyDescriptor(t,s))}}}(e),nt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Ht),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=On,n.prototype.$delete=Pn,n.prototype.$watch=function(n,e,t){if(m(e))return $t(this,n,e,t);(t=t||{}).user=!0;var r=new Ve(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'.concat(r.expression,'"');xn(),Ie(e,this,[r.value],this,a),_n()}return function(){r.teardown()}}}(Ht),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(a(n))for(var i=0,s=n.length;i<s;i++)r.$on(n[i],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(a(n)){for(var r=0,i=n.length;r<i;r++)t.$off(n[r],e);return t}var s,o=t._events[n];if(!o)return t;if(!e)return t._events[n]=null,t;for(var l=o.length;l--;)if((s=o[l])===e||s.fn===e){o.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?C(t):t;for(var r=C(arguments,1),a='event handler for "'.concat(n,'"'),i=0,s=t.length;i<s;i++)Ie(t[i],e,r,e,a)}return e}}(Ht),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,i=Ze(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var s=t;s&&s.$vnode&&s.$parent&&s.$vnode===s.$parent._vnode;)s.$parent.$el=s.$el,s=s.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){nt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||y(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),nt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Ht),function(n){de(n.prototype),n.prototype.$nextTick=function(n){return Ne(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,i=t._parentVnode;i&&e._isMounted&&(e.$scopedSlots=he(e.$parent,i.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&xe(e._slotsProxy,e.$scopedSlots)),e.$vnode=i;try{mn(e),_e=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){je(t,e,"render"),n=e._vnode}finally{_e=null,mn()}return a(n)&&1===n.length&&(n=n[0]),n instanceof un||(n=gn()),n.parent=i,n}}(Ht);var Xt=[String,RegExp,Array],Qt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Xt,exclude:Xt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,i=t.componentInstance,s=t.componentOptions;n[r]={name:Jt(s),tag:a,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&Zt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Zt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Yt(n,(function(n){return Wt(e,n)}))})),this.$watch("exclude",(function(e){Yt(n,(function(n){return!Wt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Se(n),t=e&&e.componentOptions;if(t){var r=Jt(t),a=this.include,i=this.exclude;if(a&&(!r||!Wt(a,r))||i&&r&&Wt(i,r))return e;var s=this.cache,o=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;s[l]?(e.componentInstance=s[l].componentInstance,y(o,l),o.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return F}};Object.defineProperty(n,"config",e),n.util={warn:_t,extend:D,mergeOptions:Et,defineReactive:An},n.set=On,n.delete=Pn,n.nextTick=Ne,n.observable=function(n){return Dn(n),n},n.options=Object.create(null),B.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,D(n.options.components,Qt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=C(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=Et(this.options,n),this}}(n),Kt(n),function(n){B.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&m(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Ht),Object.defineProperty(Ht.prototype,"$isServer",{get:sn}),Object.defineProperty(Ht.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Ht,"FunctionalRenderContext",{value:gt}),Ht.version="2.7.14";var nr=v("style,class"),er=v("input,textarea,option,select,progress"),tr=v("contenteditable,draggable,spellcheck"),rr=v("events,caret,typing,plaintext-only"),ar=v("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ir="http://www.w3.org/1999/xlink",sr=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},or=function(n){return sr(n)?n.slice(6,n.length):""},lr=function(n){return null==n||!1===n};function cr(n){for(var e=n.data,t=n,r=n;s(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=pr(r.data,e));for(;s(t=t.parent);)t&&t.data&&(e=pr(e,t.data));return function(n,e){if(s(n)||s(e))return dr(n,mr(e));return""}(e.staticClass,e.class)}function pr(n,e){return{staticClass:dr(n.staticClass,e.staticClass),class:s(n.class)?[n.class,e.class]:e.class}}function dr(n,e){return n?e?n+" "+e:n:e||""}function mr(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,a=n.length;r<a;r++)s(e=mr(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):p(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var ur={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},gr=v("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),hr=v("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),fr=function(n){return gr(n)||hr(n)};var br=Object.create(null);var vr=v("text,number,password,search,email,tel,url");var kr=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(ur[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),yr={create:function(n,e){xr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(xr(n,!0),xr(e))},destroy:function(n){xr(n,!0)}};function xr(n,e){var t=n.data.ref;if(s(t)){var r=n.context,i=n.componentInstance||n.elm,o=e?null:i,l=e?void 0:i;if(c(t))Ie(t,r,[o],r,"template ref function");else{var p=n.data.refInFor,d="string"==typeof t||"number"==typeof t,m=Nn(t),u=r.$refs;if(d||m)if(p){var g=d?u[t]:t.value;e?a(g)&&y(g,i):a(g)?g.includes(i)||g.push(i):d?(u[t]=[i],_r(r,t,u[t])):t.value=[i]}else if(d){if(e&&u[t]!==i)return;u[t]=l,_r(r,t,o)}else if(m){if(e&&t.value!==i)return;t.value=o}else 0}}}function _r(n,e,t){var r=n._setupState;r&&_(r,e)&&(Nn(r[e])?r[e].value=t:r[e]=t)}var wr=new un("",{},[]),Sr=["create","activate","update","remove","destroy"];function Tr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&s(n.data)===s(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=s(t=n.data)&&s(t=t.attrs)&&t.type,a=s(t=e.data)&&s(t=t.attrs)&&t.type;return r===a||vr(r)&&vr(a)}(n,e)||o(n.isAsyncPlaceholder)&&i(e.asyncFactory.error))}function jr(n,e,t){var r,a,i={};for(r=e;r<=t;++r)s(a=n[r].key)&&(i[a]=r);return i}var Ir={create:zr,update:zr,destroy:function(n){zr(n,wr)}};function zr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,i=n===wr,s=e===wr,o=Cr(n.data.directives,n.context),l=Cr(e.data.directives,e.context),c=[],p=[];for(t in l)r=o[t],a=l[t],r?(a.oldValue=r.value,a.oldArg=r.arg,Ar(a,"update",e,n),a.def&&a.def.componentUpdated&&p.push(a)):(Ar(a,"bind",e,n),a.def&&a.def.inserted&&c.push(a));if(c.length){var d=function(){for(var t=0;t<c.length;t++)Ar(c[t],"inserted",e,n)};i?Kn(e,"insert",d):d()}p.length&&Kn(e,"postpatch",(function(){for(var t=0;t<p.length;t++)Ar(p[t],"componentUpdated",e,n)}));if(!i)for(t in o)l[t]||Ar(o[t],"unbind",n,n,s)}(n,e)}var Er=Object.create(null);function Cr(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Er),a[Dr(r)]=r,e._setupState&&e._setupState.__sfc){var i=r.def||Ct(e,"_setupState","v-"+r.name);r.def="function"==typeof i?{bind:i,update:i}:i}r.def=r.def||Ct(e.$options,"directives",r.name)}return a}function Dr(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function Ar(n,e,t,r,a){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,a)}catch(r){je(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Or=[yr,Ir];function Pr(n,e){var t=e.componentOptions;if(!(s(t)&&!1===t.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(e.data.attrs))){var r,a,l=e.elm,c=n.data.attrs||{},p=e.data.attrs||{};for(r in(s(p.__ob__)||o(p._v_attr_proxy))&&(p=e.data.attrs=D({},p)),p)a=p[r],c[r]!==a&&Lr(l,r,a,e.data.pre);for(r in(Y||X)&&p.value!==c.value&&Lr(l,"value",p.value),c)i(p[r])&&(sr(r)?l.removeAttributeNS(ir,or(r)):tr(r)||l.removeAttribute(r))}}function Lr(n,e,t,r){r||n.tagName.indexOf("-")>-1?Mr(n,e,t):ar(e)?lr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):tr(e)?n.setAttribute(e,function(n,e){return lr(e)||"false"===e?"false":"contenteditable"===n&&rr(e)?e:"true"}(e,t)):sr(e)?lr(t)?n.removeAttributeNS(ir,or(e)):n.setAttributeNS(ir,e,t):Mr(n,e,t)}function Mr(n,e,t){if(lr(t))n.removeAttribute(e);else{if(Y&&!Z&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Rr={create:Pr,update:Pr};function qr(n,e){var t=e.elm,r=e.data,a=n.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var o=cr(e),l=t._transitionClasses;s(l)&&(o=dr(o,mr(l))),o!==t._prevClass&&(t.setAttribute("class",o),t._prevClass=o)}}var Nr,Br={create:qr,update:qr};function Ur(n,e,t){var r=Nr;return function a(){var i=e.apply(null,arguments);null!==i&&Gr(n,a,t,r)}}var Fr=De&&!(en&&Number(en[1])<=53);function $r(n,e,t,r){if(Fr){var a=ot,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}Nr.addEventListener(n,e,rn?{capture:t,passive:r}:t)}function Gr(n,e,t,r){(r||Nr).removeEventListener(n,e._wrapper||e,t)}function Vr(n,e){if(!i(n.data.on)||!i(e.data.on)){var t=e.data.on||{},r=n.data.on||{};Nr=e.elm||n.elm,function(n){if(s(n.__r)){var e=Y?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}s(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Hn(t,r,$r,Gr,Ur,e.context),Nr=void 0}}var Hr,Kr={create:Vr,update:Vr,destroy:function(n){return Vr(n,wr)}};function Jr(n,e){if(!i(n.data.domProps)||!i(e.data.domProps)){var t,r,a=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(s(c.__ob__)||o(c._v_attr_proxy))&&(c=e.data.domProps=D({},c)),l)t in c||(a[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===t&&"PROGRESS"!==a.tagName){a._value=r;var p=i(r)?"":String(r);Wr(a,p)&&(a.value=p)}else if("innerHTML"===t&&hr(a.tagName)&&i(a.innerHTML)){(Hr=Hr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var d=Hr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;d.firstChild;)a.appendChild(d.firstChild)}else if(r!==l[t])try{a[t]=r}catch(n){}}}}function Wr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(s(r)){if(r.number)return b(t)!==b(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Yr={create:Jr,update:Jr},Zr=w((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Xr(n){var e=Qr(n.style);return n.staticStyle?D(n.staticStyle,e):e}function Qr(n){return Array.isArray(n)?A(n):"string"==typeof n?Zr(n):n}var na,ea=/^--/,ta=/\s*!important$/,ra=function(n,e,t){if(ea.test(e))n.style.setProperty(e,t);else if(ta.test(t))n.style.setProperty(z(e),t.replace(ta,""),"important");else{var r=ia(e);if(Array.isArray(t))for(var a=0,i=t.length;a<i;a++)n.style[r]=t[a];else n.style[r]=t}},aa=["Webkit","Moz","ms"],ia=w((function(n){if(na=na||document.createElement("div").style,"filter"!==(n=T(n))&&n in na)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<aa.length;t++){var r=aa[t]+e;if(r in na)return r}}));function sa(n,e){var t=e.data,r=n.data;if(!(i(t.staticStyle)&&i(t.style)&&i(r.staticStyle)&&i(r.style))){var a,o,l=e.elm,c=r.staticStyle,p=r.normalizedStyle||r.style||{},d=c||p,m=Qr(e.data.style)||{};e.data.normalizedStyle=s(m.__ob__)?D({},m):m;var u=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Xr(a.data))&&D(r,t);(t=Xr(n.data))&&D(r,t);for(var i=n;i=i.parent;)i.data&&(t=Xr(i.data))&&D(r,t);return r}(e,!0);for(o in d)i(u[o])&&ra(l,o,"");for(o in u)(a=u[o])!==d[o]&&ra(l,o,null==a?"":a)}}var oa={create:sa,update:sa},la=/\s+/;function ca(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(la).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function pa(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(la).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function da(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&D(e,ma(n.name||"v")),D(e,n),e}return"string"==typeof n?ma(n):void 0}}var ma=w((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),ua=J&&!Z,ga="transition",ha="transitionend",fa="animation",ba="animationend";ua&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ga="WebkitTransition",ha="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(fa="WebkitAnimation",ba="webkitAnimationEnd"));var va=J?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function ka(n){va((function(){va(n)}))}function ya(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),ca(n,e))}function xa(n,e){n._transitionClasses&&y(n._transitionClasses,e),pa(n,e)}function _a(n,e,t){var r=Sa(n,e),a=r.type,i=r.timeout,s=r.propCount;if(!a)return t();var o="transition"===a?ha:ba,l=0,c=function(){n.removeEventListener(o,p),t()},p=function(e){e.target===n&&++l>=s&&c()};setTimeout((function(){l<s&&c()}),i+1),n.addEventListener(o,p)}var wa=/\b(transform|all)(,|$)/;function Sa(n,e){var t,r=window.getComputedStyle(n),a=(r[ga+"Delay"]||"").split(", "),i=(r[ga+"Duration"]||"").split(", "),s=Ta(a,i),o=(r[fa+"Delay"]||"").split(", "),l=(r[fa+"Duration"]||"").split(", "),c=Ta(o,l),p=0,d=0;return"transition"===e?s>0&&(t="transition",p=s,d=i.length):"animation"===e?c>0&&(t="animation",p=c,d=l.length):d=(t=(p=Math.max(s,c))>0?s>c?"transition":"animation":null)?"transition"===t?i.length:l.length:0,{type:t,timeout:p,propCount:d,hasTransform:"transition"===t&&wa.test(r[ga+"Property"])}}function Ta(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return ja(e)+ja(n[t])})))}function ja(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Ia(n,e){var t=n.elm;s(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=da(n.data.transition);if(!i(r)&&!s(t._enterCb)&&1===t.nodeType){for(var a=r.css,o=r.type,l=r.enterClass,d=r.enterToClass,m=r.enterActiveClass,u=r.appearClass,g=r.appearToClass,h=r.appearActiveClass,f=r.beforeEnter,v=r.enter,k=r.afterEnter,y=r.enterCancelled,x=r.beforeAppear,_=r.appear,w=r.afterAppear,S=r.appearCancelled,T=r.duration,j=Ye,I=Ye.$vnode;I&&I.parent;)j=I.context,I=I.parent;var z=!j._isMounted||!n.isRootInsert;if(!z||_||""===_){var E=z&&u?u:l,C=z&&h?h:m,D=z&&g?g:d,A=z&&x||f,O=z&&c(_)?_:v,P=z&&w||k,L=z&&S||y,M=b(p(T)?T.enter:T);0;var R=!1!==a&&!Z,N=Ca(O),B=t._enterCb=q((function(){R&&(xa(t,D),xa(t,C)),B.cancelled?(R&&xa(t,E),L&&L(t)):P&&P(t),t._enterCb=null}));n.data.show||Kn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),O&&O(t,B)})),A&&A(t),R&&(ya(t,E),ya(t,C),ka((function(){xa(t,E),B.cancelled||(ya(t,D),N||(Ea(M)?setTimeout(B,M):_a(t,o,B)))}))),n.data.show&&(e&&e(),O&&O(t,B)),R||N||B()}}}function za(n,e){var t=n.elm;s(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=da(n.data.transition);if(i(r)||1!==t.nodeType)return e();if(!s(t._leaveCb)){var a=r.css,o=r.type,l=r.leaveClass,c=r.leaveToClass,d=r.leaveActiveClass,m=r.beforeLeave,u=r.leave,g=r.afterLeave,h=r.leaveCancelled,f=r.delayLeave,v=r.duration,k=!1!==a&&!Z,y=Ca(u),x=b(p(v)?v.leave:v);0;var _=t._leaveCb=q((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),k&&(xa(t,c),xa(t,d)),_.cancelled?(k&&xa(t,l),h&&h(t)):(e(),g&&g(t)),t._leaveCb=null}));f?f(w):w()}function w(){_.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),m&&m(t),k&&(ya(t,l),ya(t,d),ka((function(){xa(t,l),_.cancelled||(ya(t,c),y||(Ea(x)?setTimeout(_,x):_a(t,o,_)))}))),u&&u(t,_),k||y||_())}}function Ea(n){return"number"==typeof n&&!isNaN(n)}function Ca(n){if(i(n))return!1;var e=n.fns;return s(e)?Ca(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Da(n,e){!0!==e.data.show&&Ia(e)}var Aa=function(n){var e,t,r={},c=n.modules,p=n.nodeOps;for(e=0;e<Sr.length;++e)for(r[Sr[e]]=[],t=0;t<c.length;++t)s(c[t][Sr[e]])&&r[Sr[e]].push(c[t][Sr[e]]);function d(n){var e=p.parentNode(n);s(e)&&p.removeChild(e,n)}function m(n,e,t,a,i,l,c){if(s(n.elm)&&s(l)&&(n=l[c]=fn(n)),n.isRootInsert=!i,!function(n,e,t,a){var i=n.data;if(s(i)){var l=s(n.componentInstance)&&i.keepAlive;if(s(i=i.hook)&&s(i=i.init)&&i(n,!1),s(n.componentInstance))return u(n,e),g(t,n.elm,a),o(l)&&function(n,e,t,a){var i,o=n;for(;o.componentInstance;)if(o=o.componentInstance._vnode,s(i=o.data)&&s(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](wr,o);e.push(o);break}g(t,n.elm,a)}(n,e,t,a),!0}}(n,e,t,a)){var d=n.data,m=n.children,f=n.tag;s(f)?(n.elm=n.ns?p.createElementNS(n.ns,f):p.createElement(f,n),k(n),h(n,m,e),s(d)&&b(n,e),g(t,n.elm,a)):o(n.isComment)?(n.elm=p.createComment(n.text),g(t,n.elm,a)):(n.elm=p.createTextNode(n.text),g(t,n.elm,a))}}function u(n,e){s(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,f(n)?(b(n,e),k(n)):(xr(n),e.push(n))}function g(n,e,t){s(n)&&(s(t)?p.parentNode(t)===n&&p.insertBefore(n,e,t):p.appendChild(n,e))}function h(n,e,t){if(a(e)){0;for(var r=0;r<e.length;++r)m(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&p.appendChild(n.elm,p.createTextNode(String(n.text)))}function f(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return s(n.tag)}function b(n,t){for(var a=0;a<r.create.length;++a)r.create[a](wr,n);s(e=n.data.hook)&&(s(e.create)&&e.create(wr,n),s(e.insert)&&t.push(n))}function k(n){var e;if(s(e=n.fnScopeId))p.setStyleScope(n.elm,e);else for(var t=n;t;)s(e=t.context)&&s(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e),t=t.parent;s(e=Ye)&&e!==n.context&&e!==n.fnContext&&s(e=e.$options._scopeId)&&p.setStyleScope(n.elm,e)}function y(n,e,t,r,a,i){for(;r<=a;++r)m(t[r],i,n,e,!1,t,r)}function x(n){var e,t,a=n.data;if(s(a))for(s(e=a.hook)&&s(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(s(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function _(n,e,t){for(;e<=t;++e){var r=n[e];s(r)&&(s(r.tag)?(w(r),x(r)):d(r.elm))}}function w(n,e){if(s(e)||s(n.data)){var t,a=r.remove.length+1;for(s(e)?e.listeners+=a:e=function(n,e){function t(){0==--t.listeners&&d(n)}return t.listeners=e,t}(n.elm,a),s(t=n.componentInstance)&&s(t=t._vnode)&&s(t.data)&&w(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);s(t=n.data.hook)&&s(t=t.remove)?t(n,e):e()}else d(n.elm)}function S(n,e,t,r){for(var a=t;a<r;a++){var i=e[a];if(s(i)&&Tr(n,i))return a}}function T(n,e,t,a,l,c){if(n!==e){s(e.elm)&&s(a)&&(e=a[l]=fn(e));var d=e.elm=n.elm;if(o(n.isAsyncPlaceholder))s(e.asyncFactory.resolved)?z(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(o(e.isStatic)&&o(n.isStatic)&&e.key===n.key&&(o(e.isCloned)||o(e.isOnce)))e.componentInstance=n.componentInstance;else{var u,g=e.data;s(g)&&s(u=g.hook)&&s(u=u.prepatch)&&u(n,e);var h=n.children,b=e.children;if(s(g)&&f(e)){for(u=0;u<r.update.length;++u)r.update[u](n,e);s(u=g.hook)&&s(u=u.update)&&u(n,e)}i(e.text)?s(h)&&s(b)?h!==b&&function(n,e,t,r,a){var o,l,c,d=0,u=0,g=e.length-1,h=e[0],f=e[g],b=t.length-1,v=t[0],k=t[b],x=!a;for(0;d<=g&&u<=b;)i(h)?h=e[++d]:i(f)?f=e[--g]:Tr(h,v)?(T(h,v,r,t,u),h=e[++d],v=t[++u]):Tr(f,k)?(T(f,k,r,t,b),f=e[--g],k=t[--b]):Tr(h,k)?(T(h,k,r,t,b),x&&p.insertBefore(n,h.elm,p.nextSibling(f.elm)),h=e[++d],k=t[--b]):Tr(f,v)?(T(f,v,r,t,u),x&&p.insertBefore(n,f.elm,h.elm),f=e[--g],v=t[++u]):(i(o)&&(o=jr(e,d,g)),i(l=s(v.key)?o[v.key]:S(v,e,d,g))?m(v,r,n,h.elm,!1,t,u):Tr(c=e[l],v)?(T(c,v,r,t,u),e[l]=void 0,x&&p.insertBefore(n,c.elm,h.elm)):m(v,r,n,h.elm,!1,t,u),v=t[++u]);d>g?y(n,i(t[b+1])?null:t[b+1].elm,t,u,b,r):u>b&&_(e,d,g)}(d,h,b,t,c):s(b)?(s(n.text)&&p.setTextContent(d,""),y(d,null,b,0,b.length-1,t)):s(h)?_(h,0,h.length-1):s(n.text)&&p.setTextContent(d,""):n.text!==e.text&&p.setTextContent(d,e.text),s(g)&&s(u=g.hook)&&s(u=u.postpatch)&&u(n,e)}}}function j(n,e,t){if(o(t)&&s(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var I=v("attrs,class,staticClass,staticStyle,key");function z(n,e,t,r){var a,i=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,o(e.isComment)&&s(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(s(l)&&(s(a=l.hook)&&s(a=a.init)&&a(e,!0),s(a=e.componentInstance)))return u(e,t),!0;if(s(i)){if(s(c))if(n.hasChildNodes())if(s(a=l)&&s(a=a.domProps)&&s(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var p=!0,d=n.firstChild,m=0;m<c.length;m++){if(!d||!z(d,c[m],t,r)){p=!1;break}d=d.nextSibling}if(!p||d)return!1}else h(e,c,t);if(s(l)){var g=!1;for(var f in l)if(!I(f)){g=!0,b(e,t);break}!g&&l.class&&Fe(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,a){if(!i(e)){var l,c=!1,d=[];if(i(n))c=!0,m(e,d);else{var u=s(n.nodeType);if(!u&&Tr(n,e))T(n,e,d,null,null,a);else{if(u){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),o(t)&&z(n,e,d))return j(e,d,!0),n;l=n,n=new un(p.tagName(l).toLowerCase(),{},[],void 0,l)}var g=n.elm,h=p.parentNode(g);if(m(e,d,g._leaveCb?null:h,p.nextSibling(g)),s(e.parent))for(var b=e.parent,v=f(e);b;){for(var k=0;k<r.destroy.length;++k)r.destroy[k](b);if(b.elm=e.elm,v){for(var y=0;y<r.create.length;++y)r.create[y](wr,b);var w=b.data.hook.insert;if(w.merged)for(var S=1;S<w.fns.length;S++)w.fns[S]()}else xr(b);b=b.parent}s(h)?_([n],0,0):s(n.tag)&&x(n)}}return j(e,d,c),e.elm}s(n)&&x(n)}}({nodeOps:kr,modules:[Rr,Br,Kr,Yr,oa,J?{create:Da,activate:Da,remove:function(n,e){!0!==n.data.show?za(n,e):e()}}:{}].concat(Or)});Z&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Ba(n,"input")}));var Oa={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Kn(t,"postpatch",(function(){Oa.componentUpdated(n,e,t)})):Pa(n,e,t.context),n._vOptions=[].map.call(n.options,Ra)):("textarea"===t.tag||vr(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",qa),n.addEventListener("compositionend",Na),n.addEventListener("change",Na),Z&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Pa(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,Ra);if(a.some((function(n,e){return!M(n,r[e])})))(n.multiple?e.value.some((function(n){return Ma(n,a)})):e.value!==e.oldValue&&Ma(e.value,a))&&Ba(n,"change")}}};function Pa(n,e,t){La(n,e,t),(Y||X)&&setTimeout((function(){La(n,e,t)}),0)}function La(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var i,s,o=0,l=n.options.length;o<l;o++)if(s=n.options[o],a)i=R(r,Ra(s))>-1,s.selected!==i&&(s.selected=i);else if(M(Ra(s),r))return void(n.selectedIndex!==o&&(n.selectedIndex=o));a||(n.selectedIndex=-1)}}function Ma(n,e){return e.every((function(e){return!M(e,n)}))}function Ra(n){return"_value"in n?n._value:n.value}function qa(n){n.target.composing=!0}function Na(n){n.target.composing&&(n.target.composing=!1,Ba(n.target,"input"))}function Ba(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function Ua(n){return!n.componentInstance||n.data&&n.data.transition?n:Ua(n.componentInstance._vnode)}var Fa={model:Oa,show:{bind:function(n,e,t){var r=e.value,a=(t=Ua(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,Ia(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=Ua(t)).data&&t.data.transition?(t.data.show=!0,r?Ia(t,(function(){n.style.display=n.__vOriginalDisplay})):za(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},$a={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ga(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Ga(Se(e.children)):n}function Va(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var r in a)e[T(r)]=a[r];return e}function Ha(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Ka=function(n){return n.tag||ge(n)},Ja=function(n){return"show"===n.name},Wa={name:"transition",props:$a,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Ka)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var i=Ga(a);if(!i)return a;if(this._leaving)return Ha(n,a);var s="__transition-".concat(this._uid,"-");i.key=null==i.key?i.isComment?s+"comment":s+i.tag:l(i.key)?0===String(i.key).indexOf(s)?i.key:s+i.key:i.key;var o=(i.data||(i.data={})).transition=Va(this),c=this._vnode,p=Ga(c);if(i.data.directives&&i.data.directives.some(Ja)&&(i.data.show=!0),p&&p.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,p)&&!ge(p)&&(!p.componentInstance||!p.componentInstance._vnode.isComment)){var d=p.data.transition=D({},o);if("out-in"===r)return this._leaving=!0,Kn(d,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Ha(n,a);if("in-out"===r){if(ge(i))return c;var m,u=function(){m()};Kn(o,"afterEnter",u),Kn(o,"enterCancelled",u),Kn(d,"delayLeave",(function(n){m=n}))}}return a}}},Ya=D({tag:String,moveClass:String},$a);function Za(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Xa(n){n.data.newPos=n.elm.getBoundingClientRect()}function Qa(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate(".concat(r,"px,").concat(a,"px)"),i.transitionDuration="0s"}}delete Ya.mode;var ni={Transition:Wa,TransitionGroup:{props:Ya,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Ze(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],i=this.children=[],s=Va(this),o=0;o<a.length;o++){if((p=a[o]).tag)if(null!=p.key&&0!==String(p.key).indexOf("__vlist"))i.push(p),t[p.key]=p,(p.data||(p.data={})).transition=s;else;}if(r){var l=[],c=[];for(o=0;o<r.length;o++){var p;(p=r[o]).data.transition=s,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?l.push(p):c.push(p)}this.kept=n(e,null,l),this.removed=c}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Za),n.forEach(Xa),n.forEach(Qa),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;ya(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(ha,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(ha,n),t._moveCb=null,xa(t,e))})}})))},methods:{hasMove:function(n,e){if(!ua)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){pa(t,n)})),ca(t,e),t.style.display="none",this.$el.appendChild(t);var r=Sa(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function ei(n,e){for(var t in e)n[t]=e[t];return n}Ht.config.mustUseProp=function(n,e,t){return"value"===t&&er(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Ht.config.isReservedTag=fr,Ht.config.isReservedAttr=nr,Ht.config.getTagNamespace=function(n){return hr(n)?"svg":"math"===n?"math":void 0},Ht.config.isUnknownElement=function(n){if(!J)return!0;if(fr(n))return!1;if(n=n.toLowerCase(),null!=br[n])return br[n];var e=document.createElement(n);return n.indexOf("-")>-1?br[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:br[n]=/HTMLUnknownElement/.test(e.toString())},D(Ht.options.directives,Fa),D(Ht.options.components,ni),Ht.prototype.__patch__=J?Aa:O,Ht.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=gn),nt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new Ve(n,r,O,{before:function(){n._isMounted&&!n._isDestroyed&&nt(n,"beforeUpdate")}},!0),t=!1;var a=n._preWatchers;if(a)for(var i=0;i<a.length;i++)a[i].run();return null==n.$vnode&&(n._isMounted=!0,nt(n,"mounted")),n}(this,n=n&&J?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},J&&setTimeout((function(){F.devtools&&on&&on.emit("init",Ht)}),0);var ti=/[!'()*]/g,ri=function(n){return"%"+n.charCodeAt(0).toString(16)},ai=/%2C/g,ii=function(n){return encodeURIComponent(n).replace(ti,ri).replace(ai,",")};function si(n){try{return decodeURIComponent(n)}catch(n){0}return n}var oi=function(n){return null==n||"object"==typeof n?n:String(n)};function li(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=si(t.shift()),a=t.length>0?si(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function ci(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return ii(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(ii(e)):r.push(ii(e)+"="+ii(n)))})),r.join("&")}return ii(e)+"="+ii(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var pi=/\/?$/;function di(n,e,t,r){var a=r&&r.options.stringifyQuery,i=e.query||{};try{i=mi(i)}catch(n){}var s={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:hi(e,a),matched:n?gi(n):[]};return t&&(s.redirectedFrom=hi(t,a)),Object.freeze(s)}function mi(n){if(Array.isArray(n))return n.map(mi);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=mi(n[t]);return e}return n}var ui=di(null,{path:"/"});function gi(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function hi(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||ci)(r)+a}function fi(n,e,t){return e===ui?n===e:!!e&&(n.path&&e.path?n.path.replace(pi,"")===e.path.replace(pi,"")&&(t||n.hash===e.hash&&bi(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&bi(n.query,e.query)&&bi(n.params,e.params))))}function bi(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var i=n[t];if(r[a]!==t)return!1;var s=e[t];return null==i||null==s?i===s:"object"==typeof i&&"object"==typeof s?bi(i,s):String(i)===String(s)}))}function vi(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],i=t.enteredCbs[r];if(a&&i){delete t.enteredCbs[r];for(var s=0;s<i.length;s++)a._isBeingDestroyed||i[s](a)}}}}var ki={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,i=e.data;i.routerView=!0;for(var s=a.$createElement,o=t.name,l=a.$route,c=a._routerViewCache||(a._routerViewCache={}),p=0,d=!1;a&&a._routerRoot!==a;){var m=a.$vnode?a.$vnode.data:{};m.routerView&&p++,m.keepAlive&&a._directInactive&&a._inactive&&(d=!0),a=a.$parent}if(i.routerViewDepth=p,d){var u=c[o],g=u&&u.component;return g?(u.configProps&&yi(g,i,u.route,u.configProps),s(g,i,r)):s()}var h=l.matched[p],f=h&&h.components[o];if(!h||!f)return c[o]=null,s();c[o]={component:f},i.registerRouteInstance=function(n,e){var t=h.instances[o];(e&&t!==n||!e&&t===n)&&(h.instances[o]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){h.instances[o]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==h.instances[o]&&(h.instances[o]=n.componentInstance),vi(l)};var b=h.props&&h.props[o];return b&&(ei(c[o],{route:l,configProps:b}),yi(f,i,l,b)),s(f,i,r)}};function yi(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=ei({},a);var i=e.attrs=e.attrs||{};for(var s in a)n.props&&s in n.props||(i[s]=a[s],delete a[s])}}function xi(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),s=0;s<i.length;s++){var o=i[s];".."===o?a.pop():"."!==o&&a.push(o)}return""!==a[0]&&a.unshift(""),a.join("/")}function _i(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var wi=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Si=qi,Ti=Ci,ji=function(n,e){return Ai(Ci(n,e),e)},Ii=Ai,zi=Ri,Ei=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Ci(n,e){for(var t,r=[],a=0,i=0,s="",o=e&&e.delimiter||"/";null!=(t=Ei.exec(n));){var l=t[0],c=t[1],p=t.index;if(s+=n.slice(i,p),i=p+l.length,c)s+=c[1];else{var d=n[i],m=t[2],u=t[3],g=t[4],h=t[5],f=t[6],b=t[7];s&&(r.push(s),s="");var v=null!=m&&null!=d&&d!==m,k="+"===f||"*"===f,y="?"===f||"*"===f,x=t[2]||o,_=g||h;r.push({name:u||a++,prefix:m||"",delimiter:x,optional:y,repeat:k,partial:v,asterisk:!!b,pattern:_?Pi(_):b?".*":"[^"+Oi(x)+"]+?"})}}return i<n.length&&(s+=n.substr(i)),s&&r.push(s),r}function Di(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function Ai(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",Mi(e)));return function(e,r){for(var a="",i=e||{},s=(r||{}).pretty?Di:encodeURIComponent,o=0;o<n.length;o++){var l=n[o];if("string"!=typeof l){var c,p=i[l.name];if(null==p){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(wi(p)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(c=s(p[d]),!t[o].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===d?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(p).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):s(p),!t[o].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function Oi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Pi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Li(n,e){return n.keys=e,n}function Mi(n){return n&&n.sensitive?"":"i"}function Ri(n,e,t){wi(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,i="",s=0;s<n.length;s++){var o=n[s];if("string"==typeof o)i+=Oi(o);else{var l=Oi(o.prefix),c="(?:"+o.pattern+")";e.push(o),o.repeat&&(c+="(?:"+l+c+")*"),i+=c=o.optional?o.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var p=Oi(t.delimiter||"/"),d=i.slice(-p.length)===p;return r||(i=(d?i.slice(0,-p.length):i)+"(?:"+p+"(?=$))?"),i+=a?"$":r&&d?"":"(?="+p+"|$)",Li(new RegExp("^"+i,Mi(t)),e)}function qi(n,e,t){return wi(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Li(n,e)}(n,e):wi(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push(qi(n[a],e,t).source);return Li(new RegExp("(?:"+r.join("|")+")",Mi(t)),e)}(n,e,t):function(n,e,t){return Ri(Ci(n,t),e,t)}(n,e,t)}Si.parse=Ti,Si.compile=ji,Si.tokensToFunction=Ii,Si.tokensToRegExp=zi;var Ni=Object.create(null);function Bi(n,e,t){e=e||{};try{var r=Ni[n]||(Ni[n]=Si.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function Ui(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var i=(a=ei({},n)).params;return i&&"object"==typeof i&&(a.params=ei({},i)),a}if(!a.path&&a.params&&e){(a=ei({},a))._normalized=!0;var s=ei(ei({},e.params),a.params);if(e.name)a.name=e.name,a.params=s;else if(e.matched.length){var o=e.matched[e.matched.length-1].path;a.path=Bi(o,s,e.path)}else 0;return a}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),c=e&&e.path||"/",p=l.path?xi(l.path,c,t||a.append):c,d=function(n,e,t){void 0===e&&(e={});var r,a=t||li;try{r=a(n||"")}catch(n){r={}}for(var i in e){var s=e[i];r[i]=Array.isArray(s)?s.map(oi):oi(s)}return r}(l.query,a.query,r&&r.options.parseQuery),m=a.hash||l.hash;return m&&"#"!==m.charAt(0)&&(m="#"+m),{_normalized:!0,path:p,query:d,hash:m}}var Fi,$i=function(){},Gi={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),i=a.location,s=a.route,o=a.href,l={},c=t.options.linkActiveClass,p=t.options.linkExactActiveClass,d=null==c?"router-link-active":c,m=null==p?"router-link-exact-active":p,u=null==this.activeClass?d:this.activeClass,g=null==this.exactActiveClass?m:this.exactActiveClass,h=s.redirectedFrom?di(null,Ui(s.redirectedFrom),null,t):s;l[g]=fi(r,h,this.exactPath),l[u]=this.exact||this.exactPath?l[g]:function(n,e){return 0===n.path.replace(pi,"/").indexOf(e.path.replace(pi,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,h);var f=l[g]?this.ariaCurrentValue:null,b=function(n){Vi(n)&&(e.replace?t.replace(i,$i):t.push(i,$i))},v={click:Vi};Array.isArray(this.event)?this.event.forEach((function(n){v[n]=b})):v[this.event]=b;var k={class:l},y=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:o,route:s,navigate:b,isActive:l[u],isExactActive:l[g]});if(y){if(1===y.length)return y[0];if(y.length>1||!y.length)return 0===y.length?n():n("span",{},y)}if("a"===this.tag)k.on=v,k.attrs={href:o,"aria-current":f};else{var x=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(x){x.isStatic=!1;var _=x.data=ei({},x.data);for(var w in _.on=_.on||{},_.on){var S=_.on[w];w in v&&(_.on[w]=Array.isArray(S)?S:[S])}for(var T in v)T in _.on?_.on[T].push(v[T]):_.on[T]=b;var j=x.data.attrs=ei({},x.data.attrs);j.href=o,j["aria-current"]=f}else k.on=v}return n(this.tag,k,this.$slots.default)}};function Vi(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Hi="undefined"!=typeof window;function Ki(n,e,t,r,a){var i=e||[],s=t||Object.create(null),o=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,i,s){var o=a.path,l=a.name;0;var c=a.pathToRegexpOptions||{},p=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return _i(e.path+"/"+n)}(o,i,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var d={path:p,regex:Ji(p,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:s,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var i=s?_i(s+"/"+a.path):void 0;n(e,t,r,a,d,i)}));t[d.path]||(e.push(d.path),t[d.path]=d);if(void 0!==a.alias)for(var m=Array.isArray(a.alias)?a.alias:[a.alias],u=0;u<m.length;++u){0;var g={path:m[u],children:a.children};n(e,t,r,g,i,d.path||"/")}l&&(r[l]||(r[l]=d))}(i,s,o,n,a)}));for(var l=0,c=i.length;l<c;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),c--,l--);return{pathList:i,pathMap:s,nameMap:o}}function Ji(n,e){return Si(n,[],e)}function Wi(n,e){var t=Ki(n),r=t.pathList,a=t.pathMap,i=t.nameMap;function s(n,t,s){var o=Ui(n,t,!1,e),c=o.name;if(c){var p=i[c];if(!p)return l(null,o);var d=p.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof o.params&&(o.params={}),t&&"object"==typeof t.params)for(var m in t.params)!(m in o.params)&&d.indexOf(m)>-1&&(o.params[m]=t.params[m]);return o.path=Bi(p.path,o.params),l(p,o,s)}if(o.path){o.params={};for(var u=0;u<r.length;u++){var g=r[u],h=a[g];if(Yi(h.regex,o.path,o.params))return l(h,o,s)}}return l(null,o)}function o(n,t){var r=n.redirect,a="function"==typeof r?r(di(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return l(null,t);var o=a,c=o.name,p=o.path,d=t.query,m=t.hash,u=t.params;if(d=o.hasOwnProperty("query")?o.query:d,m=o.hasOwnProperty("hash")?o.hash:m,u=o.hasOwnProperty("params")?o.params:u,c){i[c];return s({_normalized:!0,name:c,query:d,hash:m,params:u},void 0,t)}if(p){var g=function(n,e){return xi(n,e.parent?e.parent.path:"/",!0)}(p,n);return s({_normalized:!0,path:Bi(g,u),query:d,hash:m},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?o(n,r||t):n&&n.matchAs?function(n,e,t){var r=s({_normalized:!0,path:Bi(t,e.params)});if(r){var a=r.matched,i=a[a.length-1];return e.params=r.params,l(i,e)}return l(null,e)}(0,t,n.matchAs):di(n,t,r,e)}return{match:s,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;Ki([e||n],r,a,i,t),t&&t.alias.length&&Ki(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,i,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Ki(n,r,a,i)}}}function Yi(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,i=r.length;a<i;++a){var s=n.keys[a-1];s&&(t[s.name||"pathMatch"]="string"==typeof r[a]?si(r[a]):r[a])}return!0}var Zi=Hi&&window.performance&&window.performance.now?window.performance:Date;function Xi(){return Zi.now().toFixed(3)}var Qi=Xi();function ns(){return Qi}function es(n){return Qi=n}var ts=Object.create(null);function rs(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ei({},window.history.state);return t.key=ns(),window.history.replaceState(t,"",e),window.addEventListener("popstate",ss),function(){window.removeEventListener("popstate",ss)}}function as(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var i=function(){var n=ns();if(n)return ts[n]}(),s=a.call(n,e,t,r?i:null);s&&("function"==typeof s.then?s.then((function(n){ds(n,i)})).catch((function(n){0})):ds(s,i))}))}}function is(){var n=ns();n&&(ts[n]={x:window.pageXOffset,y:window.pageYOffset})}function ss(n){is(),n.state&&n.state.key&&es(n.state.key)}function os(n){return cs(n.x)||cs(n.y)}function ls(n){return{x:cs(n.x)?n.x:window.pageXOffset,y:cs(n.y)?n.y:window.pageYOffset}}function cs(n){return"number"==typeof n}var ps=/^#\d/;function ds(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=ps.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,i={x:cs((t=i).x)?t.x:0,y:cs(t.y)?t.y:0})}else os(n)&&(e=ls(n))}else r&&os(n)&&(e=ls(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var ms,us=Hi&&((-1===(ms=window.navigator.userAgent).indexOf("Android 2.")&&-1===ms.indexOf("Android 4.0")||-1===ms.indexOf("Mobile Safari")||-1!==ms.indexOf("Chrome")||-1!==ms.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function gs(n,e){is();var t=window.history;try{if(e){var r=ei({},t.state);r.key=ns(),t.replaceState(r,"",n)}else t.pushState({key:es(Xi())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function hs(n){gs(n,!0)}var fs={redirected:2,aborted:4,cancelled:8,duplicated:16};function bs(n,e){return ks(n,e,fs.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return ys.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function vs(n,e){return ks(n,e,fs.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function ks(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var ys=["params","query","hash"];function xs(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function _s(n,e){return xs(n)&&n._isRouter&&(null==e||n.type===e)}function ws(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}function Ss(n){return function(e,t,r){var a=!1,i=0,s=null;Ts(n,(function(n,e,t,o){if("function"==typeof n&&void 0===n.cid){a=!0,i++;var l,c=zs((function(e){var a;((a=e).__esModule||Is&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Fi.extend(e),t.components[o]=e,--i<=0&&r()})),p=zs((function(n){var e="Failed to resolve async component "+o+": "+n;s||(s=xs(n)?n:new Error(e),r(s))}));try{l=n(c,p)}catch(n){p(n)}if(l)if("function"==typeof l.then)l.then(c,p);else{var d=l.component;d&&"function"==typeof d.then&&d.then(c,p)}}})),a||r()}}function Ts(n,e){return js(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function js(n){return Array.prototype.concat.apply([],n)}var Is="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function zs(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var Es=function(n,e){this.router=n,this.base=function(n){if(!n)if(Hi){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=ui,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Cs(n,e,t,r){var a=Ts(n,(function(n,r,a,i){var s=function(n,e){"function"!=typeof n&&(n=Fi.extend(n));return n.options[e]}(n,e);if(s)return Array.isArray(s)?s.map((function(n){return t(n,r,a,i)})):t(s,r,a,i)}));return js(r?a.reverse():a)}function Ds(n,e){if(e)return function(){return n.apply(e,arguments)}}Es.prototype.listen=function(n){this.cb=n},Es.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Es.prototype.onError=function(n){this.errorCbs.push(n)},Es.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,i)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(_s(n,fs.redirected)&&i===ui||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},Es.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var i,s,o=function(n){!_s(n)&&xs(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=a.matched.length-1;if(fi(n,a)&&l===c&&n.matched[l]===a.matched[c])return this.ensureURL(),n.hash&&as(this.router,a,n,!1),o(((s=ks(i=a,n,fs.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",s));var p=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),d=p.updated,m=p.deactivated,u=p.activated,g=[].concat(function(n){return Cs(n,"beforeRouteLeave",Ds,!0)}(m),this.router.beforeHooks,function(n){return Cs(n,"beforeRouteUpdate",Ds)}(d),u.map((function(n){return n.beforeEnter})),Ss(u)),h=function(e,t){if(r.pending!==n)return o(vs(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),o(function(n,e){return ks(n,e,fs.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):xs(e)?(r.ensureURL(!0),o(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(o(bs(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){o(n)}};ws(g,h,(function(){ws(function(n){return Cs(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,i){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(u).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return o(vs(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){vi(n)}))}))}))},Es.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Es.prototype.setupListeners=function(){},Es.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=ui,this.pending=null};var As=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Os(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=us&&t;r&&this.listeners.push(rs());var a=function(){var t=n.current,a=Os(n.base);n.current===ui&&a===n._startLocation||n.transitionTo(a,(function(n){r&&as(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){gs(_i(r.base+n.fullPath)),as(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){hs(_i(r.base+n.fullPath)),as(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Os(this.base)!==this.current.fullPath){var e=_i(this.base+this.current.fullPath);n?gs(e):hs(e)}},e.prototype.getCurrentLocation=function(){return Os(this.base)},e}(Es);function Os(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(_i(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Ps=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Os(n);if(!/^\/#/.test(e))return window.location.replace(_i(n+"/#"+e)),!0}(this.base)||Ls()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=us&&e;t&&this.listeners.push(rs());var r=function(){var e=n.current;Ls()&&n.transitionTo(Ms(),(function(r){t&&as(n.router,r,e,!0),us||Ns(r.fullPath)}))},a=us?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){qs(n.fullPath),as(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Ns(n.fullPath),as(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Ms()!==e&&(n?qs(e):Ns(e))},e.prototype.getCurrentLocation=function(){return Ms()},e}(Es);function Ls(){var n=Ms();return"/"===n.charAt(0)||(Ns("/"+n),!1)}function Ms(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Rs(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function qs(n){us?gs(Rs(n)):window.location.hash=n}function Ns(n){us?hs(Rs(n)):window.location.replace(Rs(n))}var Bs=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){_s(n,fs.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Es),Us=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Wi(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!us&&!1!==n.fallback,this.fallback&&(e="hash"),Hi||(e="abstract"),this.mode=e,e){case"history":this.history=new As(this,n.base);break;case"hash":this.history=new Ps(this,n.base,this.fallback);break;case"abstract":this.history=new Bs(this,n.base);break;default:0}},Fs={currentRoute:{configurable:!0}};Us.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Fs.currentRoute.get=function(){return this.history&&this.history.current},Us.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof As||t instanceof Ps){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;us&&a&&"fullPath"in n&&as(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Us.prototype.beforeEach=function(n){return Gs(this.beforeHooks,n)},Us.prototype.beforeResolve=function(n){return Gs(this.resolveHooks,n)},Us.prototype.afterEach=function(n){return Gs(this.afterHooks,n)},Us.prototype.onReady=function(n,e){this.history.onReady(n,e)},Us.prototype.onError=function(n){this.history.onError(n)},Us.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Us.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Us.prototype.go=function(n){this.history.go(n)},Us.prototype.back=function(){this.go(-1)},Us.prototype.forward=function(){this.go(1)},Us.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Us.prototype.resolve=function(n,e,t){var r=Ui(n,e=e||this.history.current,t,this),a=this.match(r,e),i=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?_i(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:a}},Us.prototype.getRoutes=function(){return this.matcher.getRoutes()},Us.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==ui&&this.history.transitionTo(this.history.getCurrentLocation())},Us.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==ui&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Us.prototype,Fs);var $s=Us;function Gs(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Us.install=function n(e){if(!n.installed||Fi!==e){n.installed=!0,Fi=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",ki),e.component("RouterLink",Gi);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},Us.version="3.6.5",Us.isNavigationFailure=_s,Us.NavigationFailureType=fs,Us.START_LOCATION=ui,Hi&&window.Vue&&window.Vue.use(Us);t(103);t(16),t(130);var Vs={NotFound:()=>Promise.all([t.e(0),t.e(20)]).then(t.bind(null,624)),Layout:()=>Promise.all([t.e(0),t.e(6),t.e(4)]).then(t.bind(null,623))},Hs={"v-05d47c11":()=>t.e(35).then(t.bind(null,625)),"v-8a64b0f2":()=>t.e(36).then(t.bind(null,626)),"v-e85a60ea":()=>t.e(37).then(t.bind(null,627)),"v-6bda9dc7":()=>t.e(38).then(t.bind(null,628)),"v-4c2c6fed":()=>t.e(40).then(t.bind(null,629)),"v-4c9766fd":()=>t.e(41).then(t.bind(null,630)),"v-45f36e96":()=>t.e(42).then(t.bind(null,631)),"v-3c716be2":()=>t.e(43).then(t.bind(null,632)),"v-388428d3":()=>t.e(39).then(t.bind(null,633)),"v-48252962":()=>t.e(8).then(t.bind(null,634)),"v-b1a509be":()=>t.e(22).then(t.bind(null,635)),"v-61950a01":()=>t.e(23).then(t.bind(null,636)),"v-5d0a8c6d":()=>t.e(44).then(t.bind(null,637)),"v-5dc019aa":()=>t.e(24).then(t.bind(null,638)),"v-5cea57a7":()=>t.e(12).then(t.bind(null,639)),"v-a5114382":()=>t.e(9).then(t.bind(null,640)),"v-9d942f72":()=>t.e(13).then(t.bind(null,641)),"v-caca427e":()=>t.e(11).then(t.bind(null,642)),"v-0e8db29c":()=>t.e(45).then(t.bind(null,643)),"v-4ea01f7a":()=>t.e(46).then(t.bind(null,644)),"v-912a3978":()=>t.e(47).then(t.bind(null,645)),"v-72036e06":()=>t.e(48).then(t.bind(null,646)),"v-e431d030":()=>t.e(5).then(t.bind(null,647)),"v-5e18edb6":()=>t.e(3).then(t.bind(null,648)),"v-f7236c84":()=>t.e(10).then(t.bind(null,649)),"v-3b9e96dd":()=>t.e(14).then(t.bind(null,650)),"v-6cba1c56":()=>t.e(2).then(t.bind(null,651)),"v-5ff65d10":()=>t.e(50).then(t.bind(null,652)),"v-61e7116b":()=>t.e(51).then(t.bind(null,653)),"v-23aba859":()=>t.e(49).then(t.bind(null,654)),"v-6aca16ca":()=>t.e(52).then(t.bind(null,655)),"v-7b1d014e":()=>t.e(53).then(t.bind(null,656)),"v-43867bf6":()=>t.e(21).then(t.bind(null,657)),"v-6d504496":()=>t.e(54).then(t.bind(null,658)),"v-711c8354":()=>t.e(55).then(t.bind(null,659)),"v-7485b39d":()=>t.e(7).then(t.bind(null,660)),"v-47c092ae":()=>t.e(56).then(t.bind(null,661)),"v-0a28b68a":()=>t.e(57).then(t.bind(null,662)),"v-fbc57f00":()=>t.e(58).then(t.bind(null,663)),"v-9e01ea5e":()=>t.e(59).then(t.bind(null,664)),"v-691d6731":()=>t.e(60).then(t.bind(null,665)),"v-7ea07f46":()=>t.e(25).then(t.bind(null,666)),"v-732ec28a":()=>t.e(61).then(t.bind(null,667)),"v-377bca40":()=>t.e(62).then(t.bind(null,668)),"v-932c3b68":()=>t.e(63).then(t.bind(null,669)),"v-9c5d01e8":()=>t.e(26).then(t.bind(null,670)),"v-375cf838":()=>t.e(66).then(t.bind(null,671)),"v-0c47adec":()=>t.e(67).then(t.bind(null,672)),"v-39315c28":()=>t.e(69).then(t.bind(null,673)),"v-76d740a4":()=>t.e(64).then(t.bind(null,674)),"v-83f6c6ac":()=>t.e(68).then(t.bind(null,675)),"v-3f884dac":()=>t.e(70).then(t.bind(null,676)),"v-7ce56fec":()=>t.e(15).then(t.bind(null,677)),"v-4326dec4":()=>t.e(71).then(t.bind(null,678)),"v-7d058daa":()=>t.e(27).then(t.bind(null,679)),"v-73a4ce36":()=>t.e(16).then(t.bind(null,680)),"v-38d8d3a2":()=>t.e(29).then(t.bind(null,681)),"v-277d4a4a":()=>t.e(28).then(t.bind(null,682)),"v-5706f25f":()=>t.e(72).then(t.bind(null,683)),"v-4fbe3236":()=>t.e(73).then(t.bind(null,684)),"v-eb7d4dc6":()=>t.e(30).then(t.bind(null,685)),"v-3a581e4a":()=>t.e(74).then(t.bind(null,686)),"v-25c6439c":()=>t.e(75).then(t.bind(null,687)),"v-37f4b2f0":()=>t.e(76).then(t.bind(null,688)),"v-eb7c3040":()=>t.e(77).then(t.bind(null,689)),"v-1f47f670":()=>t.e(31).then(t.bind(null,690)),"v-a6708290":()=>t.e(78).then(t.bind(null,691)),"v-537c0274":()=>t.e(79).then(t.bind(null,692)),"v-a693556c":()=>t.e(80).then(t.bind(null,693)),"v-7f6d8d2c":()=>t.e(81).then(t.bind(null,694)),"v-77bbe1e4":()=>t.e(82).then(t.bind(null,695)),"v-d9d3f52c":()=>t.e(83).then(t.bind(null,696)),"v-785c366c":()=>t.e(17).then(t.bind(null,697)),"v-7f4a2a6a":()=>t.e(32).then(t.bind(null,698)),"v-3e789f00":()=>t.e(84).then(t.bind(null,699)),"v-2892a786":()=>t.e(33).then(t.bind(null,700)),"v-7ee18b14":()=>t.e(18).then(t.bind(null,701)),"v-79abb25e":()=>t.e(34).then(t.bind(null,702)),"v-8cc8a7c4":()=>t.e(85).then(t.bind(null,703)),"v-834a75d4":()=>t.e(86).then(t.bind(null,704)),"v-47258ff6":()=>t.e(87).then(t.bind(null,705)),"v-5066100e":()=>t.e(88).then(t.bind(null,706)),"v-35f74b96":()=>t.e(89).then(t.bind(null,707)),"v-84b10022":()=>t.e(90).then(t.bind(null,708)),"v-deae9708":()=>t.e(65).then(t.bind(null,709))};function Ks(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Js=/-(\w)/g,Ws=Ks(n=>n.replace(Js,(n,e)=>e?e.toUpperCase():"")),Ys=/\B([A-Z])/g,Zs=Ks(n=>n.replace(Ys,"-$1").toLowerCase()),Xs=Ks(n=>n.charAt(0).toUpperCase()+n.slice(1));function Qs(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(Xs(Ws(e))):n(Xs(e))||n(Zs(e))}const no=Object.assign({},Vs,Hs),eo=n=>no[n],to=n=>Hs[n],ro=n=>Vs[n],ao=n=>Ht.component(n);function io(n){return Qs(to,n)}function so(n){return Qs(ro,n)}function oo(n){return Qs(eo,n)}function lo(n){return Qs(ao,n)}function co(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!lo(n)&&oo(n)){const e=await oo(n)();Ht.component(n,e.default)}}))}function po(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var mo=t(92),uo=t.n(mo),go=t(93),ho=t.n(go),fo={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${ho()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=vo(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=ko(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return uo()([{name:"description",content:this.$description}],n,this.siteMeta,yo)},updateCanonicalLink(){bo(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",vo(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){ko(null,this.currentMetaTags),bo()}};function bo(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function vo(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function ko(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function yo(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var xo=t(50),_o={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(xo)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),a=window.innerHeight+t;for(let n=0;n<e.length;n++){const i=e[n],s=e[n+1],o=0===n&&0===t||t>=i.parentElement.offsetTop+10&&(!s||t<s.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(o&&l!==decodeURIComponent(i.hash)){const t=i;if(a===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},wo=t(24),So=t.n(wo),To={mounted(){So.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Ht.component(n.name)||So.a.start(),t()}),this.$router.afterEach(()=>{So.a.done(),this.isSidebarOpen=!1})}};t(239),t(240);class jo{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var Io={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new jo).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&r.firstChild?r.insertBefore(a,r.firstChild):r.appendChild(a),a.styleSheet?a.styleSheet.cssText=n:a.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var zo={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},Eo={},Co=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Do=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:zo[n]},Ao=function n(e,t,r){var a=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))a[n]=t[n];else{var e=n.replace("data","");a.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,i=e.children;a.appendChild(n(t,r,i))})),a},Oo=function(n,e,t){var r,a=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==a.length||t?a:a[0]},Po=function(n,e){var t,r,a=n.match(/<style>([\s\S]+)<\/style>/),i=n.match(/<template>([\s\S]+)<\/template>/),s=n.match(/<script>([\s\S]+)<\/script>/),o={css:a&&a[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:s&&s[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};o.htmlTpl=Co(o.html),o.jsTpl=(t=o.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),o.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),a=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,i=[eval][0](a);return i.template=e,i}(o.js,o.html);var l=Do("vue");return o.jsLib.unshift(l),o},Lo=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<html>([\s\S]+)<\/html>/),i=n.match(/<script>([\s\S]+)<\/script>/),s={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return s.htmlTpl=s.html,s.jsTpl=s.js,s.script=(t=s.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),s},Mo=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Ro(){var n=Oo(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=Oo(n,"vuepress-plugin-demo-block__code"),t=Oo(n,"vuepress-plugin-demo-block__display"),r=Oo(n,"vuepress-plugin-demo-block__footer"),a=Oo(t,"vuepress-plugin-demo-block__app"),i=decodeURIComponent(n.dataset.code),s=decodeURIComponent(n.dataset.config),o=decodeURIComponent(n.dataset.type);s=s?JSON.parse(s):{};var l=e.querySelector("div").clientHeight,c="react"===o?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),a=new Function("return ".concat(r))(),i={js:a,css:a.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:Mo(n),htmlTpl:Co("")},s=Do("react"),o=Do("reactDOM");return i.jsLib.unshift(s,o),i}(i,s):"vanilla"===o?Lo(i,s):Po(i,s),p=Ao("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(p),p.addEventListener("click",qo.bind(null,p,l,e,r)),Do("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,s=a.concat(i).concat(Do("cssLib")).concat(Do("jsLib")).join(",");return Ao("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:s}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),Do("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,s=JSON.stringify({css:e,html:t,js:r,js_external:a.concat(Do("jsLib")).join(";"),css_external:i.concat(Do("cssLib")).join(";"),layout:Do("codepenLayout"),js_pre_processor:Do("codepenJsProcessor"),editors:Do("codepenEditors")});return Ao("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:s}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==s.horizontal?s.horizontal:Do("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var d=e.firstChild.cloneNode(!0);d.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(d)}if(c.css&&function(n){if(!Eo[n]){var e=Ao("style",{innerHTML:n});document.body.appendChild(e),Eo[n]=!0}}(c.css),"react"===o)ReactDOM.render(React.createElement(c.js),a);else if("vue"===o){var m=(new(Vue.extend(c.script))).$mount();a.appendChild(m.$el)}else"vanilla"===o&&(a.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){Ro()}),300)}function qo(n,e,t,r){var a="1"!==n.dataset.isExpand;t.style.height=a?"".concat(e,"px"):0,a?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=a?"1":"0"}var No={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Ro()},updated:function(){Ro()}},Bo="auto",Uo="zoom-in",Fo="zoom-out",$o="grab",Go="move";function Vo(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function Ho(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Ko(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Jo(n,e,t){!function(n){var e=Wo,t=Yo;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var i in e)t&&(a[i]=r[i]||""),r[i]=e[i];return a}var Wo="transition",Yo="transform",Zo="transform",Xo="transitionend";var Qo=function(){},nl={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Qo,onClose:Qo,onGrab:Qo,onMove:Qo,onRelease:Qo,onBeforeOpen:Qo,onBeforeClose:Qo,onBeforeGrab:Qo,onBeforeRelease:Qo,onImageLoading:Qo,onImageLoaded:Qo},el={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),rl(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(a)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(tl(n)&&!rl(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){tl(n)&&!rl(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function tl(n){return 0===n.button}function rl(n){return n.metaKey||n.ctrlKey}var al={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Jo(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Vo(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Jo(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},il="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},sl=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),ol=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},ll={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Ko(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?$o:Fo,transition:Zo+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Jo(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Jo(this.el,{transform:"none"})},grab:function(n,e,t){var r=cl(),a=r.x-n,i=r.y-e;Jo(this.el,{cursor:Go,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=cl(),a=r.x-n,i=r.y-e;Jo(this.el,{transition:Zo,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Jo(this.el,this.styleClose)},restoreOpenStyle:function(){Jo(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=cl(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,i=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":il(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var s=this.rect.width/2,o=this.rect.height/2,l=cl(),c={x:l.x-s,y:l.y-o},p=c.x/s,d=c.y/o,m=i+Math.min(p,d);if(a&&"string"==typeof a){var u=t||this.el.naturalWidth,g=e||this.el.naturalHeight,h=parseFloat(a)*u/(100*this.rect.width),f=parseFloat(a)*g/(100*this.rect.height);if(m>h||m>f)return{x:h,y:f}}return{x:m,y:m}}};function cl(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function pl(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Vo(n,r,e[r],t)}))}var dl=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(ll),this.overlay=Object.create(al),this.handler=Object.create(el),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=ol({},nl,e),this.overlay.init(this),this.handler.init(this)}return sl(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Uo,Vo(n,"click",this.handler.click),this.options.preloadImage&&Ho(Ko(n)));return this}},{key:"config",value:function(n){return n?(ol(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),Ho(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Vo(document,"scroll",this.handler.scroll),Vo(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Vo(window,"resize",this.handler.resizeWindow);var i=function n(){Vo(r,Xo,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&pl(document,e.handler,!0),t(r)};return Vo(r,Xo,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Bo,this.overlay.fadeOut(),this.target.zoomOut(),Vo(document,"scroll",this.handler.scroll,!1),Vo(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Vo(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Vo(t,Xo,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&pl(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Vo(t,Xo,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var i=function n(){Vo(a,Xo,n,!1),r(a)};return Vo(a,Xo,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Go,this.target.move(n,e,t);var a=this.target.el,i=function n(){Vo(a,Xo,n,!1),r(a)};return Vo(a,Xo,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Bo,this.target.restoreOpenStyle();var r=function r(){Vo(t,Xo,r,!1),n.lock=!1,n.released=!0,e(t)};return Vo(t,Xo,r),this}}}]),n}();const ml=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),ul=Number("500");class gl{constructor(){this.instance=new dl(ml)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=ul){setTimeout(()=>this.update(n),e)}}var hl=[fo,_o,To,Io,No,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new gl,this.$vuepress.zooming.updateDelay()}}],fl={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return po("layout",n),Ht.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},bl=t(7),vl=Object(bl.a)(fl,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(vl,"mixins",hl);const kl=[{name:"v-05d47c11",path:"/note/java/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-05d47c11").then(t)}},{path:"/note/java/index.html",redirect:"/note/java/"},{path:"/00.目录页/01.Java.html",redirect:"/note/java/"},{name:"v-8a64b0f2",path:"/note/linux/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-8a64b0f2").then(t)}},{path:"/note/linux/index.html",redirect:"/note/linux/"},{path:"/00.目录页/02.Linux.html",redirect:"/note/linux/"},{name:"v-e85a60ea",path:"/note/deploy/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-e85a60ea").then(t)}},{path:"/note/deploy/index.html",redirect:"/note/deploy/"},{path:"/00.目录页/03.Deploy.html",redirect:"/note/deploy/"},{name:"v-6bda9dc7",path:"/note/application/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-6bda9dc7").then(t)}},{path:"/note/application/index.html",redirect:"/note/application/"},{path:"/00.目录页/04.Application.html",redirect:"/note/application/"},{name:"v-4c2c6fed",path:"/pages/cc9343/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-4c2c6fed").then(t)}},{path:"/pages/cc9343/index.html",redirect:"/pages/cc9343/"},{path:"/01.Java/01.Springboot集成redis.html",redirect:"/pages/cc9343/"},{name:"v-4c9766fd",path:"/pages/79082f/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-4c9766fd").then(t)}},{path:"/pages/79082f/index.html",redirect:"/pages/79082f/"},{path:"/01.Java/02.Springboot集成mongodb.html",redirect:"/pages/79082f/"},{name:"v-45f36e96",path:"/pages/b7c561/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-45f36e96").then(t)}},{path:"/pages/b7c561/index.html",redirect:"/pages/b7c561/"},{path:"/01.Java/03.Springboot集成FastDFS.html",redirect:"/pages/b7c561/"},{name:"v-3c716be2",path:"/pages/054331/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-3c716be2").then(t)}},{path:"/pages/054331/index.html",redirect:"/pages/054331/"},{path:"/01.Java/04.Springboot集成WebSocket.html",redirect:"/pages/054331/"},{name:"v-388428d3",path:"/note/openSource/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-388428d3").then(t)}},{path:"/note/openSource/index.html",redirect:"/note/openSource/"},{path:"/00.目录页/05.OpenSource.html",redirect:"/note/openSource/"},{name:"v-48252962",path:"/pages/957251/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-48252962").then(t)}},{path:"/pages/957251/index.html",redirect:"/pages/957251/"},{path:"/01.Java/05.Springboot集成kafka.html",redirect:"/pages/957251/"},{name:"v-b1a509be",path:"/pages/25bc68/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-b1a509be").then(t)}},{path:"/pages/25bc68/index.html",redirect:"/pages/25bc68/"},{path:"/01.Java/06.Springboot集成Flyway.html",redirect:"/pages/25bc68/"},{name:"v-61950a01",path:"/pages/95e55e/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-61950a01").then(t)}},{path:"/pages/95e55e/index.html",redirect:"/pages/95e55e/"},{path:"/01.Java/07.Springboot集成ScheduleTask.html",redirect:"/pages/95e55e/"},{name:"v-5d0a8c6d",path:"/pages/308d39/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-5d0a8c6d").then(t)}},{path:"/pages/308d39/index.html",redirect:"/pages/308d39/"},{path:"/01.Java/08.Validation数据校验规范使用.html",redirect:"/pages/308d39/"},{name:"v-5dc019aa",path:"/pages/84b073/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-5dc019aa").then(t)}},{path:"/pages/84b073/index.html",redirect:"/pages/84b073/"},{path:"/01.Java/09.常用代码.html",redirect:"/pages/84b073/"},{name:"v-5cea57a7",path:"/pages/8c2b69/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-5cea57a7").then(t)}},{path:"/pages/8c2b69/index.html",redirect:"/pages/8c2b69/"},{path:"/02.Linux/01.Linux常用命令.html",redirect:"/pages/8c2b69/"},{name:"v-a5114382",path:"/pages/e9b41d/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-a5114382").then(t)}},{path:"/pages/e9b41d/index.html",redirect:"/pages/e9b41d/"},{path:"/02.Linux/02.玩客云刷高版本Linux.html",redirect:"/pages/e9b41d/"},{name:"v-9d942f72",path:"/pages/0d3d62/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-9d942f72").then(t)}},{path:"/pages/0d3d62/index.html",redirect:"/pages/0d3d62/"},{path:"/02.Linux/03.端口映射.html",redirect:"/pages/0d3d62/"},{name:"v-caca427e",path:"/pages/152f6b/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-caca427e").then(t)}},{path:"/pages/152f6b/index.html",redirect:"/pages/152f6b/"},{path:"/02.Linux/04.安装Ubuntu.html",redirect:"/pages/152f6b/"},{name:"v-0e8db29c",path:"/pages/74ea91/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-0e8db29c").then(t)}},{path:"/pages/74ea91/index.html",redirect:"/pages/74ea91/"},{path:"/03.Deploy/01.Docker一键部署.html",redirect:"/pages/74ea91/"},{name:"v-4ea01f7a",path:"/pages/d04772/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-4ea01f7a").then(t)}},{path:"/pages/d04772/index.html",redirect:"/pages/d04772/"},{path:"/03.Deploy/02.Mysql主从配置一键化.html",redirect:"/pages/d04772/"},{name:"v-912a3978",path:"/pages/b6e922/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-912a3978").then(t)}},{path:"/pages/b6e922/index.html",redirect:"/pages/b6e922/"},{path:"/03.Deploy/03.Mysql新建主从同步-mysqldump.html",redirect:"/pages/b6e922/"},{name:"v-72036e06",path:"/pages/3c702b/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-72036e06").then(t)}},{path:"/pages/3c702b/index.html",redirect:"/pages/3c702b/"},{path:"/03.Deploy/04.SkyWalking部署及使用.html",redirect:"/pages/3c702b/"},{name:"v-e431d030",path:"/pages/bb3405/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-e431d030").then(t)}},{path:"/pages/bb3405/index.html",redirect:"/pages/bb3405/"},{path:"/03.Deploy/05.Prometheus部署及使用.html",redirect:"/pages/bb3405/"},{name:"v-5e18edb6",path:"/pages/d23db1/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-5e18edb6").then(t)}},{path:"/pages/d23db1/index.html",redirect:"/pages/d23db1/"},{path:"/03.Deploy/07.K8S-CICD.html",redirect:"/pages/d23db1/"},{name:"v-f7236c84",path:"/pages/04f4f5/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-f7236c84").then(t)}},{path:"/pages/04f4f5/index.html",redirect:"/pages/04f4f5/"},{path:"/03.Deploy/09.K3S-在线安装.html",redirect:"/pages/04f4f5/"},{name:"v-3b9e96dd",path:"/pages/c5c5bb/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-3b9e96dd").then(t)}},{path:"/pages/c5c5bb/index.html",redirect:"/pages/c5c5bb/"},{path:"/03.Deploy/08.K8S-在线安装 .html",redirect:"/pages/c5c5bb/"},{name:"v-6cba1c56",path:"/pages/de1358/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-6cba1c56").then(t)}},{path:"/pages/de1358/index.html",redirect:"/pages/de1358/"},{path:"/03.Deploy/10.K3S-CICD.html",redirect:"/pages/de1358/"},{name:"v-5ff65d10",path:"/pages/938c44/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-5ff65d10").then(t)}},{path:"/pages/938c44/index.html",redirect:"/pages/938c44/"},{path:"/04.Application/01.Nginx/02.常用Nginx配置.html",redirect:"/pages/938c44/"},{name:"v-61e7116b",path:"/pages/f062a7/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-61e7116b").then(t)}},{path:"/pages/f062a7/index.html",redirect:"/pages/f062a7/"},{path:"/04.Application/02.Git/01.修改已提交的commit的注释.html",redirect:"/pages/f062a7/"},{name:"v-23aba859",path:"/pages/076107/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-23aba859").then(t)}},{path:"/pages/076107/index.html",redirect:"/pages/076107/"},{path:"/04.Application/01.Nginx/01.常用lua命令.html",redirect:"/pages/076107/"},{name:"v-6aca16ca",path:"/pages/dfef00/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-6aca16ca").then(t)}},{path:"/pages/dfef00/index.html",redirect:"/pages/dfef00/"},{path:"/04.Application/02.Git/02.修改已提交的用户名与邮箱.html",redirect:"/pages/dfef00/"},{name:"v-7b1d014e",path:"/pages/9de1e8/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-7b1d014e").then(t)}},{path:"/pages/9de1e8/index.html",redirect:"/pages/9de1e8/"},{path:"/04.Application/02.Git/03.纯Git服务器搭载.html",redirect:"/pages/9de1e8/"},{name:"v-43867bf6",path:"/pages/d6f4bc/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-43867bf6").then(t)}},{path:"/pages/d6f4bc/index.html",redirect:"/pages/d6f4bc/"},{path:"/04.Application/03.Docker/01.常用docker命令.html",redirect:"/pages/d6f4bc/"},{name:"v-6d504496",path:"/pages/8a962d/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-6d504496").then(t)}},{path:"/pages/8a962d/index.html",redirect:"/pages/8a962d/"},{path:"/04.Application/03.Docker/02.使用docker构建前端项目.html",redirect:"/pages/8a962d/"},{name:"v-711c8354",path:"/pages/b2456e/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-711c8354").then(t)}},{path:"/pages/b2456e/index.html",redirect:"/pages/b2456e/"},{path:"/04.Application/03.Docker/03.导出docker镜像脚本.html",redirect:"/pages/b2456e/"},{name:"v-7485b39d",path:"/pages/182fb5/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-7485b39d").then(t)}},{path:"/pages/182fb5/index.html",redirect:"/pages/182fb5/"},{path:"/04.Application/04.Vue/01.常用Vue方法.html",redirect:"/pages/182fb5/"},{name:"v-47c092ae",path:"/pages/92cff2/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-47c092ae").then(t)}},{path:"/pages/92cff2/index.html",redirect:"/pages/92cff2/"},{path:"/04.Application/05.Macos/01.使用跳板机进行端口转发-插件版.html",redirect:"/pages/92cff2/"},{name:"v-0a28b68a",path:"/pages/d83da9/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-0a28b68a").then(t)}},{path:"/pages/d83da9/index.html",redirect:"/pages/d83da9/"},{path:"/04.Application/05.Macos/02.使用跳板机进行端口转发-自动化.html",redirect:"/pages/d83da9/"},{name:"v-fbc57f00",path:"/pages/a4c46d/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-fbc57f00").then(t)}},{path:"/pages/a4c46d/index.html",redirect:"/pages/a4c46d/"},{path:"/04.Application/05.Macos/03.常用功能.html",redirect:"/pages/a4c46d/"},{name:"v-9e01ea5e",path:"/pages/ae03ef/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-9e01ea5e").then(t)}},{path:"/pages/ae03ef/index.html",redirect:"/pages/ae03ef/"},{path:"/05.OpenSource/01.版本日志.html",redirect:"/pages/ae03ef/"},{name:"v-691d6731",path:"/pages/bf6444/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-691d6731").then(t)}},{path:"/pages/bf6444/index.html",redirect:"/pages/bf6444/"},{path:"/05.OpenSource/02.贡献清单.html",redirect:"/pages/bf6444/"},{name:"v-7ea07f46",path:"/pages/8e9dc3p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-7ea07f46").then(t)}},{path:"/pages/8e9dc3p24111/index.html",redirect:"/pages/8e9dc3p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/01.Simple-Starter概述.html",redirect:"/pages/8e9dc3p24111/"},{name:"v-732ec28a",path:"/pages/e96f70p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-732ec28a").then(t)}},{path:"/pages/e96f70p24111/index.html",redirect:"/pages/e96f70p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/01.simple-starter-web.html",redirect:"/pages/e96f70p24111/"},{name:"v-377bca40",path:"/pages/abc4e3p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-377bca40").then(t)}},{path:"/pages/abc4e3p24111/index.html",redirect:"/pages/abc4e3p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/02.simple-starter-redisson.html",redirect:"/pages/abc4e3p24111/"},{name:"v-932c3b68",path:"/pages/ea099ap24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-932c3b68").then(t)}},{path:"/pages/ea099ap24111/index.html",redirect:"/pages/ea099ap24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/03.simple-starter-s3.html",redirect:"/pages/ea099ap24111/"},{name:"v-9c5d01e8",path:"/pages/198071p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-9c5d01e8").then(t)}},{path:"/pages/198071p24111/index.html",redirect:"/pages/198071p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/05.simple-starter-grpc.html",redirect:"/pages/198071p24111/"},{name:"v-375cf838",path:"/pages/7ef54ap24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-375cf838").then(t)}},{path:"/pages/7ef54ap24111/index.html",redirect:"/pages/7ef54ap24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/07.simple-starter-freemarker.html",redirect:"/pages/7ef54ap24111/"},{name:"v-0c47adec",path:"/pages/8df481p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-0c47adec").then(t)}},{path:"/pages/8df481p24111/index.html",redirect:"/pages/8df481p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/08.simple-starter-cloud.html",redirect:"/pages/8df481p24111/"},{name:"v-39315c28",path:"/pages/9b689cp24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-39315c28").then(t)}},{path:"/pages/9b689cp24111/index.html",redirect:"/pages/9b689cp24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/10.simple-starter-dict.html",redirect:"/pages/9b689cp24111/"},{name:"v-76d740a4",path:"/pages/09cd4bp24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-76d740a4").then(t)}},{path:"/pages/09cd4bp24111/index.html",redirect:"/pages/09cd4bp24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/04.simple-starter-socket.html",redirect:"/pages/09cd4bp24111/"},{name:"v-83f6c6ac",path:"/pages/3e32b3p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-83f6c6ac").then(t)}},{path:"/pages/3e32b3p24111/index.html",redirect:"/pages/3e32b3p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/09.simple-starter-encrypt.html",redirect:"/pages/3e32b3p24111/"},{name:"v-3f884dac",path:"/pages/6c8e05p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-3f884dac").then(t)}},{path:"/pages/6c8e05p24111/index.html",redirect:"/pages/6c8e05p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/11.simple-starter-email.html",redirect:"/pages/6c8e05p24111/"},{name:"v-7ce56fec",path:"/pages/b688b7p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-7ce56fec").then(t)}},{path:"/pages/b688b7p24111/index.html",redirect:"/pages/b688b7p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/12.simple-starter-gateway.html",redirect:"/pages/b688b7p24111/"},{name:"v-4326dec4",path:"/pages/0f3b13p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-4326dec4").then(t)}},{path:"/pages/0f3b13p24111/index.html",redirect:"/pages/0f3b13p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/03.服务类模块/01.simple-base-config.html",redirect:"/pages/0f3b13p24111/"},{name:"v-7d058daa",path:"/pages/b666q2p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-7d058daa").then(t)}},{path:"/pages/b666q2p24111/index.html",redirect:"/pages/b666q2p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/13.simple-starter-package.html",redirect:"/pages/b666q2p24111/"},{name:"v-73a4ce36",path:"/pages/0e22dbp24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-73a4ce36").then(t)}},{path:"/pages/0e22dbp24111/index.html",redirect:"/pages/0e22dbp24111/"},{path:"/05.OpenSource/03.2024.1.1.1/03.服务类模块/03.simple-base-generator.html",redirect:"/pages/0e22dbp24111/"},{name:"v-38d8d3a2",path:"/pages/0a2b14p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-38d8d3a2").then(t)}},{path:"/pages/0a2b14p24111/index.html",redirect:"/pages/0a2b14p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/03.服务类模块/04.simple-base-dict.html",redirect:"/pages/0a2b14p24111/"},{name:"v-277d4a4a",path:"/pages/e7cd28p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-277d4a4a").then(t)}},{path:"/pages/e7cd28p24111/index.html",redirect:"/pages/e7cd28p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/03.服务类模块/02.simple-base-s3.html",redirect:"/pages/e7cd28p24111/"},{name:"v-5706f25f",path:"/pages/e023q8p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-5706f25f").then(t)}},{path:"/pages/e023q8p24111/index.html",redirect:"/pages/e023q8p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/04.工具类模块/01.simple-utils-common.html",redirect:"/pages/e023q8p24111/"},{name:"v-4fbe3236",path:"/pages/e01328p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-4fbe3236").then(t)}},{path:"/pages/e01328p24111/index.html",redirect:"/pages/e01328p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/04.工具类模块/02.simple-utils-jackson.html",redirect:"/pages/e01328p24111/"},{name:"v-eb7d4dc6",path:"/pages/8e9dc3p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-eb7d4dc6").then(t)}},{path:"/pages/8e9dc3p24110/index.html",redirect:"/pages/8e9dc3p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/01.Simple-Starter概述.html",redirect:"/pages/8e9dc3p24110/"},{name:"v-3a581e4a",path:"/pages/e96f70p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-3a581e4a").then(t)}},{path:"/pages/e96f70p24110/index.html",redirect:"/pages/e96f70p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/01.simple-starter-web.html",redirect:"/pages/e96f70p24110/"},{name:"v-25c6439c",path:"/pages/abc4e3p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-25c6439c").then(t)}},{path:"/pages/abc4e3p24110/index.html",redirect:"/pages/abc4e3p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/02.simple-starter-redisson.html",redirect:"/pages/abc4e3p24110/"},{name:"v-37f4b2f0",path:"/pages/ea099ap24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-37f4b2f0").then(t)}},{path:"/pages/ea099ap24110/index.html",redirect:"/pages/ea099ap24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/03.simple-starter-s3.html",redirect:"/pages/ea099ap24110/"},{name:"v-eb7c3040",path:"/pages/09cd4bp24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-eb7c3040").then(t)}},{path:"/pages/09cd4bp24110/index.html",redirect:"/pages/09cd4bp24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/04.simple-starter-socket.html",redirect:"/pages/09cd4bp24110/"},{name:"v-1f47f670",path:"/pages/198071p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-1f47f670").then(t)}},{path:"/pages/198071p24110/index.html",redirect:"/pages/198071p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/05.simple-starter-grpc.html",redirect:"/pages/198071p24110/"},{name:"v-a6708290",path:"/pages/646b79p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-a6708290").then(t)}},{path:"/pages/646b79p24110/index.html",redirect:"/pages/646b79p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/06.simple-starter-datasource.html",redirect:"/pages/646b79p24110/"},{name:"v-537c0274",path:"/pages/7ef54ap24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-537c0274").then(t)}},{path:"/pages/7ef54ap24110/index.html",redirect:"/pages/7ef54ap24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/07.simple-starter-freemarker.html",redirect:"/pages/7ef54ap24110/"},{name:"v-a693556c",path:"/pages/8df481p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-a693556c").then(t)}},{path:"/pages/8df481p24110/index.html",redirect:"/pages/8df481p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/08.simple-starter-cloud.html",redirect:"/pages/8df481p24110/"},{name:"v-7f6d8d2c",path:"/pages/3e32b3p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-7f6d8d2c").then(t)}},{path:"/pages/3e32b3p24110/index.html",redirect:"/pages/3e32b3p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/09.simple-starter-encrypt.html",redirect:"/pages/3e32b3p24110/"},{name:"v-77bbe1e4",path:"/pages/9b689cp24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-77bbe1e4").then(t)}},{path:"/pages/9b689cp24110/index.html",redirect:"/pages/9b689cp24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/10.simple-starter-dict.html",redirect:"/pages/9b689cp24110/"},{name:"v-d9d3f52c",path:"/pages/6c8e05p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-d9d3f52c").then(t)}},{path:"/pages/6c8e05p24110/index.html",redirect:"/pages/6c8e05p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/11.simple-starter-email.html",redirect:"/pages/6c8e05p24110/"},{name:"v-785c366c",path:"/pages/b688b7p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-785c366c").then(t)}},{path:"/pages/b688b7p24110/index.html",redirect:"/pages/b688b7p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/12.simple-starter-gateway.html",redirect:"/pages/b688b7p24110/"},{name:"v-7f4a2a6a",path:"/pages/b666q2p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-7f4a2a6a").then(t)}},{path:"/pages/b666q2p24110/index.html",redirect:"/pages/b666q2p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/02.自动装配模块/13.simple-starter-package.html",redirect:"/pages/b666q2p24110/"},{name:"v-3e789f00",path:"/pages/0f3b13p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-3e789f00").then(t)}},{path:"/pages/0f3b13p24110/index.html",redirect:"/pages/0f3b13p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/03.服务类模块/01.simple-base-config.html",redirect:"/pages/0f3b13p24110/"},{name:"v-2892a786",path:"/pages/e7cd28p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-2892a786").then(t)}},{path:"/pages/e7cd28p24110/index.html",redirect:"/pages/e7cd28p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/03.服务类模块/02.simple-base-s3.html",redirect:"/pages/e7cd28p24110/"},{name:"v-7ee18b14",path:"/pages/0e22dbp24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-7ee18b14").then(t)}},{path:"/pages/0e22dbp24110/index.html",redirect:"/pages/0e22dbp24110/"},{path:"/05.OpenSource/04.2024.1.1.0/03.服务类模块/03.simple-base-generator.html",redirect:"/pages/0e22dbp24110/"},{name:"v-79abb25e",path:"/pages/0a2b14p24110/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-79abb25e").then(t)}},{path:"/pages/0a2b14p24110/index.html",redirect:"/pages/0a2b14p24110/"},{path:"/05.OpenSource/04.2024.1.1.0/03.服务类模块/04.simple-base-dict.html",redirect:"/pages/0a2b14p24110/"},{name:"v-8cc8a7c4",path:"/about/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-8cc8a7c4").then(t)}},{path:"/about/index.html",redirect:"/about/"},{path:"/@pages/about.html",redirect:"/about/"},{name:"v-834a75d4",path:"/archives/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-834a75d4").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-47258ff6",path:"/categories/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-47258ff6").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-5066100e",path:"/friends/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-5066100e").then(t)}},{path:"/friends/index.html",redirect:"/friends/"},{path:"/@pages/friends.html",redirect:"/friends/"},{name:"v-35f74b96",path:"/tags/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-35f74b96").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-84b10022",path:"/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-84b10022").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-deae9708",path:"/pages/646b79p24111/",component:vl,beforeEnter:(n,e,t)=>{co("Layout","v-deae9708").then(t)}},{path:"/pages/646b79p24111/index.html",redirect:"/pages/646b79p24111/"},{path:"/05.OpenSource/03.2024.1.1.1/02.自动装配模块/06.simple-starter-datasource.html",redirect:"/pages/646b79p24111/"},{path:"*",component:vl}],yl={title:"",description:"",base:"/",headTags:[["link",{rel:"icon",href:"/img/20230310/logo.3mn8xlqm9oy0.webp"}],["meta",{name:"keywords",content:"小渔村的板砖师傅"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"Java",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"01.Java"}},title:"Java",date:"2023-03-14T14:35:02.000Z",permalink:"/note/java",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/01.Java.html",relativePath:"00.目录页/01.Java.md",key:"v-05d47c11",path:"/note/java/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/14, 06:48:18",lastUpdatedTimestamp:1678776498e3},{title:"Linux",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"02.Linux"}},title:"Linux",date:"2023-03-14T14:35:02.000Z",permalink:"/note/linux",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/02.Linux.html",relativePath:"00.目录页/02.Linux.md",key:"v-8a64b0f2",path:"/note/linux/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/14, 06:48:18",lastUpdatedTimestamp:1678776498e3},{title:"Deploy",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"03.Deploy"}},title:"Deploy",date:"2023-03-14T14:35:02.000Z",permalink:"/note/deploy",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/03.Deploy.html",relativePath:"00.目录页/03.Deploy.md",key:"v-e85a60ea",path:"/note/deploy/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/14, 06:48:18",lastUpdatedTimestamp:1678776498e3},{title:"Application",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"04.Application"}},title:"Application",date:"2023-03-14T14:35:02.000Z",permalink:"/note/application",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/04.Application.html",relativePath:"00.目录页/04.Application.md",key:"v-6bda9dc7",path:"/note/application/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/14, 06:48:18",lastUpdatedTimestamp:1678776498e3},{title:"Springboot集成redis",frontmatter:{title:"Springboot集成redis",date:"2023-03-10T15:30:26.000Z",permalink:"/pages/cc9343/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/01.Springboot%E9%9B%86%E6%88%90redis.html",relativePath:"01.Java/01.Springboot集成redis.md",key:"v-4c2c6fed",path:"/pages/cc9343/",headers:[{level:2,title:"pom文件",slug:"pom文件",normalizedTitle:"pom文件",charIndex:2},{level:2,title:"yml文件",slug:"yml文件",normalizedTitle:"yml文件",charIndex:176},{level:2,title:"代码使用",slug:"代码使用",normalizedTitle:"代码使用",charIndex:420},{level:3,title:"String类型：",slug:"string类型",normalizedTitle:"string类型：",charIndex:429},{level:3,title:"Object类型：",slug:"object类型",normalizedTitle:"object类型：",charIndex:715}],headersStr:"pom文件 yml文件 代码使用 String类型： Object类型：",content:'# pom文件\n\n<dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# yml文件\n\nspring:\n  redis:\n    database: 0\n    port: 6379\n    pool:\n      max-idle: 8\n      min-idle: 0\n      max-active: 8\n      max-wait: -1\n    host: 192.168.213.213\n    password: redismima123\n    timeout: 100\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 代码使用\n\n\n# String类型：\n\npublic class imclass {\n  @Autowired\n  private StringRedisTemplate Redis;\n  public String test(String rawPass) {\n    //存储\n    Redis.opsForValue().set(key, value, 1800,TimeUnit.SECONDS);\n    //取值\n    String str = Redis.opsForValue().get(key);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# Object类型：\n\npublic class imclass {\n  @Autowired\n  private RedisTemplate<String, Object> redisTemplate;\n  public String test(String rawPass) {\n    //存储\n    Map<String,Object> params = new HashMap<>();\n    params.put("accountId", "2");\n    params.put("limit", 1);\n    List<EvrAlarm> evrAlarms=evrAlarmDao.selectEvrAlarmByAccount(params);\n\n    //redis缓存\n    ListOperations<String, Object> lo =  redisTemplate.opsForList();\n    lo.rightPush("EvrAlarm-2", evrAlarms);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n',normalizedContent:'# pom文件\n\n<dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-data-redis</artifactid>\n </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# yml文件\n\nspring:\n  redis:\n    database: 0\n    port: 6379\n    pool:\n      max-idle: 8\n      min-idle: 0\n      max-active: 8\n      max-wait: -1\n    host: 192.168.213.213\n    password: redismima123\n    timeout: 100\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 代码使用\n\n\n# string类型：\n\npublic class imclass {\n  @autowired\n  private stringredistemplate redis;\n  public string test(string rawpass) {\n    //存储\n    redis.opsforvalue().set(key, value, 1800,timeunit.seconds);\n    //取值\n    string str = redis.opsforvalue().get(key);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# object类型：\n\npublic class imclass {\n  @autowired\n  private redistemplate<string, object> redistemplate;\n  public string test(string rawpass) {\n    //存储\n    map<string,object> params = new hashmap<>();\n    params.put("accountid", "2");\n    params.put("limit", 1);\n    list<evralarm> evralarms=evralarmdao.selectevralarmbyaccount(params);\n\n    //redis缓存\n    listoperations<string, object> lo =  redistemplate.opsforlist();\n    lo.rightpush("evralarm-2", evralarms);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n',charsets:{cjk:!0},lastUpdated:"2023/03/10, 09:02:56",lastUpdatedTimestamp:1678438976e3},{title:"Springboot集成mongodb",frontmatter:{title:"Springboot集成mongodb",date:"2023-03-10T15:34:00.000Z",permalink:"/pages/79082f/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/02.Springboot%E9%9B%86%E6%88%90mongodb.html",relativePath:"01.Java/02.Springboot集成mongodb.md",key:"v-4c9766fd",path:"/pages/79082f/",headers:[{level:2,title:"pom文件",slug:"pom文件",normalizedTitle:"pom文件",charIndex:2},{level:2,title:"yml文件",slug:"yml文件",normalizedTitle:"yml文件",charIndex:161},{level:2,title:"代码使用",slug:"代码使用",normalizedTitle:"代码使用",charIndex:386},{level:3,title:"增加MgTemplate的Class文件",slug:"增加mgtemplate的class文件",normalizedTitle:"增加mgtemplate的class文件",charIndex:395},{level:3,title:"在使用类中引用-插入数据",slug:"在使用类中引用-插入数据",normalizedTitle:"在使用类中引用-插入数据",charIndex:1424},{level:3,title:"在使用类中引用-查找数据",slug:"在使用类中引用-查找数据",normalizedTitle:"在使用类中引用-查找数据",charIndex:1866},{level:4,title:"创建实体类",slug:"创建实体类",normalizedTitle:"创建实体类",charIndex:1882},{level:4,title:"在使用类中使用",slug:"在使用类中使用",normalizedTitle:"在使用类中使用",charIndex:2656}],headersStr:"pom文件 yml文件 代码使用 增加MgTemplate的Class文件 在使用类中引用-插入数据 在使用类中引用-查找数据 创建实体类 在使用类中使用",content:'# pom文件\n\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-mongodb</artifactId>\n</dependency>\n\n\n1\n2\n3\n4\n\n\n\n# yml文件\n\nspring:\n  data:\n    mongodb:\n      database: imgdb\n      repositories:\n        enabled: true\n      port: 27017\n      host: 192.168.213.213\n      username: iadmin\n      password: iadmin27017\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 代码使用\n\n\n# 增加MgTemplate的Class文件\n\npackage cn.ok96.common;\n \nimport org.bson.Document;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.stereotype.Component;\n \nimport com.mongodb.client.MongoCollection;\n \n@Component("mgTemplate")  \npublic class MgTemplate {  \n  \n    @Autowired  \n    private MongoTemplate mongoTemplate;  \n \n   /**\n     * 添加数据\n     * @param collectionName\n     * @return\n     */\n    public MongoCollection<Document> getCollection(String collectionName) {  \n        return mongoTemplate.getCollection(collectionName);  \n    }  \n  \n    /**\n     *\n     * 查找数据\n     * @param imageId\n     * @return Image实体类\n     */\n    public Image findOne(String imageId) {  \n     Query query = new Query()\n              .addCriteria(Criteria.where("imgId").is(imageId));\n        return mongoTemplate.findOne(query, Image.class);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# 在使用类中引用-插入数据\n\npublic class imclass {\n  @Autowired\n  private MgTemplate mgTemplate;\n  public String test(String rawPass) {\n    String id = new ObjectId().toString();\n    Document document = new Document();  \n    document.put("img","dasdasd");  \n    document.put("imgId", id);  \n    document.put("createTime", DateUtil.forFull(new Date()));  \n    mgTemplate.getCollection("imgInfo").insertOne(document);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 在使用类中引用-查找数据\n\n# 创建实体类\n\npackage cn.ok96.model;\n \nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\n \nimport lombok.Data;\n \n@Data\n@Document(collection = "imgInfo")\npublic class Image {\n \n  private String imgId;\n  private String img;\n  private String createTime;\n  public String getImgId() {\n    return imgId;\n  }\n  public void setImgId(String imgId) {\n    this.imgId = imgId;\n  }\n  public String getImg() {\n    return img;\n  }\n  public void setImg(String img) {\n    this.img = img;\n  }\n  public String getCreateTime() {\n    return createTime;\n  }\n  public void setCreateTime(String createTime) {\n    this.createTime = createTime;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n# 在使用类中使用\n\npublic class imclass {\n  @Autowired\n  private MgTemplate mgTemplate;\n\n  @Override\n  public String getFaceForMongo(String id) {\n    Image face=mgTemplate.findOne(id);\n    return face.getImg();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',normalizedContent:'# pom文件\n\n<dependency>\n    <groupid>org.springframework.boot</groupid>\n    <artifactid>spring-boot-starter-data-mongodb</artifactid>\n</dependency>\n\n\n1\n2\n3\n4\n\n\n\n# yml文件\n\nspring:\n  data:\n    mongodb:\n      database: imgdb\n      repositories:\n        enabled: true\n      port: 27017\n      host: 192.168.213.213\n      username: iadmin\n      password: iadmin27017\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 代码使用\n\n\n# 增加mgtemplate的class文件\n\npackage cn.ok96.common;\n \nimport org.bson.document;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.data.mongodb.core.mongotemplate;\nimport org.springframework.stereotype.component;\n \nimport com.mongodb.client.mongocollection;\n \n@component("mgtemplate")  \npublic class mgtemplate {  \n  \n    @autowired  \n    private mongotemplate mongotemplate;  \n \n   /**\n     * 添加数据\n     * @param collectionname\n     * @return\n     */\n    public mongocollection<document> getcollection(string collectionname) {  \n        return mongotemplate.getcollection(collectionname);  \n    }  \n  \n    /**\n     *\n     * 查找数据\n     * @param imageid\n     * @return image实体类\n     */\n    public image findone(string imageid) {  \n     query query = new query()\n              .addcriteria(criteria.where("imgid").is(imageid));\n        return mongotemplate.findone(query, image.class);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\n\n# 在使用类中引用-插入数据\n\npublic class imclass {\n  @autowired\n  private mgtemplate mgtemplate;\n  public string test(string rawpass) {\n    string id = new objectid().tostring();\n    document document = new document();  \n    document.put("img","dasdasd");  \n    document.put("imgid", id);  \n    document.put("createtime", dateutil.forfull(new date()));  \n    mgtemplate.getcollection("imginfo").insertone(document);\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 在使用类中引用-查找数据\n\n# 创建实体类\n\npackage cn.ok96.model;\n \nimport org.springframework.data.annotation.id;\nimport org.springframework.data.mongodb.core.mapping.document;\n \nimport lombok.data;\n \n@data\n@document(collection = "imginfo")\npublic class image {\n \n  private string imgid;\n  private string img;\n  private string createtime;\n  public string getimgid() {\n    return imgid;\n  }\n  public void setimgid(string imgid) {\n    this.imgid = imgid;\n  }\n  public string getimg() {\n    return img;\n  }\n  public void setimg(string img) {\n    this.img = img;\n  }\n  public string getcreatetime() {\n    return createtime;\n  }\n  public void setcreatetime(string createtime) {\n    this.createtime = createtime;\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n# 在使用类中使用\n\npublic class imclass {\n  @autowired\n  private mgtemplate mgtemplate;\n\n  @override\n  public string getfaceformongo(string id) {\n    image face=mgtemplate.findone(id);\n    return face.getimg();\n  }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',charsets:{cjk:!0},lastUpdated:"2023/03/10, 09:02:56",lastUpdatedTimestamp:1678438976e3},{title:"Springboot集成FastDFS",frontmatter:{title:"Springboot集成FastDFS",date:"2023-03-13T09:31:32.000Z",permalink:"/pages/b7c561/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/03.Springboot%E9%9B%86%E6%88%90FastDFS.html",relativePath:"01.Java/03.Springboot集成FastDFS.md",key:"v-45f36e96",path:"/pages/b7c561/",headers:[{level:2,title:"pom文件",slug:"pom文件",normalizedTitle:"pom文件",charIndex:2},{level:2,title:"yml文件",slug:"yml文件",normalizedTitle:"yml文件",charIndex:207},{level:2,title:"代码使用",slug:"代码使用",normalizedTitle:"代码使用",charIndex:829},{level:3,title:"增加工具类FastDFSClient",slug:"增加工具类fastdfsclient",normalizedTitle:"增加工具类fastdfsclient",charIndex:838},{level:3,title:"在使用类中引用",slug:"在使用类中引用",normalizedTitle:"在使用类中引用",charIndex:6567},{level:3,title:"在启动类中增加",slug:"在启动类中增加",normalizedTitle:"在启动类中增加",charIndex:6784}],headersStr:"pom文件 yml文件 代码使用 增加工具类FastDFSClient 在使用类中引用 在启动类中增加",content:'# pom文件\n\n       <dependency>\n            <groupId>com.github.tobato</groupId>\n            <artifactId>fastdfs-client</artifactId>\n            <version>1.26.2</version>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# yml文件\n\nfdfs:\n  # socket连接超时时长\n  soTimeout: 1500\n  # 连接tracker服务器超时时长\n  connectTimeout: 600\n  pool:\n    # 从池中借出的对象的最大数目\n    max-total: 15300\n    # 获取连接时的最大等待毫秒数100\n    max-wait-millis: 10002\n  # 缩略图生成参数，可选\n  thumbImage:\n    width: 150\n    height: 150\n  # 跟踪服务器tracker_server请求地址,支持多个，这里只有一个，如果有多个在下方加- x.x.x.x:port\n  trackerList:\n    - 192.168.213.213:22122\n  #\n  # 存储服务器storage_server访问地址\n  web-server-url: http://iii.club:8888/\n  spring:\n    http:\n      multipart:\n        max-file-size: 100MB # 最大支持文件大小\n        max-request-size: 100MB # 最大支持请求大小\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 代码使用\n\n\n# 增加工具类FastDFSClient\n\n\nimport com.github.tobato.fastdfs.conn.FdfsWebServer;\nimport com.github.tobato.fastdfs.domain.StorePath;\nimport com.github.tobato.fastdfs.proto.storage.DownloadByteArray;\nimport com.github.tobato.fastdfs.service.FastFileStorageClient;\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.multipart.MultipartFile;\nimport java.io.*;\n \n@Component\npublic class FastDFSClient {\n \n    private static Logger log =LoggerFactory.getLogger(FastDFSClient.class);\n \n    private static FastFileStorageClient fastFileStorageClient;\n \n    private static FdfsWebServer fdfsWebServer;\n \n    @Autowired\n    public void setFastDFSClient(FastFileStorageClient fastFileStorageClient, FdfsWebServer fdfsWebServer) {\n        FastDFSClient.fastFileStorageClient = fastFileStorageClient;\n        FastDFSClient.fdfsWebServer = fdfsWebServer;\n    }\n \n    /**\n     * @param multipartFile 文件对象\n     * @return 返回文件地址\n     * @author qbanxiaoli\n     * @description 上传文件\n     */\n    public static String uploadFile(MultipartFile multipartFile) {\n        try {\n            StorePath storePath = fastFileStorageClient.uploadFile(multipartFile.getInputStream(), multipartFile.getSize(), FilenameUtils.getExtension(multipartFile.getOriginalFilename()), null);\n            return storePath.getFullPath();\n        } catch (IOException e) {\n            log.error(e.getMessage());\n            return null;\n        }\n    }\n \n    /**\n     * @param multipartFile 图片对象\n     * @return 返回图片地址\n     * @author qbanxiaoli\n     * @description 上传缩略图\n     */\n    public static String uploadImageAndCrtThumbImage(MultipartFile multipartFile) {\n        try {\n            StorePath storePath = fastFileStorageClient.uploadImageAndCrtThumbImage(multipartFile.getInputStream(), multipartFile.getSize(), FilenameUtils.getExtension(multipartFile.getOriginalFilename()), null);\n            return storePath.getFullPath();\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return null;\n        }\n    }\n \n    /**\n     * @param file 文件对象\n     * @return 返回文件地址\n     * @author qbanxiaoli\n     * @description 上传文件\n     */\n    public static String uploadFile(File file) {\n        try {\n            FileInputStream inputStream = new FileInputStream(file);\n            StorePath storePath = fastFileStorageClient.uploadFile(inputStream, file.length(), FilenameUtils.getExtension(file.getName()), null);\n            return storePath.getFullPath();\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return null;\n        }\n    }\n \n    /**\n     * @param file 图片对象\n     * @return 返回图片地址\n     * @author qbanxiaoli\n     * @description 上传缩略图\n     */\n    public static String uploadImageAndCrtThumbImage(File file) {\n        try {\n            FileInputStream inputStream = new FileInputStream(file);\n            StorePath storePath = fastFileStorageClient.uploadImageAndCrtThumbImage(inputStream, file.length(), FilenameUtils.getExtension(file.getName()), null);\n            return storePath.getFullPath();\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return null;\n        }\n    }\n \n    /**\n     * @param bytes         byte数组\n     * @param fileExtension 文件扩展名\n     * @return 返回文件地址\n     * @author qbanxiaoli\n     * @description 将byte数组生成一个文件上传\n     */\n    public static String uploadFile(byte[] bytes, String fileExtension) {\n        ByteArrayInputStream stream = new ByteArrayInputStream(bytes);\n        StorePath storePath = fastFileStorageClient.uploadFile(stream, bytes.length, fileExtension, null);\n        return storePath.getFullPath();\n    }\n \n    /**\n     * @param fileUrl 文件访问地址\n     * @param file    文件保存路径\n     * @author qbanxiaoli\n     * @description 下载文件\n     */\n    public static boolean downloadFile(String fileUrl, File file) {\n        try {\n            StorePath storePath = StorePath.praseFromUrl(fileUrl);\n            byte[] bytes = fastFileStorageClient.downloadFile(storePath.getGroup(), storePath.getPath(), new DownloadByteArray());\n            FileOutputStream stream = new FileOutputStream(file);\n            stream.write(bytes);\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return false;\n        }\n        return true;\n    }\n \n    /**\n     * @param fileUrl 文件访问地址\n     * @author qbanxiaoli\n     * @description 删除文件\n     */\n    public static boolean deleteFile(String fileUrl) {\n        if (StringUtils.isEmpty(fileUrl)) {\n            return false;\n        }\n        try {\n            StorePath storePath = StorePath.praseFromUrl(fileUrl);\n            fastFileStorageClient.deleteFile(storePath.getGroup(), storePath.getPath());\n        } catch (Exception e) {\n            log.error(e.getMessage());\n            return false;\n        }\n        return true;\n    }\n \n    // 封装文件完整URL地址\n    public static String getResAccessUrl(String path) {\n        String url = fdfsWebServer.getWebServerUrl() + path;\n        log.info("上传文件地址为：\\n" + url);\n        return url;\n    }\n \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n\n\n\n# 在使用类中引用\n\n    public String upload(MultipartFile multipartFile, String fileName) {\n        \n        \n        String str = FastDFSClient.uploadFile(multipartFile);\n    \n        return str;\n\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 在启动类中增加\n\n@Import(FdfsClientConfig.class)\n@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)\n\n\n1\n2\n\n\neg.\n\n@SpringBootApplication\n@MapperScan("com.wip.dao")\n@Import(FdfsClientConfig.class)\n@EnableMBeanExport(registration = RegistrationPolicy.IGNORE_EXISTING)\n//@EnableCaching\npublic class MyBlogApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(MyBlogApplication.class, args);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',normalizedContent:'# pom文件\n\n       <dependency>\n            <groupid>com.github.tobato</groupid>\n            <artifactid>fastdfs-client</artifactid>\n            <version>1.26.2</version>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n\n\n\n# yml文件\n\nfdfs:\n  # socket连接超时时长\n  sotimeout: 1500\n  # 连接tracker服务器超时时长\n  connecttimeout: 600\n  pool:\n    # 从池中借出的对象的最大数目\n    max-total: 15300\n    # 获取连接时的最大等待毫秒数100\n    max-wait-millis: 10002\n  # 缩略图生成参数，可选\n  thumbimage:\n    width: 150\n    height: 150\n  # 跟踪服务器tracker_server请求地址,支持多个，这里只有一个，如果有多个在下方加- x.x.x.x:port\n  trackerlist:\n    - 192.168.213.213:22122\n  #\n  # 存储服务器storage_server访问地址\n  web-server-url: http://iii.club:8888/\n  spring:\n    http:\n      multipart:\n        max-file-size: 100mb # 最大支持文件大小\n        max-request-size: 100mb # 最大支持请求大小\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 代码使用\n\n\n# 增加工具类fastdfsclient\n\n\nimport com.github.tobato.fastdfs.conn.fdfswebserver;\nimport com.github.tobato.fastdfs.domain.storepath;\nimport com.github.tobato.fastdfs.proto.storage.downloadbytearray;\nimport com.github.tobato.fastdfs.service.fastfilestorageclient;\nimport org.apache.commons.io.filenameutils;\nimport org.apache.commons.lang3.stringutils;\nimport org.slf4j.logger;\nimport org.slf4j.loggerfactory;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.stereotype.component;\nimport org.springframework.web.multipart.multipartfile;\nimport java.io.*;\n \n@component\npublic class fastdfsclient {\n \n    private static logger log =loggerfactory.getlogger(fastdfsclient.class);\n \n    private static fastfilestorageclient fastfilestorageclient;\n \n    private static fdfswebserver fdfswebserver;\n \n    @autowired\n    public void setfastdfsclient(fastfilestorageclient fastfilestorageclient, fdfswebserver fdfswebserver) {\n        fastdfsclient.fastfilestorageclient = fastfilestorageclient;\n        fastdfsclient.fdfswebserver = fdfswebserver;\n    }\n \n    /**\n     * @param multipartfile 文件对象\n     * @return 返回文件地址\n     * @author qbanxiaoli\n     * @description 上传文件\n     */\n    public static string uploadfile(multipartfile multipartfile) {\n        try {\n            storepath storepath = fastfilestorageclient.uploadfile(multipartfile.getinputstream(), multipartfile.getsize(), filenameutils.getextension(multipartfile.getoriginalfilename()), null);\n            return storepath.getfullpath();\n        } catch (ioexception e) {\n            log.error(e.getmessage());\n            return null;\n        }\n    }\n \n    /**\n     * @param multipartfile 图片对象\n     * @return 返回图片地址\n     * @author qbanxiaoli\n     * @description 上传缩略图\n     */\n    public static string uploadimageandcrtthumbimage(multipartfile multipartfile) {\n        try {\n            storepath storepath = fastfilestorageclient.uploadimageandcrtthumbimage(multipartfile.getinputstream(), multipartfile.getsize(), filenameutils.getextension(multipartfile.getoriginalfilename()), null);\n            return storepath.getfullpath();\n        } catch (exception e) {\n            log.error(e.getmessage());\n            return null;\n        }\n    }\n \n    /**\n     * @param file 文件对象\n     * @return 返回文件地址\n     * @author qbanxiaoli\n     * @description 上传文件\n     */\n    public static string uploadfile(file file) {\n        try {\n            fileinputstream inputstream = new fileinputstream(file);\n            storepath storepath = fastfilestorageclient.uploadfile(inputstream, file.length(), filenameutils.getextension(file.getname()), null);\n            return storepath.getfullpath();\n        } catch (exception e) {\n            log.error(e.getmessage());\n            return null;\n        }\n    }\n \n    /**\n     * @param file 图片对象\n     * @return 返回图片地址\n     * @author qbanxiaoli\n     * @description 上传缩略图\n     */\n    public static string uploadimageandcrtthumbimage(file file) {\n        try {\n            fileinputstream inputstream = new fileinputstream(file);\n            storepath storepath = fastfilestorageclient.uploadimageandcrtthumbimage(inputstream, file.length(), filenameutils.getextension(file.getname()), null);\n            return storepath.getfullpath();\n        } catch (exception e) {\n            log.error(e.getmessage());\n            return null;\n        }\n    }\n \n    /**\n     * @param bytes         byte数组\n     * @param fileextension 文件扩展名\n     * @return 返回文件地址\n     * @author qbanxiaoli\n     * @description 将byte数组生成一个文件上传\n     */\n    public static string uploadfile(byte[] bytes, string fileextension) {\n        bytearrayinputstream stream = new bytearrayinputstream(bytes);\n        storepath storepath = fastfilestorageclient.uploadfile(stream, bytes.length, fileextension, null);\n        return storepath.getfullpath();\n    }\n \n    /**\n     * @param fileurl 文件访问地址\n     * @param file    文件保存路径\n     * @author qbanxiaoli\n     * @description 下载文件\n     */\n    public static boolean downloadfile(string fileurl, file file) {\n        try {\n            storepath storepath = storepath.prasefromurl(fileurl);\n            byte[] bytes = fastfilestorageclient.downloadfile(storepath.getgroup(), storepath.getpath(), new downloadbytearray());\n            fileoutputstream stream = new fileoutputstream(file);\n            stream.write(bytes);\n        } catch (exception e) {\n            log.error(e.getmessage());\n            return false;\n        }\n        return true;\n    }\n \n    /**\n     * @param fileurl 文件访问地址\n     * @author qbanxiaoli\n     * @description 删除文件\n     */\n    public static boolean deletefile(string fileurl) {\n        if (stringutils.isempty(fileurl)) {\n            return false;\n        }\n        try {\n            storepath storepath = storepath.prasefromurl(fileurl);\n            fastfilestorageclient.deletefile(storepath.getgroup(), storepath.getpath());\n        } catch (exception e) {\n            log.error(e.getmessage());\n            return false;\n        }\n        return true;\n    }\n \n    // 封装文件完整url地址\n    public static string getresaccessurl(string path) {\n        string url = fdfswebserver.getwebserverurl() + path;\n        log.info("上传文件地址为：\\n" + url);\n        return url;\n    }\n \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n\n\n\n# 在使用类中引用\n\n    public string upload(multipartfile multipartfile, string filename) {\n        \n        \n        string str = fastdfsclient.uploadfile(multipartfile);\n    \n        return str;\n\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 在启动类中增加\n\n@import(fdfsclientconfig.class)\n@enablembeanexport(registration = registrationpolicy.ignore_existing)\n\n\n1\n2\n\n\neg.\n\n@springbootapplication\n@mapperscan("com.wip.dao")\n@import(fdfsclientconfig.class)\n@enablembeanexport(registration = registrationpolicy.ignore_existing)\n//@enablecaching\npublic class myblogapplication {\n\n    public static void main(string[] args) {\n        springapplication.run(myblogapplication.class, args);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',charsets:{cjk:!0},lastUpdated:"2023/03/13, 02:56:26",lastUpdatedTimestamp:1678676186e3},{title:"Springboot集成WebSocket",frontmatter:{title:"Springboot集成WebSocket",date:"2023-03-13T09:33:59.000Z",permalink:"/pages/054331/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/04.Springboot%E9%9B%86%E6%88%90WebSocket.html",relativePath:"01.Java/04.Springboot集成WebSocket.md",key:"v-3c716be2",path:"/pages/054331/",headers:[{level:2,title:"pom文件",slug:"pom文件",normalizedTitle:"pom文件",charIndex:2},{level:2,title:"java文件",slug:"java文件",normalizedTitle:"java文件",charIndex:189},{level:3,title:"启用WebSocket",slug:"启用websocket",normalizedTitle:"启用websocket",charIndex:200},{level:3,title:"增加工具类WebSocketServer",slug:"增加工具类websocketserver",normalizedTitle:"增加工具类websocketserver",charIndex:632},{level:3,title:"消息推送",slug:"消息推送",normalizedTitle:"消息推送",charIndex:4317},{level:3,title:"页面发起socket请求",slug:"页面发起socket请求",normalizedTitle:"页面发起socket请求",charIndex:4924}],headersStr:"pom文件 java文件 启用WebSocket 增加工具类WebSocketServer 消息推送 页面发起socket请求",content:'# pom文件\n\n    <dependency>  \n           <groupId>org.springframework.boot</groupId>  \n           <artifactId>spring-boot-starter-websocket</artifactId>  \n       </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# java文件\n\n\n# 启用WebSocket\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.socket.server.standard.ServerEndpointExporter;\n\n@Configuration  \npublic class WebSocketConfig {  \n    \n    @Bean  \n    public ServerEndpointExporter serverEndpointExporter() {  \n        return new ServerEndpointExporter();  \n    }  \n  \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 增加工具类WebSocketServer\n\nimport java.io.IOException;\nimport java.util.concurrent.CopyOnWriteArraySet;\n\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport org.springframework.stereotype.Component;\nimport cn.hutool.log.Log;\nimport cn.hutool.log.LogFactory;\nimport lombok.extern.slf4j.Slf4j;\n\n\n@ServerEndpoint("/websocket/{sid}")\n@Component\npublic class WebSocketServer {\n    \n    static Log log=LogFactory.get(WebSocketServer.class);\n    //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。\n    private static int onlineCount = 0;\n    //concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。\n    private static CopyOnWriteArraySet<WebSocketServer> webSocketSet = new CopyOnWriteArraySet<WebSocketServer>();\n\n    //与某个客户端的连接会话，需要通过它来给客户端发送数据\n    private Session session;\n\n    //接收sid\n    private String sid="";\n    /**\n     * 连接建立成功调用的方法*/\n    @OnOpen\n    public void onOpen(Session session,@PathParam("sid") String sid) {\n        this.session = session;\n        webSocketSet.add(this);     //加入set中\n        addOnlineCount();           //在线数加1\n        log.info("有新窗口开始监听:"+sid+",当前在线人数为" + getOnlineCount());\n        this.sid=sid;\n        try {\n             sendMessage("连接成功");\n        } catch (IOException e) {\n            log.error("websocket IO异常");\n        }\n    }\n\n    /**\n     * 连接关闭调用的方法\n     */\n    @OnClose\n    public void onClose() {\n        webSocketSet.remove(this);  //从set中删除\n        subOnlineCount();           //在线数减1\n        log.info("有一连接关闭！当前在线人数为" + getOnlineCount());\n    }\n\n    /**\n     * 收到客户端消息后调用的方法\n     *\n     * @param message 客户端发送过来的消息*/\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        log.info("收到来自窗口"+sid+"的信息:"+message);\n        //群发消息\n        for (WebSocketServer item : webSocketSet) {\n            try {\n                item.sendMessage(message);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * \n     * @param session\n     * @param error\n     */\n    @OnError\n    public void onError(Session session, Throwable error) {\n        log.error("发生错误");\n        error.printStackTrace();\n    }\n    /**\n     * 实现服务器主动推送\n     */\n    public void sendMessage(String message) throws IOException {\n        this.session.getBasicRemote().sendText(message);\n    }\n\n\n    /**\n     * 群发自定义消息\n     * */\n    public static void sendInfo(String message,@PathParam("sid") String sid) throws IOException {\n        log.info("推送消息到窗口"+sid+"，推送内容:"+message);\n        for (WebSocketServer item : webSocketSet) {\n            try {\n                //这里可以设定只推送给这个sid的，为null则全部推送\n                if(sid==null) {\n                    item.sendMessage(message);\n                }else if(item.sid.equals(sid)){\n                    item.sendMessage(message);\n                }\n            } catch (IOException e) {\n                continue;\n            }\n        }\n    }\n\n    public static synchronized int getOnlineCount() {\n        return onlineCount;\n    }\n\n    public static synchronized void addOnlineCount() {\n        WebSocketServer.onlineCount++;\n    }\n\n    public static synchronized void subOnlineCount() {\n        WebSocketServer.onlineCount--;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n\n\n\n# 消息推送\n\n推送新信息，可以再自己的Controller写个方法调用WebSocketServer.sendInfo();即可\n\n@Controller\n@RequestMapping("/checkcenter")\npublic class CheckCenterController {\n    //推送数据接口\n    @ResponseBody\n    @RequestMapping("/socket/push/{cid}")\n    public ApiReturnObject pushToWeb(@PathVariable String cid,String message) {  \n        try {\n            WebSocketServer.sendInfo(message,cid);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return ApiReturnUtil.error(cid+"#"+e.getMessage());\n        }  \n        return ApiReturnUtil.success(cid);\n    } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 页面发起socket请求\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <title>webSocketTest客户端</title>\n</head>\n\n<body>\n    \n        <h4>客户端输入：</h4>\n        <textarea id = "message" name="message" style="width: 200px;height: 100px"></textarea>\n        <br/>\n        <input type="button" value="发送到服务器" onclick="sendMessage()" />\n    \n \n        <h4>服务器返回消息：</h4>\n        <textarea id = "responseText" name="message" style="width: 1100px;height: 100px"></textarea>\n        <br/>\n        <input type="button" οnclick="javascript:document.getElementById(\'responseText\').value=\'\'" value="clear data">\n <script type="text/javascript">\n    function send(){\n        alert(2);\n    }\n    var webSocket;\n    if(window.WebSocket){\n        webSocket = new WebSocket("ws://localhost:21270/websocket/1");\n        //客户端收到服务器的方法，这个方法就会被回调\n        webSocket.onmessage = function (ev) {\n        \n            var contents = document.getElementById("responseText");\n            contents.value = contents.value +"\\n"+ ev.data;\n        }\n \n        webSocket.onopen = function (ev) {\n            var contents = document.getElementById("responseText");\n            contents.value = "与服务器端的websocket连接建立";\n            \n            var data = \'{"method":"init","identifier":"11VKF7M0020199"}\';\n            \n            webSocket.send(data);\n        }\n        webSocket.onclose = function (ev) {\n            \n            var contents = document.getElementById("responseText");\n            contents.value =  contents.value +"\\n"+ "与服务器端的websocket连接断开";\n        }\n    }else{\n        alert("该环境不支持websocket")\n    }\n \n    function sendMessage() {\n        //alert(document.getElementById("message").value);\n        if(window.webSocket){\n            if(webSocket.readyState == WebSocket.OPEN){\n                \n                webSocket.send(document.getElementById("message").value);\n            }else{\n                alert("与服务器连接尚未建立")\n            }\n        }\n    }\n    \n    \n<\/script>   \n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n',normalizedContent:'# pom文件\n\n    <dependency>  \n           <groupid>org.springframework.boot</groupid>  \n           <artifactid>spring-boot-starter-websocket</artifactid>  \n       </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# java文件\n\n\n# 启用websocket\n\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.web.socket.server.standard.serverendpointexporter;\n\n@configuration  \npublic class websocketconfig {  \n    \n    @bean  \n    public serverendpointexporter serverendpointexporter() {  \n        return new serverendpointexporter();  \n    }  \n  \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 增加工具类websocketserver\n\nimport java.io.ioexception;\nimport java.util.concurrent.copyonwritearrayset;\n\nimport javax.websocket.onclose;\nimport javax.websocket.onerror;\nimport javax.websocket.onmessage;\nimport javax.websocket.onopen;\nimport javax.websocket.session;\nimport javax.websocket.server.serverendpoint;\nimport org.springframework.stereotype.component;\nimport cn.hutool.log.log;\nimport cn.hutool.log.logfactory;\nimport lombok.extern.slf4j.slf4j;\n\n\n@serverendpoint("/websocket/{sid}")\n@component\npublic class websocketserver {\n    \n    static log log=logfactory.get(websocketserver.class);\n    //静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。\n    private static int onlinecount = 0;\n    //concurrent包的线程安全set，用来存放每个客户端对应的mywebsocket对象。\n    private static copyonwritearrayset<websocketserver> websocketset = new copyonwritearrayset<websocketserver>();\n\n    //与某个客户端的连接会话，需要通过它来给客户端发送数据\n    private session session;\n\n    //接收sid\n    private string sid="";\n    /**\n     * 连接建立成功调用的方法*/\n    @onopen\n    public void onopen(session session,@pathparam("sid") string sid) {\n        this.session = session;\n        websocketset.add(this);     //加入set中\n        addonlinecount();           //在线数加1\n        log.info("有新窗口开始监听:"+sid+",当前在线人数为" + getonlinecount());\n        this.sid=sid;\n        try {\n             sendmessage("连接成功");\n        } catch (ioexception e) {\n            log.error("websocket io异常");\n        }\n    }\n\n    /**\n     * 连接关闭调用的方法\n     */\n    @onclose\n    public void onclose() {\n        websocketset.remove(this);  //从set中删除\n        subonlinecount();           //在线数减1\n        log.info("有一连接关闭！当前在线人数为" + getonlinecount());\n    }\n\n    /**\n     * 收到客户端消息后调用的方法\n     *\n     * @param message 客户端发送过来的消息*/\n    @onmessage\n    public void onmessage(string message, session session) {\n        log.info("收到来自窗口"+sid+"的信息:"+message);\n        //群发消息\n        for (websocketserver item : websocketset) {\n            try {\n                item.sendmessage(message);\n            } catch (ioexception e) {\n                e.printstacktrace();\n            }\n        }\n    }\n\n    /**\n     * \n     * @param session\n     * @param error\n     */\n    @onerror\n    public void onerror(session session, throwable error) {\n        log.error("发生错误");\n        error.printstacktrace();\n    }\n    /**\n     * 实现服务器主动推送\n     */\n    public void sendmessage(string message) throws ioexception {\n        this.session.getbasicremote().sendtext(message);\n    }\n\n\n    /**\n     * 群发自定义消息\n     * */\n    public static void sendinfo(string message,@pathparam("sid") string sid) throws ioexception {\n        log.info("推送消息到窗口"+sid+"，推送内容:"+message);\n        for (websocketserver item : websocketset) {\n            try {\n                //这里可以设定只推送给这个sid的，为null则全部推送\n                if(sid==null) {\n                    item.sendmessage(message);\n                }else if(item.sid.equals(sid)){\n                    item.sendmessage(message);\n                }\n            } catch (ioexception e) {\n                continue;\n            }\n        }\n    }\n\n    public static synchronized int getonlinecount() {\n        return onlinecount;\n    }\n\n    public static synchronized void addonlinecount() {\n        websocketserver.onlinecount++;\n    }\n\n    public static synchronized void subonlinecount() {\n        websocketserver.onlinecount--;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n\n\n\n# 消息推送\n\n推送新信息，可以再自己的controller写个方法调用websocketserver.sendinfo();即可\n\n@controller\n@requestmapping("/checkcenter")\npublic class checkcentercontroller {\n    //推送数据接口\n    @responsebody\n    @requestmapping("/socket/push/{cid}")\n    public apireturnobject pushtoweb(@pathvariable string cid,string message) {  \n        try {\n            websocketserver.sendinfo(message,cid);\n        } catch (ioexception e) {\n            e.printstacktrace();\n            return apireturnutil.error(cid+"#"+e.getmessage());\n        }  \n        return apireturnutil.success(cid);\n    } \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 页面发起socket请求\n\n<!doctype html>\n<html lang="en">\n<head>\n    <meta charset="utf-8">\n    <title>websockettest客户端</title>\n</head>\n\n<body>\n    \n        <h4>客户端输入：</h4>\n        <textarea id = "message" name="message" style="width: 200px;height: 100px"></textarea>\n        <br/>\n        <input type="button" value="发送到服务器" onclick="sendmessage()" />\n    \n \n        <h4>服务器返回消息：</h4>\n        <textarea id = "responsetext" name="message" style="width: 1100px;height: 100px"></textarea>\n        <br/>\n        <input type="button" οnclick="javascript:document.getelementbyid(\'responsetext\').value=\'\'" value="clear data">\n <script type="text/javascript">\n    function send(){\n        alert(2);\n    }\n    var websocket;\n    if(window.websocket){\n        websocket = new websocket("ws://localhost:21270/websocket/1");\n        //客户端收到服务器的方法，这个方法就会被回调\n        websocket.onmessage = function (ev) {\n        \n            var contents = document.getelementbyid("responsetext");\n            contents.value = contents.value +"\\n"+ ev.data;\n        }\n \n        websocket.onopen = function (ev) {\n            var contents = document.getelementbyid("responsetext");\n            contents.value = "与服务器端的websocket连接建立";\n            \n            var data = \'{"method":"init","identifier":"11vkf7m0020199"}\';\n            \n            websocket.send(data);\n        }\n        websocket.onclose = function (ev) {\n            \n            var contents = document.getelementbyid("responsetext");\n            contents.value =  contents.value +"\\n"+ "与服务器端的websocket连接断开";\n        }\n    }else{\n        alert("该环境不支持websocket")\n    }\n \n    function sendmessage() {\n        //alert(document.getelementbyid("message").value);\n        if(window.websocket){\n            if(websocket.readystate == websocket.open){\n                \n                websocket.send(document.getelementbyid("message").value);\n            }else{\n                alert("与服务器连接尚未建立")\n            }\n        }\n    }\n    \n    \n<\/script>   \n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n',charsets:{cjk:!0},lastUpdated:"2023/03/13, 02:56:26",lastUpdatedTimestamp:1678676186e3},{title:"OpenSource",frontmatter:{pageComponent:{name:"Catalogue",data:{path:"05.OpenSource"}},title:"OpenSource",date:"2023-03-14T14:35:02.000Z",permalink:"/note/openSource",sidebar:!1,article:!1,comment:!1,editLink:!1,author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/00.%E7%9B%AE%E5%BD%95%E9%A1%B5/05.OpenSource.html",relativePath:"00.目录页/05.OpenSource.md",key:"v-388428d3",path:"/note/openSource/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/14, 06:48:18",lastUpdatedTimestamp:1678776498e3},{title:"Springboot集成kafka",frontmatter:{title:"Springboot集成kafka",date:"2023-03-13T09:37:03.000Z",permalink:"/pages/957251/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/05.Springboot%E9%9B%86%E6%88%90kafka.html",relativePath:"01.Java/05.Springboot集成kafka.md",key:"v-48252962",path:"/pages/957251/",headers:[{level:2,title:"工程接入",slug:"工程接入",normalizedTitle:"工程接入",charIndex:2},{level:3,title:"pom文件",slug:"pom文件",normalizedTitle:"pom文件",charIndex:22},{level:3,title:"yml文件",slug:"yml文件",normalizedTitle:"yml文件",charIndex:194},{level:3,title:"JAVA文件",slug:"java文件",normalizedTitle:"java文件",charIndex:964},{level:4,title:"kafka消费者配置文件",slug:"kafka消费者配置文件",normalizedTitle:"kafka消费者配置文件",charIndex:974},{level:4,title:"kafka监听消费入口",slug:"kafka监听消费入口",normalizedTitle:"kafka监听消费入口",charIndex:6081},{level:2,title:"集成KAFKA权限",slug:"集成kafka权限",normalizedTitle:"集成kafka权限",charIndex:6720},{level:3,title:"在kafka消费者配置文件增加配置",slug:"在kafka消费者配置文件增加配置",normalizedTitle:"在kafka消费者配置文件增加配置",charIndex:6750},{level:3,title:"在resources下增加文件kafkaclientjaas.conf",slug:"在resources下增加文件kafka-client-jaas-conf",normalizedTitle:"在resources下增加文件kafkaclientjaas.conf",charIndex:null},{level:3,title:"启动类增加setProperty",slug:"启动类增加setproperty",normalizedTitle:"启动类增加setproperty",charIndex:7132},{level:2,title:"常用代码",slug:"常用代码",normalizedTitle:"常用代码",charIndex:7469},{level:3,title:"发送实体类",slug:"发送实体类",normalizedTitle:"发送实体类",charIndex:7478},{level:3,title:"消费实体类",slug:"消费实体类",normalizedTitle:"消费实体类",charIndex:7624},{level:3,title:"监听topic使用配置文件常量",slug:"监听topic使用配置文件常量",normalizedTitle:"监听topic使用配置文件常量",charIndex:8779},{level:4,title:"yml配置文件",slug:"yml配置文件",normalizedTitle:"yml配置文件",charIndex:8798},{level:4,title:"JAVA代码",slug:"java代码",normalizedTitle:"java代码",charIndex:8842},{level:2,title:"部署KAFKA",slug:"部署kafka",normalizedTitle:"部署kafka",charIndex:8945},{level:3,title:"Docker-单机",slug:"docker-单机",normalizedTitle:"docker-单机",charIndex:8980},{level:3,title:"宿主机-单机",slug:"宿主机-单机",normalizedTitle:"宿主机-单机",charIndex:9858},{level:4,title:"上传压缩包并解压",slug:"上传压缩包并解压",normalizedTitle:"上传压缩包并解压",charIndex:9917},{level:4,title:"修改配置并启动",slug:"修改配置并启动",normalizedTitle:"修改配置并启动",charIndex:10003},{level:4,title:"创建topic",slug:"创建topic",normalizedTitle:"创建topic",charIndex:10439},{level:3,title:"配置SASL",slug:"配置sasl",normalizedTitle:"配置sasl",charIndex:10621},{level:4,title:"服务端配置",slug:"服务端配置",normalizedTitle:"服务端配置",charIndex:10631},{level:5,title:"修改server.properties",slug:"修改server-properties",normalizedTitle:"修改server.properties",charIndex:10012},{level:5,title:"创建账号",slug:"创建账号",normalizedTitle:"创建账号",charIndex:11058},{level:5,title:"修改kafka-run-class.sh",slug:"修改kafka-run-class-sh",normalizedTitle:"修改kafka-run-class.sh",charIndex:11400},{level:4,title:"客户端配置账号",slug:"客户端配置账号",normalizedTitle:"客户端配置账号",charIndex:11662},{level:5,title:"新建文件",slug:"新建文件",normalizedTitle:"新建文件",charIndex:11673},{level:5,title:"修改客户端脚本",slug:"修改客户端脚本",normalizedTitle:"修改客户端脚本",charIndex:11904},{level:5,title:"增加用户配置",slug:"增加用户配置",normalizedTitle:"增加用户配置",charIndex:12195},{level:5,title:"重启",slug:"重启",normalizedTitle:"重启",charIndex:12587},{level:5,title:"设置用户权限",slug:"设置用户权限",normalizedTitle:"设置用户权限",charIndex:12882},{level:5,title:"测试",slug:"测试",normalizedTitle:"测试",charIndex:9537},{level:3,title:"清除Topic下数据",slug:"清除topic下数据",normalizedTitle:"清除topic下数据",charIndex:14654}],headersStr:"工程接入 pom文件 yml文件 JAVA文件 kafka消费者配置文件 kafka监听消费入口 集成KAFKA权限 在kafka消费者配置文件增加配置 在resources下增加文件kafkaclientjaas.conf 启动类增加setProperty 常用代码 发送实体类 消费实体类 监听topic使用配置文件常量 yml配置文件 JAVA代码 部署KAFKA Docker-单机 宿主机-单机 上传压缩包并解压 修改配置并启动 创建topic 配置SASL 服务端配置 修改server.properties 创建账号 修改kafka-run-class.sh 客户端配置账号 新建文件 修改客户端脚本 增加用户配置 重启 设置用户权限 测试 清除Topic下数据",content:'# 工程接入\n\nkafka批量消费\n\n\n# pom文件\n\n        <dependency>\n            <groupId>org.springframework.kafka</groupId>\n            <artifactId>spring-kafka</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# yml文件\n\nserver:\n  servlet:\n    context-path: /imdemosc\n  port: 8610\nspring: \n  application:\n    name: imdemosc\n  kafka:\n    bootstrap-servers: 192.168.213.215:9092,192.168.213.215:9091,192.168.213.215:9093\n    consumer:\n      enable-auto-commit: true\n      group-id: dsaim105\n      # 批量一次最大拉取数据量\n      max-poll-records: 100\n      auto-commit-interval: 100\n      auto-offset-reset: latest\n      bootstrap-servers: 192.168.213.215:9092,192.168.213.215:9091,192.168.213.215:9093\n    producer:\n      # 重试次数\n      retries: 3\n      # 批量发送的消息数量\n      batch-size: 100\n      # 32MB的批处理缓冲区\n      buffer-memory: 33554432\n      bootstrap-servers: 192.168.213.215:9092,192.168.213.215:9091,192.168.213.215:9093\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# JAVA文件\n\n# kafka消费者配置文件\n\nKafkaConsumerConfig\n\npackage ok96.cn;\n\nimport org.apache.kafka.clients.consumer.ConsumerConfig;\nimport org.apache.kafka.clients.producer.ProducerConfig;\nimport org.apache.kafka.common.serialization.StringDeserializer;\nimport org.apache.kafka.common.serialization.StringSerializer;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.kafka.annotation.EnableKafka;\nimport org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;\nimport org.springframework.kafka.config.KafkaListenerContainerFactory;\nimport org.springframework.kafka.core.DefaultKafkaConsumerFactory;\nimport org.springframework.kafka.core.DefaultKafkaProducerFactory;\nimport org.springframework.kafka.core.KafkaTemplate;\nimport org.springframework.kafka.core.ProducerFactory;\nimport org.springframework.kafka.listener.ConcurrentMessageListenerContainer;\n\nimport java.util.HashMap;\nimport java.util.Map;\n@Configuration\n@EnableKafka\npublic class KafkaConsumerConfig {\n    @Value("${spring.kafka.consumer.bootstrap-servers}")\n    private String consumerBootstrapServers;\n\n    @Value("${spring.kafka.producer.bootstrap-servers}")\n    private String producerBootstrapServers;\n\n    @Value("${spring.kafka.consumer.enable-auto-commit}")\n    private Boolean autoCommit;\n\n    @Value("${spring.kafka.consumer.auto-commit-interval}")\n    private Integer autoCommitInterval;\n\n    @Value("${spring.kafka.consumer.group-id}")\n    private String groupId;\n\n    @Value("${spring.kafka.consumer.max-poll-records}")\n    private Integer maxPollRecords;\n\n    @Value("${spring.kafka.consumer.auto-offset-reset}")\n    private String autoOffsetReset;\n\n    @Value("${spring.kafka.producer.retries}")\n    private Integer retries;\n\n    @Value("${spring.kafka.producer.batch-size}")\n    private Integer batchSize;\n\n    @Value("${spring.kafka.producer.buffer-memory}")\n    private Integer bufferMemory;\n\n    /**\n     *  生产者配置信息\n     */\n    @Bean\n    public Map<String, Object> producerConfigs() {\n        Map<String, Object> props = new HashMap<String, Object>();\n        props.put(ProducerConfig.ACKS_CONFIG, "0");\n        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, producerBootstrapServers);\n        props.put(ProducerConfig.RETRIES_CONFIG, retries);\n        props.put(ProducerConfig.BATCH_SIZE_CONFIG, batchSize);\n        props.put(ProducerConfig.LINGER_MS_CONFIG, 1);\n        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, bufferMemory);\n        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);\n        return props;\n    }\n\n    /**\n     *  生产者工厂\n     */\n    @Bean\n    public ProducerFactory<String, String> producerFactory() {\n        return new DefaultKafkaProducerFactory<>(producerConfigs());\n    }\n\n    /**\n     *  生产者模板\n     */\n    @Bean\n    public KafkaTemplate<String, String> kafkaTemplate() {\n        return new KafkaTemplate<>(producerFactory());\n    }\n\n    /**\n     *  消费者配置信息\n     */\n    @Bean\n    public Map<String, Object> consumerConfigs() {\n        Map<String, Object> props = new HashMap<String, Object>();\n        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);\n        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset);\n        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, consumerBootstrapServers);\n        props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, maxPollRecords);\n        props.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 120000);\n        props.put(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, 180000);\n        props.put(ConsumerConfig.HEARTBEAT_INTERVAL_MS_CONFIG, 500);\n        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);\n        return props;\n    }\n\n    /**\n     *  消费者批量工程\n     */\n    @Bean\n    KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String, String>> batchFactory() {\n        ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>();\n        factory.setConsumerFactory(new DefaultKafkaConsumerFactory<>(consumerConfigs()));\n        factory.setConcurrency(1);\n        //设置为批量消费，每个批次数量在Kafka配置参数中设置ConsumerConfig.MAX_POLL_RECORDS_CONFIG\n        factory.setBatchListener(true);\n        factory.getContainerProperties().setPollTimeout(1000);\n        \n        return factory;\n    }\n\n//    @Bean\n//    public KafkaConsumerListener listener(){\n//        return new KafkaConsumerListener();\n//    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n\n\n# kafka监听消费入口\n\npackage ok96.cn;\n\nimport static java.util.concurrent.Executors.newCachedThreadPool;\n\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.stereotype.Component;\n\n\n\n\n@Component\npublic class KafkaBatchListener {\n\n    @KafkaListener(topics = "imtest6", containerFactory = "batchFactory")\n    public void listenPartition1(List<ConsumerRecord<?, ?>> records) {\n        System.out.println("我进来啦");\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 集成KAFKA权限\n\nSASL_PLAINTEXT\n\n\n# 在kafka消费者配置文件增加配置\n\n在producerConfigs方法和consumerConfigs方法中增加\n\nprops.put("security.protocol","SASL_PLAINTEXT");\nprops.put("sasl.mechanism","PLAIN");\n\n\n1\n2\n\n\n\n# 在resources下增加文件kafka_client_jaas.conf\n\n文件内容username和password为kafka中设置的权限账号密码\n\nKafkaClient {\n  org.apache.kafka.common.security.plain.PlainLoginModule required\n  username="ok96"\n  password="ok96-password";\n};\n\n\n1\n2\n3\n4\n5\n\n\n\n# 启动类增加setProperty\n\n@SpringBootApplication\npublic class SpringbootApp {\n    public static void main(String[] args) {\n        String dirname = "classpath:kafka_client_jaas.conf";\n        System.setProperty("java.security.auth.login.config", dirname);\n        SpringApplication.run(SpringbootApp.class, args);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 常用代码\n\n\n# 发送实体类\n\n也就是先将XXXX实体类转换成String\n\nObjectMapper mapper2 = new ObjectMapper();\nkafkaTemplate.send(topic, mapper2.writeValueAsString(XXXXX));\n\n\n1\n2\n\n\n\n# 消费实体类\n\n也就是将String转换成XXXX实体类,可以在getTypeReference方法修改为静态方法，增加static\n修改KafkaBatchListener\n\npackage cn.ok96;\n\nimport java.util.List;\nimport java.util.concurrent.ExecutorService;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.springframework.kafka.annotation.KafkaListener;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class KafkaBatchListener {\n\n    public TypeReference<?> getTypeReferenceTemp() {\n        return new TypeReference<XXXX>() {\n        };\n    }\n    \n    @KafkaListener(topics = "imtest6", containerFactory = "batchFactory")\n    public void listenPartition1(List<ConsumerRecord<String,String>> records) {\n        for (ConsumerRecord<String, String> record : records) {\n            Optional<String> kafkaMessage = Optional.ofNullable(record.value());\n            if (kafkaMessage.isPresent()) {\n                //消息接收正常\n                ObjectMapper mapper2 = new ObjectMapper();\n                XXXX xxxx = (XXXX) mapper2.readValue(record.value(), getTypeReferenceTemp());\n            }\n        }\n        \n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 监听topic使用配置文件常量\n\n# yml配置文件\n\nkafkaSelf:\n  topic: test\n\n\n1\n2\n\n\n# JAVA代码\n\n@KafkaListener(topics = "#{\'${kafkaSelf.topic}\'}", containerFactory = "batchFactory")\n\n\n1\n\n\n\n# 部署KAFKA\n\n服务器IP：192.168.213.200\n\n\n# Docker-单机\n\ndocker-compose.yml，连接地址192.168.213.200:19092\n\nversion: \'3\'\nservices:\n  kafka-zookeeper:\n    image: openzipkin/zipkin-kafka:2.11.12\n    restart: always\n    container_name: kafka-zookeeper\n    ports:\n      - 2181:2181\n      - 9092:9092\n      - 19092:19092\n    environment:\n      - KAFKA_ADVERTISED_HOST_NAME=192.168.213.200\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n命令行\n\ndocker run -d --restart=always --name kafka-zookeeper -p 2181:2181 -p 9092:9092 -p 19092:19092  --env KAFKA_ADVERTISED_HOST_NAME=192.168.213.200  openzipkin/zipkin-kafka:2.11.12\n\n\n1\n\n\n部署成功测试\n\n1.开启两个终端进入kafka\ndocker exec -it kafka-zookeeper /bin/sh\n2.分别在终端容器内部执行\n终端1\nunset JMX_PORT;bin/kafka-console-producer.sh --broker-list 192.168.213.200:19092 --topic test9999\n终端2\nunset JMX_PORT;bin/kafka-console-consumer.sh --bootstrap-server 192.168.213.200:19092 --topic test9999 --from-beginning\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 宿主机-单机\n\n服务器ip：192.168.213.203\n连接地址：192.168.213.203:9092\n\n# 上传压缩包并解压\n\n上传kafka_2.12-2.3.0.tgz到/data/目录下\n解压\n\ntar -zvxf kafka_2.12-2.3.0.tgz\n\n\n1\n\n\n# 修改配置并启动\n\n修改server.properties\n\nvi /data/kafka_2.12-2.3.0/config/server.properties\n\n\n1\n\n\n增加以下内容，保存并退出\n\nlisteners=PLAINTEXT://192.168.213.203:9092\n\n\n1\n\n\n\n\n启动\n\ncd /data/kafka_2.12-2.3.0\nbin/zookeeper-server-start.sh -daemon config/zookeeper.properties\nbin/kafka-server-start.sh -daemon  config/server.properties\n\n\n1\n2\n3\n\n\n查看日志\n\ntail -f /data/kafka_2.12-2.3.0/logs/zookeeper.out\ntail -f /data/kafka_2.12-2.3.0/logs/kafkaServer.out\n\n\n1\n2\n\n\n# 创建topic\n\n创建topic：tpc.test001\n\n/data/kafka_2.12-2.3.0/bin/kafka-topics.sh --create --zookeeper 192.168.213.203:2181 --replication-factor 1 --partitions 1 --topic tpc.test001\n\n\n1\n\n\n\n# 配置SASL\n\n# 服务端配置\n\n# 修改server.properties\n\nvi /data/kafka_2.12-2.3.0/config/server.properties\n\n\n1\n\n\n修改/增加以下内容,将原来写的listeners用#注释\n\nlisteners=SASL_PLAINTEXT://192.168.213.203:9092\nsecurity.inter.broker.protocol=SASL_PLAINTEXT\nsasl.mechanism.inter.broker.protocol=PLAIN\nsasl.enabled.mechanisms=PLAIN\nauthorizer.class.name=kafka.security.auth.SimpleAclAuthorizer\nallow.everyone.if.no.acl.found=true\nsuper.users=User:admin\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n\n# 创建账号\n\nvi /data/kafka_2.12-2.3.0/config/kafka_server_jaas.conf\n\n\n1\n\n\n增加以下内容,保存并退出\n\nKafkaServer {\norg.apache.kafka.common.security.plain.PlainLoginModule required\nusername="admin"\npassword="admin-pwd"\nuser_admin="admin-pwd"\nuser_wuxiaoku="xiaoku-lzx22247a";\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n管理员账号：admin 密码 admin-pwd\n\n普通用户账号：wuxiaoku 密码 xiaoku-lzx22247a\n\n# 修改kafka-run-class.sh\n\n添加java.security.auth.login.config环境变量\n\nvi /data/kafka_2.12-2.3.0/bin/kafka-run-class.sh\n\n\n1\n\n\n增加\n\nKAFKA_SASL_OPTS=\'-Djava.security.auth.login.config=/data/kafka_2.12-2.3.0/config/kafka_server_jaas.conf\'\n\n\n1\n\n\n增加\n\n$KAFKA_SASL_OPTS\n\n\n1\n\n\n\n\n# 客户端配置账号\n\n# 新建文件\n\nvi /data/kafka_2.12-2.3.0/config/kafka_client_jaas.conf\n\n\n1\n\n\n新增以下内容\n\nKafkaClient {\n  org.apache.kafka.common.security.plain.PlainLoginModule required\n  username="wuxiaoku"\n  password="xiaoku-lzx22247a";\n};\n\n\n1\n2\n3\n4\n5\n\n\n\n\n# 修改客户端脚本\n\n消费者：\n\nvi /data/kafka_2.12-2.3.0/config/consumer.properties\n\n\n1\n\n\n最后一行加上如下配置\n\nsecurity.protocol=SASL_PLAINTEXT\nsasl.mechanism=PLAIN\n\n\n1\n2\n\n\n生产者：\n\nvi /data/kafka_2.12-2.3.0/config/producer.properties\n\n\n1\n\n\n最后一行加上如下配置\n\nsecurity.protocol=SASL_PLAINTEXT\nsasl.mechanism=PLAIN\n\n\n1\n2\n\n\n\n\n# 增加用户配置\n\n消费者：\n\nvi /data/kafka_2.12-2.3.0/bin/kafka-console-consumer.sh\n\n\n1\n\n\n增加以下内容\n\nexport KAFKA_OPTS="-Djava.security.auth.login.config=/data/kafka_2.12-2.3.0/config/kafka_client_jaas.conf"\n\n\n1\n\n\n\n\n生产者：\n\nvi /data/kafka_2.12-2.3.0/bin/kafka-console-producer.sh\n\n\n1\n\n\n增加以下内容\n\nexport KAFKA_OPTS="-Djava.security.auth.login.config=/data/kafka_2.12-2.3.0/config/kafka_client_jaas.conf"\n\n\n1\n\n\n\n\n# 重启\n\n关闭命令：\n\ncd /data/kafka_2.12-2.3.0\nbin/kafka-server-stop.sh config/server.properties\nbin/zookeeper-server-stop.sh config/zookeeper.properties\n\n\n1\n2\n3\n\n\n启动：\n\nbin/zookeeper-server-start.sh -daemon config/zookeeper.properties\nbin/kafka-server-start.sh -daemon  config/server.properties\n\n\n1\n2\n\n\n# 设置用户权限\n\n可百度 kfaka ACL\n\n赋权：add 移除：remove 读：Read 写：Write\n\n设置白名单：--allow-host 192.168.213.200\n\n设置组权限：--group 设置topic权限--topic\n\n对wuxiaoku用户的组test-consumer-group设置所有权限\n\nbin/kafka-acls.sh --authorizer kafka.security.auth.SimpleAclAuthorizer --authorizer-properties zookeeper.connect=192.168.213.203:2181 --add --allow-principal User:wuxiaoku --operation All --group test-consumer-group\n\n\n1\n\n\n对wuxiaoku用户赋权topic读权限\n\nbin/kafka-acls.sh --authorizer-properties zookeeper.connect=192.168.213.203:2181 --add  --allow-principal User:wuxiaoku  --allow-host \'*\' --operation Read --topic tpc.test001\n\n\n1\n\n\n对wuxiaoku用户移除topic读权限\n\nbin/kafka-acls.sh --authorizer-properties zookeeper.connect=192.168.213.203:2181 --remove  --allow-principal User:wuxiaoku  --allow-host \'*\' --operation Read --topic tpc.test001\n\n\n1\n\n\n对wuxiaoku用户赋权topic写权限\n\nbin/kafka-acls.sh --authorizer-properties zookeeper.connect=192.168.213.203:2181 --add  --allow-principal User:wuxiaoku  --allow-host \'*\' --operation Write --topic tpc.test001\n\n\n1\n\n\n对wuxiaoku用户移除topic写权限\n\nbin/kafka-acls.sh --authorizer-properties zookeeper.connect=192.168.213.203:2181 --remove  --allow-principal User:wuxiaoku  --allow-host \'*\' --operation Write --topic tpc.test001\n\n\n1\n\n\n查看权限\n\nbin/kafka-acls.sh --list --authorizer-properties zookeeper.connect=192.168.213.203:2181\n\n\n1\n\n\n# 测试\n\n开启两个终端\n\n1终端消费者执行命令：\n\n/data/kafka_2.12-2.3.0/bin/kafka-console-consumer.sh --bootstrap-server 192.168.213.203:9092 --topic  tpc.test001  --from-beginning --consumer.config /data/kafka_2.12-2.3.0/config/consumer.properties\n\n\n1\n\n\n2终端生产者执行命令：\n\n/data/kafka_2.12-2.3.0/bin/kafka-console-producer.sh --broker-list 192.168.213.203:9092 --topic tpc.test001  --producer.config /data/kafka_2.12-2.3.0/config/producer.properties\n\n\n1\n\n\n在生产者终端发送随机字符串，在消费者终端能接收数据即正常\n\n\n# 清除Topic下数据\n\n例topic：cardata\n\n1.修改保留时间为10秒\nbin/kafka-configs.sh --zookeeper 127.0.0.1:2181 --entity-type topics --entity-name cardata --alter --add-config retention.ms=10000\n2.查看topic策略\nbin/kafka-configs.sh --zookeeper 127.0.0.1:2181 --describe --entity-type topics --entity-name cardata\n3.等待数据清理后，删除策略\nbin/kafka-configs.sh --zookeeper 127.0.0.1:2181 --entity-type topics --entity-name cardata --alter --delete-config retention.ms\n4.再次查看策略\n\n\n1\n2\n3\n4\n5\n6\n7\n',normalizedContent:'# 工程接入\n\nkafka批量消费\n\n\n# pom文件\n\n        <dependency>\n            <groupid>org.springframework.kafka</groupid>\n            <artifactid>spring-kafka</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# yml文件\n\nserver:\n  servlet:\n    context-path: /imdemosc\n  port: 8610\nspring: \n  application:\n    name: imdemosc\n  kafka:\n    bootstrap-servers: 192.168.213.215:9092,192.168.213.215:9091,192.168.213.215:9093\n    consumer:\n      enable-auto-commit: true\n      group-id: dsaim105\n      # 批量一次最大拉取数据量\n      max-poll-records: 100\n      auto-commit-interval: 100\n      auto-offset-reset: latest\n      bootstrap-servers: 192.168.213.215:9092,192.168.213.215:9091,192.168.213.215:9093\n    producer:\n      # 重试次数\n      retries: 3\n      # 批量发送的消息数量\n      batch-size: 100\n      # 32mb的批处理缓冲区\n      buffer-memory: 33554432\n      bootstrap-servers: 192.168.213.215:9092,192.168.213.215:9091,192.168.213.215:9093\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# java文件\n\n# kafka消费者配置文件\n\nkafkaconsumerconfig\n\npackage ok96.cn;\n\nimport org.apache.kafka.clients.consumer.consumerconfig;\nimport org.apache.kafka.clients.producer.producerconfig;\nimport org.apache.kafka.common.serialization.stringdeserializer;\nimport org.apache.kafka.common.serialization.stringserializer;\nimport org.springframework.beans.factory.annotation.value;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.kafka.annotation.enablekafka;\nimport org.springframework.kafka.config.concurrentkafkalistenercontainerfactory;\nimport org.springframework.kafka.config.kafkalistenercontainerfactory;\nimport org.springframework.kafka.core.defaultkafkaconsumerfactory;\nimport org.springframework.kafka.core.defaultkafkaproducerfactory;\nimport org.springframework.kafka.core.kafkatemplate;\nimport org.springframework.kafka.core.producerfactory;\nimport org.springframework.kafka.listener.concurrentmessagelistenercontainer;\n\nimport java.util.hashmap;\nimport java.util.map;\n@configuration\n@enablekafka\npublic class kafkaconsumerconfig {\n    @value("${spring.kafka.consumer.bootstrap-servers}")\n    private string consumerbootstrapservers;\n\n    @value("${spring.kafka.producer.bootstrap-servers}")\n    private string producerbootstrapservers;\n\n    @value("${spring.kafka.consumer.enable-auto-commit}")\n    private boolean autocommit;\n\n    @value("${spring.kafka.consumer.auto-commit-interval}")\n    private integer autocommitinterval;\n\n    @value("${spring.kafka.consumer.group-id}")\n    private string groupid;\n\n    @value("${spring.kafka.consumer.max-poll-records}")\n    private integer maxpollrecords;\n\n    @value("${spring.kafka.consumer.auto-offset-reset}")\n    private string autooffsetreset;\n\n    @value("${spring.kafka.producer.retries}")\n    private integer retries;\n\n    @value("${spring.kafka.producer.batch-size}")\n    private integer batchsize;\n\n    @value("${spring.kafka.producer.buffer-memory}")\n    private integer buffermemory;\n\n    /**\n     *  生产者配置信息\n     */\n    @bean\n    public map<string, object> producerconfigs() {\n        map<string, object> props = new hashmap<string, object>();\n        props.put(producerconfig.acks_config, "0");\n        props.put(producerconfig.bootstrap_servers_config, producerbootstrapservers);\n        props.put(producerconfig.retries_config, retries);\n        props.put(producerconfig.batch_size_config, batchsize);\n        props.put(producerconfig.linger_ms_config, 1);\n        props.put(producerconfig.buffer_memory_config, buffermemory);\n        props.put(producerconfig.key_serializer_class_config, stringserializer.class);\n        props.put(producerconfig.value_serializer_class_config, stringserializer.class);\n        return props;\n    }\n\n    /**\n     *  生产者工厂\n     */\n    @bean\n    public producerfactory<string, string> producerfactory() {\n        return new defaultkafkaproducerfactory<>(producerconfigs());\n    }\n\n    /**\n     *  生产者模板\n     */\n    @bean\n    public kafkatemplate<string, string> kafkatemplate() {\n        return new kafkatemplate<>(producerfactory());\n    }\n\n    /**\n     *  消费者配置信息\n     */\n    @bean\n    public map<string, object> consumerconfigs() {\n        map<string, object> props = new hashmap<string, object>();\n        props.put(consumerconfig.group_id_config, groupid);\n        props.put(consumerconfig.auto_offset_reset_config, autooffsetreset);\n        props.put(consumerconfig.bootstrap_servers_config, consumerbootstrapservers);\n        props.put(consumerconfig.max_poll_records_config, maxpollrecords);\n        props.put(consumerconfig.session_timeout_ms_config, 120000);\n        props.put(consumerconfig.request_timeout_ms_config, 180000);\n        props.put(consumerconfig.heartbeat_interval_ms_config, 500);\n        props.put(consumerconfig.key_deserializer_class_config, stringdeserializer.class);\n        props.put(consumerconfig.value_deserializer_class_config, stringdeserializer.class);\n        return props;\n    }\n\n    /**\n     *  消费者批量工程\n     */\n    @bean\n    kafkalistenercontainerfactory<concurrentmessagelistenercontainer<string, string>> batchfactory() {\n        concurrentkafkalistenercontainerfactory<string, string> factory = new concurrentkafkalistenercontainerfactory<>();\n        factory.setconsumerfactory(new defaultkafkaconsumerfactory<>(consumerconfigs()));\n        factory.setconcurrency(1);\n        //设置为批量消费，每个批次数量在kafka配置参数中设置consumerconfig.max_poll_records_config\n        factory.setbatchlistener(true);\n        factory.getcontainerproperties().setpolltimeout(1000);\n        \n        return factory;\n    }\n\n//    @bean\n//    public kafkaconsumerlistener listener(){\n//        return new kafkaconsumerlistener();\n//    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n\n\n# kafka监听消费入口\n\npackage ok96.cn;\n\nimport static java.util.concurrent.executors.newcachedthreadpool;\n\nimport java.util.list;\nimport java.util.concurrent.executorservice;\n\nimport org.apache.kafka.clients.consumer.consumerrecord;\nimport org.springframework.kafka.annotation.kafkalistener;\nimport org.springframework.stereotype.component;\n\n\n\n\n@component\npublic class kafkabatchlistener {\n\n    @kafkalistener(topics = "imtest6", containerfactory = "batchfactory")\n    public void listenpartition1(list<consumerrecord<?, ?>> records) {\n        system.out.println("我进来啦");\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 集成kafka权限\n\nsasl_plaintext\n\n\n# 在kafka消费者配置文件增加配置\n\n在producerconfigs方法和consumerconfigs方法中增加\n\nprops.put("security.protocol","sasl_plaintext");\nprops.put("sasl.mechanism","plain");\n\n\n1\n2\n\n\n\n# 在resources下增加文件kafka_client_jaas.conf\n\n文件内容username和password为kafka中设置的权限账号密码\n\nkafkaclient {\n  org.apache.kafka.common.security.plain.plainloginmodule required\n  username="ok96"\n  password="ok96-password";\n};\n\n\n1\n2\n3\n4\n5\n\n\n\n# 启动类增加setproperty\n\n@springbootapplication\npublic class springbootapp {\n    public static void main(string[] args) {\n        string dirname = "classpath:kafka_client_jaas.conf";\n        system.setproperty("java.security.auth.login.config", dirname);\n        springapplication.run(springbootapp.class, args);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 常用代码\n\n\n# 发送实体类\n\n也就是先将xxxx实体类转换成string\n\nobjectmapper mapper2 = new objectmapper();\nkafkatemplate.send(topic, mapper2.writevalueasstring(xxxxx));\n\n\n1\n2\n\n\n\n# 消费实体类\n\n也就是将string转换成xxxx实体类,可以在gettypereference方法修改为静态方法，增加static\n修改kafkabatchlistener\n\npackage cn.ok96;\n\nimport java.util.list;\nimport java.util.concurrent.executorservice;\nimport org.apache.kafka.clients.consumer.consumerrecord;\nimport org.springframework.kafka.annotation.kafkalistener;\nimport org.springframework.stereotype.component;\n\n@component\npublic class kafkabatchlistener {\n\n    public typereference<?> gettypereferencetemp() {\n        return new typereference<xxxx>() {\n        };\n    }\n    \n    @kafkalistener(topics = "imtest6", containerfactory = "batchfactory")\n    public void listenpartition1(list<consumerrecord<string,string>> records) {\n        for (consumerrecord<string, string> record : records) {\n            optional<string> kafkamessage = optional.ofnullable(record.value());\n            if (kafkamessage.ispresent()) {\n                //消息接收正常\n                objectmapper mapper2 = new objectmapper();\n                xxxx xxxx = (xxxx) mapper2.readvalue(record.value(), gettypereferencetemp());\n            }\n        }\n        \n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 监听topic使用配置文件常量\n\n# yml配置文件\n\nkafkaself:\n  topic: test\n\n\n1\n2\n\n\n# java代码\n\n@kafkalistener(topics = "#{\'${kafkaself.topic}\'}", containerfactory = "batchfactory")\n\n\n1\n\n\n\n# 部署kafka\n\n服务器ip：192.168.213.200\n\n\n# docker-单机\n\ndocker-compose.yml，连接地址192.168.213.200:19092\n\nversion: \'3\'\nservices:\n  kafka-zookeeper:\n    image: openzipkin/zipkin-kafka:2.11.12\n    restart: always\n    container_name: kafka-zookeeper\n    ports:\n      - 2181:2181\n      - 9092:9092\n      - 19092:19092\n    environment:\n      - kafka_advertised_host_name=192.168.213.200\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n命令行\n\ndocker run -d --restart=always --name kafka-zookeeper -p 2181:2181 -p 9092:9092 -p 19092:19092  --env kafka_advertised_host_name=192.168.213.200  openzipkin/zipkin-kafka:2.11.12\n\n\n1\n\n\n部署成功测试\n\n1.开启两个终端进入kafka\ndocker exec -it kafka-zookeeper /bin/sh\n2.分别在终端容器内部执行\n终端1\nunset jmx_port;bin/kafka-console-producer.sh --broker-list 192.168.213.200:19092 --topic test9999\n终端2\nunset jmx_port;bin/kafka-console-consumer.sh --bootstrap-server 192.168.213.200:19092 --topic test9999 --from-beginning\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 宿主机-单机\n\n服务器ip：192.168.213.203\n连接地址：192.168.213.203:9092\n\n# 上传压缩包并解压\n\n上传kafka_2.12-2.3.0.tgz到/data/目录下\n解压\n\ntar -zvxf kafka_2.12-2.3.0.tgz\n\n\n1\n\n\n# 修改配置并启动\n\n修改server.properties\n\nvi /data/kafka_2.12-2.3.0/config/server.properties\n\n\n1\n\n\n增加以下内容，保存并退出\n\nlisteners=plaintext://192.168.213.203:9092\n\n\n1\n\n\n\n\n启动\n\ncd /data/kafka_2.12-2.3.0\nbin/zookeeper-server-start.sh -daemon config/zookeeper.properties\nbin/kafka-server-start.sh -daemon  config/server.properties\n\n\n1\n2\n3\n\n\n查看日志\n\ntail -f /data/kafka_2.12-2.3.0/logs/zookeeper.out\ntail -f /data/kafka_2.12-2.3.0/logs/kafkaserver.out\n\n\n1\n2\n\n\n# 创建topic\n\n创建topic：tpc.test001\n\n/data/kafka_2.12-2.3.0/bin/kafka-topics.sh --create --zookeeper 192.168.213.203:2181 --replication-factor 1 --partitions 1 --topic tpc.test001\n\n\n1\n\n\n\n# 配置sasl\n\n# 服务端配置\n\n# 修改server.properties\n\nvi /data/kafka_2.12-2.3.0/config/server.properties\n\n\n1\n\n\n修改/增加以下内容,将原来写的listeners用#注释\n\nlisteners=sasl_plaintext://192.168.213.203:9092\nsecurity.inter.broker.protocol=sasl_plaintext\nsasl.mechanism.inter.broker.protocol=plain\nsasl.enabled.mechanisms=plain\nauthorizer.class.name=kafka.security.auth.simpleaclauthorizer\nallow.everyone.if.no.acl.found=true\nsuper.users=user:admin\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n\n# 创建账号\n\nvi /data/kafka_2.12-2.3.0/config/kafka_server_jaas.conf\n\n\n1\n\n\n增加以下内容,保存并退出\n\nkafkaserver {\norg.apache.kafka.common.security.plain.plainloginmodule required\nusername="admin"\npassword="admin-pwd"\nuser_admin="admin-pwd"\nuser_wuxiaoku="xiaoku-lzx22247a";\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n管理员账号：admin 密码 admin-pwd\n\n普通用户账号：wuxiaoku 密码 xiaoku-lzx22247a\n\n# 修改kafka-run-class.sh\n\n添加java.security.auth.login.config环境变量\n\nvi /data/kafka_2.12-2.3.0/bin/kafka-run-class.sh\n\n\n1\n\n\n增加\n\nkafka_sasl_opts=\'-djava.security.auth.login.config=/data/kafka_2.12-2.3.0/config/kafka_server_jaas.conf\'\n\n\n1\n\n\n增加\n\n$kafka_sasl_opts\n\n\n1\n\n\n\n\n# 客户端配置账号\n\n# 新建文件\n\nvi /data/kafka_2.12-2.3.0/config/kafka_client_jaas.conf\n\n\n1\n\n\n新增以下内容\n\nkafkaclient {\n  org.apache.kafka.common.security.plain.plainloginmodule required\n  username="wuxiaoku"\n  password="xiaoku-lzx22247a";\n};\n\n\n1\n2\n3\n4\n5\n\n\n\n\n# 修改客户端脚本\n\n消费者：\n\nvi /data/kafka_2.12-2.3.0/config/consumer.properties\n\n\n1\n\n\n最后一行加上如下配置\n\nsecurity.protocol=sasl_plaintext\nsasl.mechanism=plain\n\n\n1\n2\n\n\n生产者：\n\nvi /data/kafka_2.12-2.3.0/config/producer.properties\n\n\n1\n\n\n最后一行加上如下配置\n\nsecurity.protocol=sasl_plaintext\nsasl.mechanism=plain\n\n\n1\n2\n\n\n\n\n# 增加用户配置\n\n消费者：\n\nvi /data/kafka_2.12-2.3.0/bin/kafka-console-consumer.sh\n\n\n1\n\n\n增加以下内容\n\nexport kafka_opts="-djava.security.auth.login.config=/data/kafka_2.12-2.3.0/config/kafka_client_jaas.conf"\n\n\n1\n\n\n\n\n生产者：\n\nvi /data/kafka_2.12-2.3.0/bin/kafka-console-producer.sh\n\n\n1\n\n\n增加以下内容\n\nexport kafka_opts="-djava.security.auth.login.config=/data/kafka_2.12-2.3.0/config/kafka_client_jaas.conf"\n\n\n1\n\n\n\n\n# 重启\n\n关闭命令：\n\ncd /data/kafka_2.12-2.3.0\nbin/kafka-server-stop.sh config/server.properties\nbin/zookeeper-server-stop.sh config/zookeeper.properties\n\n\n1\n2\n3\n\n\n启动：\n\nbin/zookeeper-server-start.sh -daemon config/zookeeper.properties\nbin/kafka-server-start.sh -daemon  config/server.properties\n\n\n1\n2\n\n\n# 设置用户权限\n\n可百度 kfaka acl\n\n赋权：add 移除：remove 读：read 写：write\n\n设置白名单：--allow-host 192.168.213.200\n\n设置组权限：--group 设置topic权限--topic\n\n对wuxiaoku用户的组test-consumer-group设置所有权限\n\nbin/kafka-acls.sh --authorizer kafka.security.auth.simpleaclauthorizer --authorizer-properties zookeeper.connect=192.168.213.203:2181 --add --allow-principal user:wuxiaoku --operation all --group test-consumer-group\n\n\n1\n\n\n对wuxiaoku用户赋权topic读权限\n\nbin/kafka-acls.sh --authorizer-properties zookeeper.connect=192.168.213.203:2181 --add  --allow-principal user:wuxiaoku  --allow-host \'*\' --operation read --topic tpc.test001\n\n\n1\n\n\n对wuxiaoku用户移除topic读权限\n\nbin/kafka-acls.sh --authorizer-properties zookeeper.connect=192.168.213.203:2181 --remove  --allow-principal user:wuxiaoku  --allow-host \'*\' --operation read --topic tpc.test001\n\n\n1\n\n\n对wuxiaoku用户赋权topic写权限\n\nbin/kafka-acls.sh --authorizer-properties zookeeper.connect=192.168.213.203:2181 --add  --allow-principal user:wuxiaoku  --allow-host \'*\' --operation write --topic tpc.test001\n\n\n1\n\n\n对wuxiaoku用户移除topic写权限\n\nbin/kafka-acls.sh --authorizer-properties zookeeper.connect=192.168.213.203:2181 --remove  --allow-principal user:wuxiaoku  --allow-host \'*\' --operation write --topic tpc.test001\n\n\n1\n\n\n查看权限\n\nbin/kafka-acls.sh --list --authorizer-properties zookeeper.connect=192.168.213.203:2181\n\n\n1\n\n\n# 测试\n\n开启两个终端\n\n1终端消费者执行命令：\n\n/data/kafka_2.12-2.3.0/bin/kafka-console-consumer.sh --bootstrap-server 192.168.213.203:9092 --topic  tpc.test001  --from-beginning --consumer.config /data/kafka_2.12-2.3.0/config/consumer.properties\n\n\n1\n\n\n2终端生产者执行命令：\n\n/data/kafka_2.12-2.3.0/bin/kafka-console-producer.sh --broker-list 192.168.213.203:9092 --topic tpc.test001  --producer.config /data/kafka_2.12-2.3.0/config/producer.properties\n\n\n1\n\n\n在生产者终端发送随机字符串，在消费者终端能接收数据即正常\n\n\n# 清除topic下数据\n\n例topic：cardata\n\n1.修改保留时间为10秒\nbin/kafka-configs.sh --zookeeper 127.0.0.1:2181 --entity-type topics --entity-name cardata --alter --add-config retention.ms=10000\n2.查看topic策略\nbin/kafka-configs.sh --zookeeper 127.0.0.1:2181 --describe --entity-type topics --entity-name cardata\n3.等待数据清理后，删除策略\nbin/kafka-configs.sh --zookeeper 127.0.0.1:2181 --entity-type topics --entity-name cardata --alter --delete-config retention.ms\n4.再次查看策略\n\n\n1\n2\n3\n4\n5\n6\n7\n',charsets:{cjk:!0},lastUpdated:"2023/06/17, 09:00:35",lastUpdatedTimestamp:1686992435e3},{title:"Springboot集成Flyway",frontmatter:{title:"Springboot集成Flyway",date:"2023-03-13T10:12:32.000Z",permalink:"/pages/25bc68/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/06.Springboot%E9%9B%86%E6%88%90Flyway.html",relativePath:"01.Java/06.Springboot集成Flyway.md",key:"v-b1a509be",path:"/pages/25bc68/",headers:[{level:2,title:"Yml",slug:"yml",normalizedTitle:"yml",charIndex:2},{level:2,title:"Pom",slug:"pom",normalizedTitle:"pom",charIndex:76},{level:2,title:"Sql",slug:"sql",normalizedTitle:"sql",charIndex:404}],headersStr:"Yml Pom Sql",content:"# Yml\n\nspring:\n  flyway:\n    locations: classpath:db #sql文件的位置\n\n\n1\n2\n3\n\n\n\n# Pom\n\n        \x3c!-- 数据库版本管理 --\x3e\n        <dependency>\n            <groupId>org.flywaydb</groupId>\n            <artifactId>flyway-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.flywaydb</groupId>\n            <artifactId>flyway-mysql</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# Sql\n\n根据flyway.locations 配置的位置新增文件夹及文件\n\nV 代表版本控制，1.0 1.1代表版本号（注：V1.0 后面是 两个 _ 否则不起作用。sql语句中不能含有创建 schema_version表的信息否则报错）",normalizedContent:"# yml\n\nspring:\n  flyway:\n    locations: classpath:db #sql文件的位置\n\n\n1\n2\n3\n\n\n\n# pom\n\n        \x3c!-- 数据库版本管理 --\x3e\n        <dependency>\n            <groupid>org.flywaydb</groupid>\n            <artifactid>flyway-core</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.flywaydb</groupid>\n            <artifactid>flyway-mysql</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n# sql\n\n根据flyway.locations 配置的位置新增文件夹及文件\n\nv 代表版本控制，1.0 1.1代表版本号（注：v1.0 后面是 两个 _ 否则不起作用。sql语句中不能含有创建 schema_version表的信息否则报错）",charsets:{cjk:!0},lastUpdated:"2023/03/13, 02:56:26",lastUpdatedTimestamp:1678676186e3},{title:"Springboot集成ScheduleTask",frontmatter:{title:"Springboot集成ScheduleTask",date:"2023-03-13T10:18:22.000Z",permalink:"/pages/95e55e/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/07.Springboot%E9%9B%86%E6%88%90ScheduleTask.html",relativePath:"01.Java/07.Springboot集成ScheduleTask.md",key:"v-61950a01",path:"/pages/95e55e/",headers:[{level:2,title:"流程图",slug:"流程图",normalizedTitle:"流程图",charIndex:2},{level:2,title:"Yml",slug:"yml",normalizedTitle:"yml",charIndex:12},{level:2,title:"pom",slug:"pom",normalizedTitle:"pom",charIndex:92},{level:2,title:"Java",slug:"java",normalizedTitle:"java",charIndex:540},{level:3,title:"工具类",slug:"工具类",normalizedTitle:"工具类",charIndex:549},{level:4,title:"ScheduleTask",slug:"scheduletask",normalizedTitle:"scheduletask",charIndex:556},{level:4,title:"SpringApplicationContextUse",slug:"springapplicationcontextuse",normalizedTitle:"springapplicationcontextuse",charIndex:9325},{level:3,title:"启动监听类",slug:"启动监听类",normalizedTitle:"启动监听类",charIndex:10674},{level:4,title:"AppStartFinishedListener",slug:"appstartfinishedlistener",normalizedTitle:"appstartfinishedlistener",charIndex:10683},{level:3,title:"定时任务Job",slug:"定时任务job",normalizedTitle:"定时任务job",charIndex:11254},{level:2,title:"Mysql",slug:"mysql",normalizedTitle:"mysql",charIndex:12941},{level:3,title:"任务类型",slug:"任务类型",normalizedTitle:"任务类型",charIndex:12951},{level:3,title:"定时任务",slug:"定时任务",normalizedTitle:"定时任务",charIndex:18},{level:3,title:"执行日志",slug:"执行日志",normalizedTitle:"执行日志",charIndex:14980}],headersStr:"流程图 Yml pom Java 工具类 ScheduleTask SpringApplicationContextUse 启动监听类 AppStartFinishedListener 定时任务Job Mysql 任务类型 定时任务 执行日志",content:"# 流程图\n\n\n\n\n# Yml\n\n#定时任务是否开启及组名\njobSelf:\n  enable: true\n  jobGroupName: group1\n\n\n1\n2\n3\n4\n\n\n\n# pom\n\n        <dependency>\n            <groupId>org.quartz-scheduler</groupId>\n            <artifactId>quartz</artifactId>\n            <version>2.2.1</version>\x3c!--$NO-MVN-MAN-VER$ --\x3e\n            <exclusions>\n                <exclusion>\n                    <artifactId>slf4j-api</artifactId>\n                    <groupId>org.slf4j</groupId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Java\n\n\n# 工具类\n\n# ScheduleTask\n\npackage cn.ok96;\n\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.quartz.*;\nimport org.quartz.impl.StdSchedulerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport javax.annotation.Resource;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n\n/**\n * 定时工具类\n *\n * @author Nepk\n */\n@Slf4j\n@Component\npublic class ScheduleTask {\n\n    private static SchedulerFactory gSchedulerFactory = new StdSchedulerFactory();\n\n    @Resource\n    private JobInfoRepository jobInfoRepository;\n\n    @Resource\n    private JobTypeRepository jobTypeRepository;\n\n    @Value(\"${jobSelf.jobGroupName}\")\n    private String jobGroupName;\n\n    @Value(\"${jobSelf.enable}\")\n    private Boolean enable;\n\n    /**\n     * 启动工程时加载job\n     * @throws SchedulerException\n     */\n    @SuppressWarnings(\"unchecked\")\n    public void scheduleJobs() {\n        if (enable){\n            log.info(\"启动工程时加载job\");\n            List<JobInfo> jobInfos =  JobInfoRepository.findAll();\n            if (jobInfos.isEmpty()) {\n                log.info(\"没有可执行的任务\");\n                return;\n            } else {\n                for (WfitJobInfo jobInfo : jobInfos) {\n                    Map<String, Object> map = new HashMap<>();\n                    map.put(\"jobId\", jobInfo.getId());\n\n                    WfitJobType jobType = jobTypeRepository.getById(jobInfo.getJobTypeId());\n                    if (jobInfo!=null){\n                        setJob(jobInfo.getJobCron(), jobGroupName, jobInfo.getId()+\"\"\n                                ,jobType.getJobPath() , map, jobInfo.getJobStatus() == 2);\n                    }\n\n                }\n            }\n        }\n\n    }\n\n\n    /**\n     * 设置定时\n     *\n     * @param time\n     * @param group  ----这个是组\n     * @param jobId  ----这个是name\n     * @param job    ----cn.ok96.job.xxx\n     * @param params ----参数\n     */\n    public void setJob(String time, String group, String jobId, String job, Map<String, Object> params, Boolean\n            isPauseJob) {\n        try {\n            Scheduler scheduler = gSchedulerFactory.getScheduler();\n            Class jobClass = Class.forName(job);\n            // 设置Job的名字和组\n            JobDetail jobDetail = JobBuilder.newJob(jobClass).withIdentity(jobId, group).build();\n            //动态添加数据 放置参数\n            if (params.size() > 0) {\n                for (Entry<String, Object> entry : params.entrySet()) {\n                    jobDetail.getJobDataMap().put(entry.getKey(), entry.getValue());\n                }\n            }\n            CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(time);\n            //设置定时任务的时间触发规则\n            CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity(jobId, group).withSchedule(scheduleBuilder).build();\n            // 把作业和触发器注册到任务调度中\n            scheduler.scheduleJob(jobDetail, cronTrigger);\n            if (isPauseJob) {\n                JobKey jobKey = new JobKey(jobId, group);\n                scheduler.pauseJob(jobKey);\n            } else {\n                scheduler.start();\n            }\n        } catch (Exception e) {\n            log.error(\"创建任务失败\", e);\n            throw new RuntimeException(e);\n        }\n\n    }\n\n    /***\n     * 修改定时任务时间\n     * @param triggerName\n     * @param triggerGroupName\n     * @param time\n     */\n    public Boolean modifyJobTime(String triggerName, String triggerGroupName, String time) {\n        try {\n            Scheduler scheduler = gSchedulerFactory.getScheduler();\n            TriggerKey triggerKey = new TriggerKey(triggerName, triggerGroupName);\n            CronTrigger trigger = (CronTrigger) scheduler.getTrigger(triggerKey);\n            if (trigger == null) {\n                return false;\n            }\n            System.out.println(scheduler.getTriggerState(triggerKey));\n            String oldTime = trigger.getCronExpression();\n            // Trigger已存在，那么更新相应的定时设置\n            if (!oldTime.equalsIgnoreCase(time)) {\n                //设置一个新的定时时间\n                CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(time);\n                // 按新的cronExpression表达式重新构建trigger\n                CronTrigger cronTrigger = trigger.getTriggerBuilder().withIdentity(triggerKey).withSchedule(scheduleBuilder).build();\n\n                // 按新的trigger重新设置job执行\n                scheduler.rescheduleJob(triggerKey, cronTrigger);\n            }\n            return true;\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    /****\n     * 暂停一个任务\n     * @param triggerName\n     * @param triggerGroupName\n     */\n    public Boolean pauseJob(String triggerName, String triggerGroupName) {\n        try {\n            Scheduler scheduler = gSchedulerFactory.getScheduler();\n            JobKey jobKey = new JobKey(triggerName, triggerGroupName);\n            JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n            if (jobDetail == null) {\n                return false;\n            }\n            scheduler.pauseJob(jobKey);\n            return true;\n        } catch (SchedulerException e) {\n            log.error(\"暂停任务失败\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    /****\n     * 删除一个任务\n     * @param triggerName\n     * @param triggerGroupName\n     */\n    public Boolean deleteJob(String triggerName, String triggerGroupName) {\n        try {\n            Scheduler scheduler = gSchedulerFactory.getScheduler();\n            JobKey jobKey = new JobKey(triggerName, triggerGroupName);\n            JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n            if (jobDetail == null) {\n                return false;\n            }\n            scheduler.deleteJob(jobKey);\n            return true;\n        } catch (SchedulerException e) {\n            log.error(\"删除任务失败\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    /****\n     * 恢复一个任务\n     * @param triggerName\n     * @param triggerGroupName\n     */\n    public Boolean resumeJob(String triggerName, String triggerGroupName) {\n        try {\n            Scheduler scheduler = gSchedulerFactory.getScheduler();\n            JobKey jobKey = new JobKey(triggerName, triggerGroupName);\n            JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n            if (jobDetail == null) {\n                return false;\n            }\n            scheduler.resumeJob(jobKey);\n            return true;\n        } catch (SchedulerException e) {\n            log.error(\"恢复任务失败\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n    /***\n     * 立即执行定时任务\n     */\n    public Boolean doJob(String triggerName, String triggerGroupName) {\n        try {\n            Scheduler scheduler = gSchedulerFactory.getScheduler();\n            JobKey jobKey = JobKey.jobKey(triggerName, triggerGroupName);\n            JobDetail jobDetail = scheduler.getJobDetail(jobKey);\n            if (jobDetail == null) {\n                return false;\n            }\n            TriggerKey key = new TriggerKey(triggerName, triggerGroupName);\n            int ordinal = scheduler.getTriggerState(key).ordinal();\n            if (ordinal == 2) {\n                scheduler.triggerJob(jobKey);\n                scheduler.resumeJob(jobKey);\n            } else {\n                scheduler.triggerJob(jobKey);\n            }\n            return true;\n        } catch (SchedulerException e) {\n            log.error(\"立即执行任务失败\", e);\n            throw new RuntimeException(e);\n        }\n    }\n\n\n    /***\n     * 判断任务是否存在\n     */\n    public Boolean findJob(String triggerName, String triggerGroupName) {\n        try {\n            Scheduler scheduler = gSchedulerFactory.getScheduler();\n            JobKey jobKey = JobKey.jobKey(triggerName, triggerGroupName);\n            return scheduler.checkExists(jobKey);\n        } catch (SchedulerException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n\n\n# SpringApplicationContextUse\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringApplicationContextUse implements ApplicationContextAware {\n\n    private static ApplicationContext applicationContext;\n\n    @Override\n    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n        if (SpringApplicationContextUse.applicationContext == null) {\n            SpringApplicationContextUse.applicationContext = applicationContext;\n        }\n    }\n\n    // 获取applicationContext\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    // 通过name获取 Bean.\n    public static Object getBean(String name) {\n        return getApplicationContext().getBean(name);\n    }\n\n    // 通过class获取Bean.\n    public static <T> T getBean(Class<T> clazz) {\n        return getApplicationContext().getBean(clazz);\n    }\n\n    // 通过name,以及Clazz返回指定的Bean\n    public static <T> T getBean(String name, Class<T> clazz) {\n        return getApplicationContext().getBean(name, clazz);\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# 启动监听类\n\n# AppStartFinishedListener\n\npackage cn.ok96;\n\nimport cn.ok96.ScheduleTask;\nimport org.springframework.boot.ApplicationArguments;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class AppStartFinishedListener implements ApplicationRunner {\n\n    @Override\n    public void run(ApplicationArguments args) {\n        ScheduleTask scheduleTask = (ScheduleTask) SpringApplicationContextUse.getBean(\"scheduleTask\");\n        scheduleTask.scheduleJobs();\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 定时任务Job\n\nTempJob\n\nimport com.alibaba.fastjson.JSONObject;\nimport lombok.extern.slf4j.Slf4j;\nimport org.quartz.Job;\nimport org.quartz.JobDataMap;\nimport org.quartz.JobExecutionContext;\nimport org.quartz.JobExecutionException;\nimport org.springframework.util.StringUtils;\nimport java.time.LocalDateTime;\nimport java.util.HashMap;\nimport java.util.Map;\n@Slf4j\npublic class TempJob implements Job {\n    public JobInfoRepository jobInfoRepository = SpringApplicationContextUse.getBean(JobInfoRepository.class);\n    public JobMessageRepository jobMessageRepository = SpringApplicationContextUse.getBean(JobMessageRepository.class);\n    \n    @Override\n    public void execute(JobExecutionContext jobExecutionContext) throws JobExecutionException {\n        JobDataMap jobDataMap = jobExecutionContext.getJobDetail().getJobDataMap();\n        Long jobId = jobDataMap.getLong(\"jobId\");\n        WfitJobInfo wfitJobInfo = wfitJobInfoRepository.getById(jobId);\n        JSONObject jobPara =JSONObject.parseObject(wfitJobInfo.getJobPara());\n        Long jobTypeId = wfitJobInfo.getJobTypeId();\n        //String paraTemp = jobPara.getString(\"paraTemp\");定时任务参数\n        WfitJobMessage message =new WfitJobMessage();\n        message.setJobId(jobId);\n        message.setCreateTime(LocalDateTime.now());\n        message.setDeleteFlag(false);\n        message.setJobTypeId(jobTypeId);\n        message.setId(1l);\n        message.setMessageStatus(1);\n        message.setMessageBrief(\"插入成功\");\n        message.setMessageInfo(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\n        jobMessageRepository.save(message);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# Mysql\n\n\n# 任务类型\n\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for job_type\n-- ----------------------------\nDROP TABLE IF EXISTS `job_type`;\nCREATE TABLE `job_type`  (\n  `id` bigint(20) NOT NULL,\n  `job_path` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'job工程路径',\n  `job_type_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'job类型名称',\n  `job_para_temp` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT 'job所需参数模板',\n  `modify_time` datetime NULL DEFAULT NULL COMMENT '更新时间',\n  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',\n  `delete_flag` tinyint(1) NULL DEFAULT NULL COMMENT '数字标识位',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '定时任务类型' ROW_FORMAT = Dynamic;\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 定时任务\n\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for job_info\n-- ----------------------------\nDROP TABLE IF EXISTS `job_info`;\nCREATE TABLE `job_info`  (\n  `id` bigint(20) NOT NULL,\n  `job_cron` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT 'corn表达式',\n  `job_type_id` bigint(20) NULL DEFAULT NULL COMMENT 'job类型表id',\n  `job_para` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT 'job所需参数',\n  `job_status` int(2) NULL DEFAULT NULL COMMENT '1启动2暂停，默认1',\n  `job_name` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '任务名称',\n  `modify_time` datetime NULL DEFAULT NULL COMMENT '更新时间',\n  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',\n  `delete_flag` tinyint(1) NULL DEFAULT NULL COMMENT '数字标识位',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '定时任务表' ROW_FORMAT = Dynamic;\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 执行日志\n\nSET NAMES utf8mb4;\nSET FOREIGN_KEY_CHECKS = 0;\n\n-- ----------------------------\n-- Table structure for job_message\n-- ----------------------------\nDROP TABLE IF EXISTS `job_message`;\nCREATE TABLE `job_message`  (\n  `id` bigint(20) NOT NULL,\n  `job_id` bigint(20) NULL DEFAULT NULL COMMENT '定时任务id',\n  `job_type_id` bigint(20) NULL DEFAULT NULL COMMENT 'job类型表id',\n  `message_status` int(2) NULL DEFAULT NULL COMMENT '状态|1:待处理|0:已处理',\n  `message_info` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '信息文本',\n  `message_brief` mediumtext CHARACTER SET utf8 COLLATE utf8_general_ci NULL COMMENT '信息文本概要',\n  `modify_time` datetime NULL DEFAULT NULL COMMENT '更新时间',\n  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',\n  `delete_flag` tinyint(1) NULL DEFAULT NULL COMMENT '数字标识位',\n  PRIMARY KEY (`id`) USING BTREE\n) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci COMMENT = '定时任务信息' ROW_FORMAT = Dynamic;\n\nSET FOREIGN_KEY_CHECKS = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",normalizedContent:"# 流程图\n\n\n\n\n# yml\n\n#定时任务是否开启及组名\njobself:\n  enable: true\n  jobgroupname: group1\n\n\n1\n2\n3\n4\n\n\n\n# pom\n\n        <dependency>\n            <groupid>org.quartz-scheduler</groupid>\n            <artifactid>quartz</artifactid>\n            <version>2.2.1</version>\x3c!--$no-mvn-man-ver$ --\x3e\n            <exclusions>\n                <exclusion>\n                    <artifactid>slf4j-api</artifactid>\n                    <groupid>org.slf4j</groupid>\n                </exclusion>\n            </exclusions>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# java\n\n\n# 工具类\n\n# scheduletask\n\npackage cn.ok96;\n\n\nimport lombok.extern.slf4j.slf4j;\nimport org.quartz.*;\nimport org.quartz.impl.stdschedulerfactory;\nimport org.springframework.beans.factory.annotation.value;\nimport org.springframework.stereotype.component;\n\nimport javax.annotation.resource;\nimport java.util.hashmap;\nimport java.util.list;\nimport java.util.map;\nimport java.util.map.entry;\n\n\n/**\n * 定时工具类\n *\n * @author nepk\n */\n@slf4j\n@component\npublic class scheduletask {\n\n    private static schedulerfactory gschedulerfactory = new stdschedulerfactory();\n\n    @resource\n    private jobinforepository jobinforepository;\n\n    @resource\n    private jobtyperepository jobtyperepository;\n\n    @value(\"${jobself.jobgroupname}\")\n    private string jobgroupname;\n\n    @value(\"${jobself.enable}\")\n    private boolean enable;\n\n    /**\n     * 启动工程时加载job\n     * @throws schedulerexception\n     */\n    @suppresswarnings(\"unchecked\")\n    public void schedulejobs() {\n        if (enable){\n            log.info(\"启动工程时加载job\");\n            list<jobinfo> jobinfos =  jobinforepository.findall();\n            if (jobinfos.isempty()) {\n                log.info(\"没有可执行的任务\");\n                return;\n            } else {\n                for (wfitjobinfo jobinfo : jobinfos) {\n                    map<string, object> map = new hashmap<>();\n                    map.put(\"jobid\", jobinfo.getid());\n\n                    wfitjobtype jobtype = jobtyperepository.getbyid(jobinfo.getjobtypeid());\n                    if (jobinfo!=null){\n                        setjob(jobinfo.getjobcron(), jobgroupname, jobinfo.getid()+\"\"\n                                ,jobtype.getjobpath() , map, jobinfo.getjobstatus() == 2);\n                    }\n\n                }\n            }\n        }\n\n    }\n\n\n    /**\n     * 设置定时\n     *\n     * @param time\n     * @param group  ----这个是组\n     * @param jobid  ----这个是name\n     * @param job    ----cn.ok96.job.xxx\n     * @param params ----参数\n     */\n    public void setjob(string time, string group, string jobid, string job, map<string, object> params, boolean\n            ispausejob) {\n        try {\n            scheduler scheduler = gschedulerfactory.getscheduler();\n            class jobclass = class.forname(job);\n            // 设置job的名字和组\n            jobdetail jobdetail = jobbuilder.newjob(jobclass).withidentity(jobid, group).build();\n            //动态添加数据 放置参数\n            if (params.size() > 0) {\n                for (entry<string, object> entry : params.entryset()) {\n                    jobdetail.getjobdatamap().put(entry.getkey(), entry.getvalue());\n                }\n            }\n            cronschedulebuilder schedulebuilder = cronschedulebuilder.cronschedule(time);\n            //设置定时任务的时间触发规则\n            crontrigger crontrigger = triggerbuilder.newtrigger().withidentity(jobid, group).withschedule(schedulebuilder).build();\n            // 把作业和触发器注册到任务调度中\n            scheduler.schedulejob(jobdetail, crontrigger);\n            if (ispausejob) {\n                jobkey jobkey = new jobkey(jobid, group);\n                scheduler.pausejob(jobkey);\n            } else {\n                scheduler.start();\n            }\n        } catch (exception e) {\n            log.error(\"创建任务失败\", e);\n            throw new runtimeexception(e);\n        }\n\n    }\n\n    /***\n     * 修改定时任务时间\n     * @param triggername\n     * @param triggergroupname\n     * @param time\n     */\n    public boolean modifyjobtime(string triggername, string triggergroupname, string time) {\n        try {\n            scheduler scheduler = gschedulerfactory.getscheduler();\n            triggerkey triggerkey = new triggerkey(triggername, triggergroupname);\n            crontrigger trigger = (crontrigger) scheduler.gettrigger(triggerkey);\n            if (trigger == null) {\n                return false;\n            }\n            system.out.println(scheduler.gettriggerstate(triggerkey));\n            string oldtime = trigger.getcronexpression();\n            // trigger已存在，那么更新相应的定时设置\n            if (!oldtime.equalsignorecase(time)) {\n                //设置一个新的定时时间\n                cronschedulebuilder schedulebuilder = cronschedulebuilder.cronschedule(time);\n                // 按新的cronexpression表达式重新构建trigger\n                crontrigger crontrigger = trigger.gettriggerbuilder().withidentity(triggerkey).withschedule(schedulebuilder).build();\n\n                // 按新的trigger重新设置job执行\n                scheduler.reschedulejob(triggerkey, crontrigger);\n            }\n            return true;\n        } catch (exception e) {\n            throw new runtimeexception(e);\n        }\n    }\n\n    /****\n     * 暂停一个任务\n     * @param triggername\n     * @param triggergroupname\n     */\n    public boolean pausejob(string triggername, string triggergroupname) {\n        try {\n            scheduler scheduler = gschedulerfactory.getscheduler();\n            jobkey jobkey = new jobkey(triggername, triggergroupname);\n            jobdetail jobdetail = scheduler.getjobdetail(jobkey);\n            if (jobdetail == null) {\n                return false;\n            }\n            scheduler.pausejob(jobkey);\n            return true;\n        } catch (schedulerexception e) {\n            log.error(\"暂停任务失败\", e);\n            throw new runtimeexception(e);\n        }\n    }\n\n    /****\n     * 删除一个任务\n     * @param triggername\n     * @param triggergroupname\n     */\n    public boolean deletejob(string triggername, string triggergroupname) {\n        try {\n            scheduler scheduler = gschedulerfactory.getscheduler();\n            jobkey jobkey = new jobkey(triggername, triggergroupname);\n            jobdetail jobdetail = scheduler.getjobdetail(jobkey);\n            if (jobdetail == null) {\n                return false;\n            }\n            scheduler.deletejob(jobkey);\n            return true;\n        } catch (schedulerexception e) {\n            log.error(\"删除任务失败\", e);\n            throw new runtimeexception(e);\n        }\n    }\n\n    /****\n     * 恢复一个任务\n     * @param triggername\n     * @param triggergroupname\n     */\n    public boolean resumejob(string triggername, string triggergroupname) {\n        try {\n            scheduler scheduler = gschedulerfactory.getscheduler();\n            jobkey jobkey = new jobkey(triggername, triggergroupname);\n            jobdetail jobdetail = scheduler.getjobdetail(jobkey);\n            if (jobdetail == null) {\n                return false;\n            }\n            scheduler.resumejob(jobkey);\n            return true;\n        } catch (schedulerexception e) {\n            log.error(\"恢复任务失败\", e);\n            throw new runtimeexception(e);\n        }\n    }\n\n    /***\n     * 立即执行定时任务\n     */\n    public boolean dojob(string triggername, string triggergroupname) {\n        try {\n            scheduler scheduler = gschedulerfactory.getscheduler();\n            jobkey jobkey = jobkey.jobkey(triggername, triggergroupname);\n            jobdetail jobdetail = scheduler.getjobdetail(jobkey);\n            if (jobdetail == null) {\n                return false;\n            }\n            triggerkey key = new triggerkey(triggername, triggergroupname);\n            int ordinal = scheduler.gettriggerstate(key).ordinal();\n            if (ordinal == 2) {\n                scheduler.triggerjob(jobkey);\n                scheduler.resumejob(jobkey);\n            } else {\n                scheduler.triggerjob(jobkey);\n            }\n            return true;\n        } catch (schedulerexception e) {\n            log.error(\"立即执行任务失败\", e);\n            throw new runtimeexception(e);\n        }\n    }\n\n\n    /***\n     * 判断任务是否存在\n     */\n    public boolean findjob(string triggername, string triggergroupname) {\n        try {\n            scheduler scheduler = gschedulerfactory.getscheduler();\n            jobkey jobkey = jobkey.jobkey(triggername, triggergroupname);\n            return scheduler.checkexists(jobkey);\n        } catch (schedulerexception e) {\n            e.printstacktrace();\n        }\n        return false;\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n\n\n# springapplicationcontextuse\n\nimport org.springframework.beans.beansexception;\nimport org.springframework.context.applicationcontext;\nimport org.springframework.context.applicationcontextaware;\nimport org.springframework.stereotype.component;\n\n@component\npublic class springapplicationcontextuse implements applicationcontextaware {\n\n    private static applicationcontext applicationcontext;\n\n    @override\n    public void setapplicationcontext(applicationcontext applicationcontext) throws beansexception {\n        if (springapplicationcontextuse.applicationcontext == null) {\n            springapplicationcontextuse.applicationcontext = applicationcontext;\n        }\n    }\n\n    // 获取applicationcontext\n    public static applicationcontext getapplicationcontext() {\n        return applicationcontext;\n    }\n\n    // 通过name获取 bean.\n    public static object getbean(string name) {\n        return getapplicationcontext().getbean(name);\n    }\n\n    // 通过class获取bean.\n    public static <t> t getbean(class<t> clazz) {\n        return getapplicationcontext().getbean(clazz);\n    }\n\n    // 通过name,以及clazz返回指定的bean\n    public static <t> t getbean(string name, class<t> clazz) {\n        return getapplicationcontext().getbean(name, clazz);\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# 启动监听类\n\n# appstartfinishedlistener\n\npackage cn.ok96;\n\nimport cn.ok96.scheduletask;\nimport org.springframework.boot.applicationarguments;\nimport org.springframework.boot.applicationrunner;\nimport org.springframework.stereotype.component;\n\n@component\npublic class appstartfinishedlistener implements applicationrunner {\n\n    @override\n    public void run(applicationarguments args) {\n        scheduletask scheduletask = (scheduletask) springapplicationcontextuse.getbean(\"scheduletask\");\n        scheduletask.schedulejobs();\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 定时任务job\n\ntempjob\n\nimport com.alibaba.fastjson.jsonobject;\nimport lombok.extern.slf4j.slf4j;\nimport org.quartz.job;\nimport org.quartz.jobdatamap;\nimport org.quartz.jobexecutioncontext;\nimport org.quartz.jobexecutionexception;\nimport org.springframework.util.stringutils;\nimport java.time.localdatetime;\nimport java.util.hashmap;\nimport java.util.map;\n@slf4j\npublic class tempjob implements job {\n    public jobinforepository jobinforepository = springapplicationcontextuse.getbean(jobinforepository.class);\n    public jobmessagerepository jobmessagerepository = springapplicationcontextuse.getbean(jobmessagerepository.class);\n    \n    @override\n    public void execute(jobexecutioncontext jobexecutioncontext) throws jobexecutionexception {\n        jobdatamap jobdatamap = jobexecutioncontext.getjobdetail().getjobdatamap();\n        long jobid = jobdatamap.getlong(\"jobid\");\n        wfitjobinfo wfitjobinfo = wfitjobinforepository.getbyid(jobid);\n        jsonobject jobpara =jsonobject.parseobject(wfitjobinfo.getjobpara());\n        long jobtypeid = wfitjobinfo.getjobtypeid();\n        //string paratemp = jobpara.getstring(\"paratemp\");定时任务参数\n        wfitjobmessage message =new wfitjobmessage();\n        message.setjobid(jobid);\n        message.setcreatetime(localdatetime.now());\n        message.setdeleteflag(false);\n        message.setjobtypeid(jobtypeid);\n        message.setid(1l);\n        message.setmessagestatus(1);\n        message.setmessagebrief(\"插入成功\");\n        message.setmessageinfo(\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\");\n        jobmessagerepository.save(message);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# mysql\n\n\n# 任务类型\n\nset names utf8mb4;\nset foreign_key_checks = 0;\n\n-- ----------------------------\n-- table structure for job_type\n-- ----------------------------\ndrop table if exists `job_type`;\ncreate table `job_type`  (\n  `id` bigint(20) not null,\n  `job_path` varchar(255) character set utf8 collate utf8_general_ci null default null comment 'job工程路径',\n  `job_type_name` varchar(255) character set utf8 collate utf8_general_ci null default null comment 'job类型名称',\n  `job_para_temp` mediumtext character set utf8 collate utf8_general_ci null comment 'job所需参数模板',\n  `modify_time` datetime null default null comment '更新时间',\n  `create_time` datetime null default null comment '创建时间',\n  `delete_flag` tinyint(1) null default null comment '数字标识位',\n  primary key (`id`) using btree\n) engine = innodb character set = utf8 collate = utf8_general_ci comment = '定时任务类型' row_format = dynamic;\n\nset foreign_key_checks = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 定时任务\n\nset names utf8mb4;\nset foreign_key_checks = 0;\n\n-- ----------------------------\n-- table structure for job_info\n-- ----------------------------\ndrop table if exists `job_info`;\ncreate table `job_info`  (\n  `id` bigint(20) not null,\n  `job_cron` varchar(100) character set utf8 collate utf8_general_ci null default null comment 'corn表达式',\n  `job_type_id` bigint(20) null default null comment 'job类型表id',\n  `job_para` mediumtext character set utf8 collate utf8_general_ci null comment 'job所需参数',\n  `job_status` int(2) null default null comment '1启动2暂停，默认1',\n  `job_name` varchar(100) character set utf8 collate utf8_general_ci null default null comment '任务名称',\n  `modify_time` datetime null default null comment '更新时间',\n  `create_time` datetime null default null comment '创建时间',\n  `delete_flag` tinyint(1) null default null comment '数字标识位',\n  primary key (`id`) using btree\n) engine = innodb character set = utf8 collate = utf8_general_ci comment = '定时任务表' row_format = dynamic;\n\nset foreign_key_checks = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 执行日志\n\nset names utf8mb4;\nset foreign_key_checks = 0;\n\n-- ----------------------------\n-- table structure for job_message\n-- ----------------------------\ndrop table if exists `job_message`;\ncreate table `job_message`  (\n  `id` bigint(20) not null,\n  `job_id` bigint(20) null default null comment '定时任务id',\n  `job_type_id` bigint(20) null default null comment 'job类型表id',\n  `message_status` int(2) null default null comment '状态|1:待处理|0:已处理',\n  `message_info` mediumtext character set utf8 collate utf8_general_ci null comment '信息文本',\n  `message_brief` mediumtext character set utf8 collate utf8_general_ci null comment '信息文本概要',\n  `modify_time` datetime null default null comment '更新时间',\n  `create_time` datetime null default null comment '创建时间',\n  `delete_flag` tinyint(1) null default null comment '数字标识位',\n  primary key (`id`) using btree\n) engine = innodb character set = utf8 collate = utf8_general_ci comment = '定时任务信息' row_format = dynamic;\n\nset foreign_key_checks = 1;\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n",charsets:{cjk:!0},lastUpdated:"2023/06/16, 09:58:37",lastUpdatedTimestamp:1686909517e3},{title:"Validation数据校验规范使用",frontmatter:{title:"Validation数据校验规范使用",date:"2023-03-13T10:57:54.000Z",permalink:"/pages/308d39/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/08.Validation%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C%E8%A7%84%E8%8C%83%E4%BD%BF%E7%94%A8.html",relativePath:"01.Java/08.Validation数据校验规范使用.md",key:"v-5d0a8c6d",path:"/pages/308d39/",headers:[{level:2,title:"pom",slug:"pom",normalizedTitle:"pom",charIndex:2},{level:2,title:"代码使用",slug:"代码使用",normalizedTitle:"代码使用",charIndex:401},{level:3,title:"创建通用校验返回结果类：ValidationResult",slug:"创建通用校验返回结果类-validationresult",normalizedTitle:"创建通用校验返回结果类：validationresult",charIndex:410},{level:3,title:"创建校验工具类：ValidationUtils",slug:"创建校验工具类-validationutils",normalizedTitle:"创建校验工具类：validationutils",charIndex:1257},{level:3,title:"实体类添加校验规则",slug:"实体类添加校验规则",normalizedTitle:"实体类添加校验规则",charIndex:4135},{level:2,title:"代码中使用",slug:"代码中使用",normalizedTitle:"代码中使用",charIndex:4741}],headersStr:"pom 代码使用 创建通用校验返回结果类：ValidationResult 创建校验工具类：ValidationUtils 实体类添加校验规则 代码中使用",content:'# pom\n\n<dependency>\n            <groupId>javax.validation</groupId>\n            <artifactId>validation-api</artifactId>\n            <version>2.0.1.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-validator</artifactId>\n            <version>5.1.3.Final</version>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 代码使用\n\n\n# 创建通用校验返回结果类：ValidationResult\n\npackage cn.ok96.util;\nimport java.util.Map;\n\npublic class ValidationResult {\n\n    //校验结果是否有错\n    private boolean hasErrors;\n\n    //校验错误信息  key: property   value : errorMessage\n    private Map<String,String> errorMsg;\n\n    public boolean isHasErrors() {\n        return hasErrors;\n    }\n\n    public void setHasErrors(boolean hasErrors) {\n        this.hasErrors = hasErrors;\n    }\n\n    public Map<String, String> getErrorMsg() {\n        return errorMsg;\n    }\n\n    public void setErrorMsg(Map<String, String> errorMsg) {\n        this.errorMsg = errorMsg;\n    }\n\n    @Override\n    public String toString() {\n        return "ValidationResult [hasErrors=" + hasErrors + ", errorMsg="\n                + errorMsg + "]";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 创建校验工具类：ValidationUtils\n\npackage cn.ok96.util;\n\nimport org.springframework.util.CollectionUtils;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\nimport javax.validation.groups.Default;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Set;\n\n/**\n * 校验工具类\n *\n * @author lizhilong\n */\npublic class ValidationUtils {\n\n    private static Validator validator = Validation.buildDefaultValidatorFactory().getValidator();\n\n    public static <T> ValidationResult validateEntity(T obj) {\n        ValidationResult result = new ValidationResult();\n        Set<ConstraintViolation<T>> set = validator.validate(obj, Default.class);\n        // if( CollectionUtils.isNotEmpty(set) ){\n        if (set != null && set.size() != 0) {\n            result.setHasErrors(true);\n            Map<String, String> errorMsg = new HashMap<String, String>();\n            for (ConstraintViolation<T> cv : set) {\n                errorMsg.put(cv.getPropertyPath().toString(), cv.getMessage());\n            }\n            result.setErrorMsg(errorMsg);\n        }\n        return result;\n    }\n\n    public static <T> ValidationResult validateProperty(T obj, String propertyName) {\n        ValidationResult result = new ValidationResult();\n        Set<ConstraintViolation<T>> set = validator.validateProperty(obj, propertyName, Default.class);\n        if (set != null && set.size() != 0) {\n            result.setHasErrors(true);\n            Map<String, String> errorMsg = new HashMap<String, String>();\n            for (ConstraintViolation<T> cv : set) {\n                errorMsg.put(propertyName, cv.getMessage());\n            }\n            result.setErrorMsg(errorMsg);\n        }\n        return result;\n    }\n    public static <T> Map<String, StringBuilder> validate(T object, Class<?>... groups) {\n        Map<String, StringBuilder> errorMap = new HashMap<>(16);\n        if (groups == null) {\n            groups = new Class[]{Default.class};\n        }\n        Set<ConstraintViolation<T>> set = validator.validate(object, groups);\n        if (CollectionUtils.isEmpty(set)) {\n            return null;\n        }\n        String property;\n        for (ConstraintViolation<T> c : set) {\n            // 这里循环获取错误信息，可以自定义格式\n            property = c.getPropertyPath().toString();\n            if (errorMap.get(property) != null) {\n                errorMap.get(property).append(",").append(c.getMessage());\n            } else {\n                StringBuilder sb = new StringBuilder();\n                sb.append(c.getMessage());\n                errorMap.put(property, sb);\n            }\n        }\n        return errorMap;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n\n\n\n# 实体类添加校验规则\n\npackage cn.ok96.modules.api.entity;\n\n\nimport lombok.Data;\nimport org.hibernate.validator.constraints.NotBlank;\nimport java.io.Serializable;\nimport javax.validation.constraints.NotNull;\n\n@Data\npublic class Okmo  implements Serializable {\n    \n    //设备 ID\n    @Id\n    @NotNull(message = "id不能为空")\n    private String id;\n\n    //名称\n    @NotBlank(message="名称不能为空")\n    @Column(name = "name")\n    private String name;\n\n    //型号\n    @NotNull(message = "型号不能为空")\n    @Column(name = "model")\n    private String model;\n\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 代码中使用\n\nOkmo ok=new Okmo(); \n//校验实体类\nValidationResult vr  = ValidationUtils.validateEntity(ok);\nif (vr.isHasErrors()) {\n    StringBuffer msg = new StringBuffer();\n    for (String key : vr.getErrorMsg().keySet()) {\n        msg.append("key:").append(key).append(",value:").append(vr.getErrorMsg().get(key)).append(";");\n    }\n   System.out.println(msg);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',normalizedContent:'# pom\n\n<dependency>\n            <groupid>javax.validation</groupid>\n            <artifactid>validation-api</artifactid>\n            <version>2.0.1.final</version>\n        </dependency>\n        <dependency>\n            <groupid>org.hibernate</groupid>\n            <artifactid>hibernate-validator</artifactid>\n            <version>5.1.3.final</version>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 代码使用\n\n\n# 创建通用校验返回结果类：validationresult\n\npackage cn.ok96.util;\nimport java.util.map;\n\npublic class validationresult {\n\n    //校验结果是否有错\n    private boolean haserrors;\n\n    //校验错误信息  key: property   value : errormessage\n    private map<string,string> errormsg;\n\n    public boolean ishaserrors() {\n        return haserrors;\n    }\n\n    public void sethaserrors(boolean haserrors) {\n        this.haserrors = haserrors;\n    }\n\n    public map<string, string> geterrormsg() {\n        return errormsg;\n    }\n\n    public void seterrormsg(map<string, string> errormsg) {\n        this.errormsg = errormsg;\n    }\n\n    @override\n    public string tostring() {\n        return "validationresult [haserrors=" + haserrors + ", errormsg="\n                + errormsg + "]";\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 创建校验工具类：validationutils\n\npackage cn.ok96.util;\n\nimport org.springframework.util.collectionutils;\n\nimport javax.validation.constraintviolation;\nimport javax.validation.validation;\nimport javax.validation.validator;\nimport javax.validation.groups.default;\nimport java.util.hashmap;\nimport java.util.map;\nimport java.util.set;\n\n/**\n * 校验工具类\n *\n * @author lizhilong\n */\npublic class validationutils {\n\n    private static validator validator = validation.builddefaultvalidatorfactory().getvalidator();\n\n    public static <t> validationresult validateentity(t obj) {\n        validationresult result = new validationresult();\n        set<constraintviolation<t>> set = validator.validate(obj, default.class);\n        // if( collectionutils.isnotempty(set) ){\n        if (set != null && set.size() != 0) {\n            result.sethaserrors(true);\n            map<string, string> errormsg = new hashmap<string, string>();\n            for (constraintviolation<t> cv : set) {\n                errormsg.put(cv.getpropertypath().tostring(), cv.getmessage());\n            }\n            result.seterrormsg(errormsg);\n        }\n        return result;\n    }\n\n    public static <t> validationresult validateproperty(t obj, string propertyname) {\n        validationresult result = new validationresult();\n        set<constraintviolation<t>> set = validator.validateproperty(obj, propertyname, default.class);\n        if (set != null && set.size() != 0) {\n            result.sethaserrors(true);\n            map<string, string> errormsg = new hashmap<string, string>();\n            for (constraintviolation<t> cv : set) {\n                errormsg.put(propertyname, cv.getmessage());\n            }\n            result.seterrormsg(errormsg);\n        }\n        return result;\n    }\n    public static <t> map<string, stringbuilder> validate(t object, class<?>... groups) {\n        map<string, stringbuilder> errormap = new hashmap<>(16);\n        if (groups == null) {\n            groups = new class[]{default.class};\n        }\n        set<constraintviolation<t>> set = validator.validate(object, groups);\n        if (collectionutils.isempty(set)) {\n            return null;\n        }\n        string property;\n        for (constraintviolation<t> c : set) {\n            // 这里循环获取错误信息，可以自定义格式\n            property = c.getpropertypath().tostring();\n            if (errormap.get(property) != null) {\n                errormap.get(property).append(",").append(c.getmessage());\n            } else {\n                stringbuilder sb = new stringbuilder();\n                sb.append(c.getmessage());\n                errormap.put(property, sb);\n            }\n        }\n        return errormap;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n\n\n\n# 实体类添加校验规则\n\npackage cn.ok96.modules.api.entity;\n\n\nimport lombok.data;\nimport org.hibernate.validator.constraints.notblank;\nimport java.io.serializable;\nimport javax.validation.constraints.notnull;\n\n@data\npublic class okmo  implements serializable {\n    \n    //设备 id\n    @id\n    @notnull(message = "id不能为空")\n    private string id;\n\n    //名称\n    @notblank(message="名称不能为空")\n    @column(name = "name")\n    private string name;\n\n    //型号\n    @notnull(message = "型号不能为空")\n    @column(name = "model")\n    private string model;\n\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 代码中使用\n\nokmo ok=new okmo(); \n//校验实体类\nvalidationresult vr  = validationutils.validateentity(ok);\nif (vr.ishaserrors()) {\n    stringbuffer msg = new stringbuffer();\n    for (string key : vr.geterrormsg().keyset()) {\n        msg.append("key:").append(key).append(",value:").append(vr.geterrormsg().get(key)).append(";");\n    }\n   system.out.println(msg);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',charsets:{cjk:!0},lastUpdated:"2023/03/13, 03:16:04",lastUpdatedTimestamp:1678677364e3},{title:"常用代码",frontmatter:{title:"常用代码",date:"2023-03-13T11:01:26.000Z",permalink:"/pages/84b073/",categories:["Java"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/01.Java/09.%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81.html",relativePath:"01.Java/09.常用代码.md",key:"v-5dc019aa",path:"/pages/84b073/",headers:[{level:2,title:"Stream流",slug:"stream流",normalizedTitle:"stream流",charIndex:2},{level:3,title:"循环增加某KEY值VALUE",slug:"循环增加某key值value",normalizedTitle:"循环增加某key值value",charIndex:14},{level:3,title:"两个List相同Key的值相加",slug:"两个list相同key的值相加",normalizedTitle:"两个list相同key的值相加",charIndex:162},{level:3,title:"List存在null值",slug:"list存在null值",normalizedTitle:"list存在null值",charIndex:1810},{level:3,title:"获取List中Model嵌套model的id",slug:"获取list中model嵌套model的id",normalizedTitle:"获取list中model嵌套model的id",charIndex:1918},{level:2,title:"深拷贝",slug:"深拷贝",normalizedTitle:"深拷贝",charIndex:2116},{level:2,title:"计时器",slug:"计时器",normalizedTitle:"计时器",charIndex:2162},{level:2,title:"LocalDateTime",slug:"localdatetime",normalizedTitle:"localdatetime",charIndex:2304},{level:2,title:"LocalTime",slug:"localtime",normalizedTitle:"localtime",charIndex:2741},{level:2,title:"LocalDate",slug:"localdate",normalizedTitle:"localdate",charIndex:2304},{level:2,title:"Mybatis实体类关联",slug:"mybatis实体类关联",normalizedTitle:"mybatis实体类关联",charIndex:3972},{level:3,title:"实体类",slug:"实体类",normalizedTitle:"实体类",charIndex:3979},{level:3,title:"使用内连接+级联属性",slug:"使用内连接-级联属性",normalizedTitle:"使用内连接+级联属性",charIndex:4508},{level:2,title:"正则表达式",slug:"正则表达式",normalizedTitle:"正则表达式",charIndex:5463},{level:2,title:"注入Bean",slug:"注入bean",normalizedTitle:"注入bean",charIndex:5485},{level:3,title:"定义接口",slug:"定义接口",normalizedTitle:"定义接口",charIndex:5528},{level:3,title:"实现类",slug:"实现类",normalizedTitle:"实现类",charIndex:5504},{level:3,title:"配置注入",slug:"配置注入",normalizedTitle:"配置注入",charIndex:6119},{level:3,title:"Controller调用",slug:"controller调用",normalizedTitle:"controller调用",charIndex:6760},{level:2,title:"为什么SpringBoot的 jar 可以直接运行",slug:"为什么springboot的-jar-可以直接运行",normalizedTitle:"为什么springboot的 jar 可以直接运行",charIndex:6978},{level:2,title:"MySQL报错",slug:"mysql报错",normalizedTitle:"mysql报错",charIndex:7018},{level:3,title:"onlyfullgroup_by",slug:"only-full-group-by",normalizedTitle:"onlyfullgroup_by",charIndex:null},{level:4,title:"解决办法-方案一",slug:"解决办法-方案一",normalizedTitle:"解决办法-方案一",charIndex:7820},{level:4,title:"解决办法-方案二",slug:"解决办法-方案二",normalizedTitle:"解决办法-方案二",charIndex:7988},{level:2,title:"对象之间属性赋值",slug:"对象之间属性赋值",normalizedTitle:"对象之间属性赋值",charIndex:8311},{level:2,title:"jackson把实体类转换为json字符串",slug:"jackson把实体类转换为json字符串",normalizedTitle:"jackson把实体类转换为json字符串",charIndex:8507},{level:2,title:"泛型转实体,Object转实体",slug:"泛型转实体-object转实体",normalizedTitle:"泛型转实体,object转实体",charIndex:9060},{level:2,title:"list根据另外一个list排序",slug:"list根据另外一个list排序",normalizedTitle:"list根据另外一个list排序",charIndex:9502}],headersStr:"Stream流 循环增加某KEY值VALUE 两个List相同Key的值相加 List存在null值 获取List中Model嵌套model的id 深拷贝 计时器 LocalDateTime LocalTime LocalDate Mybatis实体类关联 实体类 使用内连接+级联属性 正则表达式 注入Bean 定义接口 实现类 配置注入 Controller调用 为什么SpringBoot的 jar 可以直接运行 MySQL报错 onlyfullgroup_by 解决办法-方案一 解决办法-方案二 对象之间属性赋值 jackson把实体类转换为json字符串 泛型转实体,Object转实体 list根据另外一个list排序",content:'# Stream流\n\n\n# 循环增加某KEY值VALUE\n\n list.stream().forEach(map -> map.put("AREA_HEIGHT", StrUtil.isBlank(area_height) ? 0 : Double.parseDouble(area_height)));\n\n\n1\n\n\n\n# 两个List相同Key的值相加\n\n     public static void main(String[] args) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put("中文", "a");\n        map.put("价格",500);\n\n\n        Map<String, Object> map3 = new HashMap<String, Object>();\n        map3.put("中文", "b");\n        map3.put("价格",300);\n\n        Map<String, Object> map4 = new HashMap<String, Object>();\n        map4.put("中文", "c");\n        map4.put("价格",1500);\n\n        List<Map<String, Object>> list1 = new ArrayList<Map<String,Object>>();\n        list1.add(map);\n        list1.add(map3);\n\n        List<Map<String, Object>> list2 = new ArrayList<Map<String,Object>>();\n        list2.add(map);\n        list2.add(map4);\n        List<Map<String, Object>> list = new ArrayList<Map<String,Object>>();\n        list.addAll(list1);\n        list.addAll(list2);\n\n        List<Map<String,Object>> result =new ArrayList<>();\n        Map<String, List<Map<String, Object>>> glist = list.stream().collect(Collectors.groupingBy(e -> e.get("中文").toString()));\n\n        glist.forEach((k,slist)->{\n            Map<String,Object> nmap=new HashMap<>();\n            IntSummaryStatistics sumcc = slist.stream().collect(Collectors.summarizingInt(e->Integer.valueOf(e.get("价格").toString())));\n            nmap.put("中文", slist.get(0).get("中文"));\n            nmap.put("价格", sumcc.getSum());//求和\n            result.add(nmap);\n        });\n        System.out.println("--------testMerge-------------");\n        result.forEach(x->{\n            System.out.println(x);\n        });\n\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# List存在null值\n\nNot showing null elements\n\n\n\n把null元素移除：\n\nlist.removeAll(Collections.singleton(null));\n\n\n1\n\n\n\n# 获取List中Model嵌套model的id\n\n List<String> ids = checkingTheListItems.stream().map(InsRecordToSeVo:: getInspectionRecord).map(InspectionRecord :: getTaskProjectId).collect(Collectors.toList());\n\n\n1\n\n\n\n# 深拷贝\n\n SerializationUtils.clone(xxxx)\n\n\n1\n\n\n\n# 计时器\n\nStopWatch stopWatch = new StopWatch();\n\nstopWatch.start("深拷贝");\nstopWatch.stop();\n\nlog.info(stopWatch.prettyPrint());\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# LocalDateTime\n\n// 获取当前日期时间\nLocalDateTime localDateTime = LocalDateTime.now();\n// 设置日期\nLocalDateTime localDateTime1 = LocalDateTime.of(2019, Month.SEPTEMBER, 10, 14, 46, 56);\nLocalDateTime localDateTime2 = LocalDateTime.of(localDate, localTime);\nLocalDateTime localDateTime3 = localDate.atTime(localTime);\nLocalDateTime localDateTime4 = localTime.atDate(localDate);\n// 获取LocalDate\nLocalDate localDate2 = localDateTime.toLocalDate();\n// 获取LocalTime\nLocalTime localTime2 = localDateTime.toLocalTime();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# LocalTime\n\n // 获取当前时间\nLocalTime now = LocalTime.now();\n// 设置时间\nLocalTime localTime = LocalTime.of(13, 51, 10);\n//获取小时\nint hour = localTime.getHour();    // 结果：13\nint hour1 = localTime.get(ChronoField.HOUR_OF_DAY); // 结果：13\n//获取分\nint minute = localTime.getMinute();  // 结果：51\nint minute1 = localTime.get(ChronoField.MINUTE_OF_HOUR); // 结果：51\n//获取秒\nint second = localTime.getSecond();   // 结果：10\nint second1 = localTime.get(ChronoField.SECOND_OF_MINUTE); // 结果：10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# LocalDate\n\n // 获取当前日期\nLocalDate now = LocalDate.now();\n// 设置日期\nLocalDate localDate = LocalDate.of(2019, 9, 10);\n// 获取年\nint year = localDate.getYear();     //结果：2019\nint year1 = localDate.get(ChronoField.YEAR); //结果：2019\n// 获取月\nMonth month = localDate.getMonth();   // 结果：SEPTEMBER\nint month1 = localDate.get(ChronoField.MONTH_OF_YEAR); //结果：9\n// 获取日\nint day = localDate.getDayOfMonth();   //结果：10\nint day1 = localDate.get(ChronoField.DAY_OF_MONTH); // 结果：10\n// 获取星期\nDayOfWeek dayOfWeek = localDate.getDayOfWeek();   //结果：TUESDAY\nint dayOfWeek1 = localDate.get(ChronoField.DAY_OF_WEEK); //结果：2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# Mybatis实体类关联\n\n\n# 实体类\n\n @Data\n@ToString\n@NoArgsConstructor\npublic class IdCard {\n    private Integer id;\n    private String number;\n    private Date expiredTime;\n\n    public IdCard(Integer id) {\n        this.id = id;\n    }\n\n}\n\n\n@Data\n@ToString\n@NoArgsConstructor\npublic class Person {\n    protected Integer id;\n    protected String name;\n    protected IdCard idCard;\n\n    public Person(Integer id) {\n        this.id = id;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n对于关联属性的配置，有5种方式\n\n参考博客：blog\n\n\n# 使用内连接+级联属性\n\n <?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper\nPUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n"http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n\n<mapper namespace="com.sunwii.mybatis.mapper.PersonMapper">\n    <resultMap type="PersonResult" id="PersonMap">\n        <id property="id" column="id" />\n        <result property="name" column="name" />\n        \x3c!-- 一对一关联：单向。方式零：使用级联属性 --\x3e\n        <result property="idCard.id" column="cid"/>\n        <result property="idCard.number" column="number"/>\n        <result property="idCard.expiredTime" column="expired_time"/>\n    </resultMap>\n    <select id="selectById" parameterType="Integer"\n        resultMap="PersonMap">\n        select p.id id, p.name name,c.id cid,c.number\n        number,c.expired_time expired_time from t_person p\n        inner join t_idcard\n        c on p.idcard_id=c.id and p.id=#{id}\n    </select>\n</mapper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 正则表达式\n\n速查手册： blog\n\n\n# 注入Bean\n\n需求：工程启动时，执行实现类initAll()方法（非监听）\n\n\n# 定义接口\n\npublic interface MapPosServer {\n     void initAll();\n     void destructionAll();\n      void other();\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 实现类\n\n @Slf4j\n@Service\npublic class MapPosServerImpl implements MapPosServer  {\n\n    @Override\n    public void initAll() {\n        log.info("开始初始化");\n       \n    }\n\n    /**\n     * 注销所有地图\n     * @return\n     */\n    @Override\n    public void destructionAll() {\n        log.info("开始注销所有地图");\n       \n    }\n\n\n    @Override\n    public void other() {\n        log.info("其他方法");\n       \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 配置注入\n\nimport cn.ok96.service.MapPosServerImpl;\nimport cn.ok96.service.impl.MapPositioningServerImpl;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Scope;\n\n@Configuration\npublic class MapPosConfig  {\n\n\n    public  MapPosConfig(){\n        System.out.println("初始化");\n    }\n\n    @Bean(name="MapPosServerInit",initMethod="initAll",destroyMethod="destructionAll")\n    @Scope("prototype")\n    public MapPosServer testBean() {\n        return new MapPosServerImpl();\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# Controller调用\n\n @Resource(name="MapPosServerInit")\n    private MapPosServer mapPosServer;\n    \n    @GetMapping()\n    public String xxxx(){\n        mapPosServer.other();\n        return "ok";\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 为什么SpringBoot的 jar 可以直接运行\n\n文章： blog\n\n\n# MySQL报错\n\n\n# only_full_group_by\n\n报错信息为：\n\n### Cause: java.sql.SQLSyntaxErrorException: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column \'inspection.ars_inspection_record.TASK_ID\' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\n; bad SQL grammar []; nested exception is java.sql.SQLSyntaxErrorException: Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column \'inspection.ars_inspection_record.TASK_ID\' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by\n    at org.springframework.jdbc.support.SQLExceptionSubclassTranslator.doTranslate(SQLExceptionSubclassTranslator.java:93)\n\n\n1\n2\n3\n\n\n# 解决办法-方案一\n\n配置文件my.cnf增加模式，然后重启\n\n[mysqld]\n# 设置模式\nsql_mode =STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION\n\n\n1\n2\n3\n\n\n# 解决办法-方案二\n\n错误SQL为\n\nselect A.column1, A.column2 from table as A group by column1\n\n\n1\n\n\n按column1进行分组 那么结果就是这个组内的cloumn1都是相同的，但是column2却没有限制，也就是说可能相同 也可能不同，那么数据库不知道column2该返回什么值给你\n\n故：在group by后面追加上column2就可以了，意义相当于按照 由column1和column2拼接成的联合字段进行分组\n\nselect A.column1, A.column2 from table as A group by column1 , column2\n\n\n1\n\n\n\n# 对象之间属性赋值\n\nBeanUtils是深拷贝，还是浅拷贝?\n是浅拷贝。只是调用子对象的set方法，并没有将所有属性拷贝。(也就是说，引用的一个内存地址)\n\nYYYY xxxyyData=XXX.getData();\nZZZZ dbtoSave =new  ZZZZ();\nBeanUtils.copyProperties(xxxyyData,dbtoSave);\n\n\n1\n2\n3\n\n\n\n# jackson把实体类转换为json字符串\n\n在springboot2中自动配的是jackson。但没有JSONObject。\n导致在Controller接口中，@Mapping返回实体使用的是jackson序列化，而其他地方使用com.alibaba.fastjson的toJSONString两者字段不一致\n\n使用jackson转换可以使用：\n\n       ObjectMapper mapper = new ObjectMapper();\n       ResponseBean res=new ResponseBean();\n        res.setMes("asjdadadsad");\n        res.setResData("sadsadsad");\n        res.setState("1");\n        try {\n           String a =  mapper.writeValueAsString(res);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 泛型转实体,Object转实体\n\n可以使用上述ObjectMapper mapper = new ObjectMapper();\n\n@Getter\n@Setter\npublic class YYY<T> {\n   @ApiModelProperty("业务数据")\n    private T data;\n}\n\nObjectMapper mapper = new ObjectMapper();\nXXXX xxxList=mapper.readValue(mapper.writeValueAsString(YYY.getData()), XXXX.class);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nObject转实体\n\nObjectMapper objectMapper = new ObjectMapper();\nZjzfxmsp zfsp = objectMapper.convertValue(object, Zjzfxmsp.class);\n\n\n1\n2\n\n\n\n# list根据另外一个list排序\n\n原版代码\n\npublic static void main(String[] args) {\n   String[] regulation = {"诸葛亮","鲁班","xzcx","貂蝉","吕布"};\n   final List regulationOrder = Arrays.asList(regulation);\n   String[] ordered = {"nice","貂蝉","诸葛亮","xzcx","吕布","貂蝉","鲁班","诸葛亮","貂蝉","鲁班","诸葛亮","hahahahah","adsad"};\n   List orderedList = Arrays.asList(ordered);\n   Collections.sort(orderedList, new Comparator()\n   {\n      public int compare(String o1, String o2)\n      {\n         int io1 = regulationOrder.indexOf(o1);\n         int io2 = regulationOrder.indexOf(o2);\n         if(io1 == -1){\n            return 1;\n         }\n         if(io2 == -1){\n            return -1;\n         }\n         return io1 - io2;\n      }\n   });\n   System.out.println(orderedList);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n修改版\n\nList<String> order = orderParamsList.stream().map(v ->\n        v.getCode().replace("xxx", "").replace("yyy", "")\n).collect(Collectors.toList());\n\nCollections.sort(resultDuList, new Comparator<GroupVo>() {\n    @Override\n    public int compare(GroupVo o1, GroupVo o2) {\n        int io1 = order.indexOf(o1.getMembership());\n        int io2 = order.indexOf(o2.getMembership());\n        if (io1 == -1) {\n            return 1;\n        }\n        if (io2 == -1) {\n            return -1;\n        }\n        return io1 - io2;\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n',normalizedContent:'# stream流\n\n\n# 循环增加某key值value\n\n list.stream().foreach(map -> map.put("area_height", strutil.isblank(area_height) ? 0 : double.parsedouble(area_height)));\n\n\n1\n\n\n\n# 两个list相同key的值相加\n\n     public static void main(string[] args) {\n        map<string, object> map = new hashmap<string, object>();\n        map.put("中文", "a");\n        map.put("价格",500);\n\n\n        map<string, object> map3 = new hashmap<string, object>();\n        map3.put("中文", "b");\n        map3.put("价格",300);\n\n        map<string, object> map4 = new hashmap<string, object>();\n        map4.put("中文", "c");\n        map4.put("价格",1500);\n\n        list<map<string, object>> list1 = new arraylist<map<string,object>>();\n        list1.add(map);\n        list1.add(map3);\n\n        list<map<string, object>> list2 = new arraylist<map<string,object>>();\n        list2.add(map);\n        list2.add(map4);\n        list<map<string, object>> list = new arraylist<map<string,object>>();\n        list.addall(list1);\n        list.addall(list2);\n\n        list<map<string,object>> result =new arraylist<>();\n        map<string, list<map<string, object>>> glist = list.stream().collect(collectors.groupingby(e -> e.get("中文").tostring()));\n\n        glist.foreach((k,slist)->{\n            map<string,object> nmap=new hashmap<>();\n            intsummarystatistics sumcc = slist.stream().collect(collectors.summarizingint(e->integer.valueof(e.get("价格").tostring())));\n            nmap.put("中文", slist.get(0).get("中文"));\n            nmap.put("价格", sumcc.getsum());//求和\n            result.add(nmap);\n        });\n        system.out.println("--------testmerge-------------");\n        result.foreach(x->{\n            system.out.println(x);\n        });\n\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n\n\n\n# list存在null值\n\nnot showing null elements\n\n\n\n把null元素移除：\n\nlist.removeall(collections.singleton(null));\n\n\n1\n\n\n\n# 获取list中model嵌套model的id\n\n list<string> ids = checkingthelistitems.stream().map(insrecordtosevo:: getinspectionrecord).map(inspectionrecord :: gettaskprojectid).collect(collectors.tolist());\n\n\n1\n\n\n\n# 深拷贝\n\n serializationutils.clone(xxxx)\n\n\n1\n\n\n\n# 计时器\n\nstopwatch stopwatch = new stopwatch();\n\nstopwatch.start("深拷贝");\nstopwatch.stop();\n\nlog.info(stopwatch.prettyprint());\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# localdatetime\n\n// 获取当前日期时间\nlocaldatetime localdatetime = localdatetime.now();\n// 设置日期\nlocaldatetime localdatetime1 = localdatetime.of(2019, month.september, 10, 14, 46, 56);\nlocaldatetime localdatetime2 = localdatetime.of(localdate, localtime);\nlocaldatetime localdatetime3 = localdate.attime(localtime);\nlocaldatetime localdatetime4 = localtime.atdate(localdate);\n// 获取localdate\nlocaldate localdate2 = localdatetime.tolocaldate();\n// 获取localtime\nlocaltime localtime2 = localdatetime.tolocaltime();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# localtime\n\n // 获取当前时间\nlocaltime now = localtime.now();\n// 设置时间\nlocaltime localtime = localtime.of(13, 51, 10);\n//获取小时\nint hour = localtime.gethour();    // 结果：13\nint hour1 = localtime.get(chronofield.hour_of_day); // 结果：13\n//获取分\nint minute = localtime.getminute();  // 结果：51\nint minute1 = localtime.get(chronofield.minute_of_hour); // 结果：51\n//获取秒\nint second = localtime.getsecond();   // 结果：10\nint second1 = localtime.get(chronofield.second_of_minute); // 结果：10\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# localdate\n\n // 获取当前日期\nlocaldate now = localdate.now();\n// 设置日期\nlocaldate localdate = localdate.of(2019, 9, 10);\n// 获取年\nint year = localdate.getyear();     //结果：2019\nint year1 = localdate.get(chronofield.year); //结果：2019\n// 获取月\nmonth month = localdate.getmonth();   // 结果：september\nint month1 = localdate.get(chronofield.month_of_year); //结果：9\n// 获取日\nint day = localdate.getdayofmonth();   //结果：10\nint day1 = localdate.get(chronofield.day_of_month); // 结果：10\n// 获取星期\ndayofweek dayofweek = localdate.getdayofweek();   //结果：tuesday\nint dayofweek1 = localdate.get(chronofield.day_of_week); //结果：2\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# mybatis实体类关联\n\n\n# 实体类\n\n @data\n@tostring\n@noargsconstructor\npublic class idcard {\n    private integer id;\n    private string number;\n    private date expiredtime;\n\n    public idcard(integer id) {\n        this.id = id;\n    }\n\n}\n\n\n@data\n@tostring\n@noargsconstructor\npublic class person {\n    protected integer id;\n    protected string name;\n    protected idcard idcard;\n\n    public person(integer id) {\n        this.id = id;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n对于关联属性的配置，有5种方式\n\n参考博客：blog\n\n\n# 使用内连接+级联属性\n\n <?xml version="1.0" encoding="utf-8" ?>\n<!doctype mapper\npublic "-//mybatis.org//dtd mapper 3.0//en"\n"http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n\n<mapper namespace="com.sunwii.mybatis.mapper.personmapper">\n    <resultmap type="personresult" id="personmap">\n        <id property="id" column="id" />\n        <result property="name" column="name" />\n        \x3c!-- 一对一关联：单向。方式零：使用级联属性 --\x3e\n        <result property="idcard.id" column="cid"/>\n        <result property="idcard.number" column="number"/>\n        <result property="idcard.expiredtime" column="expired_time"/>\n    </resultmap>\n    <select id="selectbyid" parametertype="integer"\n        resultmap="personmap">\n        select p.id id, p.name name,c.id cid,c.number\n        number,c.expired_time expired_time from t_person p\n        inner join t_idcard\n        c on p.idcard_id=c.id and p.id=#{id}\n    </select>\n</mapper>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 正则表达式\n\n速查手册： blog\n\n\n# 注入bean\n\n需求：工程启动时，执行实现类initall()方法（非监听）\n\n\n# 定义接口\n\npublic interface mapposserver {\n     void initall();\n     void destructionall();\n      void other();\n}\n\n\n1\n2\n3\n4\n5\n\n\n\n# 实现类\n\n @slf4j\n@service\npublic class mapposserverimpl implements mapposserver  {\n\n    @override\n    public void initall() {\n        log.info("开始初始化");\n       \n    }\n\n    /**\n     * 注销所有地图\n     * @return\n     */\n    @override\n    public void destructionall() {\n        log.info("开始注销所有地图");\n       \n    }\n\n\n    @override\n    public void other() {\n        log.info("其他方法");\n       \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 配置注入\n\nimport cn.ok96.service.mapposserverimpl;\nimport cn.ok96.service.impl.mappositioningserverimpl;\nimport org.springframework.context.annotation.bean;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.context.annotation.scope;\n\n@configuration\npublic class mapposconfig  {\n\n\n    public  mapposconfig(){\n        system.out.println("初始化");\n    }\n\n    @bean(name="mapposserverinit",initmethod="initall",destroymethod="destructionall")\n    @scope("prototype")\n    public mapposserver testbean() {\n        return new mapposserverimpl();\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# controller调用\n\n @resource(name="mapposserverinit")\n    private mapposserver mapposserver;\n    \n    @getmapping()\n    public string xxxx(){\n        mapposserver.other();\n        return "ok";\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 为什么springboot的 jar 可以直接运行\n\n文章： blog\n\n\n# mysql报错\n\n\n# only_full_group_by\n\n报错信息为：\n\n### cause: java.sql.sqlsyntaxerrorexception: expression #1 of select list is not in group by clause and contains nonaggregated column \'inspection.ars_inspection_record.task_id\' which is not functionally dependent on columns in group by clause; this is incompatible with sql_mode=only_full_group_by\n; bad sql grammar []; nested exception is java.sql.sqlsyntaxerrorexception: expression #1 of select list is not in group by clause and contains nonaggregated column \'inspection.ars_inspection_record.task_id\' which is not functionally dependent on columns in group by clause; this is incompatible with sql_mode=only_full_group_by\n    at org.springframework.jdbc.support.sqlexceptionsubclasstranslator.dotranslate(sqlexceptionsubclasstranslator.java:93)\n\n\n1\n2\n3\n\n\n# 解决办法-方案一\n\n配置文件my.cnf增加模式，然后重启\n\n[mysqld]\n# 设置模式\nsql_mode =strict_trans_tables,no_zero_in_date,no_zero_date,error_for_division_by_zero,no_engine_substitution\n\n\n1\n2\n3\n\n\n# 解决办法-方案二\n\n错误sql为\n\nselect a.column1, a.column2 from table as a group by column1\n\n\n1\n\n\n按column1进行分组 那么结果就是这个组内的cloumn1都是相同的，但是column2却没有限制，也就是说可能相同 也可能不同，那么数据库不知道column2该返回什么值给你\n\n故：在group by后面追加上column2就可以了，意义相当于按照 由column1和column2拼接成的联合字段进行分组\n\nselect a.column1, a.column2 from table as a group by column1 , column2\n\n\n1\n\n\n\n# 对象之间属性赋值\n\nbeanutils是深拷贝，还是浅拷贝?\n是浅拷贝。只是调用子对象的set方法，并没有将所有属性拷贝。(也就是说，引用的一个内存地址)\n\nyyyy xxxyydata=xxx.getdata();\nzzzz dbtosave =new  zzzz();\nbeanutils.copyproperties(xxxyydata,dbtosave);\n\n\n1\n2\n3\n\n\n\n# jackson把实体类转换为json字符串\n\n在springboot2中自动配的是jackson。但没有jsonobject。\n导致在controller接口中，@mapping返回实体使用的是jackson序列化，而其他地方使用com.alibaba.fastjson的tojsonstring两者字段不一致\n\n使用jackson转换可以使用：\n\n       objectmapper mapper = new objectmapper();\n       responsebean res=new responsebean();\n        res.setmes("asjdadadsad");\n        res.setresdata("sadsadsad");\n        res.setstate("1");\n        try {\n           string a =  mapper.writevalueasstring(res);\n        } catch (jsonprocessingexception e) {\n            e.printstacktrace();\n        }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 泛型转实体,object转实体\n\n可以使用上述objectmapper mapper = new objectmapper();\n\n@getter\n@setter\npublic class yyy<t> {\n   @apimodelproperty("业务数据")\n    private t data;\n}\n\nobjectmapper mapper = new objectmapper();\nxxxx xxxlist=mapper.readvalue(mapper.writevalueasstring(yyy.getdata()), xxxx.class);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nobject转实体\n\nobjectmapper objectmapper = new objectmapper();\nzjzfxmsp zfsp = objectmapper.convertvalue(object, zjzfxmsp.class);\n\n\n1\n2\n\n\n\n# list根据另外一个list排序\n\n原版代码\n\npublic static void main(string[] args) {\n   string[] regulation = {"诸葛亮","鲁班","xzcx","貂蝉","吕布"};\n   final list regulationorder = arrays.aslist(regulation);\n   string[] ordered = {"nice","貂蝉","诸葛亮","xzcx","吕布","貂蝉","鲁班","诸葛亮","貂蝉","鲁班","诸葛亮","hahahahah","adsad"};\n   list orderedlist = arrays.aslist(ordered);\n   collections.sort(orderedlist, new comparator()\n   {\n      public int compare(string o1, string o2)\n      {\n         int io1 = regulationorder.indexof(o1);\n         int io2 = regulationorder.indexof(o2);\n         if(io1 == -1){\n            return 1;\n         }\n         if(io2 == -1){\n            return -1;\n         }\n         return io1 - io2;\n      }\n   });\n   system.out.println(orderedlist);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n修改版\n\nlist<string> order = orderparamslist.stream().map(v ->\n        v.getcode().replace("xxx", "").replace("yyy", "")\n).collect(collectors.tolist());\n\ncollections.sort(resultdulist, new comparator<groupvo>() {\n    @override\n    public int compare(groupvo o1, groupvo o2) {\n        int io1 = order.indexof(o1.getmembership());\n        int io2 = order.indexof(o2.getmembership());\n        if (io1 == -1) {\n            return 1;\n        }\n        if (io2 == -1) {\n            return -1;\n        }\n        return io1 - io2;\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n',charsets:{cjk:!0},lastUpdated:"2023/03/13, 03:16:04",lastUpdatedTimestamp:1678677364e3},{title:"Linux常用命令",frontmatter:{title:"Linux常用命令",date:"2023-03-10T10:52:47.000Z",permalink:"/pages/8c2b69/",categories:["Linux"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/02.Linux/01.Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html",relativePath:"02.Linux/01.Linux常用命令.md",key:"v-5cea57a7",path:"/pages/8c2b69/",headers:[{level:2,title:"查询包含指定内容的文件",slug:"查询包含指定内容的文件",normalizedTitle:"查询包含指定内容的文件",charIndex:2},{level:2,title:"压缩文件/文件夹命令",slug:"压缩文件-文件夹命令",normalizedTitle:"压缩文件/文件夹命令",charIndex:73},{level:2,title:"scp传输文件",slug:"scp传输文件",normalizedTitle:"scp传输文件",charIndex:348},{level:2,title:"grep",slug:"grep",normalizedTitle:"grep",charIndex:45},{level:2,title:"清理缓存",slug:"清理缓存",normalizedTitle:"清理缓存",charIndex:471},{level:2,title:"查看当前目录下所有文件大小",slug:"查看当前目录下所有文件大小",normalizedTitle:"查看当前目录下所有文件大小",charIndex:650},{level:2,title:"查找文件",slug:"查找文件",normalizedTitle:"查找文件",charIndex:693},{level:2,title:"查看cpu核数",slug:"查看cpu核数",normalizedTitle:"查看cpu核数",charIndex:734},{level:2,title:"查看处理器",slug:"查看处理器",normalizedTitle:"查看处理器",charIndex:797},{level:2,title:"查看操作系统",slug:"查看操作系统",normalizedTitle:"查看操作系统",charIndex:867},{level:2,title:"替换文本内容",slug:"替换文本内容",normalizedTitle:"替换文本内容",charIndex:908},{level:2,title:"测试服务器之间网络带宽",slug:"测试服务器之间网络带宽",normalizedTitle:"测试服务器之间网络带宽",charIndex:1228},{level:3,title:"监测服务器之间网络带宽",slug:"监测服务器之间网络带宽",normalizedTitle:"监测服务器之间网络带宽",charIndex:1244},{level:3,title:"监测进入本机流量峰值",slug:"监测进入本机流量峰值",normalizedTitle:"监测进入本机流量峰值",charIndex:1602},{level:2,title:"测试IO性能",slug:"测试io性能",normalizedTitle:"测试io性能",charIndex:1719},{level:2,title:"安装vnc远程联接linux",slug:"安装vnc远程联接linux",normalizedTitle:"安装vnc远程联接linux",charIndex:2050},{level:2,title:"systemctl命令",slug:"systemctl命令",normalizedTitle:"systemctl命令",charIndex:2170},{level:2,title:"后台执行脚本",slug:"后台执行脚本",normalizedTitle:"后台执行脚本",charIndex:2523},{level:2,title:"下载需要的rpm软件包",slug:"下载需要的rpm软件包",normalizedTitle:"下载需要的rpm软件包",charIndex:2559},{level:2,title:"个性化login信息",slug:"个性化login信息",normalizedTitle:"个性化login信息",charIndex:2674},{level:2,title:"swap交换空间",slug:"swap交换空间",normalizedTitle:"swap交换空间",charIndex:3143},{level:2,title:"修改ssh默认22端口",slug:"修改ssh默认22端口",normalizedTitle:"修改ssh默认22端口",charIndex:3467},{level:2,title:"挂载磁盘",slug:"挂载磁盘",normalizedTitle:"挂载磁盘",charIndex:3610},{level:2,title:"服务器重启异常问题",slug:"服务器重启异常问题",normalizedTitle:"服务器重启异常问题",charIndex:3732},{level:2,title:"linux代理",slug:"linux代理",normalizedTitle:"linux代理",charIndex:3950},{level:3,title:"服务端（拥有外网权限）",slug:"服务端-拥有外网权限",normalizedTitle:"服务端（拥有外网权限）",charIndex:3962},{level:4,title:"squid.conf",slug:"squid-conf",normalizedTitle:"squid.conf",charIndex:3977},{level:4,title:"squid.conf",slug:"squid-conf-2",normalizedTitle:"squid.conf",charIndex:3977},{level:4,title:"squid配置文件解析",slug:"squid配置文件解析",normalizedTitle:"squid配置文件解析",charIndex:9850},{level:4,title:"启动squid服务",slug:"启动squid服务",normalizedTitle:"启动squid服务",charIndex:14292},{level:3,title:"客户端（无外网权限）",slug:"客户端-无外网权限",normalizedTitle:"客户端（无外网权限）",charIndex:14333}],headersStr:"查询包含指定内容的文件 压缩文件/文件夹命令 scp传输文件 grep 清理缓存 查看当前目录下所有文件大小 查找文件 查看cpu核数 查看处理器 查看操作系统 替换文本内容 测试服务器之间网络带宽 监测服务器之间网络带宽 监测进入本机流量峰值 测试IO性能 安装vnc远程联接linux systemctl命令 后台执行脚本 下载需要的rpm软件包 个性化login信息 swap交换空间 修改ssh默认22端口 挂载磁盘 服务器重启异常问题 linux代理 服务端（拥有外网权限） squid.conf squid.conf squid配置文件解析 启动squid服务 客户端（无外网权限）",content:'# 查询包含指定内容的文件\n\n例\n查询当前目录下的所有文件是否有包含match文本内容\n\ngrep -r "match" ./\n\n\n1\n\n\n\n# 压缩文件/文件夹命令\n\n压缩文件\nzip file.conf.zip  file.conf\n压缩文件夹\nzip -r file_backup.zip   .   点表示当前目录\n解压文件\nunzip file.conf.zip\n解压文件到指定目录\nunzip file.conf.zip -d  /data/bak\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n解压：[＊＊＊＊＊＊＊]$ tar zxvf FileName.tar.gz\n压缩：[＊＊＊＊＊＊＊]$ tar zcvf FileName.tar.gz DirName\n\n\n1\n2\n\n\n\n# scp传输文件\n\nscp  -P 22  openresty.tar root@192.168.122.32:/data\n\n\n1\n\n\n\n# grep\n\n历史筛选关键字（eg：yum）\nhistory |grep \'yum\'\n\n\n1\n2\n\n\n\n# 清理缓存\n\n查看缓存的命令\n　　free -m\n清理缓存的命令　\n　　　  echo 1 > /proc/sys/vm/drop_caches\n          echo 2 > /proc/sys/vm/drop_caches\n          echo 3 > /proc/sys/vm/drop_caches\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 查看当前目录下所有文件大小\n\ndu -sh * | sort -n\n\n\n1\n\n\n\n# 查找文件\n\nfind / -name \'wenben.txt\'\n\n\n1\n\n\n\n# 查看cpu核数\n\n cat /proc/cpuinfo | grep "cpu cores" | uniq\n\n\n1\n\n\n\n# 查看处理器\n\ncat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\n\n\n1\n\n\n\n# 查看操作系统\n\ncat /etc/redhat-release\n\n\n1\n\n\n\n# 替换文本内容\n\n把当前目录下docker-compose.yml文件所有192.168.50.68内容替换成192.168.50.12\n\nsed  -i \'s/192.168.50.68/192.168.50.12/g\' docker-compose.yml\n\n\n1\n\n\n当替换的内容存在/关键字时使用#替换原来/\n例如。把/data/test1替换成/view\n\nsed  -i \'s#/data/test1#/view#g\' docker-compose.yml\n\n\n1\n\n\n若要替换变量，则使用双引号\n\nsed  -i "s/kudemo/${serviceName}/g" ${serviceName}.yaml\n\n\n1\n\n\n\n# 测试服务器之间网络带宽\n\n\n# 监测服务器之间网络带宽\n\n从官网下载相应版本。\nhttps://iperf.fr/iperf-download.php\ncentos7 安装\n\nrpm -i iperf3-3.1.3-1.fc24.x86_64.rpm\n\nubuntu18.04安装\n\nsudo dpkg -i libiperf0_3.1.3-1_amd64.deb iperf3_3.1.3-1_amd64.deb\n-----------------------------------------------------------------------\n使用\n服务端：iperf3 -s\n\n客户端：iperf3 -c 10.0.3.147 -n 1000000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 监测进入本机流量峰值\n\n脚本\n\n链接：https://pan.baidu.com/s/16tzr3soYk6-uDP4XsaQ1Lg \n提取码：kc4q \n\n\n1\n2\n\n\n命令执行 ./network-analysis.sh\n\n\n# 测试IO性能\n\n测试方法： a.测试磁盘的IO写速度\n\ntime dd if=/dev/zero of=test.dbf bs=8k count=300000\n\n\n1\n\n\n如果要测试实际速度 还要在末尾加上 oflag=direct测到的才是真实的IO速度 b.测试磁盘的IO读速度\n\ndd if=test.dbf bs=8k count=300000 of=/dev/null\n\n\n1\n\n\n每次写入/读取8k的数据，执行300000次\n\ndd命令可以通用，但不够专业，也没有考虑到缓存和物理读的区分，测试的数据也是仅作参考，不能算是权威。不是一个专业的测试工具，不过如果对于测试结果的要求不是很苛刻的话,平时可以使用来对磁盘的读写速度作一个简单的评估\n\n\n# 安装vnc远程联接linux\n\nyum -y install tigervnc-server.x86_64\n启动vnc（：9 == 5909）\nvncserver :9\nvncserver -kill :9 \n\n\n1\n2\n3\n4\n\n\n\n# systemctl命令\n\n1.启动nfs服务\n\nsystemctl start nfs-server.service\n2.设置开机自启动\n\nsystemctl enable nfs-server.service\n3.停止开机自启动\n\nsystemctl disable nfs-server.service\n4.查看服务当前状态\n\nsystemctl status nfs-server.service\n5.重新启动某服务\n\nsystemctl restart nfs-server.service\n6.查看所有已启动的服务\n\nsystemctl list -units --type=service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 后台执行脚本\n\nsetsid ./test.sh &\n\n\n1\n\n\n\n# 下载需要的rpm软件包\n\n#离线环境，提前在有网络的服务器上下载好需要的软件包\nyum -y install nfs-utils --downloadonly --downloaddir /home/nfs\n\n\n1\n2\n\n\n\n# 个性化login信息\n\n修改以下脚本可修改login时的系统提示文本。\n\ncd /etc/update-motd.d\nll\ntotal 20\ndrwxr-xr-x  2 root root 4096 Nov 11 02:16 ./\ndrwxr-xr-x 99 root root 4096 Nov  8 02:31 ../\n-rwxr-xr-x  1 root root 1220 Nov 11 02:09 00-header*\n-rwxr-xr-x  1 root root 1478 Nov 11 02:16 10-help-text*\n-rwxr-xr-x  1 root root 1158 Apr 19  2012 99-footer*\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nheader文件提供了头部的显示信息，默认为操作的系统的版本等信息。\nhelp-text显示的为主要的文本信息，里面可以包括一些警告等。\nfooter为文件结尾。\n以上均为shell脚本。可以修改后下次一个新的session请求过来后生效。\n\n\n# swap交换空间\n\n(1)创建分区1G大小文件：dd if=/dev/zero of=/swapfile bs=1k count=1024000。\n(2)使用 mkswap 命令来设置交换分区\nmkswap /swapfile。\n启用交换分区\n(3)swapon /swapfile。\n(4)如果需要每次系统重启后自动挂载交换分区，就需要修改/etc/fstab文件，新增内容：/swapfile swap swap defaults 0 0。由于我们只是本次编译到用，所以不设置。\n(5)编译完成后，关闭交换分区：swapoff /swapfile。\n(6)删除交换分区：rm /swapfile。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 修改ssh默认22端口\n\nvim /etc/ssh/sshd_config\n\n\n1\n\n\n按i进入编辑模式，把#Port 22 修改成 Port 及对应端口号。如 Port 22001。改好后按esc，再输入:wq保存）\n\n\n\nservice sshd restart\n\n\n1\n\n\n\n# 挂载磁盘\n\n挂载磁盘时候遇到: mount: /dev/vdb is write-protected, mounting read-only\n\n需要格式化磁盘（不是刚分区的磁盘慎用，防止格式化）\n\nmkfs.ext4 /dev/vdb\n\n\n# 服务器重启异常问题\n\nRead-only file system 问题描述：cd / 然后按tab键出现错误\n\nmount 查看所有挂载，发现根目录的挂载权限是ro只读\n\n/dev/mapper/vg-lv_root on / type ext4 (ro,relatime,seclabel,data=ordered)\n\n\n1\n\n\n执行命令\n\n  mount -o remount,rw /\n\n\n1\n\n\n就正常了\n\n操作截图：\n\n\n# linux代理\n\n\n# 服务端（拥有外网权限）\n\n# squid.conf\n\ncat /etc/squid/squid.conf\n\n  #\n# Recommended minimum configuration:\n#\n\n# Example rule allowing access from your local networks.\n# Adapt to list your (internal) IP networks from where browsing\n# should be allowed\nacl localnet src 10.0.0.0/8     # RFC1918 possible internal network\nacl localnet src 172.16.0.0/12  # RFC1918 possible internal network\nacl localnet src 192.168.0.0/16 # RFC1918 possible internal network\nacl localnet src fc00::/7       # RFC 4193 local private network range\nacl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines\n\nacl SSL_ports port 443\nacl Safe_ports port 80          # http\nacl Safe_ports port 21          # ftp\nacl Safe_ports port 443         # https\nacl Safe_ports port 70          # gopher\nacl Safe_ports port 210         # wais\nacl Safe_ports port 1025-65535  # unregistered ports\nacl Safe_ports port 280         # http-mgmt\nacl Safe_ports port 488         # gss-http\nacl Safe_ports port 591         # filemaker\nacl Safe_ports port 777         # multiling http\nacl CONNECT method CONNECT\n\n#\n# Recommended minimum Access Permission configuration:\n#\n# Deny requests to certain unsafe ports\nhttp_access deny !Safe_ports\n\n# Deny CONNECT to other than secure SSL ports\nhttp_access deny CONNECT !SSL_ports\n\n# Only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# We strongly recommend the following be uncommented to protect innocent\n# web applications running on the proxy server who think the only\n# one who can access services on "localhost" is a local user\n#http_access deny to_localhost\n\n#\n# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS\n#\n\n# Example rule allowing access from your local networks.\n# Adapt localnet in the ACL section to list your (internal) IP networks\n# from where browsing should be allowed\nhttp_access allow localnet\nhttp_access allow localhost\n\n# And finally deny all other access to this proxy\n# http_access deny all\nhttp_access allow all\n\n# Squid normally listens to port 3128\nhttp_port 3128\n\n# Uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /var/spool/squid 100 16 256\n\n# Leave coredumps in the first cache dir\ncoredump_dir /var/spool/squid\n\n\n#\n# Add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n\n\n# squid.conf\n\ncat /etc/httpd/conf.d/squid.conf\n\n #\n# Recommended minimum configuration:\n#\n\n# Example rule allowing access from your local networks.\n# Adapt to list your (internal) IP networks from where browsing\n# should be allowed\nacl localnet src 10.0.0.0/8     # RFC1918 possible internal network\nacl localnet src 172.16.0.0/12  # RFC1918 possible internal network\nacl localnet src 192.168.0.0/16 # RFC1918 possible internal network\nacl localnet src fc00::/7       # RFC 4193 local private network range\nacl localnet src fe80::/10      # RFC 4291 link-local (directly plugged) machines\n\nacl SSL_ports port 443\nacl Safe_ports port 80          # http\nacl Safe_ports port 21          # ftp\nacl Safe_ports port 443         # https\nacl Safe_ports port 70          # gopher\nacl Safe_ports port 210         # wais\nacl Safe_ports port 1025-65535  # unregistered ports\nacl Safe_ports port 280         # http-mgmt\nacl Safe_ports port 488         # gss-http\nacl Safe_ports port 591         # filemaker\nacl Safe_ports port 777         # multiling http\nacl CONNECT method CONNECT\n\n#\n# Recommended minimum Access Permission configuration:\n#\n# Deny requests to certain unsafe ports\nhttp_access deny !Safe_ports\n\n# Deny CONNECT to other than secure SSL ports\nhttp_access deny CONNECT !SSL_ports\n\n# Only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# We strongly recommend the following be uncommented to protect innocent\n# web applications running on the proxy server who think the only\n# one who can access services on "localhost" is a local user\n#http_access deny to_localhost\n\n#\n# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS\n#\n\n# Example rule allowing access from your local networks.\n# Adapt localnet in the ACL section to list your (internal) IP networks\n# from where browsing should be allowed\nhttp_access allow localnet\nhttp_access allow localhost\n\n# And finally deny all other access to this proxy\n# http_access deny all\nhttp_access allow all\n\n# Squid normally listens to port 3128\nhttp_port 3128\n\n# Uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /var/spool/squid 100 16 256\n\n# Leave coredumps in the first cache dir\ncoredump_dir /var/spool/squid\n\n\n#\n# Add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\n[root@worker1 ~]# cat /etc/httpd/conf.d/squid.conf\n\n#\n# This is /etc/httpd/conf.d/squid.conf\n#\n\nScriptAlias /Squid/cgi-bin/cachemgr.cgi /usr/lib64/squid/cachemgr.cgi\n\n# Only allow access from localhost by default\n<Location /Squid/cgi-bin/cachemgr.cgi>\n Require local\n # Add additional allowed hosts as needed\n # Require host example.com\n</Location>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n\n\n# squid配置文件解析\n\n #\nacl all src 0.0.0.0/0.0.0.0          #允许所有IP访问\nacl manager proto http              #manager url协议为http\nacl localhost src 127.0.0.1/255.255.255.255  #允午本机IP\nacl to_localhost dst 127.0.0.1                 #允午目的地址为本机IP\nacl CONNECT method CONNECT        #请求方法以CONNECT\n#http_access allow all                #允许所有人使用该代理.\n#http_reply_access allow all                #允许所有客户端使用该代理\n\nacl Safe_ports port 80          # 允许安全更新的端口为80\nacl Safe_ports port 443        #允许安全更新的端口为443\n\nacl localnet src 10.195.249.225     #\nacl localnet src 10.195.236.141     #\n\nhttp_access allow localnet           #\nhttp_access deny !Safe_ports           #\n\n\nacl OverConnLimit maxconn 16        #限制每个IP最大允许16个连接，防止攻击\nhttp_access deny OverConnLimit\n\nicp_access deny all                        #禁止从邻居服务器缓冲内发送和接收ICP请求.\nmiss_access allow all                #允许直接更新请求\nident_lookup_access deny all                                #禁止lookup检查DNS\nhttp_port 8080 transparent                                #指定Squid监听浏览器客户请求的端口号。\n\nhierarchy_stoplist cgi-bin ?                #用来强制某些特定的对象不被缓存，主要是处于安全的目的。\nacl QUERY urlpath_regex cgi-bin \\?\ncache deny QUERY\n\ncache_mem 1 GB        #这是一个优化选项，增加该内存值有利于缓存。应该注意的是：\n                     #一般来说如果系统有内存，设置该值为(n/)3M。现在是3G 所以这里1G\nfqdncache_size 1024        #FQDN 高速缓存大小\nmaximum_object_size_in_memory 2 MB        #允许最大的文件载入内存\n\nmemory_replacement_policy heap LFUDA  #动态使用最小的，移出内存cache\ncache_replacement_policy heap LFUDA         #动态使用最小的，移出硬盘cache\n\ncache_dir ufs /home/cache 5000 32 512  #高速缓存目录 ufs 类型 使用的缓冲值最大允午1000MB空间，\n#32个一级目录，512个二级目录\n\nmax_open_disk_fds 0                                 #允许最大打开文件数量,0 无限制\nminimum_object_size 1 KB                         #允午最小文件请求体大小\nmaximum_object_size 20 MB                 #允午最大文件请求体大小\n\ncache_swap_low 90                            #最小允许使用swap 90%\ncache_swap_high 95                            #最多允许使用swap 95%\n\nipcache_size 2048                                # IP 地址高速缓存大小 2M\nipcache_low 90                                #最小允许ipcache使用swap 90%\nipcache_high 95                                  #最大允许ipcache使用swap 90%\n\n\naccess_log /var/log/squid/access.log squid        #定义日志存放记录\ncache_log /var/log/squid/cache.log squid\ncache_store_log none                        #禁止store日志\n\nemulate_httpd_log on        #将使Squid仿照Web服务器的格式创建访问记录。如果希望使用\n                                #Web访问记录分析程序，就需要设置这个参数。\n\nrefresh_pattern . 0 20% 4320 override-expire override-lastmod reload-into-ims ignore-reload   #更新cache规则\n\nacl buggy_server url_regex ^http://.... http://          #只允许http的请求\nbroken_posts allow buggy_server\n\nacl apache rep_header Server ^Apache                 #允许apache的编码\nbroken_vary_encoding allow apache\n\nrequest_entities off                                        #禁止非http的标分准请求，防止攻击\nheader_access header allow all                        #允许所有的http报头\nrelaxed_header_parser on                                #不严格分析http报头.\nclient_lifetime 120 minute                                #最大客户连接时间 120分钟\n\ncache_mgr sky@test.com                        #指定当缓冲出现问题时向缓冲管理者发送告警信息的地址信息。\n\ncache_effective_user squid                        #这里以用户squid的身份Squid服务器\ncache_effective_group squid\n\nicp_port 0                       #指定Squid从邻居服务器缓冲内发送和接收ICP请求的端口号。\n                     #这里设置为0是因为这里配置Squid为内部Web服务器的加速器，\n                     #所以不需要使用邻居服务器的缓冲。0是禁用\n\n# cache_peer 设置允许更新缓存的主机，因是本机所以127.0.0.1\ncache_peer 127.0.0.1 parent 80 0 no-query default multicast-responder no-netdb-exchange\ncache_peer_domain 127.0.0.1                                 \nhostname_aliases 127.0.0.1\n\nerror_directory /usr/share/squid/errors/Simplify_Chinese        #定义错误路径\n\nalways_direct allow all                # cache丢失或不存在是允许所有请求直接转发到原始服务器\nignore_unknown_nameservers on        #开反DNS查询，当域名地址不相同时候，禁止访问\ncoredump_dir  /var/log/squid                 #定义dump的目录\n\nmax_filedesc 2048                #最大打开的文件描述\n\nhalf_closed_clients off        #使Squid在当read不再返回数据时立即关闭客户端的连接。\n                                #有时read不再返回数据是由于某些客户关闭TCP的发送数据\n                                #而仍然保持接收数据。而Squid分辨不出TCP半关闭和完全关闭。\n\nbuffered_logs on #若打开选项“buffered_logs”可以稍稍提高加速某些对日志文件的写入，该选项主要是实现优化特性。#    \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n\n\n此处参考：https://www.cnblogs.com/he-ding/p/10038264.html\n\n# 启动squid服务\n\n service squid start\n\n\n1\n\n\n\n# 客户端（无外网权限）\n\nvi /etc/profile\n\n # vi /etc/profile\nhttp_proxy=http://192.168.20.20:3128       # 分别指定http、https、ftp协议使用的代理服务器地址\nhttps_proxy=http://192.168.20.20:3128\nftp_proxy=http://192.168.20.20:3128\nno_proxy=192.168.20.        # 访问局域网地址（192.168.20.0/24网段）时不使用代理，可以用逗号分隔多个地址\nexport http_proxy https_proxy ftp_proxy no_proxy\n\n\n1\n2\n3\n4\n5\n6\n\n\n保存退出，注销重新登陆系统即可生效',normalizedContent:'# 查询包含指定内容的文件\n\n例\n查询当前目录下的所有文件是否有包含match文本内容\n\ngrep -r "match" ./\n\n\n1\n\n\n\n# 压缩文件/文件夹命令\n\n压缩文件\nzip file.conf.zip  file.conf\n压缩文件夹\nzip -r file_backup.zip   .   点表示当前目录\n解压文件\nunzip file.conf.zip\n解压文件到指定目录\nunzip file.conf.zip -d  /data/bak\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n解压：[＊＊＊＊＊＊＊]$ tar zxvf filename.tar.gz\n压缩：[＊＊＊＊＊＊＊]$ tar zcvf filename.tar.gz dirname\n\n\n1\n2\n\n\n\n# scp传输文件\n\nscp  -p 22  openresty.tar root@192.168.122.32:/data\n\n\n1\n\n\n\n# grep\n\n历史筛选关键字（eg：yum）\nhistory |grep \'yum\'\n\n\n1\n2\n\n\n\n# 清理缓存\n\n查看缓存的命令\n　　free -m\n清理缓存的命令　\n　　　  echo 1 > /proc/sys/vm/drop_caches\n          echo 2 > /proc/sys/vm/drop_caches\n          echo 3 > /proc/sys/vm/drop_caches\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 查看当前目录下所有文件大小\n\ndu -sh * | sort -n\n\n\n1\n\n\n\n# 查找文件\n\nfind / -name \'wenben.txt\'\n\n\n1\n\n\n\n# 查看cpu核数\n\n cat /proc/cpuinfo | grep "cpu cores" | uniq\n\n\n1\n\n\n\n# 查看处理器\n\ncat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c\n\n\n1\n\n\n\n# 查看操作系统\n\ncat /etc/redhat-release\n\n\n1\n\n\n\n# 替换文本内容\n\n把当前目录下docker-compose.yml文件所有192.168.50.68内容替换成192.168.50.12\n\nsed  -i \'s/192.168.50.68/192.168.50.12/g\' docker-compose.yml\n\n\n1\n\n\n当替换的内容存在/关键字时使用#替换原来/\n例如。把/data/test1替换成/view\n\nsed  -i \'s#/data/test1#/view#g\' docker-compose.yml\n\n\n1\n\n\n若要替换变量，则使用双引号\n\nsed  -i "s/kudemo/${servicename}/g" ${servicename}.yaml\n\n\n1\n\n\n\n# 测试服务器之间网络带宽\n\n\n# 监测服务器之间网络带宽\n\n从官网下载相应版本。\nhttps://iperf.fr/iperf-download.php\ncentos7 安装\n\nrpm -i iperf3-3.1.3-1.fc24.x86_64.rpm\n\nubuntu18.04安装\n\nsudo dpkg -i libiperf0_3.1.3-1_amd64.deb iperf3_3.1.3-1_amd64.deb\n-----------------------------------------------------------------------\n使用\n服务端：iperf3 -s\n\n客户端：iperf3 -c 10.0.3.147 -n 1000000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 监测进入本机流量峰值\n\n脚本\n\n链接：https://pan.baidu.com/s/16tzr3soyk6-udp4xsaq1lg \n提取码：kc4q \n\n\n1\n2\n\n\n命令执行 ./network-analysis.sh\n\n\n# 测试io性能\n\n测试方法： a.测试磁盘的io写速度\n\ntime dd if=/dev/zero of=test.dbf bs=8k count=300000\n\n\n1\n\n\n如果要测试实际速度 还要在末尾加上 oflag=direct测到的才是真实的io速度 b.测试磁盘的io读速度\n\ndd if=test.dbf bs=8k count=300000 of=/dev/null\n\n\n1\n\n\n每次写入/读取8k的数据，执行300000次\n\ndd命令可以通用，但不够专业，也没有考虑到缓存和物理读的区分，测试的数据也是仅作参考，不能算是权威。不是一个专业的测试工具，不过如果对于测试结果的要求不是很苛刻的话,平时可以使用来对磁盘的读写速度作一个简单的评估\n\n\n# 安装vnc远程联接linux\n\nyum -y install tigervnc-server.x86_64\n启动vnc（：9 == 5909）\nvncserver :9\nvncserver -kill :9 \n\n\n1\n2\n3\n4\n\n\n\n# systemctl命令\n\n1.启动nfs服务\n\nsystemctl start nfs-server.service\n2.设置开机自启动\n\nsystemctl enable nfs-server.service\n3.停止开机自启动\n\nsystemctl disable nfs-server.service\n4.查看服务当前状态\n\nsystemctl status nfs-server.service\n5.重新启动某服务\n\nsystemctl restart nfs-server.service\n6.查看所有已启动的服务\n\nsystemctl list -units --type=service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 后台执行脚本\n\nsetsid ./test.sh &\n\n\n1\n\n\n\n# 下载需要的rpm软件包\n\n#离线环境，提前在有网络的服务器上下载好需要的软件包\nyum -y install nfs-utils --downloadonly --downloaddir /home/nfs\n\n\n1\n2\n\n\n\n# 个性化login信息\n\n修改以下脚本可修改login时的系统提示文本。\n\ncd /etc/update-motd.d\nll\ntotal 20\ndrwxr-xr-x  2 root root 4096 nov 11 02:16 ./\ndrwxr-xr-x 99 root root 4096 nov  8 02:31 ../\n-rwxr-xr-x  1 root root 1220 nov 11 02:09 00-header*\n-rwxr-xr-x  1 root root 1478 nov 11 02:16 10-help-text*\n-rwxr-xr-x  1 root root 1158 apr 19  2012 99-footer*\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\nheader文件提供了头部的显示信息，默认为操作的系统的版本等信息。\nhelp-text显示的为主要的文本信息，里面可以包括一些警告等。\nfooter为文件结尾。\n以上均为shell脚本。可以修改后下次一个新的session请求过来后生效。\n\n\n# swap交换空间\n\n(1)创建分区1g大小文件：dd if=/dev/zero of=/swapfile bs=1k count=1024000。\n(2)使用 mkswap 命令来设置交换分区\nmkswap /swapfile。\n启用交换分区\n(3)swapon /swapfile。\n(4)如果需要每次系统重启后自动挂载交换分区，就需要修改/etc/fstab文件，新增内容：/swapfile swap swap defaults 0 0。由于我们只是本次编译到用，所以不设置。\n(5)编译完成后，关闭交换分区：swapoff /swapfile。\n(6)删除交换分区：rm /swapfile。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 修改ssh默认22端口\n\nvim /etc/ssh/sshd_config\n\n\n1\n\n\n按i进入编辑模式，把#port 22 修改成 port 及对应端口号。如 port 22001。改好后按esc，再输入:wq保存）\n\n\n\nservice sshd restart\n\n\n1\n\n\n\n# 挂载磁盘\n\n挂载磁盘时候遇到: mount: /dev/vdb is write-protected, mounting read-only\n\n需要格式化磁盘（不是刚分区的磁盘慎用，防止格式化）\n\nmkfs.ext4 /dev/vdb\n\n\n# 服务器重启异常问题\n\nread-only file system 问题描述：cd / 然后按tab键出现错误\n\nmount 查看所有挂载，发现根目录的挂载权限是ro只读\n\n/dev/mapper/vg-lv_root on / type ext4 (ro,relatime,seclabel,data=ordered)\n\n\n1\n\n\n执行命令\n\n  mount -o remount,rw /\n\n\n1\n\n\n就正常了\n\n操作截图：\n\n\n# linux代理\n\n\n# 服务端（拥有外网权限）\n\n# squid.conf\n\ncat /etc/squid/squid.conf\n\n  #\n# recommended minimum configuration:\n#\n\n# example rule allowing access from your local networks.\n# adapt to list your (internal) ip networks from where browsing\n# should be allowed\nacl localnet src 10.0.0.0/8     # rfc1918 possible internal network\nacl localnet src 172.16.0.0/12  # rfc1918 possible internal network\nacl localnet src 192.168.0.0/16 # rfc1918 possible internal network\nacl localnet src fc00::/7       # rfc 4193 local private network range\nacl localnet src fe80::/10      # rfc 4291 link-local (directly plugged) machines\n\nacl ssl_ports port 443\nacl safe_ports port 80          # http\nacl safe_ports port 21          # ftp\nacl safe_ports port 443         # https\nacl safe_ports port 70          # gopher\nacl safe_ports port 210         # wais\nacl safe_ports port 1025-65535  # unregistered ports\nacl safe_ports port 280         # http-mgmt\nacl safe_ports port 488         # gss-http\nacl safe_ports port 591         # filemaker\nacl safe_ports port 777         # multiling http\nacl connect method connect\n\n#\n# recommended minimum access permission configuration:\n#\n# deny requests to certain unsafe ports\nhttp_access deny !safe_ports\n\n# deny connect to other than secure ssl ports\nhttp_access deny connect !ssl_ports\n\n# only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# we strongly recommend the following be uncommented to protect innocent\n# web applications running on the proxy server who think the only\n# one who can access services on "localhost" is a local user\n#http_access deny to_localhost\n\n#\n# insert your own rule(s) here to allow access from your clients\n#\n\n# example rule allowing access from your local networks.\n# adapt localnet in the acl section to list your (internal) ip networks\n# from where browsing should be allowed\nhttp_access allow localnet\nhttp_access allow localhost\n\n# and finally deny all other access to this proxy\n# http_access deny all\nhttp_access allow all\n\n# squid normally listens to port 3128\nhttp_port 3128\n\n# uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /var/spool/squid 100 16 256\n\n# leave coredumps in the first cache dir\ncoredump_dir /var/spool/squid\n\n\n#\n# add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n\n\n# squid.conf\n\ncat /etc/httpd/conf.d/squid.conf\n\n #\n# recommended minimum configuration:\n#\n\n# example rule allowing access from your local networks.\n# adapt to list your (internal) ip networks from where browsing\n# should be allowed\nacl localnet src 10.0.0.0/8     # rfc1918 possible internal network\nacl localnet src 172.16.0.0/12  # rfc1918 possible internal network\nacl localnet src 192.168.0.0/16 # rfc1918 possible internal network\nacl localnet src fc00::/7       # rfc 4193 local private network range\nacl localnet src fe80::/10      # rfc 4291 link-local (directly plugged) machines\n\nacl ssl_ports port 443\nacl safe_ports port 80          # http\nacl safe_ports port 21          # ftp\nacl safe_ports port 443         # https\nacl safe_ports port 70          # gopher\nacl safe_ports port 210         # wais\nacl safe_ports port 1025-65535  # unregistered ports\nacl safe_ports port 280         # http-mgmt\nacl safe_ports port 488         # gss-http\nacl safe_ports port 591         # filemaker\nacl safe_ports port 777         # multiling http\nacl connect method connect\n\n#\n# recommended minimum access permission configuration:\n#\n# deny requests to certain unsafe ports\nhttp_access deny !safe_ports\n\n# deny connect to other than secure ssl ports\nhttp_access deny connect !ssl_ports\n\n# only allow cachemgr access from localhost\nhttp_access allow localhost manager\nhttp_access deny manager\n\n# we strongly recommend the following be uncommented to protect innocent\n# web applications running on the proxy server who think the only\n# one who can access services on "localhost" is a local user\n#http_access deny to_localhost\n\n#\n# insert your own rule(s) here to allow access from your clients\n#\n\n# example rule allowing access from your local networks.\n# adapt localnet in the acl section to list your (internal) ip networks\n# from where browsing should be allowed\nhttp_access allow localnet\nhttp_access allow localhost\n\n# and finally deny all other access to this proxy\n# http_access deny all\nhttp_access allow all\n\n# squid normally listens to port 3128\nhttp_port 3128\n\n# uncomment and adjust the following to add a disk cache directory.\n#cache_dir ufs /var/spool/squid 100 16 256\n\n# leave coredumps in the first cache dir\ncoredump_dir /var/spool/squid\n\n\n#\n# add any of your own refresh_pattern entries above these.\n#\nrefresh_pattern ^ftp:           1440    20%     10080\nrefresh_pattern ^gopher:        1440    0%      1440\nrefresh_pattern -i (/cgi-bin/|\\?) 0     0%      0\nrefresh_pattern .               0       20%     4320\n[root@worker1 ~]# cat /etc/httpd/conf.d/squid.conf\n\n#\n# this is /etc/httpd/conf.d/squid.conf\n#\n\nscriptalias /squid/cgi-bin/cachemgr.cgi /usr/lib64/squid/cachemgr.cgi\n\n# only allow access from localhost by default\n<location /squid/cgi-bin/cachemgr.cgi>\n require local\n # add additional allowed hosts as needed\n # require host example.com\n</location>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n\n\n# squid配置文件解析\n\n #\nacl all src 0.0.0.0/0.0.0.0          #允许所有ip访问\nacl manager proto http              #manager url协议为http\nacl localhost src 127.0.0.1/255.255.255.255  #允午本机ip\nacl to_localhost dst 127.0.0.1                 #允午目的地址为本机ip\nacl connect method connect        #请求方法以connect\n#http_access allow all                #允许所有人使用该代理.\n#http_reply_access allow all                #允许所有客户端使用该代理\n\nacl safe_ports port 80          # 允许安全更新的端口为80\nacl safe_ports port 443        #允许安全更新的端口为443\n\nacl localnet src 10.195.249.225     #\nacl localnet src 10.195.236.141     #\n\nhttp_access allow localnet           #\nhttp_access deny !safe_ports           #\n\n\nacl overconnlimit maxconn 16        #限制每个ip最大允许16个连接，防止攻击\nhttp_access deny overconnlimit\n\nicp_access deny all                        #禁止从邻居服务器缓冲内发送和接收icp请求.\nmiss_access allow all                #允许直接更新请求\nident_lookup_access deny all                                #禁止lookup检查dns\nhttp_port 8080 transparent                                #指定squid监听浏览器客户请求的端口号。\n\nhierarchy_stoplist cgi-bin ?                #用来强制某些特定的对象不被缓存，主要是处于安全的目的。\nacl query urlpath_regex cgi-bin \\?\ncache deny query\n\ncache_mem 1 gb        #这是一个优化选项，增加该内存值有利于缓存。应该注意的是：\n                     #一般来说如果系统有内存，设置该值为(n/)3m。现在是3g 所以这里1g\nfqdncache_size 1024        #fqdn 高速缓存大小\nmaximum_object_size_in_memory 2 mb        #允许最大的文件载入内存\n\nmemory_replacement_policy heap lfuda  #动态使用最小的，移出内存cache\ncache_replacement_policy heap lfuda         #动态使用最小的，移出硬盘cache\n\ncache_dir ufs /home/cache 5000 32 512  #高速缓存目录 ufs 类型 使用的缓冲值最大允午1000mb空间，\n#32个一级目录，512个二级目录\n\nmax_open_disk_fds 0                                 #允许最大打开文件数量,0 无限制\nminimum_object_size 1 kb                         #允午最小文件请求体大小\nmaximum_object_size 20 mb                 #允午最大文件请求体大小\n\ncache_swap_low 90                            #最小允许使用swap 90%\ncache_swap_high 95                            #最多允许使用swap 95%\n\nipcache_size 2048                                # ip 地址高速缓存大小 2m\nipcache_low 90                                #最小允许ipcache使用swap 90%\nipcache_high 95                                  #最大允许ipcache使用swap 90%\n\n\naccess_log /var/log/squid/access.log squid        #定义日志存放记录\ncache_log /var/log/squid/cache.log squid\ncache_store_log none                        #禁止store日志\n\nemulate_httpd_log on        #将使squid仿照web服务器的格式创建访问记录。如果希望使用\n                                #web访问记录分析程序，就需要设置这个参数。\n\nrefresh_pattern . 0 20% 4320 override-expire override-lastmod reload-into-ims ignore-reload   #更新cache规则\n\nacl buggy_server url_regex ^http://.... http://          #只允许http的请求\nbroken_posts allow buggy_server\n\nacl apache rep_header server ^apache                 #允许apache的编码\nbroken_vary_encoding allow apache\n\nrequest_entities off                                        #禁止非http的标分准请求，防止攻击\nheader_access header allow all                        #允许所有的http报头\nrelaxed_header_parser on                                #不严格分析http报头.\nclient_lifetime 120 minute                                #最大客户连接时间 120分钟\n\ncache_mgr sky@test.com                        #指定当缓冲出现问题时向缓冲管理者发送告警信息的地址信息。\n\ncache_effective_user squid                        #这里以用户squid的身份squid服务器\ncache_effective_group squid\n\nicp_port 0                       #指定squid从邻居服务器缓冲内发送和接收icp请求的端口号。\n                     #这里设置为0是因为这里配置squid为内部web服务器的加速器，\n                     #所以不需要使用邻居服务器的缓冲。0是禁用\n\n# cache_peer 设置允许更新缓存的主机，因是本机所以127.0.0.1\ncache_peer 127.0.0.1 parent 80 0 no-query default multicast-responder no-netdb-exchange\ncache_peer_domain 127.0.0.1                                 \nhostname_aliases 127.0.0.1\n\nerror_directory /usr/share/squid/errors/simplify_chinese        #定义错误路径\n\nalways_direct allow all                # cache丢失或不存在是允许所有请求直接转发到原始服务器\nignore_unknown_nameservers on        #开反dns查询，当域名地址不相同时候，禁止访问\ncoredump_dir  /var/log/squid                 #定义dump的目录\n\nmax_filedesc 2048                #最大打开的文件描述\n\nhalf_closed_clients off        #使squid在当read不再返回数据时立即关闭客户端的连接。\n                                #有时read不再返回数据是由于某些客户关闭tcp的发送数据\n                                #而仍然保持接收数据。而squid分辨不出tcp半关闭和完全关闭。\n\nbuffered_logs on #若打开选项“buffered_logs”可以稍稍提高加速某些对日志文件的写入，该选项主要是实现优化特性。#    \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n\n\n此处参考：https://www.cnblogs.com/he-ding/p/10038264.html\n\n# 启动squid服务\n\n service squid start\n\n\n1\n\n\n\n# 客户端（无外网权限）\n\nvi /etc/profile\n\n # vi /etc/profile\nhttp_proxy=http://192.168.20.20:3128       # 分别指定http、https、ftp协议使用的代理服务器地址\nhttps_proxy=http://192.168.20.20:3128\nftp_proxy=http://192.168.20.20:3128\nno_proxy=192.168.20.        # 访问局域网地址（192.168.20.0/24网段）时不使用代理，可以用逗号分隔多个地址\nexport http_proxy https_proxy ftp_proxy no_proxy\n\n\n1\n2\n3\n4\n5\n6\n\n\n保存退出，注销重新登陆系统即可生效',charsets:{cjk:!0},lastUpdated:"2023/03/10, 10:08:26",lastUpdatedTimestamp:1678442906e3},{title:"玩客云刷高版本Linux",frontmatter:{title:"玩客云刷高版本Linux",date:"2023-03-13T14:06:40.000Z",permalink:"/pages/e9b41d/",categories:["Linux"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/02.Linux/02.%E7%8E%A9%E5%AE%A2%E4%BA%91%E5%88%B7%E9%AB%98%E7%89%88%E6%9C%ACLinux.html",relativePath:"02.Linux/02.玩客云刷高版本Linux.md",key:"v-a5114382",path:"/pages/e9b41d/",headers:[{level:2,title:"准备硬件",slug:"准备硬件",normalizedTitle:"准备硬件",charIndex:206},{level:2,title:"相关软件及工具下载",slug:"相关软件及工具下载",normalizedTitle:"相关软件及工具下载",charIndex:286},{level:2,title:"刷机步骤",slug:"刷机步骤",normalizedTitle:"刷机步骤",charIndex:370},{level:3,title:"拆机,短接,刷入通用安卓固件",slug:"拆机-短接-刷入通用安卓固件",normalizedTitle:"拆机,短接,刷入通用安卓固件",charIndex:380},{level:3,title:"优盘写入emmc固件",slug:"优盘写入emmc固件",normalizedTitle:"优盘写入emmc固件",charIndex:399},{level:3,title:"连接TTL线",slug:"连接ttl线",normalizedTitle:"连接ttl线",charIndex:414},{level:3,title:"优盘插上开始刷机",slug:"优盘插上开始刷机",normalizedTitle:"优盘插上开始刷机",charIndex:425},{level:3,title:"刷入emmc",slug:"刷入emmc",normalizedTitle:"刷入emmc",charIndex:438}],headersStr:"准备硬件 相关软件及工具下载 刷机步骤 拆机,短接,刷入通用安卓固件 优盘写入emmc固件 连接TTL线 优盘插上开始刷机 刷入emmc",content:"可安装Docker\n\n本篇文章参考博客\n1.https://www.e-learn.cn/topic/3741671\n2.https://www.right.com.cn/forum/thread-4031529-1-1.html\n3.https://zhuanlan.zhihu.com/p/144850658\n其中1的Linux的版本较低，安装不了Docker\n其中2的系统刷不到eMMC，资料缺点\n\n\n# 准备硬件\n\n1.玩客云1台 2.USB公对公线一根 3.USB串口模块一个 ,杜邦线和排针 4.8G以上优盘一个 5.网线一根 6.拆机螺丝刀,摄子等\n\n\n# 相关软件及工具下载\n\n链接：https://pan.baidu.com/s/1-FlCmAm7Rk_kdQXWQO2YMw \n提取码：5ak7 \n\n\n1\n2\n\n\n\n# 刷机步骤\n\n 1. 拆机,短接,刷入通用安卓固件\n 2. 优盘写入emmc固件\n 3. 连接TTL线\n 4. 优盘插上开始刷机\n 5. 刷入emmc\n 6. 刷完收工\n\n\n# 拆机,短接,刷入通用安卓固件\n\n\n\n拆机,将玩客云主板取出,用USB公对公线,一头连接在玩客云2号USB口,一头连接在电脑上,玩客云暂时不要通电.电脑上安装好USB_Burning_Tool,运行软件,导入烧录包s805_flash_snail.img勾选上”擦除flash””擦除bootloader”,点击”开始”.\n用准备好的摄子或其他短路工具,玩客云背面短接图中2点后,不要松手,再给玩客云通电,软件上有动静后,松开摄子.至烧录成功. 点击”停止”,退出软件,拔下USB公头线,断电玩客云,放到一边备用.\n\n\n\n\n\n报错解决办法,快速把USB线拔下来,再插上去\n\n\n# 优盘写入emmc固件\n\n\n\n\n# 连接TTL线\n\n准备好usb转TTL模块,电脑安装好ch340模块驱动,如图\n\n玩客云不要通电,将TTL线与玩客云连接好,(图上是自已焊的排针,可以用网线剥出铜丝插到杜邦线及玩客云小孔里也可以，只要能确保连接线连接接玩客云且在刷机时不不会脱落即可。),注意连接顺序如下，一定要看清不要连接错误。\n\nTTL 模块和玩客云的接法如下：\n\n模块-------------------玩客云\nRX-------------------------TX\nTX-------------------------RX\nGND------------------------GND\nVCC 不用接，空着\n\n\n1\n2\n3\n4\n5\n\n\n\n\n第一次使用的话先装好驱动，然后去设备管理器里查看 COM 口序号，我这是 COM4，并且把设备属性里的位/秒改成 115200，流控制设定为无\n\n\n\n会话选项里连接类型选择串口，点击打开\n\n\n\n打开后默认情况下 putty 窗口是黑屏，因为没数据\n\n\n# 优盘插上开始刷机\n\n这时候把玩客云主板U盘插上，再通上电，会在 putty 窗口里看到很多数据，稍等一会，就可以看到系统正常启动了，此时启动的系统是u盘上的系统。\n\n\n\n插入网线 ping一下114.114.114.114就可以在路由器中查看ip了\n\n\n# 刷入emmc\n\n怎么刷入eMMC？很简单，执行\ncd /boot/install/\nsudo ./install.sh\n\n就开始烧录了\n\n\n\nifconfig看看是否千兆\n\n",normalizedContent:"可安装docker\n\n本篇文章参考博客\n1.https://www.e-learn.cn/topic/3741671\n2.https://www.right.com.cn/forum/thread-4031529-1-1.html\n3.https://zhuanlan.zhihu.com/p/144850658\n其中1的linux的版本较低，安装不了docker\n其中2的系统刷不到emmc，资料缺点\n\n\n# 准备硬件\n\n1.玩客云1台 2.usb公对公线一根 3.usb串口模块一个 ,杜邦线和排针 4.8g以上优盘一个 5.网线一根 6.拆机螺丝刀,摄子等\n\n\n# 相关软件及工具下载\n\n链接：https://pan.baidu.com/s/1-flcmam7rk_kdqxwqo2ymw \n提取码：5ak7 \n\n\n1\n2\n\n\n\n# 刷机步骤\n\n 1. 拆机,短接,刷入通用安卓固件\n 2. 优盘写入emmc固件\n 3. 连接ttl线\n 4. 优盘插上开始刷机\n 5. 刷入emmc\n 6. 刷完收工\n\n\n# 拆机,短接,刷入通用安卓固件\n\n\n\n拆机,将玩客云主板取出,用usb公对公线,一头连接在玩客云2号usb口,一头连接在电脑上,玩客云暂时不要通电.电脑上安装好usb_burning_tool,运行软件,导入烧录包s805_flash_snail.img勾选上”擦除flash””擦除bootloader”,点击”开始”.\n用准备好的摄子或其他短路工具,玩客云背面短接图中2点后,不要松手,再给玩客云通电,软件上有动静后,松开摄子.至烧录成功. 点击”停止”,退出软件,拔下usb公头线,断电玩客云,放到一边备用.\n\n\n\n\n\n报错解决办法,快速把usb线拔下来,再插上去\n\n\n# 优盘写入emmc固件\n\n\n\n\n# 连接ttl线\n\n准备好usb转ttl模块,电脑安装好ch340模块驱动,如图\n\n玩客云不要通电,将ttl线与玩客云连接好,(图上是自已焊的排针,可以用网线剥出铜丝插到杜邦线及玩客云小孔里也可以，只要能确保连接线连接接玩客云且在刷机时不不会脱落即可。),注意连接顺序如下，一定要看清不要连接错误。\n\nttl 模块和玩客云的接法如下：\n\n模块-------------------玩客云\nrx-------------------------tx\ntx-------------------------rx\ngnd------------------------gnd\nvcc 不用接，空着\n\n\n1\n2\n3\n4\n5\n\n\n\n\n第一次使用的话先装好驱动，然后去设备管理器里查看 com 口序号，我这是 com4，并且把设备属性里的位/秒改成 115200，流控制设定为无\n\n\n\n会话选项里连接类型选择串口，点击打开\n\n\n\n打开后默认情况下 putty 窗口是黑屏，因为没数据\n\n\n# 优盘插上开始刷机\n\n这时候把玩客云主板u盘插上，再通上电，会在 putty 窗口里看到很多数据，稍等一会，就可以看到系统正常启动了，此时启动的系统是u盘上的系统。\n\n\n\n插入网线 ping一下114.114.114.114就可以在路由器中查看ip了\n\n\n# 刷入emmc\n\n怎么刷入emmc？很简单，执行\ncd /boot/install/\nsudo ./install.sh\n\n就开始烧录了\n\n\n\nifconfig看看是否千兆\n\n",charsets:{cjk:!0},lastUpdated:"2023/03/14, 05:49:29",lastUpdatedTimestamp:1678772969e3},{title:"端口映射",frontmatter:{title:"端口映射",date:"2023-03-13T14:12:28.000Z",permalink:"/pages/0d3d62/",categories:["Linux"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/02.Linux/03.%E7%AB%AF%E5%8F%A3%E6%98%A0%E5%B0%84.html",relativePath:"02.Linux/03.端口映射.md",key:"v-9d942f72",path:"/pages/0d3d62/",headers:[{level:2,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:2},{level:2,title:"实现",slug:"实现",normalizedTitle:"实现",charIndex:214},{level:3,title:"方式一（Nginx）",slug:"方式一-nginx",normalizedTitle:"方式一（nginx）",charIndex:221},{level:3,title:"方式二（firewall）",slug:"方式二-firewall",normalizedTitle:"方式二（firewall）",charIndex:593},{level:3,title:"方式三（iptables）",slug:"方式三-iptables",normalizedTitle:"方式三（iptables）",charIndex:1436},{level:3,title:"方式四（rinetd）",slug:"方式四-rinetd",normalizedTitle:"方式四（rinetd）",charIndex:1465},{level:2,title:"特殊应用",slug:"特殊应用",normalizedTitle:"特殊应用",charIndex:1536},{level:3,title:"KAFKA端口转发",slug:"kafka端口转发",normalizedTitle:"kafka端口转发",charIndex:1545},{level:4,title:"起因",slug:"起因",normalizedTitle:"起因",charIndex:1558},{level:5,title:"情况图",slug:"情况图",normalizedTitle:"情况图",charIndex:2111},{level:4,title:"解决",slug:"解决",normalizedTitle:"解决",charIndex:2120},{level:5,title:"思路流程图",slug:"思路流程图",normalizedTitle:"思路流程图",charIndex:2126}],headersStr:"原理 实现 方式一（Nginx） 方式二（firewall） 方式三（iptables） 方式四（rinetd） 特殊应用 KAFKA端口转发 起因 情况图 解决 思路流程图",content:"# 原理\n\n端口映射就是将内网中的主机的一个端口映射到外网主机的一个端口，提供相应的服务。当用户访问外网IP的这个端口时，服务器自动将请求映射到对应局域网内部的机器上\n\n\n\n如图所示\n\n192.168.213.212服务器拥有外网权限，并开放了7070端口。此时在外网环境下需要访问到192.168.213.213服务器的6060端口，就需要在212服务器上做端口映射。将7070端口转发到213服务器的6060端口。\n\n\n# 实现\n\n\n# 方式一（Nginx）\n\n配置文件与http同级，如下将本机端口7070转发到213服务器的6060端口\n\n stream{\n        upstream mysqlmaster {\n                server 192.168.213.213:6060 weight=1;\n        }\n        server {\n                listen 7070;\n                proxy_upload_rate 102400;\n                proxy_download_rate 102400;\n                proxy_pass mysqlmaster;\n        }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 方式二（firewall）\n\n在服务器192.168.213.212上执行此下命令\n\n1.开启系统ipv4转发\nsysctl -w net.ipv4.ip_forward=1\n或\necho 1 > /proc/sys/net/ipv4/ip_forward\n2.开启防火墙\nsystemctl start firewalld.service\n3.添加端口\nfirewall-cmd --zone=public --add-port=7070/tcp --permanent\n4.开启防火墙端口转发功能\nfirewall-cmd --permanent --add-masquerade\n5.防火墙端口转发，将本地7070端口转发到192.168.213.213端口6060\nfirewall-cmd --permanent --zone=public --add-forward-port=port=7070:proto=tcp:toaddr=192.168.213.213:toport=6060\n6.重启防火墙\nsystemctl restart firewalld.service\n或\nfirewall-cmd --reload\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n其他命令\n\n7.查询开放的端口\nfirewall-cmd --list-ports\n8.查询端口转发列表\nfirewall-cmd --list-forward-ports\n8.查询端口转发功能是否开启\nfirewall-cmd --query-masquerade\n9.删除端口转发\nfirewall-cmd --permanent --zone=public --remove-forward-port=port=7070:proto=tcp:toaddr=192.168.213.213:toport=6060\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 方式三（iptables）\n\n使用nat转发方式\n\n\n# 方式四（rinetd）\n\n若要作为组件连接工具要慎用，参考此篇文章：\n\nrinetd占用CPU较高，导致转发服务异常\n\nblog\n\n\n\n\n# 特殊应用\n\n\n# KAFKA端口转发\n\n# 起因\n\n前提了解\nkafka需要设置advertised.listeners可连接地址及端口，例：设置192.196.213.213:9092,微服务则需要使用92.196.213.213:9092这个地址连接\n本次设置kafka.ok96.cn:9092\n\n情况：\n\n 1. 虚拟机172.16.200.201和172.16.200.202服务器处于同一内网，端口访问无限制\n 2. 服务器192.168.213.212外网ip为14.215.177.x 开放端口7070\n 3. 在172.16.200.202服务器上安装了kafka\n\n需求：\n\n 1. 在172.16.200.201服务器上的微服务需要连接kafka\n 2. 在外网14.215.177.y服务器上的微服务需要连接kafka\n\n特殊说明：\n\n 1. 服务器14.215.177.x外网7070端口不能变换\n    【若可以直接使用9092则不需要在14.215.177.y上做端口转发啦】\n 2. 服务器172.16.200.201网络连接不能通过外网ip回流到172.16.200.202\n    【若可以，则只需将advertised.listeners设置为公网ip即可，不需要再做端口转发，不需要再做hosts映射】\n\n# 情况图\n\n\n\n# 解决\n\n# 思路流程图\n\n",normalizedContent:"# 原理\n\n端口映射就是将内网中的主机的一个端口映射到外网主机的一个端口，提供相应的服务。当用户访问外网ip的这个端口时，服务器自动将请求映射到对应局域网内部的机器上\n\n\n\n如图所示\n\n192.168.213.212服务器拥有外网权限，并开放了7070端口。此时在外网环境下需要访问到192.168.213.213服务器的6060端口，就需要在212服务器上做端口映射。将7070端口转发到213服务器的6060端口。\n\n\n# 实现\n\n\n# 方式一（nginx）\n\n配置文件与http同级，如下将本机端口7070转发到213服务器的6060端口\n\n stream{\n        upstream mysqlmaster {\n                server 192.168.213.213:6060 weight=1;\n        }\n        server {\n                listen 7070;\n                proxy_upload_rate 102400;\n                proxy_download_rate 102400;\n                proxy_pass mysqlmaster;\n        }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 方式二（firewall）\n\n在服务器192.168.213.212上执行此下命令\n\n1.开启系统ipv4转发\nsysctl -w net.ipv4.ip_forward=1\n或\necho 1 > /proc/sys/net/ipv4/ip_forward\n2.开启防火墙\nsystemctl start firewalld.service\n3.添加端口\nfirewall-cmd --zone=public --add-port=7070/tcp --permanent\n4.开启防火墙端口转发功能\nfirewall-cmd --permanent --add-masquerade\n5.防火墙端口转发，将本地7070端口转发到192.168.213.213端口6060\nfirewall-cmd --permanent --zone=public --add-forward-port=port=7070:proto=tcp:toaddr=192.168.213.213:toport=6060\n6.重启防火墙\nsystemctl restart firewalld.service\n或\nfirewall-cmd --reload\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n其他命令\n\n7.查询开放的端口\nfirewall-cmd --list-ports\n8.查询端口转发列表\nfirewall-cmd --list-forward-ports\n8.查询端口转发功能是否开启\nfirewall-cmd --query-masquerade\n9.删除端口转发\nfirewall-cmd --permanent --zone=public --remove-forward-port=port=7070:proto=tcp:toaddr=192.168.213.213:toport=6060\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 方式三（iptables）\n\n使用nat转发方式\n\n\n# 方式四（rinetd）\n\n若要作为组件连接工具要慎用，参考此篇文章：\n\nrinetd占用cpu较高，导致转发服务异常\n\nblog\n\n\n\n\n# 特殊应用\n\n\n# kafka端口转发\n\n# 起因\n\n前提了解\nkafka需要设置advertised.listeners可连接地址及端口，例：设置192.196.213.213:9092,微服务则需要使用92.196.213.213:9092这个地址连接\n本次设置kafka.ok96.cn:9092\n\n情况：\n\n 1. 虚拟机172.16.200.201和172.16.200.202服务器处于同一内网，端口访问无限制\n 2. 服务器192.168.213.212外网ip为14.215.177.x 开放端口7070\n 3. 在172.16.200.202服务器上安装了kafka\n\n需求：\n\n 1. 在172.16.200.201服务器上的微服务需要连接kafka\n 2. 在外网14.215.177.y服务器上的微服务需要连接kafka\n\n特殊说明：\n\n 1. 服务器14.215.177.x外网7070端口不能变换\n    【若可以直接使用9092则不需要在14.215.177.y上做端口转发啦】\n 2. 服务器172.16.200.201网络连接不能通过外网ip回流到172.16.200.202\n    【若可以，则只需将advertised.listeners设置为公网ip即可，不需要再做端口转发，不需要再做hosts映射】\n\n# 情况图\n\n\n\n# 解决\n\n# 思路流程图\n\n",charsets:{cjk:!0},lastUpdated:"2023/03/14, 05:49:29",lastUpdatedTimestamp:1678772969e3},{title:"安装Ubuntu",frontmatter:{title:"安装Ubuntu",date:"2023-03-13T14:12:29.000Z",permalink:"/pages/152f6b/",categories:["Linux"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/02.Linux/04.%E5%AE%89%E8%A3%85Ubuntu.html",relativePath:"02.Linux/04.安装Ubuntu.md",key:"v-caca427e",path:"/pages/152f6b/",headers:[{level:2,title:"安装Ubuntu18.04",slug:"安装ubuntu18-04",normalizedTitle:"安装ubuntu18.04",charIndex:2},{level:2,title:"制作USB启动盘",slug:"制作usb启动盘",normalizedTitle:"制作usb启动盘",charIndex:20},{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:2},{level:3,title:"启动顺序",slug:"启动顺序",normalizedTitle:"启动顺序",charIndex:138},{level:3,title:"安装引导界面",slug:"安装引导界面",normalizedTitle:"安装引导界面",charIndex:161},{level:3,title:"安装简体中文",slug:"安装简体中文",normalizedTitle:"安装简体中文",charIndex:191},{level:3,title:"键盘布局",slug:"键盘布局",normalizedTitle:"键盘布局",charIndex:204},{level:3,title:"安装软件",slug:"安装软件",normalizedTitle:"安装软件",charIndex:220},{level:3,title:"用户密码",slug:"用户密码",normalizedTitle:"用户密码",charIndex:238},{level:2,title:"初始化系统",slug:"初始化系统",normalizedTitle:"初始化系统",charIndex:262}],headersStr:"安装Ubuntu18.04 制作USB启动盘 安装 启动顺序 安装引导界面 安装简体中文 键盘布局 安装软件 用户密码 初始化系统",content:"# 安装Ubuntu18.04\n\n\n# 制作USB启动盘\n\n下载\n\n * ubuntu-18.04.2-desktop-amd64.iso\n * rufus\n\n制作启动盘，设备选择U盘、选择ISO镜像、点击开始\n\n\n\n# 安装\n\nU盘接入服务器，BIOS选择U盘启动\n\n\n# 启动顺序\n\n在BIOS选择U盘启动\n\n\n\n# 安装引导界面\n\n选择Install Ubuntu\n\n\n\n# 安装简体中文\n\n\n\n\n# 键盘布局\n\n选择英语\n\n\n\n# 安装软件\n\n选择正常安装\n\n\n\n# 用户密码\n\n输入服务器用户名称及密码\n\n\n\n# 初始化系统\n\n进入服务器终端安装openssh vim\n\nsudo apt install openssh-server vim -y\nsudo vim /etc/ssh/sshd_config\n修改以下配置：\n-------------------------------\n LoginGraceTime 2m\n PermitRootLogin yes\n StrictModes yes\n #MaxAuthTries 6\n #MaxSessions 10\n-------------------------------\nsudo service ssh restart\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",normalizedContent:"# 安装ubuntu18.04\n\n\n# 制作usb启动盘\n\n下载\n\n * ubuntu-18.04.2-desktop-amd64.iso\n * rufus\n\n制作启动盘，设备选择u盘、选择iso镜像、点击开始\n\n\n\n# 安装\n\nu盘接入服务器，bios选择u盘启动\n\n\n# 启动顺序\n\n在bios选择u盘启动\n\n\n\n# 安装引导界面\n\n选择install ubuntu\n\n\n\n# 安装简体中文\n\n\n\n\n# 键盘布局\n\n选择英语\n\n\n\n# 安装软件\n\n选择正常安装\n\n\n\n# 用户密码\n\n输入服务器用户名称及密码\n\n\n\n# 初始化系统\n\n进入服务器终端安装openssh vim\n\nsudo apt install openssh-server vim -y\nsudo vim /etc/ssh/sshd_config\n修改以下配置：\n-------------------------------\n logingracetime 2m\n permitrootlogin yes\n strictmodes yes\n #maxauthtries 6\n #maxsessions 10\n-------------------------------\nsudo service ssh restart\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n",charsets:{cjk:!0},lastUpdated:"2023/03/14, 08:21:42",lastUpdatedTimestamp:1678782102e3},{title:"Docker一键部署",frontmatter:{title:"Docker一键部署",date:"2023-03-10T15:21:54.000Z",permalink:"/pages/74ea91/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/01.Docker%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2.html",relativePath:"03.Deploy/01.Docker一键部署.md",key:"v-0e8db29c",path:"/pages/74ea91/",headers:[{level:2,title:"二进制文件安装",slug:"二进制文件安装",normalizedTitle:"二进制文件安装",charIndex:2},{level:2,title:"docker修改镜像和容器的存放路径",slug:"docker修改镜像和容器的存放路径",normalizedTitle:"docker修改镜像和容器的存放路径",charIndex:249},{level:3,title:"方式1",slug:"方式1",normalizedTitle:"方式1",charIndex:283},{level:3,title:"方式2",slug:"方式2",normalizedTitle:"方式2",charIndex:940}],headersStr:"二进制文件安装 docker修改镜像和容器的存放路径 方式1 方式2",content:'# 二进制文件安装\n\n简便的离线部署，一键脚本都是自行研究的，后续若有完善再更新\n\n链接：https://pan.baidu.com/s/1-Wfe6CPrif1LhbgQvXrNWw \n提取码：zhcg\n\n\n1\n2\n\n\n文件上传到服务器后赋权\nchmod -R 777 docker-init.sh\n然后执行脚本就完成docker和docker-compose的离线部署了\n\n官方参考文档：https://docs.docker.com/engine/install/binaries/\n\n\n# docker修改镜像和容器的存放路径\n\n前提，将镜像先删除\n\n\n# 方式1\n\n1、停止docker 服务\nsystemctl stop docker\n2、备份数据到新的存放路径\ncp -r /var/lib/docker/* /data/docker\n3、备份 /var/lib/docker 路径\nmv /var/lib/docker  /var/lib/dockerbak\n4、创建软连接\nln -s /data/docker /var/lib/docker\n5、启动docker\nsystemctl start docker\n如果docker完整，并可用，可删除原来的备份文件\n此方法，启动Docker时发现存储目录依旧是/var/lib/docker，但是实际上是存储在数据盘的，你可以在数据盘上看到容量变化\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n例\n\n[root@huasan ~]# systemctl stop docker\n[root@huasan ~]# mkdir -p /data/docker\n[root@huasan ~]# cp -r /var/lib/docker/* /data/docker\n[root@huasan ~]# mv /var/lib/docker /var/lib/dockerbak\n[root@huasan ~]# ln -s /data/docker /var/lib/docker\n[root@huasan ~]# systemctl start docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 方式2\n\n修改默认目录\n\nvi /etc/docker/daemon.json\n\n{\n  "data-root": "/data/docker"\n}\n\n\n1\n2\n3\n\n\n重启docker\n\nsystemctl restart docker 检查\n\ncd /data/docker\nls\n或者\ndocker info\n查看\nDocker Root Dir: /data/docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n恢复：\n\n修改daemon.json\n\n{\n  "data-root": "/var/lib/docker"\n}\n\n\n1\n2\n3\n',normalizedContent:'# 二进制文件安装\n\n简便的离线部署，一键脚本都是自行研究的，后续若有完善再更新\n\n链接：https://pan.baidu.com/s/1-wfe6cprif1lhbgqvxrnww \n提取码：zhcg\n\n\n1\n2\n\n\n文件上传到服务器后赋权\nchmod -r 777 docker-init.sh\n然后执行脚本就完成docker和docker-compose的离线部署了\n\n官方参考文档：https://docs.docker.com/engine/install/binaries/\n\n\n# docker修改镜像和容器的存放路径\n\n前提，将镜像先删除\n\n\n# 方式1\n\n1、停止docker 服务\nsystemctl stop docker\n2、备份数据到新的存放路径\ncp -r /var/lib/docker/* /data/docker\n3、备份 /var/lib/docker 路径\nmv /var/lib/docker  /var/lib/dockerbak\n4、创建软连接\nln -s /data/docker /var/lib/docker\n5、启动docker\nsystemctl start docker\n如果docker完整，并可用，可删除原来的备份文件\n此方法，启动docker时发现存储目录依旧是/var/lib/docker，但是实际上是存储在数据盘的，你可以在数据盘上看到容量变化\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n例\n\n[root@huasan ~]# systemctl stop docker\n[root@huasan ~]# mkdir -p /data/docker\n[root@huasan ~]# cp -r /var/lib/docker/* /data/docker\n[root@huasan ~]# mv /var/lib/docker /var/lib/dockerbak\n[root@huasan ~]# ln -s /data/docker /var/lib/docker\n[root@huasan ~]# systemctl start docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 方式2\n\n修改默认目录\n\nvi /etc/docker/daemon.json\n\n{\n  "data-root": "/data/docker"\n}\n\n\n1\n2\n3\n\n\n重启docker\n\nsystemctl restart docker 检查\n\ncd /data/docker\nls\n或者\ndocker info\n查看\ndocker root dir: /data/docker\n\n\n1\n2\n3\n4\n5\n6\n\n\n恢复：\n\n修改daemon.json\n\n{\n  "data-root": "/var/lib/docker"\n}\n\n\n1\n2\n3\n',charsets:{cjk:!0},lastUpdated:"2023/03/10, 09:02:56",lastUpdatedTimestamp:1678438976e3},{title:"Mysql主从配置一键化",frontmatter:{title:"Mysql主从配置一键化",date:"2023-03-10T15:26:41.000Z",permalink:"/pages/d04772/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/02.Mysql%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE%E4%B8%80%E9%94%AE%E5%8C%96.html",relativePath:"03.Deploy/02.Mysql主从配置一键化.md",key:"v-4ea01f7a",path:"/pages/d04772/",headers:[{level:2,title:"首先启动mysql（主）和mysql（从）",slug:"首先启动mysql-主-和mysql-从",normalizedTitle:"首先启动mysql（主）和mysql（从）",charIndex:2}],headersStr:"首先启动mysql（主）和mysql（从）",content:"# 首先启动mysql（主）和mysql（从）\n\n这里使用docker-compose部署 设：本台服务器IP地址为192.168.123.2\n\n部署mysql主从文件\n\n链接：https://pan.baidu.com/s/1YDW6YALWZTRF0xtWkjwCzQ \n提取码：lmkf \n\n\n1\n2\n\n\n数据库密码为i123456，在启动的时候需要对log文件及文件夹赋权\n\nchmod -R 777 mysql/log\nchmod -R 777 mysql/log/*\nchmod -R 644 mysql/conf/my.cnf\nchmod -R 777 mysqlread/log\nchmod -R 777 mysqlread/log/*\nchmod -R 644 mysqlread/conf/my.cnf\n\n\n1\n2\n3\n4\n5\n6\n\n\n然后启动数据库主从\n\ndocker-compose up -d\n\n\n1\n\n\n数据库启动完成后，就可以使用一键主从配置对脚本了\n\n链接：https://pan.baidu.com/s/1VLV5wnMasdzihBc_l30YCg \n提取码：shio\n\n\n1\n2\n\n\n首先对脚本赋权777 执行命令：\n\nchmod -R 777 master-slave.sh\n./master-slave.sh 192.168.123.2\n\n\n1\n2\n\n\n如果需要修改密码的话，就全文检索i123456替换就可以了",normalizedContent:"# 首先启动mysql（主）和mysql（从）\n\n这里使用docker-compose部署 设：本台服务器ip地址为192.168.123.2\n\n部署mysql主从文件\n\n链接：https://pan.baidu.com/s/1ydw6yalwztrf0xtwkjwczq \n提取码：lmkf \n\n\n1\n2\n\n\n数据库密码为i123456，在启动的时候需要对log文件及文件夹赋权\n\nchmod -r 777 mysql/log\nchmod -r 777 mysql/log/*\nchmod -r 644 mysql/conf/my.cnf\nchmod -r 777 mysqlread/log\nchmod -r 777 mysqlread/log/*\nchmod -r 644 mysqlread/conf/my.cnf\n\n\n1\n2\n3\n4\n5\n6\n\n\n然后启动数据库主从\n\ndocker-compose up -d\n\n\n1\n\n\n数据库启动完成后，就可以使用一键主从配置对脚本了\n\n链接：https://pan.baidu.com/s/1vlv5wnmasdzihbc_l30ycg \n提取码：shio\n\n\n1\n2\n\n\n首先对脚本赋权777 执行命令：\n\nchmod -r 777 master-slave.sh\n./master-slave.sh 192.168.123.2\n\n\n1\n2\n\n\n如果需要修改密码的话，就全文检索i123456替换就可以了",charsets:{cjk:!0},lastUpdated:"2023/03/10, 09:02:56",lastUpdatedTimestamp:1678438976e3},{title:"Mysql新建主从同步-mysqldump",frontmatter:{title:"Mysql新建主从同步-mysqldump",date:"2023-03-13T11:09:57.000Z",permalink:"/pages/b6e922/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/03.Mysql%E6%96%B0%E5%BB%BA%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5-mysqldump.html",relativePath:"03.Deploy/03.Mysql新建主从同步-mysqldump.md",key:"v-912a3978",path:"/pages/b6e922/",headers:[{level:2,title:"备份数据库sql",slug:"备份数据库sql",normalizedTitle:"备份数据库sql",charIndex:106},{level:2,title:"从容器里面拷文件到宿主机",slug:"从容器里面拷文件到宿主机",normalizedTitle:"从容器里面拷文件到宿主机",charIndex:577},{level:2,title:"传输文件",slug:"传输文件",normalizedTitle:"传输文件",charIndex:634},{level:2,title:"新数据库导入sql",slug:"新数据库导入sql",normalizedTitle:"新数据库导入sql",charIndex:745},{level:2,title:"设置从库同步",slug:"设置从库同步",normalizedTitle:"设置从库同步",charIndex:909},{level:2,title:"查看结果",slug:"查看结果",normalizedTitle:"查看结果",charIndex:1210}],headersStr:"备份数据库sql 从容器里面拷文件到宿主机 传输文件 新数据库导入sql 设置从库同步 查看结果",content:'注：建议先看完文章再操作或在测试环境中自行测试\n\n主库192.168.50.56，端口2205，容器名称mysql\n从库192.168.50.64，端口2206，容器名称mysqlread\n\n\n1\n2\n\n\n\n# 备份数据库sql\n\n备份你需要的数据库（例：apolloconfigdb apolloportaldb）sql 同时查看偏移量。期间使用mysqldump会很慢\n\n命令\n\n#进入容器\ndocker exec -it mysql bash\n#备份数据库\nmysqldump -h192.168.50.56 -P2205 -uroot -pim@mysql123 --databases apolloconfigdb apolloportaldb > /home/mysql_db2.sql\n#查看偏移量\ndocker exec -it mysql bash -c \'mysql -uroot -pim@mysql123 -e"show master status\\G;"\'\n\n\n1\n2\n3\n4\n5\n6\n\n\n偏移量显示：\n\n -----mysql-bin.000007----\n-----154----\n\n\n1\n2\n\n\n注：为以防万一，在执行mysqldump命令时查看偏移量1一次，在执行完成mysqldump命令在查看偏移量2一次）\n\n\n# 从容器里面拷文件到宿主机\n\n docker cp mysql:/home /data/test\n\n\n1\n\n\n\n# 传输文件\n\ncd /data/test\nscp  -P 22  mysql_db2.sql root@192.168.50.64:/data/test/mysql_db2.sql\n64服务器密码\n\n\n1\n2\n3\n\n\n\n# 新数据库导入sql\n\n新数据容器名称为mysqlread\n\ndocker cp /data/test mysqlread:/sql\ndocker exec -it mysqlread bash \ncd sql\nmysql -uroot -pim@mysql123 < mysql_db2.sql;\n\n\n1\n2\n3\n4\n\n\n\n# 设置从库同步\n\ndocker exec -it mysqlread bash -c \'mysql -uroot -pim@mysql123 -e "stop slave;reset slave;CHANGE MASTER TO MASTER_HOST=\\"192.168.50.56\\", MASTER_PORT=2205, MASTER_USER=\\"root\\", MASTER_PASSWORD=\\"im@mysql123\\",MASTER_LOG_FILE=\\"mysql-bin.000007\\",MASTER_LOG_POS=154;start slave;"\'\n（注：偏移量先使用1，然后查看结果是否正常。若异常则使用偏移量2设置）\n\n\n1\n2\n\n\n\n# 查看结果\n\n docker exec -it mysqlread bash -c \'mysql -uroot -pim@mysql123 -e"show slave status\\G"\'\n\n\n1\n',normalizedContent:'注：建议先看完文章再操作或在测试环境中自行测试\n\n主库192.168.50.56，端口2205，容器名称mysql\n从库192.168.50.64，端口2206，容器名称mysqlread\n\n\n1\n2\n\n\n\n# 备份数据库sql\n\n备份你需要的数据库（例：apolloconfigdb apolloportaldb）sql 同时查看偏移量。期间使用mysqldump会很慢\n\n命令\n\n#进入容器\ndocker exec -it mysql bash\n#备份数据库\nmysqldump -h192.168.50.56 -p2205 -uroot -pim@mysql123 --databases apolloconfigdb apolloportaldb > /home/mysql_db2.sql\n#查看偏移量\ndocker exec -it mysql bash -c \'mysql -uroot -pim@mysql123 -e"show master status\\g;"\'\n\n\n1\n2\n3\n4\n5\n6\n\n\n偏移量显示：\n\n -----mysql-bin.000007----\n-----154----\n\n\n1\n2\n\n\n注：为以防万一，在执行mysqldump命令时查看偏移量1一次，在执行完成mysqldump命令在查看偏移量2一次）\n\n\n# 从容器里面拷文件到宿主机\n\n docker cp mysql:/home /data/test\n\n\n1\n\n\n\n# 传输文件\n\ncd /data/test\nscp  -p 22  mysql_db2.sql root@192.168.50.64:/data/test/mysql_db2.sql\n64服务器密码\n\n\n1\n2\n3\n\n\n\n# 新数据库导入sql\n\n新数据容器名称为mysqlread\n\ndocker cp /data/test mysqlread:/sql\ndocker exec -it mysqlread bash \ncd sql\nmysql -uroot -pim@mysql123 < mysql_db2.sql;\n\n\n1\n2\n3\n4\n\n\n\n# 设置从库同步\n\ndocker exec -it mysqlread bash -c \'mysql -uroot -pim@mysql123 -e "stop slave;reset slave;change master to master_host=\\"192.168.50.56\\", master_port=2205, master_user=\\"root\\", master_password=\\"im@mysql123\\",master_log_file=\\"mysql-bin.000007\\",master_log_pos=154;start slave;"\'\n（注：偏移量先使用1，然后查看结果是否正常。若异常则使用偏移量2设置）\n\n\n1\n2\n\n\n\n# 查看结果\n\n docker exec -it mysqlread bash -c \'mysql -uroot -pim@mysql123 -e"show slave status\\g"\'\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2023/03/13, 03:16:04",lastUpdatedTimestamp:1678677364e3},{title:"SkyWalking部署及使用",frontmatter:{title:"SkyWalking部署及使用",date:"2023-03-13T11:19:09.000Z",permalink:"/pages/3c702b/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/04.SkyWalking%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.html",relativePath:"03.Deploy/04.SkyWalking部署及使用.md",key:"v-72036e06",path:"/pages/3c702b/",headers:[{level:2,title:"启动SkyWalking启动台",slug:"启动skywalking启动台",normalizedTitle:"启动skywalking启动台",charIndex:2},{level:3,title:"docker-compose",slug:"docker-compose",normalizedTitle:"docker-compose",charIndex:233},{level:2,title:"微服务镜像集成代理",slug:"微服务镜像集成代理",normalizedTitle:"微服务镜像集成代理",charIndex:1657},{level:3,title:"README",slug:"readme",normalizedTitle:"readme",charIndex:19},{level:3,title:"Dockerfile模版示例",slug:"dockerfile模版示例",normalizedTitle:"dockerfile模版示例",charIndex:2594},{level:3,title:"docker-compose.yml",slug:"docker-compose-yml",normalizedTitle:"docker-compose.yml",charIndex:249}],headersStr:"启动SkyWalking启动台 docker-compose 微服务镜像集成代理 README Dockerfile模版示例 docker-compose.yml",content:'# 启动SkyWalking启动台\n\nREADME\n\n## 修改es所需配置\nvi /etc/sysctl.conf\nvm.max_map_count=262144\nsysctl -p\n## 启动顺序\n1. elasticsearch 启动后关闭，赋权文件夹  [chmod -R 777 elasticsearch/*]  然后重启\n2. skywalking-oap-server\n3. skywalking-ui\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# docker-compose\n\ndocker-compose.yml\n\nversion: \'3.3\'\nservices:\n  elasticsearch:\n    image: elasticsearch:6.8.6\n    container_name: elasticsearch\n    environment:\n      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch\n      - "discovery.type=single-node" #以单一节点模式启动\n      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"\n    volumes:\n      - ./elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载\n      - ./elasticsearch/data:/usr/share/elasticsearch/data #数据文件挂载\n    ports:\n      - 10800:9200\n  skywalking-oap-server:\n    image: apache/skywalking-oap-server:9.0.0\n    container_name: skywalking-oap-server\n    depends_on:\n      - elasticsearch\n    links:\n      - elasticsearch\n    restart: always\n    ports:\n      - 11800:11800\n      - 12800:12800\n    environment:\n      SW_STORAGE: elasticsearch  # 指定ES版本\n      SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200\n      TZ: Asia/Shanghai\n#    volumes:\n#      - ./oap/conf/alarm-settings.yml:/skywalking/config/alarm-settings.yml\n  skywalking-ui:\n    image: apache/skywalking-ui:9.0.0\n    container_name: skywalking-ui\n    depends_on:\n      - skywalking-oap-server\n    links:\n      - skywalking-oap-server\n    restart: always\n    ports:\n      - 13800:8080\n    environment:\n      SW_OAP_ADDRESS: http://skywalking-oap-server:12800\n      TZ: Asia/Shanghai\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# 微服务镜像集成代理\n\n\n# README\n\n#SkyWalking 链路追踪版本\n##准备\n1. 把构建好的jar复制到files/jars目录下  \n2. 下载sentinel-dashboard-1.8.4.jar包复制到files/jars目录下  \n   改名sentinel-dashboard.jar\n   [https://github.com/alibaba/Sentinel/releases] \n3. 下载代理Java Agent[apache-skywalking-java-agent-8.10.0.tgz],放到files目录下,与Dockerfile同级  \n   改名apache-skywalking-java-agent.tgz\n   [http://skywalking.apache.org/downloads]    \n   [https://www.apache.org/dyn/closer.cgi/skywalking/java-agent/8.10.0/apache-skywalking-java-agent-8.10.0.tgz]    \n\n##启动\ndocker-compose up -d\n##只构建镜像\ndocker-compose build\n##区别\n1. 使用代理\n2. 启动前需指定收集器服务的地址   \n   -Dskywalking.collector.backend_service=192.168.213.201:11800\n\n## 使用本地IDEA启动\n配置vm参数：\n```\n-javaagent:E:\\Code\\package\\skywalking\\skywalking-agent\\skywalking-agent.jar\n-Dskywalking.agent.service_name=ok-auth\n-Dskywalking.collector.backend_service=192.168.213.201:11800\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# Dockerfile模版示例\n\nFROM openjdk:8-jre\nRUN sh -c \'touch /app.jar\'\nCOPY jars/ok-system-pure-auth.jar app.jar\nCOPY apache-skywalking-java-agent.tgz  /apache-skywalking-java-agent.tgz\nRUN tar zxvf apache-skywalking-java-agent.tgz\nENTRYPOINT [ "sh", "-c", "java $JAVA_OPTS -javaagent:/skywalking-agent/skywalking-agent.jar -Dskywalking.agent.service_name=pure-auth -Djava.security.egd=file:/dev/./urandom -jar /app.jar" ]\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# docker-compose.yml\n\nversion: \'3\'\n\nservices:\n  auth:\n    build:\n      context: ./files\n      dockerfile: AuthDockerfile\n    image: auth:1.5.0\n    container_name: auth\n    network_mode: bridge\n    ports:\n      - "9200:9200"\n    restart: always\n    environment:\n      - JAVA_OPTS=-Duser.timezone=GMT+08 -Dskywalking.collector.backend_service=192.168.213.201:11800\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n',normalizedContent:'# 启动skywalking启动台\n\nreadme\n\n## 修改es所需配置\nvi /etc/sysctl.conf\nvm.max_map_count=262144\nsysctl -p\n## 启动顺序\n1. elasticsearch 启动后关闭，赋权文件夹  [chmod -r 777 elasticsearch/*]  然后重启\n2. skywalking-oap-server\n3. skywalking-ui\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# docker-compose\n\ndocker-compose.yml\n\nversion: \'3.3\'\nservices:\n  elasticsearch:\n    image: elasticsearch:6.8.6\n    container_name: elasticsearch\n    environment:\n      - "cluster.name=elasticsearch" #设置集群名称为elasticsearch\n      - "discovery.type=single-node" #以单一节点模式启动\n      - "es_java_opts=-xms2g -xmx2g"\n    volumes:\n      - ./elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载\n      - ./elasticsearch/data:/usr/share/elasticsearch/data #数据文件挂载\n    ports:\n      - 10800:9200\n  skywalking-oap-server:\n    image: apache/skywalking-oap-server:9.0.0\n    container_name: skywalking-oap-server\n    depends_on:\n      - elasticsearch\n    links:\n      - elasticsearch\n    restart: always\n    ports:\n      - 11800:11800\n      - 12800:12800\n    environment:\n      sw_storage: elasticsearch  # 指定es版本\n      sw_storage_es_cluster_nodes: elasticsearch:9200\n      tz: asia/shanghai\n#    volumes:\n#      - ./oap/conf/alarm-settings.yml:/skywalking/config/alarm-settings.yml\n  skywalking-ui:\n    image: apache/skywalking-ui:9.0.0\n    container_name: skywalking-ui\n    depends_on:\n      - skywalking-oap-server\n    links:\n      - skywalking-oap-server\n    restart: always\n    ports:\n      - 13800:8080\n    environment:\n      sw_oap_address: http://skywalking-oap-server:12800\n      tz: asia/shanghai\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# 微服务镜像集成代理\n\n\n# readme\n\n#skywalking 链路追踪版本\n##准备\n1. 把构建好的jar复制到files/jars目录下  \n2. 下载sentinel-dashboard-1.8.4.jar包复制到files/jars目录下  \n   改名sentinel-dashboard.jar\n   [https://github.com/alibaba/sentinel/releases] \n3. 下载代理java agent[apache-skywalking-java-agent-8.10.0.tgz],放到files目录下,与dockerfile同级  \n   改名apache-skywalking-java-agent.tgz\n   [http://skywalking.apache.org/downloads]    \n   [https://www.apache.org/dyn/closer.cgi/skywalking/java-agent/8.10.0/apache-skywalking-java-agent-8.10.0.tgz]    \n\n##启动\ndocker-compose up -d\n##只构建镜像\ndocker-compose build\n##区别\n1. 使用代理\n2. 启动前需指定收集器服务的地址   \n   -dskywalking.collector.backend_service=192.168.213.201:11800\n\n## 使用本地idea启动\n配置vm参数：\n```\n-javaagent:e:\\code\\package\\skywalking\\skywalking-agent\\skywalking-agent.jar\n-dskywalking.agent.service_name=ok-auth\n-dskywalking.collector.backend_service=192.168.213.201:11800\n```\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# dockerfile模版示例\n\nfrom openjdk:8-jre\nrun sh -c \'touch /app.jar\'\ncopy jars/ok-system-pure-auth.jar app.jar\ncopy apache-skywalking-java-agent.tgz  /apache-skywalking-java-agent.tgz\nrun tar zxvf apache-skywalking-java-agent.tgz\nentrypoint [ "sh", "-c", "java $java_opts -javaagent:/skywalking-agent/skywalking-agent.jar -dskywalking.agent.service_name=pure-auth -djava.security.egd=file:/dev/./urandom -jar /app.jar" ]\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# docker-compose.yml\n\nversion: \'3\'\n\nservices:\n  auth:\n    build:\n      context: ./files\n      dockerfile: authdockerfile\n    image: auth:1.5.0\n    container_name: auth\n    network_mode: bridge\n    ports:\n      - "9200:9200"\n    restart: always\n    environment:\n      - java_opts=-duser.timezone=gmt+08 -dskywalking.collector.backend_service=192.168.213.201:11800\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n',charsets:{cjk:!0},lastUpdated:"2023/03/13, 06:19:46",lastUpdatedTimestamp:1678688386e3},{title:"Prometheus部署及使用",frontmatter:{title:"Prometheus部署及使用",date:"2023-03-13T11:25:18.000Z",permalink:"/pages/bb3405/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/05.Prometheus%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BD%BF%E7%94%A8.html",relativePath:"03.Deploy/05.Prometheus部署及使用.md",key:"v-e431d030",path:"/pages/bb3405/",headers:[{level:2,title:"基础架构",slug:"基础架构",normalizedTitle:"基础架构",charIndex:2},{level:2,title:"启动基础架构",slug:"启动基础架构",normalizedTitle:"启动基础架构",charIndex:73},{level:3,title:"上传部署包，解压赋权",slug:"上传部署包-解压赋权",normalizedTitle:"上传部署包，解压赋权",charIndex:84},{level:3,title:"修改配置文件",slug:"修改配置文件",normalizedTitle:"修改配置文件",charIndex:413},{level:3,title:"启动",slug:"启动",normalizedTitle:"启动",charIndex:73},{level:3,title:"访问",slug:"访问",normalizedTitle:"访问",charIndex:535},{level:3,title:"添加数据源",slug:"添加数据源",normalizedTitle:"添加数据源",charIndex:582},{level:3,title:"引入面板",slug:"引入面板",normalizedTitle:"引入面板",charIndex:638},{level:3,title:"效果",slug:"效果",normalizedTitle:"效果",charIndex:692},{level:2,title:"基础+Mysql+Redis",slug:"基础-mysql-redis",normalizedTitle:"基础+mysql+redis",charIndex:777},{level:3,title:"架构图",slug:"架构图",normalizedTitle:"架构图",charIndex:796},{level:3,title:"Mysql和Redis部署包",slug:"mysql和redis部署包",normalizedTitle:"mysql和redis部署包",charIndex:806},{level:3,title:"监听Mysql",slug:"监听mysql",normalizedTitle:"监听mysql",charIndex:915},{level:4,title:"创建Mysql监听用户",slug:"创建mysql监听用户",normalizedTitle:"创建mysql监听用户",charIndex:926},{level:4,title:"启动mysqld exporter",slug:"启动mysqld-exporter",normalizedTitle:"启动mysqld exporter",charIndex:1204},{level:4,title:"修改配置文件并重启",slug:"修改配置文件并重启",normalizedTitle:"修改配置文件并重启",charIndex:1662},{level:4,title:"查看状态",slug:"查看状态",normalizedTitle:"查看状态",charIndex:1709},{level:4,title:"引入面板",slug:"引入面板-2",normalizedTitle:"引入面板",charIndex:638},{level:4,title:"效果",slug:"效果-2",normalizedTitle:"效果",charIndex:692},{level:3,title:"监听Redis",slug:"监听redis",normalizedTitle:"监听redis",charIndex:1932},{level:4,title:"redis账号信息",slug:"redis账号信息",normalizedTitle:"redis账号信息",charIndex:1943},{level:4,title:"启动redis-exporter",slug:"启动redis-exporter",normalizedTitle:"启动redis-exporter",charIndex:1979},{level:4,title:"修改配置文件并重启",slug:"修改配置文件并重启-2",normalizedTitle:"修改配置文件并重启",charIndex:1662},{level:4,title:"查看状态",slug:"查看状态-2",normalizedTitle:"查看状态",charIndex:1709},{level:4,title:"引入面板",slug:"引入面板-3",normalizedTitle:"引入面板",charIndex:638},{level:4,title:"效果",slug:"效果-3",normalizedTitle:"效果",charIndex:692},{level:2,title:"附",slug:"附",normalizedTitle:"附",charIndex:2600},{level:2,title:"Springboot",slug:"springboot",normalizedTitle:"springboot",charIndex:2885},{level:3,title:"依赖配置",slug:"依赖配置",normalizedTitle:"依赖配置",charIndex:2945},{level:3,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:415},{level:4,title:"注意",slug:"注意",normalizedTitle:"注意",charIndex:3390},{level:3,title:"修改配置文件并重启",slug:"修改配置文件并重启-3",normalizedTitle:"修改配置文件并重启",charIndex:1662},{level:3,title:"查看状态",slug:"查看状态-3",normalizedTitle:"查看状态",charIndex:1709},{level:3,title:"引入面板",slug:"引入面板-4",normalizedTitle:"引入面板",charIndex:638},{level:3,title:"效果",slug:"效果-4",normalizedTitle:"效果",charIndex:692},{level:2,title:"springboot-数据库连接池",slug:"springboot-数据库连接池",normalizedTitle:"springboot-数据库连接池",charIndex:4822},{level:3,title:"起因",slug:"起因",normalizedTitle:"起因",charIndex:4844},{level:3,title:"解决",slug:"解决",normalizedTitle:"解决",charIndex:5172},{level:4,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:5187},{level:4,title:"解决示例",slug:"解决示例",normalizedTitle:"解决示例",charIndex:5647},{level:5,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:5655},{level:5,title:"增加配置文件",slug:"增加配置文件",normalizedTitle:"增加配置文件",charIndex:6007},{level:5,title:"效果",slug:"效果-5",normalizedTitle:"效果",charIndex:692},{level:3,title:"参考博客原文",slug:"参考博客原文",normalizedTitle:"参考博客原文",charIndex:10466},{level:2,title:"完整部署包",slug:"完整部署包",normalizedTitle:"完整部署包",charIndex:20467},{level:2,title:"修改时区",slug:"修改时区",normalizedTitle:"修改时区",charIndex:20551},{level:3,title:"prometheus",slug:"prometheus",normalizedTitle:"prometheus",charIndex:288},{level:2,title:"新增对Docker监控",slug:"新增对docker监控",normalizedTitle:"新增对docker监控",charIndex:21347},{level:3,title:"启动cadvisor",slug:"启动cadvisor",normalizedTitle:"启动cadvisor",charIndex:21363},{level:3,title:"引入面板",slug:"引入面板-5",normalizedTitle:"引入面板",charIndex:638}],headersStr:"基础架构 启动基础架构 上传部署包，解压赋权 修改配置文件 启动 访问 添加数据源 引入面板 效果 基础+Mysql+Redis 架构图 Mysql和Redis部署包 监听Mysql 创建Mysql监听用户 启动mysqld exporter 修改配置文件并重启 查看状态 引入面板 效果 监听Redis redis账号信息 启动redis-exporter 修改配置文件并重启 查看状态 引入面板 效果 附 Springboot 依赖配置 配置文件 注意 修改配置文件并重启 查看状态 引入面板 效果 springboot-数据库连接池 起因 解决 说明 解决示例 引入依赖 增加配置文件 效果 参考博客原文 完整部署包 修改时区 prometheus 新增对Docker监控 启动cadvisor 引入面板",content:'# 基础架构\n\n虚拟机IP：192.168.213.213，本次部署暂不对Alertmanager和dingtalk进行告警测试\n\n[]\n\n\n# 启动基础架构\n\n\n# 上传部署包，解压赋权\n\n部署包\n\n链接：https://pan.baidu.com/s/14-zsMG0NFPoeetqfWU2C0g \n提取码：4al9 \n\n\n1\n2\n\n\n网上下载的部署包\n\n链接：https://pan.baidu.com/s/17okgNvIhXx8Sjet12RCUgw \n提取码：dw7j \n\n\n1\n2\n\n\n上传部署包之后创建文件夹并赋权\n\nmkdir -p /home/prom/prometheus/data\nmkdir -p /home/prom/grafana\nchmod 777 /home/prom/prometheus/data\nchmod 777 /home/prom/grafana\n\n\n1\n2\n3\n4\n\n\n\n# 修改配置文件\n\nprometheus.yml，将对应改为IP地址\n\n\n\n\n# 启动\n\n进入到docker-compose.yml目录地址\n\ncd /data/prometheus\ndocker-compose up -d\n\n\n1\n2\n\n\n\n# 访问\n\n访问Prometheus： http://IP:9090/targets\n\n\n\n\n# 添加数据源\n\n访问Grafana：http://IP:3000 账号密码admin\n\n添加数据源：\n\n\n\n\n# 引入面板\n\n访问Grafana，ID：11074\n\n或中文：12633\n\n\n\n选择数据源，导入\n\n\n\n\n# 效果\n\n中英文效果图\n\n链接：https://pan.baidu.com/s/1X6MrwtjNaymdn4VpkFr9Zg \n提取码：6v71 \n\n\n1\n2\n\n\n\n# 基础+Mysql+Redis\n\n\n# 架构图\n\n\n\n\n# Mysql和Redis部署包\n\n部署包\n\n链接：https://pan.baidu.com/s/12Rtcl5R7d3HgusjRLiYpNg \n提取码：j0py \n\n\n1\n2\n\n\n对这两个文件赋权777\n\n\n\n\n# 监听Mysql\n\n# 创建Mysql监听用户\n\n账号：\'exporter\' 密码：\'xxxxxxx\'  最大连接数：3\n\nCREATE USER \'exporter\'@\'%\' IDENTIFIED BY \'xxxxxxx\' WITH MAX_USER_CONNECTIONS 3;\nGRANT PROCESS, REPLICATION CLIENT ON *.* TO \'exporter\'@\'%\';\nGRANT SELECT ON performance_schema.* TO \'exporter\'@\'%\';\nFLUSH PRIVILEGES;\n\n\n1\n2\n3\n4\n\n\n# 启动mysqld exporter\n\ndocker-compose.yml\n\nversion: \'3.1\'\n\nservices:\n  mysql_exporter:\n    image: prom/mysqld-exporter:v0.12.1\n    restart: always\n    container_name: mysql_exporter\n    ports:\n      - "9104:9104"\n    environment:\n      - DATA_SOURCE_NAME=exporter:xxxxxxx@(192.168.213.212:3306)/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n或者直接命令启动：\n\ndocker run -d -p 9104:9104 -e DATA_SOURCE_NAME="exporter:xxxxxxx@(192.168.213.212:3306)/" prom/mysqld-exporter:v0.12.1\n\n\n1\n\n\n# 修改配置文件并重启\n\nprometheus.yml，监控exporter在213中\n\n\n\n# 查看状态\n\n访问Prometheus\n\n\n\n# 引入面板\n\n访问Grafana\n\nmysql-overview_rev5.json\n\n链接：https://pan.baidu.com/s/18nH9oiWRv06KBQImn6MjOA \n提取码：xm2v \n\n\n1\n2\n\n\n# 效果\n\n中英效果图\n\n链接：https://pan.baidu.com/s/1FzWnf4tr6nQN8fGBkVRjuA \n提取码：x0bt \n\n\n1\n2\n\n\n\n# 监听Redis\n\n# redis账号信息\n\n使用上面部署包，密码为：redis5268\n\n# 启动redis-exporter\n\ndocker-compose.yml\n\nversion: \'3.1\'\n\nservices:\n  redis_exporter:\n    image: oliver006/redis_exporter:v1.22.0\n    restart: always\n    container_name: redis_exporter\n    ports:\n      - "9121:9121"\n    command:\n      # 执行的命令\n      --redis.addr redis://192.168.213.212:6379 --redis.password \'redis5268\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n或者直接命令启动：\n\ndocker run -d --name redis_exporter -p 9121:9121 oliver006/redis_exporter:v1.22.0 --redis.addr redis://192.168.213.212:6379 --redis.password \'redis5268\'\n\n\n1\n\n\n# 修改配置文件并重启\n\nprometheus.yml，监控exporter在213中\n\n\n\n# 查看状态\n\n\n\n# 引入面板\n\n访问Grafana,ID:763,选择数据源导入\n\n\n\n# 效果\n\n\n\n\n# 附\n\nMysql循环插入数值语句，sdd表，sd字段，id字段值自增\n\ndelimiter $$     \ncreate procedure pre7()        \nbegin\ndeclare i int;        \nset i=1;\nwhile i<100 do    \n    insert into sdd (sd)\n    values(i); \nset i=i+1;        \nend while;\nend \n$$    \n \ncall pre7();    \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# Springboot\n\n参考文章：https://zhuanlan.zhihu.com/p/366323778\n\n\n# 依赖配置\n\n我们演示的SpringBoot为2.0+，因此直接选择 io.micrometer 的依赖包来实现；更低版本的不能使用这种姿势，可以直接使用官方提供的client来实现；这里不进行扩展\n\n        <dependency>\n            <groupId>io.micrometer</groupId>\n            <artifactId>micrometer-registry-prometheus</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# 配置文件\n\n增加以下参数\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n  metrics:\n    tags:\n      application: ${spring.application.name}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 注意\n\n * management.endpoints.web.exposure.include 这里指定所有的web接口都会上报\n * metrics.tags.application 这个应用所有上报的metrics 都会带上 application 这个标签\n\n上面配置完毕之后，会提供一个 /actuator/prometheus 的端点，供prometheus来拉取Metrics信息\n\n工程日志：“EndpointLinksResolver - Exposing 22 endpoint(s) beneath base path \'/slam-service/actuator\'” slam-service为工程名称\n\n\n# 修改配置文件并重启\n\nprometheus.yml\n\n\n\nprometheus.yml\n\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets:\n      - alertmanager:9093\n\nrule_files:\n  - "*rules.yml"\n  \nscrape_configs:\n  - job_name: \'prometheus\'\n    static_configs:\n    - targets: [\'192.168.213.213:9090\']\n\n  - job_name: \'node\'\n    static_configs:\n    - targets: [\'192.168.213.213:9100\']\n    - targets: [\'192.168.213.212:9100\']\n\n\n  - job_name: \'alertmanager\'\n    static_configs:\n    - targets: [\'192.168.213.213:9093\']\n\n  - job_name: \'mysql_exporter\'\n    static_configs:\n    - targets: [\'192.168.213.213:9104\']\n\n  - job_name: \'redis_exporter\'\n    static_configs:\n    - targets: [\'192.168.213.213:9121\']\n      labels:\n        operator: \'imbiaoqian\'\n\n  - job_name: \'springboot_exporter\'\n    metrics_path: \'/slam-service/actuator/prometheus\'\n    static_configs:\n    - targets: [\'192.168.213.213:21270\']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 查看状态\n\n访问Prometheus\n\n\n\n\n# 引入面板\n\n访问Grafana，ID：12856\n\n\n# 效果\n\n\n\n\n# springboot-数据库连接池\n\n\n# 起因\n\n在使用Grafana，ID：6756的时候发现页面均无数据\n\n排查后发现有两点原因\n\n1.变量与springboot上报数据不对应，需在Grafana设置中修改变量查询条件\n\n【instance】label_values(jvm_classes_loaded_classes, instance)\n【application】label_values(jvm_classes_loaded_classes{instance="$instance"}, application)\n\n\n1\n2\n\n\n2.页面中没有HikariCP Statistics数值，springboot上报数据也无相关信息。此内容在网上较难查询到，在经过合理推断和部分文章参考得到解决办法\n\n\n# 解决\n\n# 说明\n\n可参考此篇文章：https://blog.csdn.net/ankeway/article/details/108003149\n但文章中示例是使用ShardingJdbc，下文使用的是MybatisPlus中的dynamic-datasource-spring-boot-starter多数据源配置，通过断点bindMetricsRegistryToHikariDataSources入口参数中分析推理，本次数据源采用的是DynamicRoutingDataSource。\n\n数据源依赖为\n\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>dynamic-datasource-spring-boot-starter</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n原因与文章一致，都是因为DataSource变化导致为null\n\n# 解决示例\n\n# 引入依赖\n\n在有数据库链接依赖的pom中增加\n\n        <dependency>\n            <groupId>io.micrometer</groupId>\n            <artifactId>micrometer-core</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 增加配置文件\n\n新建文件PoolMetricsAutoConfiguration\n\nimport com.baomidou.dynamic.datasource.DynamicRoutingDataSource;\nimport com.baomidou.dynamic.datasource.ds.ItemDataSource;\nimport com.zaxxer.hikari.HikariDataSource;\nimport com.zaxxer.hikari.metrics.micrometer.MicrometerMetricsTrackerFactory;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.jdbc.DataSourceUnwrapper;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.log.LogMessage;\n\nimport javax.sql.DataSource;\nimport java.util.Collection;\n\n@Configuration(proxyBeanMethods = false)\n@AutoConfigureAfter({MetricsAutoConfiguration.class, DataSourceAutoConfiguration.class,\n        SimpleMetricsExportAutoConfiguration.class})\n@ConditionalOnClass({DataSource.class, MeterRegistry.class})\n@ConditionalOnBean({DataSource.class, MeterRegistry.class})\npublic class PoolMetricsAutoConfiguration {\n\n    @Configuration(proxyBeanMethods = false)\n    @ConditionalOnClass({DynamicRoutingDataSource.class, HikariDataSource.class})\n    static class DataSourceMetricsConfiguration {\n\n        private static final Log logger = LogFactory.getLog(DataSourceMetricsConfiguration.class);\n\n        private final MeterRegistry registry;\n\n        DataSourceMetricsConfiguration(MeterRegistry registry) {\n            this.registry = registry;\n        }\n\n        @Autowired\n        void bindMetricsRegistryToHikariDataSources(Collection<DataSource> dataSources) {\n            for (DataSource dataSource : dataSources) {\n                DynamicRoutingDataSource dynamicRoutingDataSource = DataSourceUnwrapper.unwrap(dataSource, DynamicRoutingDataSource.class);\n                Collection<DataSource> dynamicRoutingDataSources = dynamicRoutingDataSource.getCurrentDataSources().values();\n                for (DataSource ds : dynamicRoutingDataSources) {\n                    HikariDataSource hikariDataSource = null;\n                    try {\n                       // DataSource dsReal = ((ItemDataSource) ds).getDataSource();//会自动变成ItemDataSource，故手动转换一次\n                       // hikariDataSource = DataSourceUnwrapper.unwrap(dsReal, HikariDataSource.class);\n                       ItemDataSource itemDataSource = ds.unwrap(ItemDataSource.class);//会自动变成ItemDataSource，故手动转换一次\n                        if (itemDataSource!=null){\n                            DataSource dsReal = itemDataSource.getDataSource();\n                            hikariDataSource = DataSourceUnwrapper.unwrap(dsReal, HikariDataSource.class);\n                        }\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n\n                    if (hikariDataSource != null) {\n                        bindMetricsRegistryToHikariDataSource(hikariDataSource);\n                    }\n                }\n            }\n        }\n\n        private void bindMetricsRegistryToHikariDataSource(HikariDataSource hikari) {\n            if (hikari.getMetricRegistry() == null && hikari.getMetricsTrackerFactory() == null) {\n                try {\n                    hikari.setMetricsTrackerFactory(new MicrometerMetricsTrackerFactory(this.registry));\n                } catch (Exception ex) {\n                    logger.warn(LogMessage.format("Failed to bind Hikari metrics: %s", ex.getMessage()));\n                }\n            }\n        }\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n\n\n# 效果\n\n\n\n只要解析出hikariDataSource然后分别绑定进去，可以分别获取到监控数据了。\n\n在测试的时候发现dynamicRoutingDataSource获取到的都是ItemDataSource而不是DataSource，若没有强制转换直接DataSourceUnwrapper.unwrap还是为null的状态\n\n再次访问/actuator/prometheus，即可看到出现了设置的2个数据源连接池的监控数据\n\n\n\n页面\n\n\n\n\n# 参考博客原文\n\nSpringBoot2.X版本后使用Hikari作为数据库的默认的连接池。\n\nSpring.datasource的默认配置中使用了自动配置的方式来绑定MetricsRegistry,\n\n在spring-boot-actuator-autoconfigure包中org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration类中默认包含了有关于HikariDataSoucre的Metrics监控的绑定逻辑\n\n\n\n而HikariCP也提供了有关使用Prometheus监控的具体实现\n\n\n\n当使用使用spring.datasource的基本配置时，springboot的自动配置和hikari中的监控逻辑二者结合后，有关prometheus的metrice监控数据就会呈现出来\n\napplication.properties中配置\n\napplication.properties中配置\n \nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.zaxxer.hikari.HikariDataSource\n    url: ${url}\n    username: ${username}\n    password: ${password}\n    hikari:\n      pool-name: HikariPool-1        \n      minimum-idle: 10           \n      maximum-pool-size: 20      \n      idle-timeout: 500000        \n      max-lifetime: 540000        \n      connection-timeout: 60000   \n      connection-test-query: SELECT 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n当我们开启了prometheus的端点监控后http://IP:PORT/actuator/prometheus便可以查看到关于hikaricp相关的监控数据，同时利用prometheus实时抓取监控数据用于图标呈现\n\n# HELP hikaricp_connections_max Max connections\n# TYPE hikaricp_connections_max gauge\nhikaricp_connections_max{pool="HikariPool-1",} 50.0\n# HELP hikaricp_connections_pending Pending threads\n# TYPE hikaricp_connections_pending gauge\nhikaricp_connections_pending{pool="HikariPool-1",} 0.0\n# HELP hikaricp_connections_timeout_total Connection timeout total count\n# TYPE hikaricp_connections_timeout_total counter\nhikaricp_connections_timeout_total{pool="HikariPool-1",} 0.0\n# HELP hikaricp_connections_acquire_seconds Connection acquire time\n# TYPE hikaricp_connections_acquire_seconds summary\nhikaricp_connections_acquire_seconds_count{pool="HikariPool-1",} 1.0\nhikaricp_connections_acquire_seconds_sum{pool="HikariPool-1",} 7.39E-5\n# HELP hikaricp_connections_acquire_seconds_max Connection acquire time\n# TYPE hikaricp_connections_acquire_seconds_max gauge\nhikaricp_connections_acquire_seconds_max{pool="HikariPool-1",} 7.39E-5\n# HELP hikaricp_connections_min Min connections\n# TYPE hikaricp_connections_min gauge\nhikaricp_connections_min{pool="HikariPool-1",} 3.0\n# HELP hikaricp_connections_usage_seconds Connection usage time\n# TYPE hikaricp_connections_usage_seconds summary\nhikaricp_connections_usage_seconds_count{pool="HikariPool-1",} 1.0\nhikaricp_connections_usage_seconds_sum{pool="HikariPool-1",} 0.025\n# HELP hikaricp_connections_usage_seconds_max Connection usage time\n# TYPE hikaricp_connections_usage_seconds_max gauge\nhikaricp_connections_usage_seconds_max{pool="HikariPool-1",} 0.025\n# HELP hikaricp_connections_creation_seconds_max Connection creation time\n# TYPE hikaricp_connections_creation_seconds_max gauge\nhikaricp_connections_creation_seconds_max{pool="HikariPool-1",} 0.094\n# HELP hikaricp_connections_creation_seconds Connection creation time\n# TYPE hikaricp_connections_creation_seconds summary\nhikaricp_connections_creation_seconds_count{pool="HikariPool-1",} 2.0\nhikaricp_connections_creation_seconds_sum{pool="HikariPool-1",} 0.178\n# HELP hikaricp_connections_active Active connections\n# TYPE hikaricp_connections_active gauge\nhikaricp_connections_active{pool="HikariPool-1",} 0.0\n# HELP hikaricp_connections Total connections\n# TYPE hikaricp_connections gauge\nhikaricp_connections{pool="HikariPool-1",} 3.0\n# HELP hikaricp_connections_idle Idle connections\n# TYPE hikaricp_connections_idle gauge\nhikaricp_connections_idle{pool="HikariPool-1",} 3.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n但是，当我们使用了ShardingSphere作为分库分表中间件来使用以后，因为由于自动配置中使用的DataSource由HikariDataSource变为了ShardingDataSource，所以无法完成对HikariMetricsRegistry的绑定操作，因此使用了Sharding后无法再从/actuator/prometheus中看到关于hikaricp有关的数据。\n\n\n\n那么如何解决这个问题呢，我们可以模仿这个DataSourcePoolMetricsAutoConfiguration的逻辑，为Sharding内的dataSources进行循环绑定。\n\n我们知道，Sharding的自动配置逻辑中，org.apache.shardingsphere.shardingjdbc.spring.boot.SpringBootConfiguration，将Sharding配置的多数据库连接放到了一个dataSourceMap中。因此我们绑定MetricsRegistry时也就是需要获取Sharing中的dataSourceMap中的数据来分别注册。通常我们会如下配置shardingsphere定义2个数据源.\n\napplication.properties中配置\n\napplication.properties中配置\n \nspring:\n  shardingsphere:\n    datasource:\n      names: ds0, ds1\n      ds0:\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class-name: com.mysql.cj.jdbc.Driver\n        jdbcUrl: ${url}\n        username: ${username}\n        password: ${password}\n        pool-name: HikariPool-1        \n        minimum-idle: 10            \n        maximum-pool-size: 20       \n        idle-timeout: 500000       \n        max-lifetime: 540000    \n        connection-timeout: 60000  \n        connection-test-query: SELECT 1\n      ds1:\n        type: com.zaxxer.hikari.HikariDataSource\n        driver-class-name: com.mysql.cj.jdbc.Driver\n        jdbcUrl: ${url}\n        username: ${username}\n        password: ${password}\n        pool-name: HikariPool-2      \n        minimum-idle: 10           \n        maximum-pool-size: 20      \n        idle-timeout: 500000      \n        max-lifetime: 540000      \n        connection-timeout: 60000 \n        connection-test-query: SELECT 1        \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n同时我们模仿DataSourceMetricsConfiguration，编写一个ShardingDataSourceMetricsConfiguration，源码如下\n\nimport java.util.Collection;\n \nimport javax.sql.DataSource;\n \nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.ShardingDataSource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration;\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\nimport org.springframework.boot.jdbc.DataSourceUnwrapper;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.log.LogMessage;\n \nimport com.zaxxer.hikari.HikariDataSource;\nimport com.zaxxer.hikari.metrics.micrometer.MicrometerMetricsTrackerFactory;\n \nimport io.micrometer.core.instrument.MeterRegistry;\n \n@Configuration(proxyBeanMethods = false)\n@AutoConfigureAfter({ MetricsAutoConfiguration.class, DataSourceAutoConfiguration.class,\n        SimpleMetricsExportAutoConfiguration.class })\n@ConditionalOnClass({ DataSource.class, MeterRegistry.class })\n@ConditionalOnBean({ DataSource.class, MeterRegistry.class })\npublic class ShardingDataSourcePoolMetricsAutoConfiguration {\n \n    @Configuration(proxyBeanMethods = false)\n    @ConditionalOnClass({ShardingDataSource.class, HikariDataSource.class})\n    static class ShardingDataSourceMetricsConfiguration {\n \n        private static final Log logger = LogFactory.getLog(ShardingDataSourceMetricsConfiguration.class);\n \n        private final MeterRegistry registry;\n \n        ShardingDataSourceMetricsConfiguration(MeterRegistry registry) {\n            this.registry = registry;\n        }\n \n        @Autowired\n        void bindMetricsRegistryToHikariDataSources(Collection<DataSource> dataSources) {\n            for (DataSource dataSource : dataSources) {\n                ShardingDataSource shardingDataSource = DataSourceUnwrapper.unwrap(dataSource, ShardingDataSource.class);\n                Collection<DataSource> shardDataSources = shardingDataSource.getDataSourceMap().values();\n                for (DataSource ds : shardDataSources) {\n                    HikariDataSource hikariDataSource = DataSourceUnwrapper.unwrap(ds, HikariDataSource.class);\n                    if (hikariDataSource != null) {\n                        bindMetricsRegistryToHikariDataSource(hikariDataSource);\n                    }\n                }\n            }\n        }\n \n        private void bindMetricsRegistryToHikariDataSource(HikariDataSource hikari) {\n            if (hikari.getMetricRegistry() == null && hikari.getMetricsTrackerFactory() == null) {\n                try {\n                    hikari.setMetricsTrackerFactory(new MicrometerMetricsTrackerFactory(this.registry));\n                }\n                catch (Exception ex) {\n                    logger.warn(LogMessage.format("Failed to bind Hikari metrics: %s", ex.getMessage()));\n                }\n            }\n        }\n \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n\n重点就是在这里，我们知道ShardingDataSource中包含了具体数据源连接池，只要解析出hikariDataSource然后分别绑定进去，可以分别获取到监控数据了。\n\n当我们再次访问http://IP:PORT/actuator/prometheus，我们就可以看到出现了设置的2个数据源连接池的监控数据。\n\n\n\n附带指标监控解释\n\n指标1：hikaricp_pending_threads\nhikaricp_pending_threads 表示当前排队获取连接的线程数，Guage类型。该指标持续飙高，说明DB连接池中基本已无空闲连接。\n指标2：hikaricp_connection_acquired_nanos\nhikaricp_connection_acquired_nanos表示连接获取的等待时间，一般取99位数，Summary类型\n指标3：hikaricp_idle_connections\nhikaricp_idle_connections表示当前空闲连接数，Gauge类型。HikariCP是可以配置最小空闲连接数的，当此指标长期比较高（等于最大连接数）时，可以适当减小配置项中最小连接数。\n指标4：hikaricp_active_connections\nhikaricp_active_connections表示当前正在使用的连接数，Gauge类型。如果此指标长期在设置的最大连接数上下波动时，或者长期保持在最大线程数时，可以考虑增大最大连接数。\n指标5：hikaricp_connection_usage_millis\nhikaricp_connection_usage_millis表示连接被复用的间隔时长，一般取99位数，Summary类型。该配置的意义在于表明连接池中的一个连接从被返回连接池到再被复用的时间间隔，对于使用较少的数据源，此指标可能会达到秒级，可以结合流量高峰期的此项指标与激活连接数指标来确定是否需要减小最小连接数，若高峰也是秒级，说明对比数据源使用不频繁，可考虑减小连接数。\n指标6：hikaricp_connection_timeout_total\nhikaricp_connection_timeout_total表示每分钟超时连接数，Counter类型。主要用来反映连接池中总共超时的连接数量，此处的超时指的是连接创建超时。经常连接创建超时，一个排查方向是和运维配合检查下网络是否正常。\n指标7：hikaricp_connection_creation_millis\nhikaricp_connection_creation_millis表示连接创建成功的耗时，一般取99位数，Summary类型。该配置的意义在于表明创建一个连接的耗时，主要反映当前机器到数据库的网络情况，在IDC意义不大，除非是网络抖动或者机房间通讯中断才会有异常波动。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 完整部署包\n\n地址\n\n链接：https://pan.baidu.com/s/1U6tASaxXWXq3B1hBjOg1XA \n提取码：2v0q \n\n\n1\n2\n\n\n\n# 修改时区\n\n\n# prometheus\n\n使用以下Dockerfile生成的镜像，目录结构\n\n./\n├── dockerfile\n└── prometheus-2.26.0.linux-amd64.tar.gz\n\n\n1\n2\n3\n\n\nDockerfile\n\nFROM centos:7\n\nADD prometheus-2.26.0.linux-amd64.tar.gz /\n\nRUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \\\n    mv /prometheus-2.26.0.linux-amd64 /prometheus\n\nWORKDIR /prometheus\nENTRYPOINT [ "/prometheus/prometheus" ]\nCMD        [ "--config.file=/etc/prometheus/prometheus.yml", \\\n             "--storage.tsdb.path=/prometheus", \\\n             "--web.console.libraries=/usr/share/prometheus/console_libraries", \\\n             "--web.console.templates=/usr/share/prometheus/consoles" ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n文件地址\n\n链接：https://pan.baidu.com/s/19AOpkjEejplz7agsBR0gKg \n提取码：x05e \n\n\n1\n2\n\n\n构建：\n\ndocker build -t prometheus\\_sh:v2.26.0 ./\n\n\n1\n\n\n\n# 新增对Docker监控\n\n\n# 启动cadvisor\n\n新增或修改docker-compose.yml，启动cadvisor服务\n\nversion: \'3.7\'\n\nservices:\n  cadvisor:\n    image: google/cadvisor:v0.33.0\n    container_name: cadvisor\n    restart: unless-stopped\n    ports:\n      - "8080:8080"\n    volumes:\n      - "/:/rootfs:ro"\n      - "/var/run:/var/run:rw"\n      - "/sys:/sys:ro"\n      - "/var/lib/docker/:/var/lib/docker:ro"\n      - "/dev/disk/:/dev/disk:ro"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n修改prometheus.yml，增加job\n\n  - job_name: \'cadvisor\'\n    static_configs:\n    - targets: [\'172.18.194.139:8080\']\n\n\n1\n2\n3\n\n\n\n\n修改完成后重启监控系统\n\n\n# 引入面板\n\n893或179\n\n',normalizedContent:'# 基础架构\n\n虚拟机ip：192.168.213.213，本次部署暂不对alertmanager和dingtalk进行告警测试\n\n[]\n\n\n# 启动基础架构\n\n\n# 上传部署包，解压赋权\n\n部署包\n\n链接：https://pan.baidu.com/s/14-zsmg0nfpoeetqfwu2c0g \n提取码：4al9 \n\n\n1\n2\n\n\n网上下载的部署包\n\n链接：https://pan.baidu.com/s/17okgnvihxx8sjet12rcugw \n提取码：dw7j \n\n\n1\n2\n\n\n上传部署包之后创建文件夹并赋权\n\nmkdir -p /home/prom/prometheus/data\nmkdir -p /home/prom/grafana\nchmod 777 /home/prom/prometheus/data\nchmod 777 /home/prom/grafana\n\n\n1\n2\n3\n4\n\n\n\n# 修改配置文件\n\nprometheus.yml，将对应改为ip地址\n\n\n\n\n# 启动\n\n进入到docker-compose.yml目录地址\n\ncd /data/prometheus\ndocker-compose up -d\n\n\n1\n2\n\n\n\n# 访问\n\n访问prometheus： http://ip:9090/targets\n\n\n\n\n# 添加数据源\n\n访问grafana：http://ip:3000 账号密码admin\n\n添加数据源：\n\n\n\n\n# 引入面板\n\n访问grafana，id：11074\n\n或中文：12633\n\n\n\n选择数据源，导入\n\n\n\n\n# 效果\n\n中英文效果图\n\n链接：https://pan.baidu.com/s/1x6mrwtjnaymdn4vpkfr9zg \n提取码：6v71 \n\n\n1\n2\n\n\n\n# 基础+mysql+redis\n\n\n# 架构图\n\n\n\n\n# mysql和redis部署包\n\n部署包\n\n链接：https://pan.baidu.com/s/12rtcl5r7d3hgusjrliypng \n提取码：j0py \n\n\n1\n2\n\n\n对这两个文件赋权777\n\n\n\n\n# 监听mysql\n\n# 创建mysql监听用户\n\n账号：\'exporter\' 密码：\'xxxxxxx\'  最大连接数：3\n\ncreate user \'exporter\'@\'%\' identified by \'xxxxxxx\' with max_user_connections 3;\ngrant process, replication client on *.* to \'exporter\'@\'%\';\ngrant select on performance_schema.* to \'exporter\'@\'%\';\nflush privileges;\n\n\n1\n2\n3\n4\n\n\n# 启动mysqld exporter\n\ndocker-compose.yml\n\nversion: \'3.1\'\n\nservices:\n  mysql_exporter:\n    image: prom/mysqld-exporter:v0.12.1\n    restart: always\n    container_name: mysql_exporter\n    ports:\n      - "9104:9104"\n    environment:\n      - data_source_name=exporter:xxxxxxx@(192.168.213.212:3306)/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n或者直接命令启动：\n\ndocker run -d -p 9104:9104 -e data_source_name="exporter:xxxxxxx@(192.168.213.212:3306)/" prom/mysqld-exporter:v0.12.1\n\n\n1\n\n\n# 修改配置文件并重启\n\nprometheus.yml，监控exporter在213中\n\n\n\n# 查看状态\n\n访问prometheus\n\n\n\n# 引入面板\n\n访问grafana\n\nmysql-overview_rev5.json\n\n链接：https://pan.baidu.com/s/18nh9oiwrv06kbqimn6mjoa \n提取码：xm2v \n\n\n1\n2\n\n\n# 效果\n\n中英效果图\n\n链接：https://pan.baidu.com/s/1fzwnf4tr6nqn8fgbkvrjua \n提取码：x0bt \n\n\n1\n2\n\n\n\n# 监听redis\n\n# redis账号信息\n\n使用上面部署包，密码为：redis5268\n\n# 启动redis-exporter\n\ndocker-compose.yml\n\nversion: \'3.1\'\n\nservices:\n  redis_exporter:\n    image: oliver006/redis_exporter:v1.22.0\n    restart: always\n    container_name: redis_exporter\n    ports:\n      - "9121:9121"\n    command:\n      # 执行的命令\n      --redis.addr redis://192.168.213.212:6379 --redis.password \'redis5268\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n或者直接命令启动：\n\ndocker run -d --name redis_exporter -p 9121:9121 oliver006/redis_exporter:v1.22.0 --redis.addr redis://192.168.213.212:6379 --redis.password \'redis5268\'\n\n\n1\n\n\n# 修改配置文件并重启\n\nprometheus.yml，监控exporter在213中\n\n\n\n# 查看状态\n\n\n\n# 引入面板\n\n访问grafana,id:763,选择数据源导入\n\n\n\n# 效果\n\n\n\n\n# 附\n\nmysql循环插入数值语句，sdd表，sd字段，id字段值自增\n\ndelimiter $$     \ncreate procedure pre7()        \nbegin\ndeclare i int;        \nset i=1;\nwhile i<100 do    \n    insert into sdd (sd)\n    values(i); \nset i=i+1;        \nend while;\nend \n$$    \n \ncall pre7();    \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# springboot\n\n参考文章：https://zhuanlan.zhihu.com/p/366323778\n\n\n# 依赖配置\n\n我们演示的springboot为2.0+，因此直接选择 io.micrometer 的依赖包来实现；更低版本的不能使用这种姿势，可以直接使用官方提供的client来实现；这里不进行扩展\n\n        <dependency>\n            <groupid>io.micrometer</groupid>\n            <artifactid>micrometer-registry-prometheus</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n\n# 配置文件\n\n增加以下参数\n\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: "*"\n  metrics:\n    tags:\n      application: ${spring.application.name}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 注意\n\n * management.endpoints.web.exposure.include 这里指定所有的web接口都会上报\n * metrics.tags.application 这个应用所有上报的metrics 都会带上 application 这个标签\n\n上面配置完毕之后，会提供一个 /actuator/prometheus 的端点，供prometheus来拉取metrics信息\n\n工程日志：“endpointlinksresolver - exposing 22 endpoint(s) beneath base path \'/slam-service/actuator\'” slam-service为工程名称\n\n\n# 修改配置文件并重启\n\nprometheus.yml\n\n\n\nprometheus.yml\n\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n  - static_configs:\n    - targets:\n      - alertmanager:9093\n\nrule_files:\n  - "*rules.yml"\n  \nscrape_configs:\n  - job_name: \'prometheus\'\n    static_configs:\n    - targets: [\'192.168.213.213:9090\']\n\n  - job_name: \'node\'\n    static_configs:\n    - targets: [\'192.168.213.213:9100\']\n    - targets: [\'192.168.213.212:9100\']\n\n\n  - job_name: \'alertmanager\'\n    static_configs:\n    - targets: [\'192.168.213.213:9093\']\n\n  - job_name: \'mysql_exporter\'\n    static_configs:\n    - targets: [\'192.168.213.213:9104\']\n\n  - job_name: \'redis_exporter\'\n    static_configs:\n    - targets: [\'192.168.213.213:9121\']\n      labels:\n        operator: \'imbiaoqian\'\n\n  - job_name: \'springboot_exporter\'\n    metrics_path: \'/slam-service/actuator/prometheus\'\n    static_configs:\n    - targets: [\'192.168.213.213:21270\']\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n\n# 查看状态\n\n访问prometheus\n\n\n\n\n# 引入面板\n\n访问grafana，id：12856\n\n\n# 效果\n\n\n\n\n# springboot-数据库连接池\n\n\n# 起因\n\n在使用grafana，id：6756的时候发现页面均无数据\n\n排查后发现有两点原因\n\n1.变量与springboot上报数据不对应，需在grafana设置中修改变量查询条件\n\n【instance】label_values(jvm_classes_loaded_classes, instance)\n【application】label_values(jvm_classes_loaded_classes{instance="$instance"}, application)\n\n\n1\n2\n\n\n2.页面中没有hikaricp statistics数值，springboot上报数据也无相关信息。此内容在网上较难查询到，在经过合理推断和部分文章参考得到解决办法\n\n\n# 解决\n\n# 说明\n\n可参考此篇文章：https://blog.csdn.net/ankeway/article/details/108003149\n但文章中示例是使用shardingjdbc，下文使用的是mybatisplus中的dynamic-datasource-spring-boot-starter多数据源配置，通过断点bindmetricsregistrytohikaridatasources入口参数中分析推理，本次数据源采用的是dynamicroutingdatasource。\n\n数据源依赖为\n\n        <dependency>\n            <groupid>com.baomidou</groupid>\n            <artifactid>dynamic-datasource-spring-boot-starter</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n原因与文章一致，都是因为datasource变化导致为null\n\n# 解决示例\n\n# 引入依赖\n\n在有数据库链接依赖的pom中增加\n\n        <dependency>\n            <groupid>io.micrometer</groupid>\n            <artifactid>micrometer-core</artifactid>\n        </dependency>\n        <dependency>\n            <groupid>org.springframework.boot</groupid>\n            <artifactid>spring-boot-starter-actuator</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 增加配置文件\n\n新建文件poolmetricsautoconfiguration\n\nimport com.baomidou.dynamic.datasource.dynamicroutingdatasource;\nimport com.baomidou.dynamic.datasource.ds.itemdatasource;\nimport com.zaxxer.hikari.hikaridatasource;\nimport com.zaxxer.hikari.metrics.micrometer.micrometermetricstrackerfactory;\nimport io.micrometer.core.instrument.meterregistry;\nimport org.apache.commons.logging.log;\nimport org.apache.commons.logging.logfactory;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.boot.actuate.autoconfigure.metrics.metricsautoconfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.simplemetricsexportautoconfiguration;\nimport org.springframework.boot.autoconfigure.autoconfigureafter;\nimport org.springframework.boot.autoconfigure.condition.conditionalonbean;\nimport org.springframework.boot.autoconfigure.condition.conditionalonclass;\nimport org.springframework.boot.autoconfigure.jdbc.datasourceautoconfiguration;\nimport org.springframework.boot.jdbc.datasourceunwrapper;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.core.log.logmessage;\n\nimport javax.sql.datasource;\nimport java.util.collection;\n\n@configuration(proxybeanmethods = false)\n@autoconfigureafter({metricsautoconfiguration.class, datasourceautoconfiguration.class,\n        simplemetricsexportautoconfiguration.class})\n@conditionalonclass({datasource.class, meterregistry.class})\n@conditionalonbean({datasource.class, meterregistry.class})\npublic class poolmetricsautoconfiguration {\n\n    @configuration(proxybeanmethods = false)\n    @conditionalonclass({dynamicroutingdatasource.class, hikaridatasource.class})\n    static class datasourcemetricsconfiguration {\n\n        private static final log logger = logfactory.getlog(datasourcemetricsconfiguration.class);\n\n        private final meterregistry registry;\n\n        datasourcemetricsconfiguration(meterregistry registry) {\n            this.registry = registry;\n        }\n\n        @autowired\n        void bindmetricsregistrytohikaridatasources(collection<datasource> datasources) {\n            for (datasource datasource : datasources) {\n                dynamicroutingdatasource dynamicroutingdatasource = datasourceunwrapper.unwrap(datasource, dynamicroutingdatasource.class);\n                collection<datasource> dynamicroutingdatasources = dynamicroutingdatasource.getcurrentdatasources().values();\n                for (datasource ds : dynamicroutingdatasources) {\n                    hikaridatasource hikaridatasource = null;\n                    try {\n                       // datasource dsreal = ((itemdatasource) ds).getdatasource();//会自动变成itemdatasource，故手动转换一次\n                       // hikaridatasource = datasourceunwrapper.unwrap(dsreal, hikaridatasource.class);\n                       itemdatasource itemdatasource = ds.unwrap(itemdatasource.class);//会自动变成itemdatasource，故手动转换一次\n                        if (itemdatasource!=null){\n                            datasource dsreal = itemdatasource.getdatasource();\n                            hikaridatasource = datasourceunwrapper.unwrap(dsreal, hikaridatasource.class);\n                        }\n                    } catch (exception e) {\n                        e.printstacktrace();\n                    }\n\n                    if (hikaridatasource != null) {\n                        bindmetricsregistrytohikaridatasource(hikaridatasource);\n                    }\n                }\n            }\n        }\n\n        private void bindmetricsregistrytohikaridatasource(hikaridatasource hikari) {\n            if (hikari.getmetricregistry() == null && hikari.getmetricstrackerfactory() == null) {\n                try {\n                    hikari.setmetricstrackerfactory(new micrometermetricstrackerfactory(this.registry));\n                } catch (exception ex) {\n                    logger.warn(logmessage.format("failed to bind hikari metrics: %s", ex.getmessage()));\n                }\n            }\n        }\n\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n\n\n# 效果\n\n\n\n只要解析出hikaridatasource然后分别绑定进去，可以分别获取到监控数据了。\n\n在测试的时候发现dynamicroutingdatasource获取到的都是itemdatasource而不是datasource，若没有强制转换直接datasourceunwrapper.unwrap还是为null的状态\n\n再次访问/actuator/prometheus，即可看到出现了设置的2个数据源连接池的监控数据\n\n\n\n页面\n\n\n\n\n# 参考博客原文\n\nspringboot2.x版本后使用hikari作为数据库的默认的连接池。\n\nspring.datasource的默认配置中使用了自动配置的方式来绑定metricsregistry,\n\n在spring-boot-actuator-autoconfigure包中org.springframework.boot.actuate.autoconfigure.metrics.jdbc.datasourcepoolmetricsautoconfiguration类中默认包含了有关于hikaridatasoucre的metrics监控的绑定逻辑\n\n\n\n而hikaricp也提供了有关使用prometheus监控的具体实现\n\n\n\n当使用使用spring.datasource的基本配置时，springboot的自动配置和hikari中的监控逻辑二者结合后，有关prometheus的metrice监控数据就会呈现出来\n\napplication.properties中配置\n\napplication.properties中配置\n \nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.driver\n    type: com.zaxxer.hikari.hikaridatasource\n    url: ${url}\n    username: ${username}\n    password: ${password}\n    hikari:\n      pool-name: hikaripool-1        \n      minimum-idle: 10           \n      maximum-pool-size: 20      \n      idle-timeout: 500000        \n      max-lifetime: 540000        \n      connection-timeout: 60000   \n      connection-test-query: select 1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n当我们开启了prometheus的端点监控后http://ip:port/actuator/prometheus便可以查看到关于hikaricp相关的监控数据，同时利用prometheus实时抓取监控数据用于图标呈现\n\n# help hikaricp_connections_max max connections\n# type hikaricp_connections_max gauge\nhikaricp_connections_max{pool="hikaripool-1",} 50.0\n# help hikaricp_connections_pending pending threads\n# type hikaricp_connections_pending gauge\nhikaricp_connections_pending{pool="hikaripool-1",} 0.0\n# help hikaricp_connections_timeout_total connection timeout total count\n# type hikaricp_connections_timeout_total counter\nhikaricp_connections_timeout_total{pool="hikaripool-1",} 0.0\n# help hikaricp_connections_acquire_seconds connection acquire time\n# type hikaricp_connections_acquire_seconds summary\nhikaricp_connections_acquire_seconds_count{pool="hikaripool-1",} 1.0\nhikaricp_connections_acquire_seconds_sum{pool="hikaripool-1",} 7.39e-5\n# help hikaricp_connections_acquire_seconds_max connection acquire time\n# type hikaricp_connections_acquire_seconds_max gauge\nhikaricp_connections_acquire_seconds_max{pool="hikaripool-1",} 7.39e-5\n# help hikaricp_connections_min min connections\n# type hikaricp_connections_min gauge\nhikaricp_connections_min{pool="hikaripool-1",} 3.0\n# help hikaricp_connections_usage_seconds connection usage time\n# type hikaricp_connections_usage_seconds summary\nhikaricp_connections_usage_seconds_count{pool="hikaripool-1",} 1.0\nhikaricp_connections_usage_seconds_sum{pool="hikaripool-1",} 0.025\n# help hikaricp_connections_usage_seconds_max connection usage time\n# type hikaricp_connections_usage_seconds_max gauge\nhikaricp_connections_usage_seconds_max{pool="hikaripool-1",} 0.025\n# help hikaricp_connections_creation_seconds_max connection creation time\n# type hikaricp_connections_creation_seconds_max gauge\nhikaricp_connections_creation_seconds_max{pool="hikaripool-1",} 0.094\n# help hikaricp_connections_creation_seconds connection creation time\n# type hikaricp_connections_creation_seconds summary\nhikaricp_connections_creation_seconds_count{pool="hikaripool-1",} 2.0\nhikaricp_connections_creation_seconds_sum{pool="hikaripool-1",} 0.178\n# help hikaricp_connections_active active connections\n# type hikaricp_connections_active gauge\nhikaricp_connections_active{pool="hikaripool-1",} 0.0\n# help hikaricp_connections total connections\n# type hikaricp_connections gauge\nhikaricp_connections{pool="hikaripool-1",} 3.0\n# help hikaricp_connections_idle idle connections\n# type hikaricp_connections_idle gauge\nhikaricp_connections_idle{pool="hikaripool-1",} 3.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n\n\n但是，当我们使用了shardingsphere作为分库分表中间件来使用以后，因为由于自动配置中使用的datasource由hikaridatasource变为了shardingdatasource，所以无法完成对hikarimetricsregistry的绑定操作，因此使用了sharding后无法再从/actuator/prometheus中看到关于hikaricp有关的数据。\n\n\n\n那么如何解决这个问题呢，我们可以模仿这个datasourcepoolmetricsautoconfiguration的逻辑，为sharding内的datasources进行循环绑定。\n\n我们知道，sharding的自动配置逻辑中，org.apache.shardingsphere.shardingjdbc.spring.boot.springbootconfiguration，将sharding配置的多数据库连接放到了一个datasourcemap中。因此我们绑定metricsregistry时也就是需要获取sharing中的datasourcemap中的数据来分别注册。通常我们会如下配置shardingsphere定义2个数据源.\n\napplication.properties中配置\n\napplication.properties中配置\n \nspring:\n  shardingsphere:\n    datasource:\n      names: ds0, ds1\n      ds0:\n        type: com.zaxxer.hikari.hikaridatasource\n        driver-class-name: com.mysql.cj.jdbc.driver\n        jdbcurl: ${url}\n        username: ${username}\n        password: ${password}\n        pool-name: hikaripool-1        \n        minimum-idle: 10            \n        maximum-pool-size: 20       \n        idle-timeout: 500000       \n        max-lifetime: 540000    \n        connection-timeout: 60000  \n        connection-test-query: select 1\n      ds1:\n        type: com.zaxxer.hikari.hikaridatasource\n        driver-class-name: com.mysql.cj.jdbc.driver\n        jdbcurl: ${url}\n        username: ${username}\n        password: ${password}\n        pool-name: hikaripool-2      \n        minimum-idle: 10           \n        maximum-pool-size: 20      \n        idle-timeout: 500000      \n        max-lifetime: 540000      \n        connection-timeout: 60000 \n        connection-test-query: select 1        \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n同时我们模仿datasourcemetricsconfiguration，编写一个shardingdatasourcemetricsconfiguration，源码如下\n\nimport java.util.collection;\n \nimport javax.sql.datasource;\n \nimport org.apache.commons.logging.log;\nimport org.apache.commons.logging.logfactory;\nimport org.apache.shardingsphere.shardingjdbc.jdbc.core.datasource.shardingdatasource;\nimport org.springframework.beans.factory.annotation.autowired;\nimport org.springframework.boot.actuate.autoconfigure.metrics.metricsautoconfiguration;\nimport org.springframework.boot.actuate.autoconfigure.metrics.export.simple.simplemetricsexportautoconfiguration;\nimport org.springframework.boot.autoconfigure.autoconfigureafter;\nimport org.springframework.boot.autoconfigure.condition.conditionalonbean;\nimport org.springframework.boot.autoconfigure.condition.conditionalonclass;\nimport org.springframework.boot.autoconfigure.jdbc.datasourceautoconfiguration;\nimport org.springframework.boot.jdbc.datasourceunwrapper;\nimport org.springframework.context.annotation.configuration;\nimport org.springframework.core.log.logmessage;\n \nimport com.zaxxer.hikari.hikaridatasource;\nimport com.zaxxer.hikari.metrics.micrometer.micrometermetricstrackerfactory;\n \nimport io.micrometer.core.instrument.meterregistry;\n \n@configuration(proxybeanmethods = false)\n@autoconfigureafter({ metricsautoconfiguration.class, datasourceautoconfiguration.class,\n        simplemetricsexportautoconfiguration.class })\n@conditionalonclass({ datasource.class, meterregistry.class })\n@conditionalonbean({ datasource.class, meterregistry.class })\npublic class shardingdatasourcepoolmetricsautoconfiguration {\n \n    @configuration(proxybeanmethods = false)\n    @conditionalonclass({shardingdatasource.class, hikaridatasource.class})\n    static class shardingdatasourcemetricsconfiguration {\n \n        private static final log logger = logfactory.getlog(shardingdatasourcemetricsconfiguration.class);\n \n        private final meterregistry registry;\n \n        shardingdatasourcemetricsconfiguration(meterregistry registry) {\n            this.registry = registry;\n        }\n \n        @autowired\n        void bindmetricsregistrytohikaridatasources(collection<datasource> datasources) {\n            for (datasource datasource : datasources) {\n                shardingdatasource shardingdatasource = datasourceunwrapper.unwrap(datasource, shardingdatasource.class);\n                collection<datasource> sharddatasources = shardingdatasource.getdatasourcemap().values();\n                for (datasource ds : sharddatasources) {\n                    hikaridatasource hikaridatasource = datasourceunwrapper.unwrap(ds, hikaridatasource.class);\n                    if (hikaridatasource != null) {\n                        bindmetricsregistrytohikaridatasource(hikaridatasource);\n                    }\n                }\n            }\n        }\n \n        private void bindmetricsregistrytohikaridatasource(hikaridatasource hikari) {\n            if (hikari.getmetricregistry() == null && hikari.getmetricstrackerfactory() == null) {\n                try {\n                    hikari.setmetricstrackerfactory(new micrometermetricstrackerfactory(this.registry));\n                }\n                catch (exception ex) {\n                    logger.warn(logmessage.format("failed to bind hikari metrics: %s", ex.getmessage()));\n                }\n            }\n        }\n \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n\n\n重点就是在这里，我们知道shardingdatasource中包含了具体数据源连接池，只要解析出hikaridatasource然后分别绑定进去，可以分别获取到监控数据了。\n\n当我们再次访问http://ip:port/actuator/prometheus，我们就可以看到出现了设置的2个数据源连接池的监控数据。\n\n\n\n附带指标监控解释\n\n指标1：hikaricp_pending_threads\nhikaricp_pending_threads 表示当前排队获取连接的线程数，guage类型。该指标持续飙高，说明db连接池中基本已无空闲连接。\n指标2：hikaricp_connection_acquired_nanos\nhikaricp_connection_acquired_nanos表示连接获取的等待时间，一般取99位数，summary类型\n指标3：hikaricp_idle_connections\nhikaricp_idle_connections表示当前空闲连接数，gauge类型。hikaricp是可以配置最小空闲连接数的，当此指标长期比较高（等于最大连接数）时，可以适当减小配置项中最小连接数。\n指标4：hikaricp_active_connections\nhikaricp_active_connections表示当前正在使用的连接数，gauge类型。如果此指标长期在设置的最大连接数上下波动时，或者长期保持在最大线程数时，可以考虑增大最大连接数。\n指标5：hikaricp_connection_usage_millis\nhikaricp_connection_usage_millis表示连接被复用的间隔时长，一般取99位数，summary类型。该配置的意义在于表明连接池中的一个连接从被返回连接池到再被复用的时间间隔，对于使用较少的数据源，此指标可能会达到秒级，可以结合流量高峰期的此项指标与激活连接数指标来确定是否需要减小最小连接数，若高峰也是秒级，说明对比数据源使用不频繁，可考虑减小连接数。\n指标6：hikaricp_connection_timeout_total\nhikaricp_connection_timeout_total表示每分钟超时连接数，counter类型。主要用来反映连接池中总共超时的连接数量，此处的超时指的是连接创建超时。经常连接创建超时，一个排查方向是和运维配合检查下网络是否正常。\n指标7：hikaricp_connection_creation_millis\nhikaricp_connection_creation_millis表示连接创建成功的耗时，一般取99位数，summary类型。该配置的意义在于表明创建一个连接的耗时，主要反映当前机器到数据库的网络情况，在idc意义不大，除非是网络抖动或者机房间通讯中断才会有异常波动。\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 完整部署包\n\n地址\n\n链接：https://pan.baidu.com/s/1u6tasaxxwxq3b1hbjog1xa \n提取码：2v0q \n\n\n1\n2\n\n\n\n# 修改时区\n\n\n# prometheus\n\n使用以下dockerfile生成的镜像，目录结构\n\n./\n├── dockerfile\n└── prometheus-2.26.0.linux-amd64.tar.gz\n\n\n1\n2\n3\n\n\ndockerfile\n\nfrom centos:7\n\nadd prometheus-2.26.0.linux-amd64.tar.gz /\n\nrun ln -sf /usr/share/zoneinfo/asia/shanghai /etc/localtime && \\\n    mv /prometheus-2.26.0.linux-amd64 /prometheus\n\nworkdir /prometheus\nentrypoint [ "/prometheus/prometheus" ]\ncmd        [ "--config.file=/etc/prometheus/prometheus.yml", \\\n             "--storage.tsdb.path=/prometheus", \\\n             "--web.console.libraries=/usr/share/prometheus/console_libraries", \\\n             "--web.console.templates=/usr/share/prometheus/consoles" ]\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n文件地址\n\n链接：https://pan.baidu.com/s/19aopkjeejplz7agsbr0gkg \n提取码：x05e \n\n\n1\n2\n\n\n构建：\n\ndocker build -t prometheus\\_sh:v2.26.0 ./\n\n\n1\n\n\n\n# 新增对docker监控\n\n\n# 启动cadvisor\n\n新增或修改docker-compose.yml，启动cadvisor服务\n\nversion: \'3.7\'\n\nservices:\n  cadvisor:\n    image: google/cadvisor:v0.33.0\n    container_name: cadvisor\n    restart: unless-stopped\n    ports:\n      - "8080:8080"\n    volumes:\n      - "/:/rootfs:ro"\n      - "/var/run:/var/run:rw"\n      - "/sys:/sys:ro"\n      - "/var/lib/docker/:/var/lib/docker:ro"\n      - "/dev/disk/:/dev/disk:ro"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n修改prometheus.yml，增加job\n\n  - job_name: \'cadvisor\'\n    static_configs:\n    - targets: [\'172.18.194.139:8080\']\n\n\n1\n2\n3\n\n\n\n\n修改完成后重启监控系统\n\n\n# 引入面板\n\n893或179\n\n',charsets:{cjk:!0},lastUpdated:"2023/03/14, 05:49:29",lastUpdatedTimestamp:1678772969e3},{title:"K8S-CICD",frontmatter:{title:"K8S-CICD",date:"2023-03-13T15:16:15.000Z",permalink:"/pages/d23db1/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/07.K8S-CICD.html",relativePath:"03.Deploy/07.K8S-CICD.md",key:"v-5e18edb6",path:"/pages/d23db1/",headers:[{level:2,title:"架构",slug:"架构",normalizedTitle:"架构",charIndex:2},{level:2,title:"部署K8S",slug:"部署k8s",normalizedTitle:"部署k8s",charIndex:18},{level:3,title:"部署包",slug:"部署包",normalizedTitle:"部署包",charIndex:124},{level:3,title:"部署步骤",slug:"部署步骤",normalizedTitle:"部署步骤",charIndex:206},{level:4,title:"安装Master（201）",slug:"安装master-201",normalizedTitle:"安装master（201）",charIndex:214},{level:4,title:"安装Worker（202）",slug:"安装worker-202",normalizedTitle:"安装worker（202）",charIndex:702},{level:4,title:"安装Worker（203）",slug:"安装worker-203",normalizedTitle:"安装worker（203）",charIndex:1642},{level:4,title:"完成",slug:"完成",normalizedTitle:"完成",charIndex:2279},{level:3,title:"访问Kuboard",slug:"访问kuboard",normalizedTitle:"访问kuboard",charIndex:2359},{level:3,title:"获取登陆Token",slug:"获取登陆token",normalizedTitle:"获取登陆token",charIndex:2455},{level:3,title:"访问Kubernetes Dashboard",slug:"访问kubernetes-dashboard",normalizedTitle:"访问kubernetes dashboard",charIndex:2649},{level:2,title:"部署NFS",slug:"部署nfs",normalizedTitle:"部署nfs",charIndex:2676},{level:3,title:"部署",slug:"部署",normalizedTitle:"部署",charIndex:18},{level:3,title:"203服务端配置",slug:"_203服务端配置",normalizedTitle:"203服务端配置",charIndex:3028},{level:3,title:"201客户端测试",slug:"_201客户端测试",normalizedTitle:"201客户端测试",charIndex:3277},{level:2,title:"部署Harbor",slug:"部署harbor",normalizedTitle:"部署harbor",charIndex:3674},{level:3,title:"安装docker",slug:"安装docker",normalizedTitle:"安装docker",charIndex:3896},{level:3,title:"安装harbor",slug:"安装harbor",normalizedTitle:"安装harbor",charIndex:3934},{level:4,title:"上传",slug:"上传",normalizedTitle:"上传",charIndex:243},{level:4,title:"解压",slug:"解压",normalizedTitle:"解压",charIndex:349},{level:4,title:"新建文件harbor.yml",slug:"新建文件harbor-yml",normalizedTitle:"新建文件harbor.yml",charIndex:4059},{level:4,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:214},{level:4,title:"启动成功",slug:"启动成功",normalizedTitle:"启动成功",charIndex:4961},{level:2,title:"部署GitLab",slug:"部署gitlab",normalizedTitle:"部署gitlab",charIndex:4994},{level:3,title:"内存问题",slug:"内存问题",normalizedTitle:"内存问题",charIndex:6110},{level:2,title:"部署Jenkins",slug:"部署jenkins",normalizedTitle:"部署jenkins",charIndex:7065},{level:2,title:"Docker配置Harbor",slug:"docker配置harbor",normalizedTitle:"docker配置harbor",charIndex:7898},{level:3,title:"修改docker.service",slug:"修改docker-service",normalizedTitle:"修改docker.service",charIndex:7932},{level:3,title:"重启docker",slug:"重启docker",normalizedTitle:"重启docker",charIndex:8099},{level:3,title:"登录docker",slug:"登录docker",normalizedTitle:"登录docker",charIndex:8169},{level:3,title:"上传镜像",slug:"上传镜像",normalizedTitle:"上传镜像",charIndex:8249},{level:2,title:"初始化Jenkins",slug:"初始化jenkins",normalizedTitle:"初始化jenkins",charIndex:8457},{level:3,title:"安装推荐的插件及账号",slug:"安装推荐的插件及账号",normalizedTitle:"安装推荐的插件及账号",charIndex:8531},{level:3,title:"安装其他插件",slug:"安装其他插件",normalizedTitle:"安装其他插件",charIndex:8588},{level:2,title:"初始化Harbor",slug:"初始化harbor",normalizedTitle:"初始化harbor",charIndex:8836},{level:3,title:"创建用户",slug:"创建用户",normalizedTitle:"创建用户",charIndex:8850},{level:3,title:"创建项目",slug:"创建项目",normalizedTitle:"创建项目",charIndex:8264},{level:3,title:"增加成员",slug:"增加成员",normalizedTitle:"增加成员",charIndex:8900},{level:2,title:"初始化GitLab",slug:"初始化gitlab",normalizedTitle:"初始化gitlab",charIndex:8919},{level:3,title:"创建账号",slug:"创建账号",normalizedTitle:"创建账号",charIndex:8979},{level:3,title:"初始化密码",slug:"初始化密码",normalizedTitle:"初始化密码",charIndex:8990},{level:3,title:"登录",slug:"登录",normalizedTitle:"登录",charIndex:5645},{level:3,title:"初始化项目",slug:"初始化项目",normalizedTitle:"初始化项目",charIndex:9063},{level:4,title:"创建空项目",slug:"创建空项目",normalizedTitle:"创建空项目",charIndex:9072},{level:4,title:"创建dev分支",slug:"创建dev分支",normalizedTitle:"创建dev分支",charIndex:9083},{level:4,title:"提交项目代码",slug:"提交项目代码",normalizedTitle:"提交项目代码",charIndex:9096},{level:2,title:"Jenkins配置K8S",slug:"jenkins配置k8s",normalizedTitle:"jenkins配置k8s",charIndex:9194},{level:3,title:"配置插件",slug:"配置插件",normalizedTitle:"配置插件",charIndex:9211},{level:4,title:"k8s集群信息",slug:"k8s集群信息",normalizedTitle:"k8s集群信息",charIndex:9425},{level:3,title:"创建admin证书",slug:"创建admin证书",normalizedTitle:"创建admin证书",charIndex:9920},{level:4,title:"安装证书工具",slug:"安装证书工具",normalizedTitle:"安装证书工具",charIndex:9933},{level:4,title:"准备证书签名请求",slug:"准备证书签名请求",normalizedTitle:"准备证书签名请求",charIndex:10444},{level:4,title:"创建证书和私钥",slug:"创建证书和私钥",normalizedTitle:"创建证书和私钥",charIndex:10896},{level:4,title:"配置证书",slug:"配置证书",normalizedTitle:"配置证书",charIndex:11110},{level:5,title:"生成pkc格式证书",slug:"生成pkc格式证书",normalizedTitle:"生成pkc格式证书",charIndex:11118},{level:3,title:"配置jenkins认证",slug:"配置jenkins认证",normalizedTitle:"配置jenkins认证",charIndex:11296},{level:4,title:"Kubernetes 服务证书 key",slug:"kubernetes-服务证书-key",normalizedTitle:"kubernetes 服务证书 key",charIndex:11311},{level:2,title:"GitLab+Jenkins配置",slug:"gitlab-jenkins配置",normalizedTitle:"gitlab+jenkins配置",charIndex:11622},{level:3,title:"GitLab与Jenkins配置",slug:"gitlab与jenkins配置",normalizedTitle:"gitlab与jenkins配置",charIndex:11643},{level:4,title:"设置jenkins 用户ssh秘钥",slug:"设置jenkins-用户ssh秘钥",normalizedTitle:"设置jenkins 用户ssh秘钥",charIndex:11663},{level:4,title:"创建Access Tokens",slug:"创建access-tokens",normalizedTitle:"创建access tokens",charIndex:11897},{level:3,title:"Jenkins配置Git/GitLab",slug:"jenkins配置git-gitlab",normalizedTitle:"jenkins配置git/gitlab",charIndex:12098},{level:4,title:"Jenkins配置GitLab",slug:"jenkins配置gitlab",normalizedTitle:"jenkins配置gitlab",charIndex:12121},{level:4,title:"Jenkins配置Git",slug:"jenkins配置git",normalizedTitle:"jenkins配置git",charIndex:12098},{level:3,title:"创建一个Jenkins Job",slug:"创建一个jenkins-job",normalizedTitle:"创建一个jenkins job",charIndex:12482},{level:4,title:"配置Job的源码管理",slug:"配置job的源码管理",normalizedTitle:"配置job的源码管理",charIndex:12571},{level:4,title:"配置Job的构建触发器",slug:"配置job的构建触发器",normalizedTitle:"配置job的构建触发器",charIndex:13096},{level:4,title:"配置Job的构建脚本",slug:"配置job的构建脚本",normalizedTitle:"配置job的构建脚本",charIndex:13569},{level:2,title:"Jenkins配置maven",slug:"jenkins配置maven",normalizedTitle:"jenkins配置maven",charIndex:13914},{level:3,title:"查看java和maven安装地址",slug:"查看java和maven安装地址",normalizedTitle:"查看java和maven安装地址",charIndex:13963},{level:3,title:"新增JDK",slug:"新增jdk",normalizedTitle:"新增jdk",charIndex:14379},{level:3,title:"新增Maven",slug:"新增maven",normalizedTitle:"新增maven",charIndex:14595},{level:2,title:"Jenkins使用docker命令",slug:"jenkins使用docker命令",normalizedTitle:"jenkins使用docker命令",charIndex:14643},{level:2,title:"Jenkins+Harbor+GitLab+K8S",slug:"jenkins-harbor-gitlab-k8s",normalizedTitle:"jenkins+harbor+gitlab+k8s",charIndex:14912},{level:3,title:"方式一",slug:"方式一",normalizedTitle:"方式一",charIndex:14942},{level:4,title:"K8S创建命名空间",slug:"k8s创建命名空间",normalizedTitle:"k8s创建命名空间",charIndex:15001},{level:4,title:"K8S创建Harbor密码信息",slug:"k8s创建harbor密码信息",normalizedTitle:"k8s创建harbor密码信息",charIndex:15040},{level:4,title:"工程新建脚本",slug:"工程新建脚本",normalizedTitle:"工程新建脚本",charIndex:15080},{level:4,title:"Jenkins创建任务",slug:"jenkins创建任务",normalizedTitle:"jenkins创建任务",charIndex:15179},{level:3,title:"方式二",slug:"方式二",normalizedTitle:"方式二",charIndex:14994},{level:4,title:"K8S创建命名空间",slug:"k8s创建命名空间-2",normalizedTitle:"k8s创建命名空间",charIndex:15001},{level:4,title:"K8S创建Harbor密码信息",slug:"k8s创建harbor密码信息-2",normalizedTitle:"k8s创建harbor密码信息",charIndex:15040},{level:4,title:"工程新建脚本",slug:"工程新建脚本-2",normalizedTitle:"工程新建脚本",charIndex:15080},{level:4,title:"Jenkins创建任务",slug:"jenkins创建任务-2",normalizedTitle:"jenkins创建任务",charIndex:15179},{level:4,title:"K8S创建Pod",slug:"k8s创建pod",normalizedTitle:"k8s创建pod",charIndex:15676}],headersStr:"架构 部署K8S 部署包 部署步骤 安装Master（201） 安装Worker（202） 安装Worker（203） 完成 访问Kuboard 获取登陆Token 访问Kubernetes Dashboard 部署NFS 部署 203服务端配置 201客户端测试 部署Harbor 安装docker 安装harbor 上传 解压 新建文件harbor.yml 安装 启动成功 部署GitLab 内存问题 部署Jenkins Docker配置Harbor 修改docker.service 重启docker 登录docker 上传镜像 初始化Jenkins 安装推荐的插件及账号 安装其他插件 初始化Harbor 创建用户 创建项目 增加成员 初始化GitLab 创建账号 初始化密码 登录 初始化项目 创建空项目 创建dev分支 提交项目代码 Jenkins配置K8S 配置插件 k8s集群信息 创建admin证书 安装证书工具 准备证书签名请求 创建证书和私钥 配置证书 生成pkc格式证书 配置jenkins认证 Kubernetes 服务证书 key GitLab+Jenkins配置 GitLab与Jenkins配置 设置jenkins 用户ssh秘钥 创建Access Tokens Jenkins配置Git/GitLab Jenkins配置GitLab Jenkins配置Git 创建一个Jenkins Job 配置Job的源码管理 配置Job的构建触发器 配置Job的构建脚本 Jenkins配置maven 查看java和maven安装地址 新增JDK 新增Maven Jenkins使用docker命令 Jenkins+Harbor+GitLab+K8S 方式一 K8S创建命名空间 K8S创建Harbor密码信息 工程新建脚本 Jenkins创建任务 方式二 K8S创建命名空间 K8S创建Harbor密码信息 工程新建脚本 Jenkins创建任务 K8S创建Pod",content:"# 架构\n\n\n\n流程图\n\n\n\n\n# 部署K8S\n\n半离线部署\n\n系统版本：CentOS Linux release 7.9.2009 (Core)  \nKubernetes：1.17.1  \nDocker：18.06.1\n\n\n1\n2\n3\n\n\n\n# 部署包\n\n地址\n\n链接：https://pan.baidu.com/s/1pMiSfbz48ZQSwmPGC43RQA \n提取码：xnh3 \n\n\n1\n2\n\n\n\n# 部署步骤\n\n# 安装Master（201）\n\n在master节点上执行。\n上传k8sOfflineSetup20210720.zip文件到root目录下\n\nscp k8sOfflineSetup20210720.zip root@192.168.213.201:/root\n\n\n1\n\n\n解压到/root（解压路径不能修改）\n\nunzip k8sOfflineSetup20210720.zip\n\n\n1\n\n\n设置参数并安装\n\n# master节点的主机名\nexport HOSTNAME=k8s-master\n# kubernetes apiserver的主机地址\nexport APISERVER_NAME=apiserver.k8s.com\n# 集群中master节点的ip地址\nexport MASTER_IP=192.168.213.201\n# Pod 使用的网段\nexport POD_SUBNET=10.11.10.0/16\n\ncd /root/k8sOfflineSetup\n./setup_master.sh\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n\n\n# 安装Worker（202）\n\n在worker节点上执行。\n上传k8sOfflineSetup20210720.zip文件到root目录下\n\nscp k8sOfflineSetup20210720.zip root@192.168.213.202:/root\n\n\n1\n\n\n解压到/root（解压路径不能修改）\n\nunzip k8sOfflineSetup20210720.zip\n\n获取加入master的参数（是在master节点上执行。）\n\n# 在 master 节点执行\nkubeadm token create --print-join-command\n\n# 得到token和cert，这两个参数在2个小时内可以重复使用，超过以后就得再次生成\nkubeadm join apiserver.k8s.com:6443 --token t8rn2w.zwfd42edrro02c50     --discovery-token-ca-cert-hash sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\n\n\n1\n2\n3\n4\n5\n\n\n\n\n设置参数并安装\n在worker节点上执行。\n\n# worker节点的主机名\nexport HOSTNAME=k8s-worker202\n# kubernetes apiserver的主机地址\nexport APISERVER_NAME=apiserver.k8s.com\n# 集群中master节点的ip地址\nexport MASTER_IP=192.168.213.201\n# 加入master的token\nexport TOKEN=t8rn2w.zwfd42edrro02c50\n# 加入master的证书\nexport export CERT=sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\ncd /root/k8sOfflineSetup\n./setup_worker.sh\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n# 安装Worker（203）\n\n在worker节点上执行。\n上传k8sOfflineSetup20210720.zip文件到root目录下\n\nscp k8sOfflineSetup20210720.zip root@192.168.213.203:/root\n\n\n1\n\n\n解压到/root（解压路径不能修改）\n\nunzip k8sOfflineSetup20210720.zip\n\n\n1\n\n\n设置参数并安装（token之类已获得，一样便可）\n在worker节点上执行。\n\n# worker节点的主机名\nexport HOSTNAME=k8s-worker203\n# kubernetes apiserver的主机地址\nexport APISERVER_NAME=apiserver.k8s.com\n# 集群中master节点的ip地址\nexport MASTER_IP=192.168.213.201\n# 加入master的token\nexport TOKEN=t8rn2w.zwfd42edrro02c50\n# 加入master的证书\nexport export CERT=sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\ncd /root/k8sOfflineSetup\n./setup_worker.sh\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n# 完成\n\n现在你可以在master节点，执行kubectl get nodes看到所有节点都在线了。\n\nkubectl get nodes\n\n\n1\n\n\n\n\n\n# 访问Kuboard\n\nKuboard是一个非常方便的web管理界面，安装完以后可以通过http://任意节点IP:32567/访问。\n详细使用请参考 www.kuboard.cn\n\n\n\n\n# 获取登陆Token\n\n在 Master 节点上执行此命令\n\nkubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-user | awk '{print $1}') -o go-template='{{.data.token}}' | base64 -d\n\n\n1\n\n\n\n# 访问Kubernetes Dashboard\n\n\n# 部署NFS\n\n服务端IP：192.168.213.203\n\n服务点目录：/data/share\n\n\n# 部署\n\n因为每台K8S都可能需要使用到挂载，故每台都需要安装\n\n（192.168.213.201-203）\n\n安装命令：\n\nyum -y install nfs-utils  rpcbind \n\n# nfs 启动\n# 为rpcbind和nfs做开机启动\nsystemctl enable rpcbind.service\nsystemctl enable nfs-server.service\n\n#启动相关软件\nsystemctl start rpcbind.service\nsystemctl start nfs-server.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 203服务端配置\n\n创建共享文件夹\n\nmkdir -p /data/share\n\n\n1\n\n\nnfs 配置\n\nvi /etc/exports\n\n\n1\n\n\n修改配置文件，增加下面这一行数据，指定的ip地址为客户端的地址,地址可以是一个网段（如：192.168.0.0/24）\n\n/data/share 192.168.213.0/24(rw,no_root_squash,no_all_squash,sync)\n\n\n1\n\n\n加载配置文件，在相关软件启动后执行\n\nexportfs -arv\n\n\n\n\n# 201客户端测试\n\n创建共享文件夹\n\nmkdir -p /home/nfs_share\n\n\n1\n\n\n在你的 NFS 服务器设定妥当之后，我们可以在 client端先自我测试一下是否可以联机喔！利用 showmount 这个指令来查阅！\n\n如果报：clnt_create: RPC: Port mapper failure - Unable to receive: errno 113 (No route to host)，可能防火墙没关\n\nshowmount -e 192.168.213.203\n\n\n1\n\n\n挂载测试\n\nmount -t nfs 192.168.213.203:/data/share /home/nfs_share \n\n\n1\n\n\n查看挂载情况，可以使用这个命令df -TH\n\ndf -TH\n\n\n1\n\n\n卸载\n\numount /home/nfs_share\n\n\n1\n\n\n\n# 部署Harbor\n\n部署包官方地址：https://github.com/goharbor/harbor/releases\n\n个人下载地址\n\n链接：https://pan.baidu.com/s/1kmEPizetpsoF82FRdH3I9w \n提取码：a4nh \n\n\n1\n2\n\n\nIP：192.168.213.204\n账号：admin\n密码：Harbor12345\n访问地址：http://192.168.213.204:20480\n\n\n# 安装docker\n\n安装docker及docker-compose\n\n\n# 安装harbor\n\n# 上传\n\n上传harbor-offline-installer-v2.2.3.tgz文件到/data目录\n\n# 解压\n\ntar xzvf  harbor-offline-installer-v2.2.3.tgz\n\n\n1\n\n\n# 新建文件harbor.yml\n\n内容复制harbor.yml.tmpl\n修改 hostname: 192.168.213.204 为本机IP\n端口\n修改数据存储地址/data/harbor/data\n注释https\n\ncd /data/harbor\nvi harbor.yml\n\n\n1\n2\n\n\nharbor.yml\n\nhostname: 192.168.213.204 \n\nhttp:\n  port: 20480\n\nharbor_admin_password: Harbor12345\n\ndatabase:\n  password: root123\n  max_idle_conns: 50\n  max_open_conns: 1000\n\ndata_volume: /data/harbor/data\n\ntrivy:\n  ignore_unfixed: false\n  skip_update: false\n  insecure: false\n\njobservice:\n  max_job_workers: 10\n\nnotification:\n  webhook_job_max_retry: 10\n\nchart:\n  absolute_url: disabled\n\nlog:\n  level: info\n  local:\n    rotate_count: 50\n    rotate_size: 200M\n    location: /var/log/harbor\n_version: 2.2.0\n\nproxy:\n  http_proxy:\n  https_proxy:\n  no_proxy:\n  components:\n    - core\n    - jobservice\n    - trivy\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n# 安装\n\n./install.sh\n\n# 启动成功\n\n查看一下\ndocker-compose ps\n\n\n# 部署GitLab\n\n使用docker-compose.yml便可\n\n页面访问地址：http://192.168.213.204:8929\n\nversion: '3'\nservices:\n  gitlab:\n    image: 'gitlab/gitlab-ce:14.0.6-ce.0'\n    container_name: gitlab\n    restart: always\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'http://192.168.213.204:8929' #若有域名可以写域名\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n    ports:\n      - '8929:8929'\n      - '2224:22'\n    volumes:\n      #将相关配置映射到当前目录下的config目录\n      - './config:/etc/gitlab'\n      #将日志映射到当前目录下的logs目录\n      - './logs:/var/log/gitlab'\n      #将数据映射到当前目录下的data目录\n      - './data:/var/opt/gitlab'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n登录账号：root\n\n登录密码：在服务启动后，查看config/initial_root_password文件\n\n限制内存及时区\n\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'http://106.55.159.125:8929' #若有域名可以写域名\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n        puma['per_worker_max_memory_mb'] = 1024 #更改内存限制设置\n        gitlab_rails['time_zone'] = 'Asia/Shanghai'\n        puma['worker_processes'] = 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n参考文档：https://docs.gitlab.com/ee/administration/operations/puma.html\n\n\n# 内存问题\n\n如果使用阿里云或腾讯云只有2G内存时，可以增加Swap内存\n\ndd if=/dev/zero of=/swapfile bs=1k count=4816000\nmkswap /swapfile\nswapon /swapfile\n\n\n1\n2\n3\n\n\n修改docker-compose,设置内存上限和swap内存\n\nversion: '2.3'\nservices:\n  gitlab:\n    image: 'gitlab/gitlab-ce:14.0.6-ce.0'\n    container_name: gitlab\n    restart: always\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'http://192.168.213.204:8929' #若有域名可以写域名\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n        puma['per_worker_max_memory_mb'] = 256 #更改内存限制设置\n        gitlab_rails['time_zone'] = 'Asia/Shanghai'\n        puma['worker_processes'] = 2\n    ports:\n      - '8929:8929'\n      - '2224:22'\n    volumes:\n      #将相关配置映射到当前目录下的config目录\n      - './config:/etc/gitlab'\n      #将日志映射到当前目录下的logs目录\n      - './logs:/var/log/gitlab'\n      #将数据映射到当前目录下的data目录\n      - './data:/var/opt/gitlab'\n    mem_limit: 1024m\n    memswap_limit: 4000m\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 部署Jenkins\n\n由于原生镜像没有安装maven，故我们重新写一个Dockerfile生成镜像\n\nDockerfile\n\nFROM jenkins/jenkins:2.303-centos7\nUSER root\nRUN yum install -y maven\n\n\n1\n2\n3\n\n\n执行命令生成 镜像\n\ncd 到dockerfiel文件目录下\n\ndocker build -t jenkins/jenkins:2.303-centos7-mvn ./\n\n\n1\n\n\n使用docker-compose.yml便可，docker目录挂载是为了在容器中使用docker命令\n\n访问地址：http://192.168.213.204:7080\n\nversion: '3'\nservices:\n  jenkins:\n    image: 'jenkins/jenkins:2.303-centos7-mvn'\n    container_name: jenkins\n    restart: always\n    user: root\n    ports:\n      - '7080:8080'\n      - '7050:50000'\n    volumes:\n      - './jenkins_home:/var/jenkins_home'\n      - '/var/run/docker.sock:/var/run/docker.sock'\n      - '/usr/bin/docker:/usr/bin/docker'\n    extra_hosts: \n      - \"apiserver.k8s.com:192.168.213.201\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n登录密码：在服务启动后，查看jenkins_home/secrets/initialAdminPassword文件\n\n\n# Docker配置Harbor\n\n201到204服务器均修改\n\n\n# 修改docker.service\n\n修改/etc/systemd/system/docker.service\n\n将ExecStart=/usr/bin/dockerd改为\n\nExecStart=/usr/bin/dockerd --insecure-registry 192.168.213.204:20480\n\n\n1\n\n\n\n\n\n# 重启docker\n\nsystemctl daemon-reload\nsystemctl restart docker\n\n\n1\n2\n\n\n\n# 登录docker\n\ndocker login 192.168.213.204:20480 输入账号密码 账号：admin 密码：Harbor12345\n\n\n# 上传镜像\n\n先在Harbor中创建项目，例：imdemo\n\n将本地镜像打标签，并上传\n\n例：本地镜像原标签imtest:2.11.12\n\ndocker tag imtest:2.11.12 192.168.213.204:20480/imdemo/imtesth:2.11.12\n\n推送镜像\n\ndocker push 192.168.213.204:20480/imdemo/imtesth:2.11.12\n\n\n# 初始化Jenkins\n\n使用管理员账号登录后，修改管理员信息：\n\n登录名：wuxiaoku 账号：admin 密码：Wuxiaoku123\n\n\n# 安装推荐的插件及账号\n\n\n\n设置账号，更新密码,填写邮件地址，此处用户名为昵称，登录时使用admin\n\n\n\n\n# 安装其他插件\n\n打开  “系统管理” =》“管理插件” 然后安装\n\nKubernetes Continuous Deploy\nKubernetes\nGitlab Hook \nGitLab\nBuild Authorization Token\nMaven Repository Server\nMaven Integration\nPublish Over SSH\nDocker plugin\nSSH Pipeline Steps\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n点击安装\n\n\n\n\n# 初始化Harbor\n\n\n# 创建用户\n\n帐号：wuxiaoku 密码：Wuxiaoku123\n\n\n\n\n# 创建项目\n\n\n\n\n# 增加成员\n\n点击进去项目\n\n\n\n\n# 初始化GitLab\n\n使用管理员账号登录后，新增账号：\n\n账号：wuxiaoku 密码：Wuxiaoku123\n\n\n# 创建账号\n\n\n\n\n# 初始化密码\n\n在创建完成账号时，密码是不可填写的，在编辑中，初始化一下密码。\n\n\n\n\n# 登录\n\n先重置一下密码，然后保存登录到首页\n\n\n\n\n# 初始化项目\n\n# 创建空项目\n\n\n\n# 创建dev分支\n\n\n\n# 提交项目代码\n\n提交到dev分支\n\n代码：\n\n链接：https://pan.baidu.com/s/1B2-l8Ahfda2qxbvjmWJdhQ \n提取码：sxo4 \n\n\n1\n2\n\n\n\n\n\n# Jenkins配置K8S\n\n\n# 配置插件\n\n在jenkins初始化中已经安装了K8S插件，即现在开始配置即可\n\n登录jenkins，在首页点击 Manage Jenkins --\x3e Configure System\n\n将网页拉动到最底下，点击新增一个云，就会出现Kubernetes\n\n\n\n\n\n点击配置\n\n\n\n填写Kubernetes地址然后点击测试，会报错\n\n地址为：https://apiserver.k8s.com:6443\n\n\n\n报错信息：\n\n\n\n# k8s集群信息\n\n[root@k8s-master ~]# kubectl cluster-info\nKubernetes master is running at https://apiserver.k8s.com:6443\nKubeDNS is running at https://apiserver.k8s.com:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\nMetrics-server is running at https://apiserver.k8s.com:6443/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n\nTo further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n\n根据以上的配置，可以看到，已经是启用https了，这里就涉及到了密钥的问题。\n\n\n# 创建admin证书\n\n# 安装证书工具\n\n安装cfssl\n此工具生成证书非常方便, pem证书与crt证书,编码一致可直接使用\n\n登录k8s master节点执行\n\nwget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\nchmod +x cfssl_linux-amd64\nmv cfssl_linux-amd64 /usr/local/bin/cfssl\n\nwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nchmod +x cfssljson_linux-amd64\nmv cfssljson_linux-amd64 /usr/local/bin/cfssljson\n\nwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64\nchmod +x cfssl-certinfo_linux-amd64\nmv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 准备证书签名请求\n\nvi admin-csr.json\n\n内容如下\n\n{\n  \"CN\": \"admin\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"HangZhou\",\n      \"L\": \"XS\",\n      \"O\": \"system:masters\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n证书请求中的O 指定该证书的 Group 为 system:masters\n\n而 RBAC 预定义的 ClusterRoleBinding 将 Group system:masters 与 ClusterRole cluster-admin 绑定，这就赋予了该证书具有所有集群权限 。\n\n# 创建证书和私钥\n\ncfssl gencert -ca=/etc/kubernetes/pki/ca.crt -ca-key=/etc/kubernetes/pki/ca.key --profile=kubernetes admin-csr.json | cfssljson -bare admin\n\n\n1\n\n\n最终生成以下3个文件：\n\nadmin.csr\nadmin-key.pem\nadmin.pem\n\n\n1\n2\n3\n\n\n# 配置证书\n\n# 生成pkc格式证书\n\n我们可以通过openssl来转换成pkc格式\n\nopenssl pkcs12 -export -out ./jenkins-admin.pfx -inkey ./admin-key.pem -in ./admin.pem -passout pass:secret\n\n\n1\n\n\n将jenkins-admin.pfx 下载至桌面\n\n\n# 配置jenkins认证\n\n# Kubernetes 服务证书 key\n\n使用以下命令查看\n\nroot@k8s-master:~# cat /etc/kubernetes/pki/ca.crt\n\n\n1\n\n\n将证书内容填写，点击凭据后面的添加，点击Jenkins\n\n\n\n得到jenkins-admin.pfk文件后，点击Jenkins配置Credentials后面的Add，配置如下\n\n上传证书\n\n\n\n选择文件 jenkins-admin.pfk\n\n输入密码 secret，后面的内容可以不填写，点击添加。\n\n\n\n选择 凭据，点击连接测试。\n\n出现Connected to Kubernetes v1.17.1 表示连接成功。\n\n\n\n点击保存\n\n\n\n\n# GitLab+Jenkins配置\n\n\n# GitLab与Jenkins配置\n\n# 设置jenkins 用户ssh秘钥\n\n使用Root登录GitLab，点击用户名称\n\n\n\n点击 Impersonate ，表示冒充jenkins 用户\n\n\n\n点击编辑\n\n\n\n点击 ssh keys\n\n\n\n登录到jenkins服务器（204），生成秘钥\n\nssh-keygen -t rsa -P \"\" -f ~/.ssh/id_rsa\n\n\n1\n\n\n查看公钥\n\ncat /root/.ssh/id_rsa.pub\n\n\n1\n\n\n将公钥内容复制到网页，点击添加秘钥\n\n\n\n# 创建Access Tokens\n\n点击左侧的Access Tokens，输入用户 wuxiaoku，勾选权限，点击创建\n\n\n\n复制token，待会 jenkins 设置时，会用到\n\nMXMnxpwMLAgiP9zyS5dp\n\n\n1\n\n\n\n\n点击进入你的项目\n\n\n\n点击项目\n\n\n\n点击设置-成员\n\n\n\n把管理员也添加进去，这样管理员也有权限了。如果项目一开始是管理员创建，这时就选择子用户\n\n\n\n\n# Jenkins配置Git/GitLab\n\n# Jenkins配置GitLab\n\n点击 系统管理--\x3e 系统配置 --\x3e配置 --\x3eGitlab\n\n\n\nConnection Name ”随便填，“Git Host URL”填GitLab的访问地址，然后点“Add”——“jenkins”，如下所示\n\n\n\n选择gitlalb api，输入 jenkins 用户创建的token\n\nMXMnxpwMLAgiP9zyS5dp\n\n\n1\n\n\n\n\n选择 gitlab api token，点击测试连接，出现 Success，表示成功\n\n\n\n点击最下面的保存\n\n\n\n# Jenkins配置Git\n\n点击 Manage Jenkins --\x3e Configure System --\x3e配置 --\x3eGit plugin\n\n\n\n设置Git插件的全局配置，然后点击最下面的保存。\n\n\n\n\n# 创建一个Jenkins Job\n\n此处创建用于测试是否正常使用\n\n点击 新建Item，item name”可以随便起，然后点击“构建一个自由风格的软件项目”，点击Ok\n\n\n\n# 配置Job的源码管理\n\n选择“源码管理”，选择“Git”,然后去GitLab中复制项目地址，粘贴到“Repository URL”,然后点击“credentials”后面的“Add”按钮\n\n\n\n类型，选择 SSH Username with private key\n\nUsername 填 root\n\nPrivateKey 选择Enter directly，点击add\n\n\n\n登录到jenkins 服务器，查看私钥\n\ncat /root/.ssh/id_rsa\n\n\n1\n\n\n将内容复制到网页上面，点击添加\n\n\n\n在“credentials”里选择我们刚刚创建的认证方式：root\n\n\n\n如果没报错，说明成功了，点击页面底部的“apply”。如果出错了，会在“Repository URL”和“Credentials”之间显示红色的错误信息。\n\njenkins job默认对master分支进行构建，你也可以自定义分支。这要求你的Gitlab代码仓库中要存在这个分支，一般来说，就是要向代码仓库提交一次更改，请 自行完成（Gitlab项目刚创建时是空的，一个分支也没有，这样的话，自动构建时会出错）\n\n我们上文创建了dev分钟，故选择dev\n\n\n\n# 配置Job的构建触发器\n\n选择“构建触发器”，勾选“Pull SCM（轮询 SCM）”，这个选项会每隔一段时间检查一下GitLab仓库中代码是否有更新，有的话就执行构建操作。日程表如何设置，在这个输入框下面有说明\n\n\n\n扩展阅读：\n\n常见构建触发器：\n\n * Build after other projects are built 当另一个构建任务完成之后触发\n * Build periodically 周期性的触发\n * Build when a change is pushed to GitLab. GitLab CI Service URL: http://191.8.2.112:12000/project/test-go-dev 当代码有更新的时候触发，通过GitLab CI\n * GitHub hook trigger for GITScm polling 通过Github钩子触发\n * Poll SCM 定期检查代码有无更新，有更新时触发\n\n这只是个人理解，具体怎么样大家可以试试，Poll SCM方式我是试过的。\n\n# 配置Job的构建脚本\n\n在build栏目里，选择“jenkins execute shell”,然后输入你项目的构建命令（这依赖于你的项目，如Maven的maven build，gulp的gulp xxx 等等）\n\n\n\n这里我输入一段测试命令，表示将git项目的代码复制到/tmp/test\n\n\\cp -r $WORKSPACE /tmp/test\n\n\n1\n\n\n点击 可用的环境变量列表，就可以看到很多变量\n\n\n\n其中 WORKSPACE 表示，下载git项目后的路径。\n\n由于git项目为itest，因此路径为：/var/lib/jenkins/workspace/itest\n\n点击保存\n\n点击 立即构建，点击下面的构建过程\n\n\n\n点击控制台输出，就可以看到完整的cp命令\n\n\n\n\n# Jenkins配置maven\n\n我们在生成镜像时已经安装了maven，故这边只要配置即可\n\n\n# 查看java和maven安装地址\n\n登录jenkins服务器204\n\ndocker exec -it jenkins /bin/sh\nmvn -version\n\nApache Maven 3.0.5 (Red Hat 3.0.5-17)\nMaven home: /usr/share/maven\nJava version: 1.8.0\\_292, vendor: AdoptOpenJDK\nJava home: /usr/lib/jvm/adoptopenjdk-8-hotspot/jre\nDefault locale: en\\_US, platform encoding: ANSI\\_X3.4-1968\nOS name: \"linux\", version: \"3.10.0-1160.el7.x86\\_64\", arch: \"amd64\", family: \"unix\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n\n# 新增JDK\n\n登录到Jenkins管理后台，点击 Manage Jenkins --\x3e Global Tool Configuration\n\n\n\n点击 新增jdk\n\n\n\n自动安装 前面的勾选，去掉，输入别名和JAVA_HOME\n\n\n\n注意：JAVA_HOME的输入框下面，不要有警告或者错误信息，否则就是路径不正确。\n\n使用 mvn -version 命令时，就已经打印了Java home变量，注意：去除最后的jre\n\n\n\n\n# 新增Maven\n\n点击新增Maven\n\n\n\n同样去除自动安装，填写别名\n\n\n\n点击保存\n\n\n# Jenkins使用docker命令\n\n此处还是为测试任务使用，加深对Jenkins的了解\n\n创建流水线任务\n\n\n\n输入pipeline脚本，点击保存\n\npipeline {\n    agent any\n    stages {\n        stage('Test') {\n            steps {\n                sh 'docker images'\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n立即构建，查看控制台\n\n\n\n\n# Jenkins+Harbor+GitLab+K8S\n\n\n# 方式一\n\n缺点：对K8S脚本generateyaml.sh创建模板较死板，我是随便摸索写的测试\n个人喜欢方式二\n\n# K8S创建命名空间\n\n登录Kuboard创建命名空间：imtest\n\n\n\n# K8S创建Harbor密码信息\n\n输入Harbor之前创建的账号密码\n\n\n\n# 工程新建脚本\n\n将脚本放在工程根目录下\n\n脚本：\n\n链接：https://pan.baidu.com/s/1Z73E8sBq9TqYR2sEWiFeZg 提取码：pkrg\n\n目录结构如下\n\n\n\n# Jenkins创建任务\n\n新建流水线任务：imtest1\n\n\n\n构建触发器\n\n*/1 * * * *\n\n\n\n流水线\n\n\n\n点击保存\n\n立即构建-查看日志，第一次会报错。\n\n\n\n进入201服务器，执行命令\n\nkubectl apply -f /root/data/app/imdemo.yaml\n\n\n\nJenkins再次构建就成功了，后续代码提交自动构建\n\n\n\n\n# 方式二\n\n缺点：需要先去创建一次pod\n优点：自由配置pod\n\n# K8S创建命名空间\n\n登录Kuboard创建命名空间：imtest\n\n\n\n# K8S创建Harbor密码信息\n\n输入Harbor之前创建的账号密码\n\n\n\n地址要用http://ip:端口\n\n\n\n# 工程新建脚本\n\n地址：\n\n链接：https://pan.baidu.com/s/1gTttHuYcQgCZUIqmQBjIEQ 提取码：77rh\n\n目录结构如下\n\n\n\n# Jenkins创建任务\n\n新建流水线任务：imtest1\n\n\n\n构建触发器\n\n*/1 * * * *\n\n\n1\n\n\n\n\n流水线\n\n\n\n点击保存\n\n立即构建-查看日志，第一次会报错。\n\n\n\n# K8S创建Pod\n\n如图所示，创建服务名称imdemo\n\n\n\n点击保存\n\n\n\n创建完成\n\n\n\n查看CI/CD集成，复制到剪切板\n\n\n\n修改Jenkinsfile\n\n将复制的内容替换掉红色方块内容\n\n\n\n代码提交自动构建成功\n\n\n\n缺陷：后续需要修改的地方\n\nJenkinsfile文件中镜像版本每次提交需要修改变化，这4个地方\n\n\n\n修复缺陷，每次提交不用再修改上文4个标红的地方，使用$BUILD_ID代替\n\nJenkinsfile\n\npipeline {\n    agent any\n    stages {\n        stage('package') {\n            steps {\n                sh 'mvn clean package'\n            }\n        }\n        stage('buildDockerImages') {\n            steps {\n                sh 'docker login 192.168.213.204:20480 -u wuxiaoku -p Wuxiaoku123'\n                sh 'docker build --build-arg app=imdemo.jar -t 192.168.213.204:20480/kudemo/imdemo:$BUILD_ID .'\n                sh 'docker push 192.168.213.204:20480/kudemo/imdemo:$BUILD_ID'\n                sh 'docker rmi 192.168.213.204:20480/kudemo/imdemo:$BUILD_ID'\n            }\n        }\n        stage('deploymentK8S'){\n             steps {\n                 sh \"\"\"\n                     curl -X PATCH \\\n                     -H \"content-type: application/strategic-merge-patch+json\" \\\n                     -H \"Authorization:Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6Ikl1SGVIeVY3TEdEeFZ1b3Z4QzU5eEFmU2pacGtVWGlRTHpIQ3hBR3V5NTQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJrdWJvYXJkLXVzZXItdG9rZW4tcm1zcHoiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoia3Vib2FyZC11c2VyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOTE0ZWVlYjUtMmZiOS00YzZmLTg1YzUtZjYzOWFiODZlODJjIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmt1Ym9hcmQtdXNlciJ9.K7h7UrtDcsUNy2GYTznloOPZiWML0ll_zEhd1fUaY0pioTQ-MEPgDdp6rRnZmUm7ujNM_zsjzhS4KTbezSV-1Od0O-yhQrTyrqpvcXBi_EP77s9nDueZ_4fMx76Eh-cZfsOPQxYtG0sufqZmqcM1DWzNHDQcBMmFy1nhDbPncnmiirNrEBSFfrVb-ie6Z33Ip61tZjkYvrW6PeVHXEagTjrHnjmO9zw_L8to9V4pE990vcQrJE3f5pUN94k7JD5EhlJT0j1ljPrhRbpL8m-KjLpypKqfq9i7mj3vXE9_1mEVSi78nGuyR2cBaCLPoV7C3HRUN_dvCdR1tcI6nOLT2Q\" \\\n                     -d '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"imdemo\",\"image\":\"192.168.213.204:20480/kudemo/imdemo:$BUILD_ID\"}]}}}}' \\\n                     \"http://192.168.213.201:32567/k8s-api/apis/apps/v1/namespaces/imtest/deployments/web-imdemo\"\n                 \"\"\"\n             }\n        }\n    \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n参考博客部分内容：\nhttps://www.jianshu.com/p/fd9f1076ea2d\nhttps://www.cnblogs.com/xiao987334176/p/11434849.html",normalizedContent:"# 架构\n\n\n\n流程图\n\n\n\n\n# 部署k8s\n\n半离线部署\n\n系统版本：centos linux release 7.9.2009 (core)  \nkubernetes：1.17.1  \ndocker：18.06.1\n\n\n1\n2\n3\n\n\n\n# 部署包\n\n地址\n\n链接：https://pan.baidu.com/s/1pmisfbz48zqswmpgc43rqa \n提取码：xnh3 \n\n\n1\n2\n\n\n\n# 部署步骤\n\n# 安装master（201）\n\n在master节点上执行。\n上传k8sofflinesetup20210720.zip文件到root目录下\n\nscp k8sofflinesetup20210720.zip root@192.168.213.201:/root\n\n\n1\n\n\n解压到/root（解压路径不能修改）\n\nunzip k8sofflinesetup20210720.zip\n\n\n1\n\n\n设置参数并安装\n\n# master节点的主机名\nexport hostname=k8s-master\n# kubernetes apiserver的主机地址\nexport apiserver_name=apiserver.k8s.com\n# 集群中master节点的ip地址\nexport master_ip=192.168.213.201\n# pod 使用的网段\nexport pod_subnet=10.11.10.0/16\n\ncd /root/k8sofflinesetup\n./setup_master.sh\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n\n\n\n# 安装worker（202）\n\n在worker节点上执行。\n上传k8sofflinesetup20210720.zip文件到root目录下\n\nscp k8sofflinesetup20210720.zip root@192.168.213.202:/root\n\n\n1\n\n\n解压到/root（解压路径不能修改）\n\nunzip k8sofflinesetup20210720.zip\n\n获取加入master的参数（是在master节点上执行。）\n\n# 在 master 节点执行\nkubeadm token create --print-join-command\n\n# 得到token和cert，这两个参数在2个小时内可以重复使用，超过以后就得再次生成\nkubeadm join apiserver.k8s.com:6443 --token t8rn2w.zwfd42edrro02c50     --discovery-token-ca-cert-hash sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\n\n\n1\n2\n3\n4\n5\n\n\n\n\n设置参数并安装\n在worker节点上执行。\n\n# worker节点的主机名\nexport hostname=k8s-worker202\n# kubernetes apiserver的主机地址\nexport apiserver_name=apiserver.k8s.com\n# 集群中master节点的ip地址\nexport master_ip=192.168.213.201\n# 加入master的token\nexport token=t8rn2w.zwfd42edrro02c50\n# 加入master的证书\nexport export cert=sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\ncd /root/k8sofflinesetup\n./setup_worker.sh\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n# 安装worker（203）\n\n在worker节点上执行。\n上传k8sofflinesetup20210720.zip文件到root目录下\n\nscp k8sofflinesetup20210720.zip root@192.168.213.203:/root\n\n\n1\n\n\n解压到/root（解压路径不能修改）\n\nunzip k8sofflinesetup20210720.zip\n\n\n1\n\n\n设置参数并安装（token之类已获得，一样便可）\n在worker节点上执行。\n\n# worker节点的主机名\nexport hostname=k8s-worker203\n# kubernetes apiserver的主机地址\nexport apiserver_name=apiserver.k8s.com\n# 集群中master节点的ip地址\nexport master_ip=192.168.213.201\n# 加入master的token\nexport token=t8rn2w.zwfd42edrro02c50\n# 加入master的证书\nexport export cert=sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\ncd /root/k8sofflinesetup\n./setup_worker.sh\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n\n# 完成\n\n现在你可以在master节点，执行kubectl get nodes看到所有节点都在线了。\n\nkubectl get nodes\n\n\n1\n\n\n\n\n\n# 访问kuboard\n\nkuboard是一个非常方便的web管理界面，安装完以后可以通过http://任意节点ip:32567/访问。\n详细使用请参考 www.kuboard.cn\n\n\n\n\n# 获取登陆token\n\n在 master 节点上执行此命令\n\nkubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-user | awk '{print $1}') -o go-template='{{.data.token}}' | base64 -d\n\n\n1\n\n\n\n# 访问kubernetes dashboard\n\n\n# 部署nfs\n\n服务端ip：192.168.213.203\n\n服务点目录：/data/share\n\n\n# 部署\n\n因为每台k8s都可能需要使用到挂载，故每台都需要安装\n\n（192.168.213.201-203）\n\n安装命令：\n\nyum -y install nfs-utils  rpcbind \n\n# nfs 启动\n# 为rpcbind和nfs做开机启动\nsystemctl enable rpcbind.service\nsystemctl enable nfs-server.service\n\n#启动相关软件\nsystemctl start rpcbind.service\nsystemctl start nfs-server.service\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 203服务端配置\n\n创建共享文件夹\n\nmkdir -p /data/share\n\n\n1\n\n\nnfs 配置\n\nvi /etc/exports\n\n\n1\n\n\n修改配置文件，增加下面这一行数据，指定的ip地址为客户端的地址,地址可以是一个网段（如：192.168.0.0/24）\n\n/data/share 192.168.213.0/24(rw,no_root_squash,no_all_squash,sync)\n\n\n1\n\n\n加载配置文件，在相关软件启动后执行\n\nexportfs -arv\n\n\n\n\n# 201客户端测试\n\n创建共享文件夹\n\nmkdir -p /home/nfs_share\n\n\n1\n\n\n在你的 nfs 服务器设定妥当之后，我们可以在 client端先自我测试一下是否可以联机喔！利用 showmount 这个指令来查阅！\n\n如果报：clnt_create: rpc: port mapper failure - unable to receive: errno 113 (no route to host)，可能防火墙没关\n\nshowmount -e 192.168.213.203\n\n\n1\n\n\n挂载测试\n\nmount -t nfs 192.168.213.203:/data/share /home/nfs_share \n\n\n1\n\n\n查看挂载情况，可以使用这个命令df -th\n\ndf -th\n\n\n1\n\n\n卸载\n\numount /home/nfs_share\n\n\n1\n\n\n\n# 部署harbor\n\n部署包官方地址：https://github.com/goharbor/harbor/releases\n\n个人下载地址\n\n链接：https://pan.baidu.com/s/1kmepizetpsof82frdh3i9w \n提取码：a4nh \n\n\n1\n2\n\n\nip：192.168.213.204\n账号：admin\n密码：harbor12345\n访问地址：http://192.168.213.204:20480\n\n\n# 安装docker\n\n安装docker及docker-compose\n\n\n# 安装harbor\n\n# 上传\n\n上传harbor-offline-installer-v2.2.3.tgz文件到/data目录\n\n# 解压\n\ntar xzvf  harbor-offline-installer-v2.2.3.tgz\n\n\n1\n\n\n# 新建文件harbor.yml\n\n内容复制harbor.yml.tmpl\n修改 hostname: 192.168.213.204 为本机ip\n端口\n修改数据存储地址/data/harbor/data\n注释https\n\ncd /data/harbor\nvi harbor.yml\n\n\n1\n2\n\n\nharbor.yml\n\nhostname: 192.168.213.204 \n\nhttp:\n  port: 20480\n\nharbor_admin_password: harbor12345\n\ndatabase:\n  password: root123\n  max_idle_conns: 50\n  max_open_conns: 1000\n\ndata_volume: /data/harbor/data\n\ntrivy:\n  ignore_unfixed: false\n  skip_update: false\n  insecure: false\n\njobservice:\n  max_job_workers: 10\n\nnotification:\n  webhook_job_max_retry: 10\n\nchart:\n  absolute_url: disabled\n\nlog:\n  level: info\n  local:\n    rotate_count: 50\n    rotate_size: 200m\n    location: /var/log/harbor\n_version: 2.2.0\n\nproxy:\n  http_proxy:\n  https_proxy:\n  no_proxy:\n  components:\n    - core\n    - jobservice\n    - trivy\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n# 安装\n\n./install.sh\n\n# 启动成功\n\n查看一下\ndocker-compose ps\n\n\n# 部署gitlab\n\n使用docker-compose.yml便可\n\n页面访问地址：http://192.168.213.204:8929\n\nversion: '3'\nservices:\n  gitlab:\n    image: 'gitlab/gitlab-ce:14.0.6-ce.0'\n    container_name: gitlab\n    restart: always\n    environment:\n      gitlab_omnibus_config: |\n        external_url 'http://192.168.213.204:8929' #若有域名可以写域名\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n    ports:\n      - '8929:8929'\n      - '2224:22'\n    volumes:\n      #将相关配置映射到当前目录下的config目录\n      - './config:/etc/gitlab'\n      #将日志映射到当前目录下的logs目录\n      - './logs:/var/log/gitlab'\n      #将数据映射到当前目录下的data目录\n      - './data:/var/opt/gitlab'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n登录账号：root\n\n登录密码：在服务启动后，查看config/initial_root_password文件\n\n限制内存及时区\n\n    environment:\n      gitlab_omnibus_config: |\n        external_url 'http://106.55.159.125:8929' #若有域名可以写域名\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n        puma['per_worker_max_memory_mb'] = 1024 #更改内存限制设置\n        gitlab_rails['time_zone'] = 'asia/shanghai'\n        puma['worker_processes'] = 2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n参考文档：https://docs.gitlab.com/ee/administration/operations/puma.html\n\n\n# 内存问题\n\n如果使用阿里云或腾讯云只有2g内存时，可以增加swap内存\n\ndd if=/dev/zero of=/swapfile bs=1k count=4816000\nmkswap /swapfile\nswapon /swapfile\n\n\n1\n2\n3\n\n\n修改docker-compose,设置内存上限和swap内存\n\nversion: '2.3'\nservices:\n  gitlab:\n    image: 'gitlab/gitlab-ce:14.0.6-ce.0'\n    container_name: gitlab\n    restart: always\n    environment:\n      gitlab_omnibus_config: |\n        external_url 'http://192.168.213.204:8929' #若有域名可以写域名\n        gitlab_rails['gitlab_shell_ssh_port'] = 2224\n        puma['per_worker_max_memory_mb'] = 256 #更改内存限制设置\n        gitlab_rails['time_zone'] = 'asia/shanghai'\n        puma['worker_processes'] = 2\n    ports:\n      - '8929:8929'\n      - '2224:22'\n    volumes:\n      #将相关配置映射到当前目录下的config目录\n      - './config:/etc/gitlab'\n      #将日志映射到当前目录下的logs目录\n      - './logs:/var/log/gitlab'\n      #将数据映射到当前目录下的data目录\n      - './data:/var/opt/gitlab'\n    mem_limit: 1024m\n    memswap_limit: 4000m\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 部署jenkins\n\n由于原生镜像没有安装maven，故我们重新写一个dockerfile生成镜像\n\ndockerfile\n\nfrom jenkins/jenkins:2.303-centos7\nuser root\nrun yum install -y maven\n\n\n1\n2\n3\n\n\n执行命令生成 镜像\n\ncd 到dockerfiel文件目录下\n\ndocker build -t jenkins/jenkins:2.303-centos7-mvn ./\n\n\n1\n\n\n使用docker-compose.yml便可，docker目录挂载是为了在容器中使用docker命令\n\n访问地址：http://192.168.213.204:7080\n\nversion: '3'\nservices:\n  jenkins:\n    image: 'jenkins/jenkins:2.303-centos7-mvn'\n    container_name: jenkins\n    restart: always\n    user: root\n    ports:\n      - '7080:8080'\n      - '7050:50000'\n    volumes:\n      - './jenkins_home:/var/jenkins_home'\n      - '/var/run/docker.sock:/var/run/docker.sock'\n      - '/usr/bin/docker:/usr/bin/docker'\n    extra_hosts: \n      - \"apiserver.k8s.com:192.168.213.201\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n登录密码：在服务启动后，查看jenkins_home/secrets/initialadminpassword文件\n\n\n# docker配置harbor\n\n201到204服务器均修改\n\n\n# 修改docker.service\n\n修改/etc/systemd/system/docker.service\n\n将execstart=/usr/bin/dockerd改为\n\nexecstart=/usr/bin/dockerd --insecure-registry 192.168.213.204:20480\n\n\n1\n\n\n\n\n\n# 重启docker\n\nsystemctl daemon-reload\nsystemctl restart docker\n\n\n1\n2\n\n\n\n# 登录docker\n\ndocker login 192.168.213.204:20480 输入账号密码 账号：admin 密码：harbor12345\n\n\n# 上传镜像\n\n先在harbor中创建项目，例：imdemo\n\n将本地镜像打标签，并上传\n\n例：本地镜像原标签imtest:2.11.12\n\ndocker tag imtest:2.11.12 192.168.213.204:20480/imdemo/imtesth:2.11.12\n\n推送镜像\n\ndocker push 192.168.213.204:20480/imdemo/imtesth:2.11.12\n\n\n# 初始化jenkins\n\n使用管理员账号登录后，修改管理员信息：\n\n登录名：wuxiaoku 账号：admin 密码：wuxiaoku123\n\n\n# 安装推荐的插件及账号\n\n\n\n设置账号，更新密码,填写邮件地址，此处用户名为昵称，登录时使用admin\n\n\n\n\n# 安装其他插件\n\n打开  “系统管理” =》“管理插件” 然后安装\n\nkubernetes continuous deploy\nkubernetes\ngitlab hook \ngitlab\nbuild authorization token\nmaven repository server\nmaven integration\npublish over ssh\ndocker plugin\nssh pipeline steps\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n点击安装\n\n\n\n\n# 初始化harbor\n\n\n# 创建用户\n\n帐号：wuxiaoku 密码：wuxiaoku123\n\n\n\n\n# 创建项目\n\n\n\n\n# 增加成员\n\n点击进去项目\n\n\n\n\n# 初始化gitlab\n\n使用管理员账号登录后，新增账号：\n\n账号：wuxiaoku 密码：wuxiaoku123\n\n\n# 创建账号\n\n\n\n\n# 初始化密码\n\n在创建完成账号时，密码是不可填写的，在编辑中，初始化一下密码。\n\n\n\n\n# 登录\n\n先重置一下密码，然后保存登录到首页\n\n\n\n\n# 初始化项目\n\n# 创建空项目\n\n\n\n# 创建dev分支\n\n\n\n# 提交项目代码\n\n提交到dev分支\n\n代码：\n\n链接：https://pan.baidu.com/s/1b2-l8ahfda2qxbvjmwjdhq \n提取码：sxo4 \n\n\n1\n2\n\n\n\n\n\n# jenkins配置k8s\n\n\n# 配置插件\n\n在jenkins初始化中已经安装了k8s插件，即现在开始配置即可\n\n登录jenkins，在首页点击 manage jenkins --\x3e configure system\n\n将网页拉动到最底下，点击新增一个云，就会出现kubernetes\n\n\n\n\n\n点击配置\n\n\n\n填写kubernetes地址然后点击测试，会报错\n\n地址为：https://apiserver.k8s.com:6443\n\n\n\n报错信息：\n\n\n\n# k8s集群信息\n\n[root@k8s-master ~]# kubectl cluster-info\nkubernetes master is running at https://apiserver.k8s.com:6443\nkubedns is running at https://apiserver.k8s.com:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\nmetrics-server is running at https://apiserver.k8s.com:6443/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n\nto further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n\n根据以上的配置，可以看到，已经是启用https了，这里就涉及到了密钥的问题。\n\n\n# 创建admin证书\n\n# 安装证书工具\n\n安装cfssl\n此工具生成证书非常方便, pem证书与crt证书,编码一致可直接使用\n\n登录k8s master节点执行\n\nwget https://pkg.cfssl.org/r1.2/cfssl_linux-amd64\nchmod +x cfssl_linux-amd64\nmv cfssl_linux-amd64 /usr/local/bin/cfssl\n\nwget https://pkg.cfssl.org/r1.2/cfssljson_linux-amd64\nchmod +x cfssljson_linux-amd64\nmv cfssljson_linux-amd64 /usr/local/bin/cfssljson\n\nwget https://pkg.cfssl.org/r1.2/cfssl-certinfo_linux-amd64\nchmod +x cfssl-certinfo_linux-amd64\nmv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n# 准备证书签名请求\n\nvi admin-csr.json\n\n内容如下\n\n{\n  \"cn\": \"admin\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"c\": \"cn\",\n      \"st\": \"hangzhou\",\n      \"l\": \"xs\",\n      \"o\": \"system:masters\",\n      \"ou\": \"system\"\n    }\n  ]\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n证书请求中的o 指定该证书的 group 为 system:masters\n\n而 rbac 预定义的 clusterrolebinding 将 group system:masters 与 clusterrole cluster-admin 绑定，这就赋予了该证书具有所有集群权限 。\n\n# 创建证书和私钥\n\ncfssl gencert -ca=/etc/kubernetes/pki/ca.crt -ca-key=/etc/kubernetes/pki/ca.key --profile=kubernetes admin-csr.json | cfssljson -bare admin\n\n\n1\n\n\n最终生成以下3个文件：\n\nadmin.csr\nadmin-key.pem\nadmin.pem\n\n\n1\n2\n3\n\n\n# 配置证书\n\n# 生成pkc格式证书\n\n我们可以通过openssl来转换成pkc格式\n\nopenssl pkcs12 -export -out ./jenkins-admin.pfx -inkey ./admin-key.pem -in ./admin.pem -passout pass:secret\n\n\n1\n\n\n将jenkins-admin.pfx 下载至桌面\n\n\n# 配置jenkins认证\n\n# kubernetes 服务证书 key\n\n使用以下命令查看\n\nroot@k8s-master:~# cat /etc/kubernetes/pki/ca.crt\n\n\n1\n\n\n将证书内容填写，点击凭据后面的添加，点击jenkins\n\n\n\n得到jenkins-admin.pfk文件后，点击jenkins配置credentials后面的add，配置如下\n\n上传证书\n\n\n\n选择文件 jenkins-admin.pfk\n\n输入密码 secret，后面的内容可以不填写，点击添加。\n\n\n\n选择 凭据，点击连接测试。\n\n出现connected to kubernetes v1.17.1 表示连接成功。\n\n\n\n点击保存\n\n\n\n\n# gitlab+jenkins配置\n\n\n# gitlab与jenkins配置\n\n# 设置jenkins 用户ssh秘钥\n\n使用root登录gitlab，点击用户名称\n\n\n\n点击 impersonate ，表示冒充jenkins 用户\n\n\n\n点击编辑\n\n\n\n点击 ssh keys\n\n\n\n登录到jenkins服务器（204），生成秘钥\n\nssh-keygen -t rsa -p \"\" -f ~/.ssh/id_rsa\n\n\n1\n\n\n查看公钥\n\ncat /root/.ssh/id_rsa.pub\n\n\n1\n\n\n将公钥内容复制到网页，点击添加秘钥\n\n\n\n# 创建access tokens\n\n点击左侧的access tokens，输入用户 wuxiaoku，勾选权限，点击创建\n\n\n\n复制token，待会 jenkins 设置时，会用到\n\nmxmnxpwmlagip9zys5dp\n\n\n1\n\n\n\n\n点击进入你的项目\n\n\n\n点击项目\n\n\n\n点击设置-成员\n\n\n\n把管理员也添加进去，这样管理员也有权限了。如果项目一开始是管理员创建，这时就选择子用户\n\n\n\n\n# jenkins配置git/gitlab\n\n# jenkins配置gitlab\n\n点击 系统管理--\x3e 系统配置 --\x3e配置 --\x3egitlab\n\n\n\nconnection name ”随便填，“git host url”填gitlab的访问地址，然后点“add”——“jenkins”，如下所示\n\n\n\n选择gitlalb api，输入 jenkins 用户创建的token\n\nmxmnxpwmlagip9zys5dp\n\n\n1\n\n\n\n\n选择 gitlab api token，点击测试连接，出现 success，表示成功\n\n\n\n点击最下面的保存\n\n\n\n# jenkins配置git\n\n点击 manage jenkins --\x3e configure system --\x3e配置 --\x3egit plugin\n\n\n\n设置git插件的全局配置，然后点击最下面的保存。\n\n\n\n\n# 创建一个jenkins job\n\n此处创建用于测试是否正常使用\n\n点击 新建item，item name”可以随便起，然后点击“构建一个自由风格的软件项目”，点击ok\n\n\n\n# 配置job的源码管理\n\n选择“源码管理”，选择“git”,然后去gitlab中复制项目地址，粘贴到“repository url”,然后点击“credentials”后面的“add”按钮\n\n\n\n类型，选择 ssh username with private key\n\nusername 填 root\n\nprivatekey 选择enter directly，点击add\n\n\n\n登录到jenkins 服务器，查看私钥\n\ncat /root/.ssh/id_rsa\n\n\n1\n\n\n将内容复制到网页上面，点击添加\n\n\n\n在“credentials”里选择我们刚刚创建的认证方式：root\n\n\n\n如果没报错，说明成功了，点击页面底部的“apply”。如果出错了，会在“repository url”和“credentials”之间显示红色的错误信息。\n\njenkins job默认对master分支进行构建，你也可以自定义分支。这要求你的gitlab代码仓库中要存在这个分支，一般来说，就是要向代码仓库提交一次更改，请 自行完成（gitlab项目刚创建时是空的，一个分支也没有，这样的话，自动构建时会出错）\n\n我们上文创建了dev分钟，故选择dev\n\n\n\n# 配置job的构建触发器\n\n选择“构建触发器”，勾选“pull scm（轮询 scm）”，这个选项会每隔一段时间检查一下gitlab仓库中代码是否有更新，有的话就执行构建操作。日程表如何设置，在这个输入框下面有说明\n\n\n\n扩展阅读：\n\n常见构建触发器：\n\n * build after other projects are built 当另一个构建任务完成之后触发\n * build periodically 周期性的触发\n * build when a change is pushed to gitlab. gitlab ci service url: http://191.8.2.112:12000/project/test-go-dev 当代码有更新的时候触发，通过gitlab ci\n * github hook trigger for gitscm polling 通过github钩子触发\n * poll scm 定期检查代码有无更新，有更新时触发\n\n这只是个人理解，具体怎么样大家可以试试，poll scm方式我是试过的。\n\n# 配置job的构建脚本\n\n在build栏目里，选择“jenkins execute shell”,然后输入你项目的构建命令（这依赖于你的项目，如maven的maven build，gulp的gulp xxx 等等）\n\n\n\n这里我输入一段测试命令，表示将git项目的代码复制到/tmp/test\n\n\\cp -r $workspace /tmp/test\n\n\n1\n\n\n点击 可用的环境变量列表，就可以看到很多变量\n\n\n\n其中 workspace 表示，下载git项目后的路径。\n\n由于git项目为itest，因此路径为：/var/lib/jenkins/workspace/itest\n\n点击保存\n\n点击 立即构建，点击下面的构建过程\n\n\n\n点击控制台输出，就可以看到完整的cp命令\n\n\n\n\n# jenkins配置maven\n\n我们在生成镜像时已经安装了maven，故这边只要配置即可\n\n\n# 查看java和maven安装地址\n\n登录jenkins服务器204\n\ndocker exec -it jenkins /bin/sh\nmvn -version\n\napache maven 3.0.5 (red hat 3.0.5-17)\nmaven home: /usr/share/maven\njava version: 1.8.0\\_292, vendor: adoptopenjdk\njava home: /usr/lib/jvm/adoptopenjdk-8-hotspot/jre\ndefault locale: en\\_us, platform encoding: ansi\\_x3.4-1968\nos name: \"linux\", version: \"3.10.0-1160.el7.x86\\_64\", arch: \"amd64\", family: \"unix\"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n\n\n\n# 新增jdk\n\n登录到jenkins管理后台，点击 manage jenkins --\x3e global tool configuration\n\n\n\n点击 新增jdk\n\n\n\n自动安装 前面的勾选，去掉，输入别名和java_home\n\n\n\n注意：java_home的输入框下面，不要有警告或者错误信息，否则就是路径不正确。\n\n使用 mvn -version 命令时，就已经打印了java home变量，注意：去除最后的jre\n\n\n\n\n# 新增maven\n\n点击新增maven\n\n\n\n同样去除自动安装，填写别名\n\n\n\n点击保存\n\n\n# jenkins使用docker命令\n\n此处还是为测试任务使用，加深对jenkins的了解\n\n创建流水线任务\n\n\n\n输入pipeline脚本，点击保存\n\npipeline {\n    agent any\n    stages {\n        stage('test') {\n            steps {\n                sh 'docker images'\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n立即构建，查看控制台\n\n\n\n\n# jenkins+harbor+gitlab+k8s\n\n\n# 方式一\n\n缺点：对k8s脚本generateyaml.sh创建模板较死板，我是随便摸索写的测试\n个人喜欢方式二\n\n# k8s创建命名空间\n\n登录kuboard创建命名空间：imtest\n\n\n\n# k8s创建harbor密码信息\n\n输入harbor之前创建的账号密码\n\n\n\n# 工程新建脚本\n\n将脚本放在工程根目录下\n\n脚本：\n\n链接：https://pan.baidu.com/s/1z73e8sbq9tqyr2sewifezg 提取码：pkrg\n\n目录结构如下\n\n\n\n# jenkins创建任务\n\n新建流水线任务：imtest1\n\n\n\n构建触发器\n\n*/1 * * * *\n\n\n\n流水线\n\n\n\n点击保存\n\n立即构建-查看日志，第一次会报错。\n\n\n\n进入201服务器，执行命令\n\nkubectl apply -f /root/data/app/imdemo.yaml\n\n\n\njenkins再次构建就成功了，后续代码提交自动构建\n\n\n\n\n# 方式二\n\n缺点：需要先去创建一次pod\n优点：自由配置pod\n\n# k8s创建命名空间\n\n登录kuboard创建命名空间：imtest\n\n\n\n# k8s创建harbor密码信息\n\n输入harbor之前创建的账号密码\n\n\n\n地址要用http://ip:端口\n\n\n\n# 工程新建脚本\n\n地址：\n\n链接：https://pan.baidu.com/s/1gttthuycqgczuiqmqbjieq 提取码：77rh\n\n目录结构如下\n\n\n\n# jenkins创建任务\n\n新建流水线任务：imtest1\n\n\n\n构建触发器\n\n*/1 * * * *\n\n\n1\n\n\n\n\n流水线\n\n\n\n点击保存\n\n立即构建-查看日志，第一次会报错。\n\n\n\n# k8s创建pod\n\n如图所示，创建服务名称imdemo\n\n\n\n点击保存\n\n\n\n创建完成\n\n\n\n查看ci/cd集成，复制到剪切板\n\n\n\n修改jenkinsfile\n\n将复制的内容替换掉红色方块内容\n\n\n\n代码提交自动构建成功\n\n\n\n缺陷：后续需要修改的地方\n\njenkinsfile文件中镜像版本每次提交需要修改变化，这4个地方\n\n\n\n修复缺陷，每次提交不用再修改上文4个标红的地方，使用$build_id代替\n\njenkinsfile\n\npipeline {\n    agent any\n    stages {\n        stage('package') {\n            steps {\n                sh 'mvn clean package'\n            }\n        }\n        stage('builddockerimages') {\n            steps {\n                sh 'docker login 192.168.213.204:20480 -u wuxiaoku -p wuxiaoku123'\n                sh 'docker build --build-arg app=imdemo.jar -t 192.168.213.204:20480/kudemo/imdemo:$build_id .'\n                sh 'docker push 192.168.213.204:20480/kudemo/imdemo:$build_id'\n                sh 'docker rmi 192.168.213.204:20480/kudemo/imdemo:$build_id'\n            }\n        }\n        stage('deploymentk8s'){\n             steps {\n                 sh \"\"\"\n                     curl -x patch \\\n                     -h \"content-type: application/strategic-merge-patch+json\" \\\n                     -h \"authorization:bearer eyjhbgcioijsuzi1niisimtpzci6ikl1sgvievy3tedeefz1b3z4qzu5eefmu2pacgtvwglrthpiq3hbr3v5ntqifq.eyjpc3mioijrdwjlcm5ldgvzl3nlcnzpy2vhy2nvdw50iiwia3vizxjuzxrlcy5pby9zzxj2awnlywnjb3vudc9uyw1lc3bhy2uioijrdwjllxn5c3rlbsisimt1ymvybmv0zxmuaw8vc2vydmljzwfjy291bnqvc2vjcmv0lm5hbwuioijrdwjvyxjklxvzzxitdg9rzw4tcm1zchoilcjrdwjlcm5ldgvzlmlvl3nlcnzpy2vhy2nvdw50l3nlcnzpy2utywnjb3vudc5uyw1lijoia3vib2fyzc11c2vyiiwia3vizxjuzxrlcy5pby9zzxj2awnlywnjb3vudc9zzxj2awnllwfjy291bnqudwlkijoiote0zwvlyjutmmzios00yzzmltg1yzutzjyzowfiodzlodjjiiwic3viijoic3lzdgvtonnlcnzpy2vhy2nvdw50omt1ymutc3lzdgvtomt1ym9hcmqtdxnlcij9.k7h7urtdcsuny2gytznloopziwml0ll_zehd1fuay0piotq-mepgddp6rrnzmum7ujnm_zsjzhs4ktbezsv-1od0o-yhqrtyrqpvcxbi_ep77s9nduez_4fmx76eh-czfsopqxytg0sufqzmqcm1dwznhdqcbmmfy1nhdbpncnmiirnrebsffrvb-ie6z33ip61tzjkyvrw6pevhxeagtjrhnjmo9zw_l8to9v4pe990vcqrje3f5pun94k7jd5ehljt0j1ljprhrbpl8m-kjlpypkqfq9i7mj3vxe9_1mevsi78nguyr2cbaclpov7c3hrun_dvcdr1tci6nolt2q\" \\\n                     -d '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"imdemo\",\"image\":\"192.168.213.204:20480/kudemo/imdemo:$build_id\"}]}}}}' \\\n                     \"http://192.168.213.201:32567/k8s-api/apis/apps/v1/namespaces/imtest/deployments/web-imdemo\"\n                 \"\"\"\n             }\n        }\n    \n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n参考博客部分内容：\nhttps://www.jianshu.com/p/fd9f1076ea2d\nhttps://www.cnblogs.com/xiao987334176/p/11434849.html",charsets:{cjk:!0},lastUpdated:"2023/03/14, 05:49:29",lastUpdatedTimestamp:1678772969e3},{title:"K3S-在线安装",frontmatter:{title:"K3S-在线安装",date:"2023-03-13T15:52:27.000Z",permalink:"/pages/04f4f5/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/09.K3S-%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85.html",relativePath:"03.Deploy/09.K3S-在线安装.md",key:"v-f7236c84",path:"/pages/04f4f5/",headers:[{level:2,title:"服务器",slug:"服务器",normalizedTitle:"服务器",charIndex:43},{level:2,title:"安装-K3S",slug:"安装-k3s",normalizedTitle:"安装-k3s",charIndex:130},{level:3,title:"安装docker",slug:"安装docker",normalizedTitle:"安装docker",charIndex:141},{level:3,title:"Server安装",slug:"server安装",normalizedTitle:"server安装",charIndex:454},{level:3,title:"agent安装",slug:"agent安装",normalizedTitle:"agent安装",charIndex:624},{level:3,title:"查看状态",slug:"查看状态",normalizedTitle:"查看状态",charIndex:807},{level:3,title:"查看节点",slug:"查看节点",normalizedTitle:"查看节点",charIndex:838},{level:2,title:"安装Rancher",slug:"安装rancher",normalizedTitle:"安装rancher",charIndex:868},{level:3,title:"安装docker",slug:"安装docker-2",normalizedTitle:"安装docker",charIndex:141},{level:3,title:"放开防火墙",slug:"放开防火墙",normalizedTitle:"放开防火墙",charIndex:901},{level:3,title:"重启docker",slug:"重启docker",normalizedTitle:"重启docker",charIndex:1658},{level:3,title:"使用docker启动",slug:"使用docker启动",normalizedTitle:"使用docker启动",charIndex:1677},{level:3,title:"浏览器访问",slug:"浏览器访问",normalizedTitle:"浏览器访问",charIndex:1884},{level:3,title:"与k3s关联",slug:"与k3s关联",normalizedTitle:"与k3s关联",charIndex:1942}],headersStr:"服务器 安装-K3S 安装docker Server安装 agent安装 查看状态 查看节点 安装Rancher 安装docker 放开防火墙 重启docker 使用docker启动 浏览器访问 与k3s关联",content:'官方GitHub：https://github.com/k3s-io/k3s\n\n\n# 服务器\n\n192.168.213.201：Server\n192.168.213.202：Agent\n192.168.213.203：Rancher\n\n\n1\n2\n3\n\n\n\n# 安装-K3S\n\n\n# 安装docker\n\nyum remove -y docker docker-io docker-selinux python-docer-py\nyum -y install yum-utils\nyum-config-manager   --add-repo   http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nyum -y install docker-ce \nsystemctl start docker\nsystemctl enable docker\nsystemctl status docker\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# Server安装\n\nhostnamectl set-hostname master-201\ncurl -sfL https://get.k3s.io | sh -s - server --docker\n\n\n1\n2\n\n\n查看token\n\ncat /var/lib/rancher/k3s/server/node-token\n\n\n1\n\n\n\n# agent安装\n\nhostnamectl set-hostname agent-202\ncurl -sfL https://get.k3s.io | INSTALL_K3S_MIRROR=cn K3S_URL=https://${server_ip}:6443 K3S_TOKEN=${node_token} sh -s - --docker\n\n\n1\n2\n\n\n\n# 查看状态\n\nsystemctl status k3s\n\n\n# 查看节点\n\nkubectl get nodes\n\n\n\n\n# 安装Rancher\n\n\n# 安装docker\n\n不再描述\n\n\n# 放开防火墙\n\nsystemctl stop firewalld\nsystemctl disable firewalld\nsetenforce 0\nsed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\nsed -i "s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"  /etc/sysctl.conf\necho "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 重启docker\n\n不再描述\n\n\n# 使用docker启动\n\ndocker run -d -v /data/docker/rancher-server/var/lib/rancher/:/var/lib/rancher/ --restart=unless-stopped --privileged --name rancher-server -p 8082:80 -p 8443:443 rancher/rancher:stable\n\n\n1\n\n\n\n# 浏览器访问\n\n192.168.213.203:8082\n\n设置密码，点击继续\n\n\n\n填写可以访问的地址\n\n\n\n\n# 与k3s关联\n\n导入集群\n\n\n\n填写\n\n\n\n在k3s server 上请求 rancher 服务器地址\n\n\n\n复制命令执行\n\n\n\n查看界面\n\n出现这个提示说明Rancher已经收到K3S的注册请求，正在完成K3S集群的注册工作，再等数十秒种的时间即可完成K3S集群的导入工作：等待中\n\n\n\n完成\n\n',normalizedContent:'官方github：https://github.com/k3s-io/k3s\n\n\n# 服务器\n\n192.168.213.201：server\n192.168.213.202：agent\n192.168.213.203：rancher\n\n\n1\n2\n3\n\n\n\n# 安装-k3s\n\n\n# 安装docker\n\nyum remove -y docker docker-io docker-selinux python-docer-py\nyum -y install yum-utils\nyum-config-manager   --add-repo   http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\nyum -y install docker-ce \nsystemctl start docker\nsystemctl enable docker\nsystemctl status docker\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# server安装\n\nhostnamectl set-hostname master-201\ncurl -sfl https://get.k3s.io | sh -s - server --docker\n\n\n1\n2\n\n\n查看token\n\ncat /var/lib/rancher/k3s/server/node-token\n\n\n1\n\n\n\n# agent安装\n\nhostnamectl set-hostname agent-202\ncurl -sfl https://get.k3s.io | install_k3s_mirror=cn k3s_url=https://${server_ip}:6443 k3s_token=${node_token} sh -s - --docker\n\n\n1\n2\n\n\n\n# 查看状态\n\nsystemctl status k3s\n\n\n# 查看节点\n\nkubectl get nodes\n\n\n\n\n# 安装rancher\n\n\n# 安装docker\n\n不再描述\n\n\n# 放开防火墙\n\nsystemctl stop firewalld\nsystemctl disable firewalld\nsetenforce 0\nsed -i "s/selinux=enforcing/selinux=disabled/g" /etc/selinux/config\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\nsed -i "s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"  /etc/sysctl.conf\necho "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 重启docker\n\n不再描述\n\n\n# 使用docker启动\n\ndocker run -d -v /data/docker/rancher-server/var/lib/rancher/:/var/lib/rancher/ --restart=unless-stopped --privileged --name rancher-server -p 8082:80 -p 8443:443 rancher/rancher:stable\n\n\n1\n\n\n\n# 浏览器访问\n\n192.168.213.203:8082\n\n设置密码，点击继续\n\n\n\n填写可以访问的地址\n\n\n\n\n# 与k3s关联\n\n导入集群\n\n\n\n填写\n\n\n\n在k3s server 上请求 rancher 服务器地址\n\n\n\n复制命令执行\n\n\n\n查看界面\n\n出现这个提示说明rancher已经收到k3s的注册请求，正在完成k3s集群的注册工作，再等数十秒种的时间即可完成k3s集群的导入工作：等待中\n\n\n\n完成\n\n',charsets:{cjk:!0},lastUpdated:"2023/03/14, 05:49:29",lastUpdatedTimestamp:1678772969e3},{title:"K8S-在线安装",frontmatter:{title:"K8S-在线安装",date:"2023-03-13T15:38:08.000Z",permalink:"/pages/c5c5bb/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/08.K8S-%E5%9C%A8%E7%BA%BF%E5%AE%89%E8%A3%85%20.html",relativePath:"03.Deploy/08.K8S-在线安装 .md",key:"v-3b9e96dd",path:"/pages/c5c5bb/",headers:[{level:2,title:"文章说明",slug:"文章说明",normalizedTitle:"文章说明",charIndex:2},{level:2,title:"字段说明",slug:"字段说明",normalizedTitle:"字段说明",charIndex:97},{level:2,title:"安装Master（201）",slug:"安装master-201",normalizedTitle:"安装master（201）",charIndex:293},{level:3,title:"设置hostname",slug:"设置hostname",normalizedTitle:"设置hostname",charIndex:311},{level:3,title:"安装Docker",slug:"安装docker",normalizedTitle:"安装docker",charIndex:421},{level:3,title:"关闭防火墙",slug:"关闭防火墙",normalizedTitle:"关闭防火墙",charIndex:434},{level:3,title:"安装K8S",slug:"安装k8s",normalizedTitle:"安装k8s",charIndex:1298},{level:3,title:"配置Master",slug:"配置master",normalizedTitle:"配置master",charIndex:1961},{level:4,title:"创建目录",slug:"创建目录",normalizedTitle:"创建目录",charIndex:1973},{level:4,title:"生成kubeadm-config.yaml",slug:"生成kubeadm-config-yaml",normalizedTitle:"生成kubeadm-config.yaml",charIndex:2009},{level:4,title:"下载镜像",slug:"下载镜像",normalizedTitle:"下载镜像",charIndex:2434},{level:4,title:"更换镜像名称",slug:"更换镜像名称",normalizedTitle:"更换镜像名称",charIndex:3531},{level:4,title:"删除旧标签",slug:"删除旧标签",normalizedTitle:"删除旧标签",charIndex:4345},{level:4,title:"初始化kubeadm",slug:"初始化kubeadm",normalizedTitle:"初始化kubeadm",charIndex:4947},{level:4,title:"配置 kubectl",slug:"配置-kubectl",normalizedTitle:"配置 kubectl",charIndex:5187},{level:4,title:"安装 calico 网络插件",slug:"安装-calico-网络插件",normalizedTitle:"安装 calico 网络插件",charIndex:5296},{level:4,title:"安装 nginx ingress controll",slug:"安装-nginx-ingress-controll",normalizedTitle:"安装 nginx ingress controll",charIndex:29118},{level:4,title:"安装 Dashboard",slug:"安装-dashboard",normalizedTitle:"安装 dashboard",charIndex:36958},{level:4,title:"安装 Kuboard",slug:"安装-kuboard",normalizedTitle:"安装 kuboard",charIndex:45729},{level:2,title:"安装Worker（202）",slug:"安装worker-202",normalizedTitle:"安装worker（202）",charIndex:53207},{level:3,title:"设置hostname",slug:"设置hostname-2",normalizedTitle:"设置hostname",charIndex:311},{level:3,title:"安装Docker",slug:"安装docker-2",normalizedTitle:"安装docker",charIndex:421},{level:3,title:"关闭防火墙",slug:"关闭防火墙-2",normalizedTitle:"关闭防火墙",charIndex:434},{level:3,title:"安装K8S",slug:"安装k8s-2",normalizedTitle:"安装k8s",charIndex:1298},{level:3,title:"配置Worker",slug:"配置worker",normalizedTitle:"配置worker",charIndex:54881},{level:4,title:"下载镜像",slug:"下载镜像-2",normalizedTitle:"下载镜像",charIndex:2434},{level:4,title:"更换镜像名称",slug:"更换镜像名称-2",normalizedTitle:"更换镜像名称",charIndex:3531},{level:4,title:"删除旧标签",slug:"删除旧标签-2",normalizedTitle:"删除旧标签",charIndex:4345},{level:4,title:"配置Host",slug:"配置host",normalizedTitle:"配置host",charIndex:57406},{level:4,title:"获取参数",slug:"获取参数",normalizedTitle:"获取参数",charIndex:57479},{level:4,title:"设置参数并加入",slug:"设置参数并加入",normalizedTitle:"设置参数并加入",charIndex:57810},{level:2,title:"完成",slug:"完成",normalizedTitle:"完成",charIndex:58027},{level:3,title:"访问Kuboard",slug:"访问kuboard",normalizedTitle:"访问kuboard",charIndex:58102},{level:3,title:"获取登陆Token",slug:"获取登陆token",normalizedTitle:"获取登陆token",charIndex:58197},{level:3,title:"登录后",slug:"登录后",normalizedTitle:"登录后",charIndex:58391}],headersStr:"文章说明 字段说明 安装Master（201） 设置hostname 安装Docker 关闭防火墙 安装K8S 配置Master 创建目录 生成kubeadm-config.yaml 下载镜像 更换镜像名称 删除旧标签 初始化kubeadm 配置 kubectl 安装 calico 网络插件 安装 nginx ingress controll 安装 Dashboard 安装 Kuboard 安装Worker（202） 设置hostname 安装Docker 关闭防火墙 安装K8S 配置Worker 下载镜像 更换镜像名称 删除旧标签 配置Host 获取参数 设置参数并加入 完成 访问Kuboard 获取登陆Token 登录后",content:'# 文章说明\n\n本文章与【K8S-CICD】这篇文章部署方式一样\n上篇文章采用离线部署方式，基于网上提供脚本进行优化升级\n本篇文章采用在线安装方式，进一步对K8S部署方式有更深一层了解\n\n\n# 字段说明\n\n# master节点的主机名\nk8s-master\n# worker节点的主机名\nk8s-worker202\n# kubernetes apiserver的主机地址\napiserver.k8s.com\n# 集群中master节点的ip地址\n192.168.213.201\n# Pod 使用的网段\n10.11.10.0/16\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 安装Master（201）\n\n\n# 设置hostname\n\n执行命令\n\nhostnamectl set-hostname k8s-master\necho "127.0.0.1   k8s-master" >> /etc/hosts \n\n\n1\n2\n\n\n\n# 安装Docker\n\n\n# 关闭防火墙\n\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭 SeLinux\nsetenforce 0\nsed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config\n\n# 关闭 swap\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\n\n# 修改 /etc/sysctl.conf\n# 如果有配置，则修改\nsed -i "s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"  /etc/sysctl.conf\n# 可能没有，追加\necho "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf\n# 执行命令以应用\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 安装K8S\n\n设置K8S yum源\n\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n清理yum源\n\nyum clean all\nyum -y makecache\n\n\n1\n2\n\n\n执行安装命令\n\n# 卸载旧版本\nyum remove -y kubelet kubeadm kubectl\n\n# 安装kubelet、kubeadm、kubectl\nyum install -y kubelet-1.17.1 kubeadm-1.17.1 kubectl-1.17.1\n\n\n1\n2\n3\n4\n5\n\n\n启动\n\nsystemctl enable kubelet && systemctl start kubelet\n\n\n1\n\n\n查看版本\n\nkubectl version\n\n\n1\n\n\n\n# 配置Master\n\n# 创建目录\n\nmkdir -p /data/k8s/scripts\n\n# 生成kubeadm-config.yaml\n\n查看完整配置选项 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2\n\ncat <<EOF > /data/k8s/scripts/kubeadm-config.yaml\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\nkubernetesVersion: v1.17.1\ncontrolPlaneEndpoint: "apiserver.k8s.com:6443"\nnetworking:\n  serviceSubnet: "10.96.0.0/16"\n  podSubnet: "10.11.10.0/16"\n  dnsDomain: "cluster.local"\nEOF\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 下载镜像\n\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5\n\ndocker pull calico/cni:v3.10.3\ndocker pull calico/pod2daemon-flexvol:v3.10.3\ndocker pull calico/node:v3.10.3\ndocker pull calico/kube-controllers:v3.10.3\ndocker pull quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.29.0\ndocker pull  kubernetesui/dashboard:v2.0.0-rc5\ndocker pull  kubernetesui/metrics-scraper:v1.0.3\ndocker pull  eipwork/kuboard:latest\ndocker pull  registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n# 更换镜像名称\n\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1 k8s.gcr.io/kube-apiserver:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1 k8s.gcr.io/kube-controller-manager:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1 k8s.gcr.io/kube-scheduler:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1 k8s.gcr.io/kube-proxy:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5 k8s.gcr.io/coredns:1.6.5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 删除旧标签\n\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 初始化kubeadm\n\necho "192.168.213.201   apiserver.k8s.com" >> /etc/hosts\n# 根据您服务器网速的情况，您需要等候 3 - 10 分钟\ncd /data/k8s/scripts\nkubeadm init --config=kubeadm-config.yaml --upload-certs\n\n\n1\n2\n3\n4\n\n\n执行结果\n\n\n\n若需要回滚初始化的话，执行以下命令即可\n\nkubeadm reset\n\n\n1\n\n\n# 配置 kubectl\n\n创建目录\n\nmkdir /root/.kube/\n\n\n1\n\n\n配置文件\n\ncp -i /etc/kubernetes/admin.conf /root/.kube/config\n\n\n1\n\n\n# 安装 calico 网络插件\n\n创建文件\n\ncd /data/k8s/scripts/ vi calico.yaml\n\ncalico.yaml\n\n---\n# Source: calico/templates/calico-config.yaml\n# This ConfigMap is used to configure a self-hosted Calico installation.\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: calico-config\n  namespace: kube-system\ndata:\n  # Typha is disabled.\n  typha_service_name: "none"\n  # Configure the backend to use.\n  calico_backend: "bird"\n\n  # Configure the MTU to use\n  veth_mtu: "1440"\n\n  # The CNI network configuration to install on each node.  The special\n  # values in this config will be automatically populated.\n  cni_network_config: |-\n    {\n      "name": "k8s-pod-network",\n      "cniVersion": "0.3.1",\n      "plugins": [\n        {\n          "type": "calico",\n          "log_level": "info",\n          "datastore_type": "kubernetes",\n          "nodename": "__KUBERNETES_NODE_NAME__",\n          "mtu": __CNI_MTU__,\n          "ipam": {\n              "type": "calico-ipam"\n          },\n          "policy": {\n              "type": "k8s"\n          },\n          "kubernetes": {\n              "kubeconfig": "__KUBECONFIG_FILEPATH__"\n          }\n        },\n        {\n          "type": "portmap",\n          "snat": true,\n          "capabilities": {"portMappings": true}\n        }\n      ]\n    }\n\n---\n# Source: calico/templates/kdd-crds.yaml\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: felixconfigurations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: FelixConfiguration\n    plural: felixconfigurations\n    singular: felixconfiguration\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamblocks.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMBlock\n    plural: ipamblocks\n    singular: ipamblock\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: blockaffinities.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BlockAffinity\n    plural: blockaffinities\n    singular: blockaffinity\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamhandles.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMHandle\n    plural: ipamhandles\n    singular: ipamhandle\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ipamconfigs.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPAMConfig\n    plural: ipamconfigs\n    singular: ipamconfig\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: bgppeers.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BGPPeer\n    plural: bgppeers\n    singular: bgppeer\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: bgpconfigurations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: BGPConfiguration\n    plural: bgpconfigurations\n    singular: bgpconfiguration\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: ippools.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: IPPool\n    plural: ippools\n    singular: ippool\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: hostendpoints.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: HostEndpoint\n    plural: hostendpoints\n    singular: hostendpoint\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: clusterinformations.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: ClusterInformation\n    plural: clusterinformations\n    singular: clusterinformation\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: globalnetworkpolicies.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: GlobalNetworkPolicy\n    plural: globalnetworkpolicies\n    singular: globalnetworkpolicy\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: globalnetworksets.crd.projectcalico.org\nspec:\n  scope: Cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: GlobalNetworkSet\n    plural: globalnetworksets\n    singular: globalnetworkset\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: networkpolicies.crd.projectcalico.org\nspec:\n  scope: Namespaced\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: NetworkPolicy\n    plural: networkpolicies\n    singular: networkpolicy\n\n---\n\napiVersion: apiextensions.k8s.io/v1beta1\nkind: CustomResourceDefinition\nmetadata:\n  name: networksets.crd.projectcalico.org\nspec:\n  scope: Namespaced\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: NetworkSet\n    plural: networksets\n    singular: networkset\n---\n# Source: calico/templates/rbac.yaml\n\n# Include a clusterrole for the kube-controllers component,\n# and bind it to the calico-kube-controllers serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-kube-controllers\nrules:\n  # Nodes are watched to monitor for deletions.\n  - apiGroups: [""]\n    resources:\n      - nodes\n    verbs:\n      - watch\n      - list\n      - get\n  # Pods are queried to check for existence.\n  - apiGroups: [""]\n    resources:\n      - pods\n    verbs:\n      - get\n  # IPAM resources are manipulated when nodes are deleted.\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - ippools\n    verbs:\n      - list\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n      - get\n      - list\n      - create\n      - update\n      - delete\n  # Needs access to update clusterinformations.\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - clusterinformations\n    verbs:\n      - get\n      - create\n      - update\n---\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-kube-controllers\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-kube-controllers\nsubjects:\n- kind: ServiceAccount\n  name: calico-kube-controllers\n  namespace: kube-system\n---\n# Include a clusterrole for the calico-node DaemonSet,\n# and bind it to the calico-node serviceaccount.\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-node\nrules:\n  # The CNI plugin needs to get pods, nodes, and namespaces.\n  - apiGroups: [""]\n    resources:\n      - pods\n      - nodes\n      - namespaces\n    verbs:\n      - get\n  - apiGroups: [""]\n    resources:\n      - endpoints\n      - services\n    verbs:\n      # Used to discover service IPs for advertisement.\n      - watch\n      - list\n      # Used to discover Typhas.\n      - get\n  - apiGroups: [""]\n    resources:\n      - nodes/status\n    verbs:\n      # Needed for clearing NodeNetworkUnavailable flag.\n      - patch\n      # Calico stores some configuration information in node annotations.\n      - update\n  # Watch for changes to Kubernetes NetworkPolicies.\n  - apiGroups: ["networking.k8s.io"]\n    resources:\n      - networkpolicies\n    verbs:\n      - watch\n      - list\n  # Used by Calico for policy information.\n  - apiGroups: [""]\n    resources:\n      - pods\n      - namespaces\n      - serviceaccounts\n    verbs:\n      - list\n      - watch\n  # The CNI plugin patches pods/status.\n  - apiGroups: [""]\n    resources:\n      - pods/status\n    verbs:\n      - patch\n  # Calico monitors various CRDs for config.\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - globalfelixconfigs\n      - felixconfigurations\n      - bgppeers\n      - globalbgpconfigs\n      - bgpconfigurations\n      - ippools\n      - ipamblocks\n      - globalnetworkpolicies\n      - globalnetworksets\n      - networkpolicies\n      - networksets\n      - clusterinformations\n      - hostendpoints\n      - blockaffinities\n    verbs:\n      - get\n      - list\n      - watch\n  # Calico must create and update some CRDs on startup.\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - ippools\n      - felixconfigurations\n      - clusterinformations\n    verbs:\n      - create\n      - update\n  # Calico stores some configuration information on the node.\n  - apiGroups: [""]\n    resources:\n      - nodes\n    verbs:\n      - get\n      - list\n      - watch\n  # These permissions are only requried for upgrade from v2.6, and can\n  # be removed after upgrade or on fresh installations.\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - bgpconfigurations\n      - bgppeers\n    verbs:\n      - create\n      - update\n  # These permissions are required for Calico CNI to perform IPAM allocations.\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n      - get\n      - list\n      - create\n      - update\n      - delete\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - ipamconfigs\n    verbs:\n      - get\n  # Block affinities must also be watchable by confd for route aggregation.\n  - apiGroups: ["crd.projectcalico.org"]\n    resources:\n      - blockaffinities\n    verbs:\n      - watch\n  # The Calico IPAM migration needs to get daemonsets. These permissions can be\n  # removed if not upgrading from an installation using host-local IPAM.\n  - apiGroups: ["apps"]\n    resources:\n      - daemonsets\n    verbs:\n      - get\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: calico-node\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: calico-node\nsubjects:\n- kind: ServiceAccount\n  name: calico-node\n  namespace: kube-system\n\n---\n# Source: calico/templates/calico-node.yaml\n# This manifest installs the calico-node container, as well\n# as the CNI plugins and network config on\n# each master and worker node in a Kubernetes cluster.\nkind: DaemonSet\napiVersion: apps/v1\nmetadata:\n  name: calico-node\n  namespace: kube-system\n  labels:\n    k8s-app: calico-node\nspec:\n  selector:\n    matchLabels:\n      k8s-app: calico-node\n  updateStrategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxUnavailable: 1\n  template:\n    metadata:\n      labels:\n        k8s-app: calico-node\n      annotations:\n        # This, along with the CriticalAddonsOnly toleration below,\n        # marks the pod as a critical add-on, ensuring it gets\n        # priority scheduling and that its resources are reserved\n        # if it ever gets evicted.\n        scheduler.alpha.kubernetes.io/critical-pod: \'\'\n    spec:\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      hostNetwork: true\n      tolerations:\n        # Make sure calico-node gets scheduled on all nodes.\n        - effect: NoSchedule\n          operator: Exists\n        # Mark the pod as a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator: Exists\n        - effect: NoExecute\n          operator: Exists\n      serviceAccountName: calico-node\n      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force\n      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.\n      terminationGracePeriodSeconds: 0\n      priorityClassName: system-node-critical\n      initContainers:\n        # This container performs upgrade from host-local IPAM to calico-ipam.\n        # It can be deleted if this is a fresh installation, or if you have already\n        # upgraded to use calico-ipam.\n        - name: upgrade-ipam\n          image: calico/cni:v3.10.3\n          command: ["/opt/cni/bin/calico-ipam", "-upgrade"]\n          env:\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            - name: CALICO_NETWORKING_BACKEND\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: calico_backend\n          volumeMounts:\n            - mountPath: /var/lib/cni/networks\n              name: host-local-net-dir\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n        # This container installs the CNI binaries\n        # and CNI network config file on each node.\n        - name: install-cni\n          image: calico/cni:v3.10.3\n          command: ["/install-cni.sh"]\n          env:\n            # Name of the CNI config file to create.\n            - name: CNI_CONF_NAME\n              value: "10-calico.conflist"\n            # The CNI network config to install on each node.\n            - name: CNI_NETWORK_CONFIG\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: cni_network_config\n            # Set the hostname based on the k8s node name.\n            - name: KUBERNETES_NODE_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            # CNI MTU Config variable\n            - name: CNI_MTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # Prevents the container from sleeping forever.\n            - name: SLEEP\n              value: "false"\n          volumeMounts:\n            - mountPath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountPath: /host/etc/cni/net.d\n              name: cni-net-dir\n        # Adds a Flex Volume Driver that creates a per-pod Unix Domain Socket to allow Dikastes\n        # to communicate with Felix over the Policy Sync API.\n        - name: flexvol-driver\n          image: calico/pod2daemon-flexvol:v3.10.3\n          volumeMounts:\n          - name: flexvol-driver-host\n            mountPath: /host/driver\n      containers:\n        # Runs calico-node container on each Kubernetes node.  This\n        # container programs network policy and routes on each\n        # host.\n        - name: calico-node\n          image: calico/node:v3.10.3\n          env:\n            # Use Kubernetes API as the backing datastore.\n            - name: DATASTORE_TYPE\n              value: "kubernetes"\n            # Wait for the datastore.\n            - name: WAIT_FOR_DATASTORE\n              value: "true"\n            # Set based on the k8s node name.\n            - name: NODENAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: spec.nodeName\n            # Choose the backend to use.\n            - name: CALICO_NETWORKING_BACKEND\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: calico_backend\n            # Cluster type to identify the deployment type\n            - name: CLUSTER_TYPE\n              value: "k8s,bgp"\n            # Auto-detect the BGP IP address.\n            - name: IP\n              value: "autodetect"\n            # Enable IPIP\n            - name: CALICO_IPV4POOL_IPIP\n              value: "Always"\n            # Set MTU for tunnel device used if ipip is enabled\n            - name: FELIX_IPINIPMTU\n              valueFrom:\n                configMapKeyRef:\n                  name: calico-config\n                  key: veth_mtu\n            # The default IPv4 pool to create on startup if none exists. Pod IPs will be\n            # chosen from this range. Changing this value after installation will have\n            # no effect. This should fall within `--cluster-cidr`.\n            - name: CALICO_IPV4POOL_CIDR\n              value: "10.11.10.0/16"\n            # Disable file logging so `kubectl logs` works.\n            - name: CALICO_DISABLE_FILE_LOGGING\n              value: "true"\n            # Set Felix endpoint to host default action to ACCEPT.\n            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION\n              value: "ACCEPT"\n            # Disable IPv6 on Kubernetes.\n            - name: FELIX_IPV6SUPPORT\n              value: "false"\n            # Set Felix logging to "info"\n            - name: FELIX_LOGSEVERITYSCREEN\n              value: "info"\n            - name: FELIX_HEALTHENABLED\n              value: "true"\n          securityContext:\n            privileged: true\n          resources:\n            requests:\n              cpu: 250m\n          livenessProbe:\n            exec:\n              command:\n              - /bin/calico-node\n              - -felix-live\n              - -bird-live\n            periodSeconds: 10\n            initialDelaySeconds: 10\n            failureThreshold: 6\n          readinessProbe:\n            exec:\n              command:\n              - /bin/calico-node\n              - -felix-ready\n              - -bird-ready\n            periodSeconds: 10\n          volumeMounts:\n            - mountPath: /lib/modules\n              name: lib-modules\n              readOnly: true\n            - mountPath: /run/xtables.lock\n              name: xtables-lock\n              readOnly: false\n            - mountPath: /var/run/calico\n              name: var-run-calico\n              readOnly: false\n            - mountPath: /var/lib/calico\n              name: var-lib-calico\n              readOnly: false\n            - name: policysync\n              mountPath: /var/run/nodeagent\n      volumes:\n        # Used by calico-node.\n        - name: lib-modules\n          hostPath:\n            path: /lib/modules\n        - name: var-run-calico\n          hostPath:\n            path: /var/run/calico\n        - name: var-lib-calico\n          hostPath:\n            path: /var/lib/calico\n        - name: xtables-lock\n          hostPath:\n            path: /run/xtables.lock\n            type: FileOrCreate\n        # Used to install CNI.\n        - name: cni-bin-dir\n          hostPath:\n            path: /opt/cni/bin\n        - name: cni-net-dir\n          hostPath:\n            path: /etc/cni/net.d\n        # Mount in the directory for host-local IPAM allocations. This is\n        # used when upgrading from host-local to calico-ipam, and can be removed\n        # if not using the upgrade-ipam init container.\n        - name: host-local-net-dir\n          hostPath:\n            path: /var/lib/cni/networks\n        # Used to create per-pod Unix Domain Sockets\n        - name: policysync\n          hostPath:\n            type: DirectoryOrCreate\n            path: /var/run/nodeagent\n        # Used to install Flex Volume Driver\n        - name: flexvol-driver-host\n          hostPath:\n            type: DirectoryOrCreate\n            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds\n---\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-node\n  namespace: kube-system\n\n---\n# Source: calico/templates/calico-kube-controllers.yaml\n\n# See https://github.com/projectcalico/kube-controllers\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n  labels:\n    k8s-app: calico-kube-controllers\nspec:\n  # The controllers can only have a single active instance.\n  replicas: 1\n  selector:\n    matchLabels:\n      k8s-app: calico-kube-controllers\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      name: calico-kube-controllers\n      namespace: kube-system\n      labels:\n        k8s-app: calico-kube-controllers\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: \'\'\n    spec:\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n      tolerations:\n        # Mark the pod as a critical add-on for rescheduling.\n        - key: CriticalAddonsOnly\n          operator: Exists\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n      serviceAccountName: calico-kube-controllers\n      priorityClassName: system-cluster-critical\n      containers:\n        - name: calico-kube-controllers\n          image: calico/kube-controllers:v3.10.3\n          env:\n            # Choose which controllers to run.\n            - name: ENABLED_CONTROLLERS\n              value: node\n            - name: DATASTORE_TYPE\n              value: kubernetes\n          readinessProbe:\n            exec:\n              command:\n              - /usr/bin/check-status\n              - -r\n\n---\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n---\n# Source: calico/templates/calico-etcd-secrets.yaml\n\n---\n# Source: calico/templates/calico-typha.yaml\n\n---\n# Source: calico/templates/configure-canal.yaml\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n\n\n启动\n\nkubectl apply -f calico.yaml\n\n\n1\n\n\n# 安装 nginx ingress controll\n\nvi /data/k8s/scripts/ingress-nginx-v0.29.0.yaml\n\n\n1\n\n\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\n\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: nginx-configuration\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: tcp-services\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: udp-services\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: nginx-ingress-serviceaccount\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRole\nmetadata:\n  name: nginx-ingress-clusterrole\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nrules:\n  - apiGroups:\n      - ""\n    resources:\n      - configmaps\n      - endpoints\n      - nodes\n      - pods\n      - secrets\n    verbs:\n      - list\n      - watch\n  - apiGroups:\n      - ""\n    resources:\n      - nodes\n    verbs:\n      - get\n  - apiGroups:\n      - ""\n    resources:\n      - services\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - ""\n    resources:\n      - events\n    verbs:\n      - create\n      - patch\n  - apiGroups:\n      - "extensions"\n      - "networking.k8s.io"\n    resources:\n      - ingresses\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - "extensions"\n      - "networking.k8s.io"\n    resources:\n      - ingresses/status\n    verbs:\n      - update\n\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: Role\nmetadata:\n  name: nginx-ingress-role\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nrules:\n  - apiGroups:\n      - ""\n    resources:\n      - configmaps\n      - pods\n      - secrets\n      - namespaces\n    verbs:\n      - get\n  - apiGroups:\n      - ""\n    resources:\n      - configmaps\n    resourceNames:\n      # Defaults to "<election-id>-<ingress-class>"\n      # Here: "<ingress-controller-leader>-<nginx>"\n      # This has to be adapted if you change either parameter\n      # when launching the nginx-ingress-controller.\n      - "ingress-controller-leader-nginx"\n    verbs:\n      - get\n      - update\n  - apiGroups:\n      - ""\n    resources:\n      - configmaps\n    verbs:\n      - create\n  - apiGroups:\n      - ""\n    resources:\n      - endpoints\n    verbs:\n      - get\n\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: RoleBinding\nmetadata:\n  name: nginx-ingress-role-nisa-binding\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: nginx-ingress-role\nsubjects:\n  - kind: ServiceAccount\n    name: nginx-ingress-serviceaccount\n    namespace: ingress-nginx\n\n---\napiVersion: rbac.authorization.k8s.io/v1beta1\nkind: ClusterRoleBinding\nmetadata:\n  name: nginx-ingress-clusterrole-nisa-binding\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: nginx-ingress-clusterrole\nsubjects:\n  - kind: ServiceAccount\n    name: nginx-ingress-serviceaccount\n    namespace: ingress-nginx\n\n---\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-ingress-controller\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: ingress-nginx\n      app.kubernetes.io/part-of: ingress-nginx\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/part-of: ingress-nginx\n      annotations:\n        prometheus.io/port: "10254"\n        prometheus.io/scrape: "true"\n    spec:\n      # wait up to five minutes for the drain of connections\n      terminationGracePeriodSeconds: 300\n      serviceAccountName: nginx-ingress-serviceaccount\n      nodeSelector:\n        kubernetes.io/os: linux\n      containers:\n        - name: nginx-ingress-controller\n          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.29.0\n          args:\n            - /nginx-ingress-controller\n            - --configmap=$(POD_NAMESPACE)/nginx-configuration\n            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services\n            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services\n            - --publish-service=$(POD_NAMESPACE)/ingress-nginx\n            - --annotations-prefix=nginx.ingress.kubernetes.io\n          securityContext:\n            allowPrivilegeEscalation: true\n            capabilities:\n              drop:\n                - ALL\n              add:\n                - NET_BIND_SERVICE\n            # www-data -> 101\n            runAsUser: 101\n          env:\n            - name: POD_NAME\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.name\n            - name: POD_NAMESPACE\n              valueFrom:\n                fieldRef:\n                  fieldPath: metadata.namespace\n          ports:\n            - name: http\n              containerPort: 80\n              protocol: TCP\n            - name: https\n              containerPort: 443\n              protocol: TCP\n          livenessProbe:\n            failureThreshold: 3\n            httpGet:\n              path: /healthz\n              port: 10254\n              scheme: HTTP\n            initialDelaySeconds: 10\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 10\n          readinessProbe:\n            failureThreshold: 3\n            httpGet:\n              path: /healthz\n              port: 10254\n              scheme: HTTP\n            periodSeconds: 10\n            successThreshold: 1\n            timeoutSeconds: 10\n          lifecycle:\n            preStop:\n              exec:\n                command:\n                  - /wait-shutdown\n\n---\n\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: ingress-nginx\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nspec:\n  limits:\n  - min:\n      memory: 90Mi\n      cpu: 100m\n    type: Container\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n\n\n启动\n\nkubectl apply -f ingress-nginx-v0.29.0.yaml\n\n\n1\n\n\n# 安装 Dashboard\n\nvi dashboard-v2.0.0-rc5.yaml\n\n# Copyright 2017 The Kubernetes Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the "License");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an "AS IS" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: kubernetes-dashboard\n\n---\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\n\n---\n\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 443\n      targetPort: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n\n---\n\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-certs\n  namespace: kubernetes-dashboard\ntype: Opaque\n\n---\n\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-csrf\n  namespace: kubernetes-dashboard\ntype: Opaque\ndata:\n  csrf: ""\n\n---\n\napiVersion: v1\nkind: Secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-key-holder\n  namespace: kubernetes-dashboard\ntype: Opaque\n\n---\n\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-settings\n  namespace: kubernetes-dashboard\n\n---\n\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nrules:\n  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.\n  - apiGroups: [""]\n    resources: ["secrets"]\n    resourceNames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]\n    verbs: ["get", "update", "delete"]\n    # Allow Dashboard to get and update \'kubernetes-dashboard-settings\' config map.\n  - apiGroups: [""]\n    resources: ["configmaps"]\n    resourceNames: ["kubernetes-dashboard-settings"]\n    verbs: ["get", "update"]\n    # Allow Dashboard to get metrics.\n  - apiGroups: [""]\n    resources: ["services"]\n    resourceNames: ["heapster", "dashboard-metrics-scraper"]\n    verbs: ["proxy"]\n  - apiGroups: [""]\n    resources: ["services/proxy"]\n    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]\n    verbs: ["get"]\n\n---\n\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\nrules:\n  # Allow Metrics Scraper to get metrics from the Metrics server\n  - apiGroups: ["metrics.k8s.io"]\n    resources: ["pods", "nodes"]\n    verbs: ["get", "list", "watch"]\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: kubernetes-dashboard\nsubjects:\n  - kind: ServiceAccount\n    name: kubernetes-dashboard\n    namespace: kubernetes-dashboard\n\n---\n\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kubernetes-dashboard\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: kubernetes-dashboard\nsubjects:\n  - kind: ServiceAccount\n    name: kubernetes-dashboard\n    namespace: kubernetes-dashboard\n\n---\n\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: kubernetes-dashboard\n  template:\n    metadata:\n      labels:\n        k8s-app: kubernetes-dashboard\n    spec:\n      containers:\n        - name: kubernetes-dashboard\n          image: kubernetesui/dashboard:v2.0.0-rc5\n          # imagePullPolicy: Always\n          ports:\n            - containerPort: 8443\n              protocol: TCP\n          args:\n            - --auto-generate-certificates\n            - --namespace=kubernetes-dashboard\n            # Uncomment the following line to manually specify Kubernetes API server Host\n            # If not specified, Dashboard will attempt to auto discover the API server and connect\n            # to it. Uncomment only if the default does not work.\n            # - --apiserver-host=http://my-address:port\n          volumeMounts:\n            - name: kubernetes-dashboard-certs\n              mountPath: /certs\n              # Create on-disk volume to store exec logs\n            - mountPath: /tmp\n              name: tmp-volume\n          livenessProbe:\n            httpGet:\n              scheme: HTTPS\n              path: /\n              port: 8443\n            initialDelaySeconds: 30\n            timeoutSeconds: 30\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsUser: 1001\n            runAsGroup: 2001\n      volumes:\n        - name: kubernetes-dashboard-certs\n          secret:\n            secretName: kubernetes-dashboard-certs\n        - name: tmp-volume\n          emptyDir: {}\n      serviceAccountName: kubernetes-dashboard\n      nodeSelector:\n        "beta.kubernetes.io/os": linux\n      # Comment the following tolerations if Dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n\n---\n\nkind: Service\napiVersion: v1\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 8000\n      targetPort: 8000\n  selector:\n    k8s-app: dashboard-metrics-scraper\n\n---\n\nkind: Deployment\napiVersion: apps/v1\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionHistoryLimit: 10\n  selector:\n    matchLabels:\n      k8s-app: dashboard-metrics-scraper\n  template:\n    metadata:\n      labels:\n        k8s-app: dashboard-metrics-scraper\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: \'runtime/default\'\n    spec:\n      containers:\n        - name: dashboard-metrics-scraper\n          image: kubernetesui/metrics-scraper:v1.0.3\n          ports:\n            - containerPort: 8000\n              protocol: TCP\n          livenessProbe:\n            httpGet:\n              scheme: HTTP\n              path: /\n              port: 8000\n            initialDelaySeconds: 30\n            timeoutSeconds: 30\n          volumeMounts:\n          - mountPath: /tmp\n            name: tmp-volume\n          securityContext:\n            allowPrivilegeEscalation: false\n            readOnlyRootFilesystem: true\n            runAsUser: 1001\n            runAsGroup: 2001\n      serviceAccountName: kubernetes-dashboard\n      nodeSelector:\n        "beta.kubernetes.io/os": linux\n      # Comment the following tolerations if Dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: NoSchedule\n      volumes:\n        - name: tmp-volume\n          emptyDir: {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n\n\n启动\n\nkubectl apply -f dashboard-v2.0.0-rc5.yaml\n\n\n1\n\n\n# 安装 Kuboard\n\nvi kuboard.yaml\n\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kuboard\n  namespace: kube-system\n  annotations:\n    k8s.eip.work/displayName: kuboard\n    k8s.eip.work/ingress: "true"\n    k8s.eip.work/service: NodePort\n    k8s.eip.work/workload: kuboard\n  labels:\n    k8s.eip.work/layer: monitor\n    k8s.eip.work/name: kuboard\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      k8s.eip.work/layer: monitor\n      k8s.eip.work/name: kuboard\n  template:\n    metadata:\n      labels:\n        k8s.eip.work/layer: monitor\n        k8s.eip.work/name: kuboard\n    spec:\n      containers:\n      - name: kuboard\n        image: eipwork/kuboard:latest\n        imagePullPolicy: IfNotPresent\n      tolerations:\n      - key: node-role.kubernetes.io/master\n        effect: NoSchedule\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: kuboard\n  namespace: kube-system\nspec:\n  type: NodePort\n  ports:\n  - name: http\n    port: 80\n    targetPort: 80\n    nodePort: 32567\n  selector:\n    k8s.eip.work/layer: monitor\n    k8s.eip.work/name: kuboard\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kuboard-user\n  namespace: kube-system\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kuboard-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: kuboard-user\n  namespace: kube-system\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: kuboard-viewer\n  namespace: kube-system\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kuboard-viewer\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: view\nsubjects:\n- kind: ServiceAccount\n  name: kuboard-viewer\n  namespace: kube-system\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: kuboard-viewer:kuboard-minimum-role\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: kuboard-minimum-role\nsubjects:\n  - kind: ServiceAccount\n    name: kuboard-viewer\n    namespace: kube-system\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: kuboard-minimum-role\nrules:\n  - apiGroups:\n    - \'\'\n    resources:\n    - \'namespaces\'\n    - \'nodes\'\n    verbs:\n    - \'list\'\n\n---\napiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: kuboard\n  namespace: kube-system\n  annotations:\n    k8s.eip.work/displayName: kuboard\n    k8s.eip.work/workload: kuboard\n    nginx.org/websocket-services: "kuboard"\n    nginx.com/sticky-cookie-services: "serviceName=kuboard srv_id expires=1h path=/"\nspec:\n  rules:\n  - host: kuboard.yourdomain.com\n    http:\n      paths:\n      - path: /\n        backend:\n          serviceName: kuboard\n          servicePort: http\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n\n\n启动\n\nkubectl apply -f kuboard.yaml\n\n\n1\n\n\nvi metrics-server-v0.3.6.yaml\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:aggregated-metrics-reader\n  labels:\n    rbac.authorization.k8s.io/aggregate-to-view: "true"\n    rbac.authorization.k8s.io/aggregate-to-edit: "true"\n    rbac.authorization.k8s.io/aggregate-to-admin: "true"\nrules:\n- apiGroups: ["metrics.k8s.io"]\n  resources: ["pods", "nodes"]\n  verbs: ["get", "list", "watch"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: metrics-server:system:auth-delegator\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: system:metrics-server\nrules:\n- apiGroups:\n  - ""\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: system:metrics-server\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:metrics-server\nsubjects:\n- kind: ServiceAccount\n  name: metrics-server\n  namespace: kube-system\n  \n---\napiVersion: apiregistration.k8s.io/v1beta1\nkind: APIService\nmetadata:\n  name: v1beta1.metrics.k8s.io\nspec:\n  service:\n    name: metrics-server\n    namespace: kube-system\n  group: metrics.k8s.io\n  version: v1beta1\n  insecureSkipTLSVerify: true\n  groupPriorityMinimum: 100\n  versionPriority: 100\n\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    k8s-app: metrics-server\nspec:\n  selector:\n    matchLabels:\n      k8s-app: metrics-server\n  template:\n    metadata:\n      name: metrics-server\n      labels:\n        k8s-app: metrics-server\n    spec:\n      serviceAccountName: metrics-server\n      volumes:\n      # mount in tmp so we can safely use from-scratch images and/or read-only containers\n      - name: tmp-dir\n        emptyDir: {}\n      containers:\n      - name: metrics-server\n        image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6\n        # command:\n        # - /metrics-server\n        # - --kubelet-insecure-tls\n        # - --kubelet-preferred-address-types=InternalIP \n        args:\n          - --cert-dir=/tmp\n          - --secure-port=4443\n          - --kubelet-insecure-tls=true\n          - --kubelet-preferred-address-types=InternalIP\n        ports:\n        - name: main-port\n          containerPort: 4443\n          protocol: TCP\n        securityContext:\n          readOnlyRootFilesystem: true\n          runAsNonRoot: true\n          runAsUser: 1000\n        imagePullPolicy: IfNotPresent\n        volumeMounts:\n        - name: tmp-dir\n          mountPath: /tmp\n      nodeSelector:\n        beta.kubernetes.io/os: linux\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    kubernetes.io/name: "Metrics-server"\n    kubernetes.io/cluster-service: "true"\nspec:\n  selector:\n    k8s-app: metrics-server\n  ports:\n  - port: 443\n    protocol: TCP\n    targetPort: main-port\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n\n\n启动\n\nkubectl apply -f metrics-server-v0.3.6.yaml\n\n\n1\n\n\n\n# 安装Worker（202）\n\n\n# 设置hostname\n\n执行命令\n\nhostnamectl set-hostname k8s-worker202\necho "127.0.0.1   k8s-worker202" >> /etc/hosts \n\n\n1\n2\n\n\n\n# 安装Docker\n\n\n# 关闭防火墙\n\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭 SeLinux\nsetenforce 0\nsed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config\n\n# 关闭 swap\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\n\n# 修改 /etc/sysctl.conf\n# 如果有配置，则修改\nsed -i "s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"  /etc/sysctl.conf\n# 可能没有，追加\necho "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf\n# 执行命令以应用\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 安装K8S\n\n设置K8S yum源\n\ncat <<EOF > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n清理yum源\n\nyum clean all\nyum -y makecache\n\n\n1\n2\n\n\n执行安装命令\n\n# 卸载旧版本\nyum remove -y kubelet kubeadm kubectl\n\n# 安装kubelet、kubeadm、kubectl\nyum install -y kubelet-1.17.1 kubeadm-1.17.1 kubectl-1.17.1\n\n\n1\n2\n3\n4\n5\n\n\n启动\n\nsystemctl enable kubelet && systemctl start kubelet\n\n\n1\n\n\n查看版本\n\nkubectl version\n\n\n1\n\n\n\n# 配置Worker\n\n# 下载镜像\n\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5\n\ndocker pull calico/cni:v3.10.3\ndocker pull calico/pod2daemon-flexvol:v3.10.3\ndocker pull calico/node:v3.10.3\ndocker pull calico/kube-controllers:v3.10.3\ndocker pull quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.29.0\ndocker pull  kubernetesui/dashboard:v2.0.0-rc5\ndocker pull  kubernetesui/metrics-scraper:v1.0.3\ndocker pull  eipwork/kuboard:latest\ndocker pull  registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n# 更换镜像名称\n\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1 k8s.gcr.io/kube-apiserver:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1 k8s.gcr.io/kube-controller-manager:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1 k8s.gcr.io/kube-scheduler:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1 k8s.gcr.io/kube-proxy:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5 k8s.gcr.io/coredns:1.6.5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 删除旧标签\n\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 配置Host\n\necho "192.168.213.201   apiserver.k8s.com" >> /etc/hosts\n\n\n1\n\n\n# 获取参数\n\n获取加入master的参数（是在master节点上执行。）\n\n# 在 master 节点执行\nkubeadm token create --print-join-command\n\n# 得到token和cert，这两个参数在2个小时内可以重复使用，超过以后就得再次生成\nkubeadm join apiserver.k8s.com:6443 --token t8rn2w.zwfd42edrro02c50     --discovery-token-ca-cert-hash sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\n\n\n1\n2\n3\n4\n5\n\n\n# 设置参数并加入\n\n在worker节点上执行\n\nkubeadm join apiserver.k8s.com:6443 \\\n   --token t8rn2w.zwfd42edrro02c50 \\\n   --discovery-token-ca-cert-hash sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\n\n\n1\n2\n3\n\n\n\n# 完成\n\n现在你可以在master节点，执行kubectl get nodes看到所有节点都在线了。\n\nkubectl get nodes\n\n\n\n\n# 访问Kuboard\n\nKuboard是一个非常方便的web管理界面，安装完以后可以通过http://任意节点IP:32567/访问。详细使用请参考 www.kuboard.cn\n\n\n\n\n# 获取登陆Token\n\n在 Master 节点上执行此命令\n\nkubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-user | awk \'{print $1}\') -o go-template=\'{{.data.token}}\' | base64 -d\n\n\n1\n\n\n\n# 登录后\n\n',normalizedContent:'# 文章说明\n\n本文章与【k8s-cicd】这篇文章部署方式一样\n上篇文章采用离线部署方式，基于网上提供脚本进行优化升级\n本篇文章采用在线安装方式，进一步对k8s部署方式有更深一层了解\n\n\n# 字段说明\n\n# master节点的主机名\nk8s-master\n# worker节点的主机名\nk8s-worker202\n# kubernetes apiserver的主机地址\napiserver.k8s.com\n# 集群中master节点的ip地址\n192.168.213.201\n# pod 使用的网段\n10.11.10.0/16\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# 安装master（201）\n\n\n# 设置hostname\n\n执行命令\n\nhostnamectl set-hostname k8s-master\necho "127.0.0.1   k8s-master" >> /etc/hosts \n\n\n1\n2\n\n\n\n# 安装docker\n\n\n# 关闭防火墙\n\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭 selinux\nsetenforce 0\nsed -i "s/selinux=enforcing/selinux=disabled/g" /etc/selinux/config\n\n# 关闭 swap\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\n\n# 修改 /etc/sysctl.conf\n# 如果有配置，则修改\nsed -i "s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"  /etc/sysctl.conf\n# 可能没有，追加\necho "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf\n# 执行命令以应用\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 安装k8s\n\n设置k8s yum源\n\ncat <<eof > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\neof\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n清理yum源\n\nyum clean all\nyum -y makecache\n\n\n1\n2\n\n\n执行安装命令\n\n# 卸载旧版本\nyum remove -y kubelet kubeadm kubectl\n\n# 安装kubelet、kubeadm、kubectl\nyum install -y kubelet-1.17.1 kubeadm-1.17.1 kubectl-1.17.1\n\n\n1\n2\n3\n4\n5\n\n\n启动\n\nsystemctl enable kubelet && systemctl start kubelet\n\n\n1\n\n\n查看版本\n\nkubectl version\n\n\n1\n\n\n\n# 配置master\n\n# 创建目录\n\nmkdir -p /data/k8s/scripts\n\n# 生成kubeadm-config.yaml\n\n查看完整配置选项 https://godoc.org/k8s.io/kubernetes/cmd/kubeadm/app/apis/kubeadm/v1beta2\n\ncat <<eof > /data/k8s/scripts/kubeadm-config.yaml\napiversion: kubeadm.k8s.io/v1beta2\nkind: clusterconfiguration\nkubernetesversion: v1.17.1\ncontrolplaneendpoint: "apiserver.k8s.com:6443"\nnetworking:\n  servicesubnet: "10.96.0.0/16"\n  podsubnet: "10.11.10.0/16"\n  dnsdomain: "cluster.local"\neof\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 下载镜像\n\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5\n\ndocker pull calico/cni:v3.10.3\ndocker pull calico/pod2daemon-flexvol:v3.10.3\ndocker pull calico/node:v3.10.3\ndocker pull calico/kube-controllers:v3.10.3\ndocker pull quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.29.0\ndocker pull  kubernetesui/dashboard:v2.0.0-rc5\ndocker pull  kubernetesui/metrics-scraper:v1.0.3\ndocker pull  eipwork/kuboard:latest\ndocker pull  registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n# 更换镜像名称\n\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1 k8s.gcr.io/kube-apiserver:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1 k8s.gcr.io/kube-controller-manager:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1 k8s.gcr.io/kube-scheduler:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1 k8s.gcr.io/kube-proxy:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5 k8s.gcr.io/coredns:1.6.5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 删除旧标签\n\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 初始化kubeadm\n\necho "192.168.213.201   apiserver.k8s.com" >> /etc/hosts\n# 根据您服务器网速的情况，您需要等候 3 - 10 分钟\ncd /data/k8s/scripts\nkubeadm init --config=kubeadm-config.yaml --upload-certs\n\n\n1\n2\n3\n4\n\n\n执行结果\n\n\n\n若需要回滚初始化的话，执行以下命令即可\n\nkubeadm reset\n\n\n1\n\n\n# 配置 kubectl\n\n创建目录\n\nmkdir /root/.kube/\n\n\n1\n\n\n配置文件\n\ncp -i /etc/kubernetes/admin.conf /root/.kube/config\n\n\n1\n\n\n# 安装 calico 网络插件\n\n创建文件\n\ncd /data/k8s/scripts/ vi calico.yaml\n\ncalico.yaml\n\n---\n# source: calico/templates/calico-config.yaml\n# this configmap is used to configure a self-hosted calico installation.\nkind: configmap\napiversion: v1\nmetadata:\n  name: calico-config\n  namespace: kube-system\ndata:\n  # typha is disabled.\n  typha_service_name: "none"\n  # configure the backend to use.\n  calico_backend: "bird"\n\n  # configure the mtu to use\n  veth_mtu: "1440"\n\n  # the cni network configuration to install on each node.  the special\n  # values in this config will be automatically populated.\n  cni_network_config: |-\n    {\n      "name": "k8s-pod-network",\n      "cniversion": "0.3.1",\n      "plugins": [\n        {\n          "type": "calico",\n          "log_level": "info",\n          "datastore_type": "kubernetes",\n          "nodename": "__kubernetes_node_name__",\n          "mtu": __cni_mtu__,\n          "ipam": {\n              "type": "calico-ipam"\n          },\n          "policy": {\n              "type": "k8s"\n          },\n          "kubernetes": {\n              "kubeconfig": "__kubeconfig_filepath__"\n          }\n        },\n        {\n          "type": "portmap",\n          "snat": true,\n          "capabilities": {"portmappings": true}\n        }\n      ]\n    }\n\n---\n# source: calico/templates/kdd-crds.yaml\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: felixconfigurations.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: felixconfiguration\n    plural: felixconfigurations\n    singular: felixconfiguration\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: ipamblocks.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: ipamblock\n    plural: ipamblocks\n    singular: ipamblock\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: blockaffinities.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: blockaffinity\n    plural: blockaffinities\n    singular: blockaffinity\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: ipamhandles.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: ipamhandle\n    plural: ipamhandles\n    singular: ipamhandle\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: ipamconfigs.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: ipamconfig\n    plural: ipamconfigs\n    singular: ipamconfig\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: bgppeers.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: bgppeer\n    plural: bgppeers\n    singular: bgppeer\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: bgpconfigurations.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: bgpconfiguration\n    plural: bgpconfigurations\n    singular: bgpconfiguration\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: ippools.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: ippool\n    plural: ippools\n    singular: ippool\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: hostendpoints.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: hostendpoint\n    plural: hostendpoints\n    singular: hostendpoint\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: clusterinformations.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: clusterinformation\n    plural: clusterinformations\n    singular: clusterinformation\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: globalnetworkpolicies.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: globalnetworkpolicy\n    plural: globalnetworkpolicies\n    singular: globalnetworkpolicy\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: globalnetworksets.crd.projectcalico.org\nspec:\n  scope: cluster\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: globalnetworkset\n    plural: globalnetworksets\n    singular: globalnetworkset\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: networkpolicies.crd.projectcalico.org\nspec:\n  scope: namespaced\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: networkpolicy\n    plural: networkpolicies\n    singular: networkpolicy\n\n---\n\napiversion: apiextensions.k8s.io/v1beta1\nkind: customresourcedefinition\nmetadata:\n  name: networksets.crd.projectcalico.org\nspec:\n  scope: namespaced\n  group: crd.projectcalico.org\n  version: v1\n  names:\n    kind: networkset\n    plural: networksets\n    singular: networkset\n---\n# source: calico/templates/rbac.yaml\n\n# include a clusterrole for the kube-controllers component,\n# and bind it to the calico-kube-controllers serviceaccount.\nkind: clusterrole\napiversion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-kube-controllers\nrules:\n  # nodes are watched to monitor for deletions.\n  - apigroups: [""]\n    resources:\n      - nodes\n    verbs:\n      - watch\n      - list\n      - get\n  # pods are queried to check for existence.\n  - apigroups: [""]\n    resources:\n      - pods\n    verbs:\n      - get\n  # ipam resources are manipulated when nodes are deleted.\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - ippools\n    verbs:\n      - list\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n      - get\n      - list\n      - create\n      - update\n      - delete\n  # needs access to update clusterinformations.\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - clusterinformations\n    verbs:\n      - get\n      - create\n      - update\n---\nkind: clusterrolebinding\napiversion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-kube-controllers\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: calico-kube-controllers\nsubjects:\n- kind: serviceaccount\n  name: calico-kube-controllers\n  namespace: kube-system\n---\n# include a clusterrole for the calico-node daemonset,\n# and bind it to the calico-node serviceaccount.\nkind: clusterrole\napiversion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: calico-node\nrules:\n  # the cni plugin needs to get pods, nodes, and namespaces.\n  - apigroups: [""]\n    resources:\n      - pods\n      - nodes\n      - namespaces\n    verbs:\n      - get\n  - apigroups: [""]\n    resources:\n      - endpoints\n      - services\n    verbs:\n      # used to discover service ips for advertisement.\n      - watch\n      - list\n      # used to discover typhas.\n      - get\n  - apigroups: [""]\n    resources:\n      - nodes/status\n    verbs:\n      # needed for clearing nodenetworkunavailable flag.\n      - patch\n      # calico stores some configuration information in node annotations.\n      - update\n  # watch for changes to kubernetes networkpolicies.\n  - apigroups: ["networking.k8s.io"]\n    resources:\n      - networkpolicies\n    verbs:\n      - watch\n      - list\n  # used by calico for policy information.\n  - apigroups: [""]\n    resources:\n      - pods\n      - namespaces\n      - serviceaccounts\n    verbs:\n      - list\n      - watch\n  # the cni plugin patches pods/status.\n  - apigroups: [""]\n    resources:\n      - pods/status\n    verbs:\n      - patch\n  # calico monitors various crds for config.\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - globalfelixconfigs\n      - felixconfigurations\n      - bgppeers\n      - globalbgpconfigs\n      - bgpconfigurations\n      - ippools\n      - ipamblocks\n      - globalnetworkpolicies\n      - globalnetworksets\n      - networkpolicies\n      - networksets\n      - clusterinformations\n      - hostendpoints\n      - blockaffinities\n    verbs:\n      - get\n      - list\n      - watch\n  # calico must create and update some crds on startup.\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - ippools\n      - felixconfigurations\n      - clusterinformations\n    verbs:\n      - create\n      - update\n  # calico stores some configuration information on the node.\n  - apigroups: [""]\n    resources:\n      - nodes\n    verbs:\n      - get\n      - list\n      - watch\n  # these permissions are only requried for upgrade from v2.6, and can\n  # be removed after upgrade or on fresh installations.\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - bgpconfigurations\n      - bgppeers\n    verbs:\n      - create\n      - update\n  # these permissions are required for calico cni to perform ipam allocations.\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - blockaffinities\n      - ipamblocks\n      - ipamhandles\n    verbs:\n      - get\n      - list\n      - create\n      - update\n      - delete\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - ipamconfigs\n    verbs:\n      - get\n  # block affinities must also be watchable by confd for route aggregation.\n  - apigroups: ["crd.projectcalico.org"]\n    resources:\n      - blockaffinities\n    verbs:\n      - watch\n  # the calico ipam migration needs to get daemonsets. these permissions can be\n  # removed if not upgrading from an installation using host-local ipam.\n  - apigroups: ["apps"]\n    resources:\n      - daemonsets\n    verbs:\n      - get\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrolebinding\nmetadata:\n  name: calico-node\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: calico-node\nsubjects:\n- kind: serviceaccount\n  name: calico-node\n  namespace: kube-system\n\n---\n# source: calico/templates/calico-node.yaml\n# this manifest installs the calico-node container, as well\n# as the cni plugins and network config on\n# each master and worker node in a kubernetes cluster.\nkind: daemonset\napiversion: apps/v1\nmetadata:\n  name: calico-node\n  namespace: kube-system\n  labels:\n    k8s-app: calico-node\nspec:\n  selector:\n    matchlabels:\n      k8s-app: calico-node\n  updatestrategy:\n    type: rollingupdate\n    rollingupdate:\n      maxunavailable: 1\n  template:\n    metadata:\n      labels:\n        k8s-app: calico-node\n      annotations:\n        # this, along with the criticaladdonsonly toleration below,\n        # marks the pod as a critical add-on, ensuring it gets\n        # priority scheduling and that its resources are reserved\n        # if it ever gets evicted.\n        scheduler.alpha.kubernetes.io/critical-pod: \'\'\n    spec:\n      nodeselector:\n        beta.kubernetes.io/os: linux\n      hostnetwork: true\n      tolerations:\n        # make sure calico-node gets scheduled on all nodes.\n        - effect: noschedule\n          operator: exists\n        # mark the pod as a critical add-on for rescheduling.\n        - key: criticaladdonsonly\n          operator: exists\n        - effect: noexecute\n          operator: exists\n      serviceaccountname: calico-node\n      # minimize downtime during a rolling upgrade or deletion; tell kubernetes to do a "force\n      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.\n      terminationgraceperiodseconds: 0\n      priorityclassname: system-node-critical\n      initcontainers:\n        # this container performs upgrade from host-local ipam to calico-ipam.\n        # it can be deleted if this is a fresh installation, or if you have already\n        # upgraded to use calico-ipam.\n        - name: upgrade-ipam\n          image: calico/cni:v3.10.3\n          command: ["/opt/cni/bin/calico-ipam", "-upgrade"]\n          env:\n            - name: kubernetes_node_name\n              valuefrom:\n                fieldref:\n                  fieldpath: spec.nodename\n            - name: calico_networking_backend\n              valuefrom:\n                configmapkeyref:\n                  name: calico-config\n                  key: calico_backend\n          volumemounts:\n            - mountpath: /var/lib/cni/networks\n              name: host-local-net-dir\n            - mountpath: /host/opt/cni/bin\n              name: cni-bin-dir\n        # this container installs the cni binaries\n        # and cni network config file on each node.\n        - name: install-cni\n          image: calico/cni:v3.10.3\n          command: ["/install-cni.sh"]\n          env:\n            # name of the cni config file to create.\n            - name: cni_conf_name\n              value: "10-calico.conflist"\n            # the cni network config to install on each node.\n            - name: cni_network_config\n              valuefrom:\n                configmapkeyref:\n                  name: calico-config\n                  key: cni_network_config\n            # set the hostname based on the k8s node name.\n            - name: kubernetes_node_name\n              valuefrom:\n                fieldref:\n                  fieldpath: spec.nodename\n            # cni mtu config variable\n            - name: cni_mtu\n              valuefrom:\n                configmapkeyref:\n                  name: calico-config\n                  key: veth_mtu\n            # prevents the container from sleeping forever.\n            - name: sleep\n              value: "false"\n          volumemounts:\n            - mountpath: /host/opt/cni/bin\n              name: cni-bin-dir\n            - mountpath: /host/etc/cni/net.d\n              name: cni-net-dir\n        # adds a flex volume driver that creates a per-pod unix domain socket to allow dikastes\n        # to communicate with felix over the policy sync api.\n        - name: flexvol-driver\n          image: calico/pod2daemon-flexvol:v3.10.3\n          volumemounts:\n          - name: flexvol-driver-host\n            mountpath: /host/driver\n      containers:\n        # runs calico-node container on each kubernetes node.  this\n        # container programs network policy and routes on each\n        # host.\n        - name: calico-node\n          image: calico/node:v3.10.3\n          env:\n            # use kubernetes api as the backing datastore.\n            - name: datastore_type\n              value: "kubernetes"\n            # wait for the datastore.\n            - name: wait_for_datastore\n              value: "true"\n            # set based on the k8s node name.\n            - name: nodename\n              valuefrom:\n                fieldref:\n                  fieldpath: spec.nodename\n            # choose the backend to use.\n            - name: calico_networking_backend\n              valuefrom:\n                configmapkeyref:\n                  name: calico-config\n                  key: calico_backend\n            # cluster type to identify the deployment type\n            - name: cluster_type\n              value: "k8s,bgp"\n            # auto-detect the bgp ip address.\n            - name: ip\n              value: "autodetect"\n            # enable ipip\n            - name: calico_ipv4pool_ipip\n              value: "always"\n            # set mtu for tunnel device used if ipip is enabled\n            - name: felix_ipinipmtu\n              valuefrom:\n                configmapkeyref:\n                  name: calico-config\n                  key: veth_mtu\n            # the default ipv4 pool to create on startup if none exists. pod ips will be\n            # chosen from this range. changing this value after installation will have\n            # no effect. this should fall within `--cluster-cidr`.\n            - name: calico_ipv4pool_cidr\n              value: "10.11.10.0/16"\n            # disable file logging so `kubectl logs` works.\n            - name: calico_disable_file_logging\n              value: "true"\n            # set felix endpoint to host default action to accept.\n            - name: felix_defaultendpointtohostaction\n              value: "accept"\n            # disable ipv6 on kubernetes.\n            - name: felix_ipv6support\n              value: "false"\n            # set felix logging to "info"\n            - name: felix_logseverityscreen\n              value: "info"\n            - name: felix_healthenabled\n              value: "true"\n          securitycontext:\n            privileged: true\n          resources:\n            requests:\n              cpu: 250m\n          livenessprobe:\n            exec:\n              command:\n              - /bin/calico-node\n              - -felix-live\n              - -bird-live\n            periodseconds: 10\n            initialdelayseconds: 10\n            failurethreshold: 6\n          readinessprobe:\n            exec:\n              command:\n              - /bin/calico-node\n              - -felix-ready\n              - -bird-ready\n            periodseconds: 10\n          volumemounts:\n            - mountpath: /lib/modules\n              name: lib-modules\n              readonly: true\n            - mountpath: /run/xtables.lock\n              name: xtables-lock\n              readonly: false\n            - mountpath: /var/run/calico\n              name: var-run-calico\n              readonly: false\n            - mountpath: /var/lib/calico\n              name: var-lib-calico\n              readonly: false\n            - name: policysync\n              mountpath: /var/run/nodeagent\n      volumes:\n        # used by calico-node.\n        - name: lib-modules\n          hostpath:\n            path: /lib/modules\n        - name: var-run-calico\n          hostpath:\n            path: /var/run/calico\n        - name: var-lib-calico\n          hostpath:\n            path: /var/lib/calico\n        - name: xtables-lock\n          hostpath:\n            path: /run/xtables.lock\n            type: fileorcreate\n        # used to install cni.\n        - name: cni-bin-dir\n          hostpath:\n            path: /opt/cni/bin\n        - name: cni-net-dir\n          hostpath:\n            path: /etc/cni/net.d\n        # mount in the directory for host-local ipam allocations. this is\n        # used when upgrading from host-local to calico-ipam, and can be removed\n        # if not using the upgrade-ipam init container.\n        - name: host-local-net-dir\n          hostpath:\n            path: /var/lib/cni/networks\n        # used to create per-pod unix domain sockets\n        - name: policysync\n          hostpath:\n            type: directoryorcreate\n            path: /var/run/nodeagent\n        # used to install flex volume driver\n        - name: flexvol-driver-host\n          hostpath:\n            type: directoryorcreate\n            path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec/nodeagent~uds\n---\n\napiversion: v1\nkind: serviceaccount\nmetadata:\n  name: calico-node\n  namespace: kube-system\n\n---\n# source: calico/templates/calico-kube-controllers.yaml\n\n# see https://github.com/projectcalico/kube-controllers\napiversion: apps/v1\nkind: deployment\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n  labels:\n    k8s-app: calico-kube-controllers\nspec:\n  # the controllers can only have a single active instance.\n  replicas: 1\n  selector:\n    matchlabels:\n      k8s-app: calico-kube-controllers\n  strategy:\n    type: recreate\n  template:\n    metadata:\n      name: calico-kube-controllers\n      namespace: kube-system\n      labels:\n        k8s-app: calico-kube-controllers\n      annotations:\n        scheduler.alpha.kubernetes.io/critical-pod: \'\'\n    spec:\n      nodeselector:\n        beta.kubernetes.io/os: linux\n      tolerations:\n        # mark the pod as a critical add-on for rescheduling.\n        - key: criticaladdonsonly\n          operator: exists\n        - key: node-role.kubernetes.io/master\n          effect: noschedule\n      serviceaccountname: calico-kube-controllers\n      priorityclassname: system-cluster-critical\n      containers:\n        - name: calico-kube-controllers\n          image: calico/kube-controllers:v3.10.3\n          env:\n            # choose which controllers to run.\n            - name: enabled_controllers\n              value: node\n            - name: datastore_type\n              value: kubernetes\n          readinessprobe:\n            exec:\n              command:\n              - /usr/bin/check-status\n              - -r\n\n---\n\napiversion: v1\nkind: serviceaccount\nmetadata:\n  name: calico-kube-controllers\n  namespace: kube-system\n---\n# source: calico/templates/calico-etcd-secrets.yaml\n\n---\n# source: calico/templates/calico-typha.yaml\n\n---\n# source: calico/templates/configure-canal.yaml\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n\n\n启动\n\nkubectl apply -f calico.yaml\n\n\n1\n\n\n# 安装 nginx ingress controll\n\nvi /data/k8s/scripts/ingress-nginx-v0.29.0.yaml\n\n\n1\n\n\napiversion: v1\nkind: namespace\nmetadata:\n  name: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\n\nkind: configmap\napiversion: v1\nmetadata:\n  name: nginx-configuration\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\nkind: configmap\napiversion: v1\nmetadata:\n  name: tcp-services\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\nkind: configmap\napiversion: v1\nmetadata:\n  name: udp-services\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\napiversion: v1\nkind: serviceaccount\nmetadata:\n  name: nginx-ingress-serviceaccount\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\n\n---\napiversion: rbac.authorization.k8s.io/v1beta1\nkind: clusterrole\nmetadata:\n  name: nginx-ingress-clusterrole\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nrules:\n  - apigroups:\n      - ""\n    resources:\n      - configmaps\n      - endpoints\n      - nodes\n      - pods\n      - secrets\n    verbs:\n      - list\n      - watch\n  - apigroups:\n      - ""\n    resources:\n      - nodes\n    verbs:\n      - get\n  - apigroups:\n      - ""\n    resources:\n      - services\n    verbs:\n      - get\n      - list\n      - watch\n  - apigroups:\n      - ""\n    resources:\n      - events\n    verbs:\n      - create\n      - patch\n  - apigroups:\n      - "extensions"\n      - "networking.k8s.io"\n    resources:\n      - ingresses\n    verbs:\n      - get\n      - list\n      - watch\n  - apigroups:\n      - "extensions"\n      - "networking.k8s.io"\n    resources:\n      - ingresses/status\n    verbs:\n      - update\n\n---\napiversion: rbac.authorization.k8s.io/v1beta1\nkind: role\nmetadata:\n  name: nginx-ingress-role\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nrules:\n  - apigroups:\n      - ""\n    resources:\n      - configmaps\n      - pods\n      - secrets\n      - namespaces\n    verbs:\n      - get\n  - apigroups:\n      - ""\n    resources:\n      - configmaps\n    resourcenames:\n      # defaults to "<election-id>-<ingress-class>"\n      # here: "<ingress-controller-leader>-<nginx>"\n      # this has to be adapted if you change either parameter\n      # when launching the nginx-ingress-controller.\n      - "ingress-controller-leader-nginx"\n    verbs:\n      - get\n      - update\n  - apigroups:\n      - ""\n    resources:\n      - configmaps\n    verbs:\n      - create\n  - apigroups:\n      - ""\n    resources:\n      - endpoints\n    verbs:\n      - get\n\n---\napiversion: rbac.authorization.k8s.io/v1beta1\nkind: rolebinding\nmetadata:\n  name: nginx-ingress-role-nisa-binding\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: role\n  name: nginx-ingress-role\nsubjects:\n  - kind: serviceaccount\n    name: nginx-ingress-serviceaccount\n    namespace: ingress-nginx\n\n---\napiversion: rbac.authorization.k8s.io/v1beta1\nkind: clusterrolebinding\nmetadata:\n  name: nginx-ingress-clusterrole-nisa-binding\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: nginx-ingress-clusterrole\nsubjects:\n  - kind: serviceaccount\n    name: nginx-ingress-serviceaccount\n    namespace: ingress-nginx\n\n---\n\napiversion: apps/v1\nkind: deployment\nmetadata:\n  name: nginx-ingress-controller\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nspec:\n  replicas: 1\n  selector:\n    matchlabels:\n      app.kubernetes.io/name: ingress-nginx\n      app.kubernetes.io/part-of: ingress-nginx\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/part-of: ingress-nginx\n      annotations:\n        prometheus.io/port: "10254"\n        prometheus.io/scrape: "true"\n    spec:\n      # wait up to five minutes for the drain of connections\n      terminationgraceperiodseconds: 300\n      serviceaccountname: nginx-ingress-serviceaccount\n      nodeselector:\n        kubernetes.io/os: linux\n      containers:\n        - name: nginx-ingress-controller\n          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.29.0\n          args:\n            - /nginx-ingress-controller\n            - --configmap=$(pod_namespace)/nginx-configuration\n            - --tcp-services-configmap=$(pod_namespace)/tcp-services\n            - --udp-services-configmap=$(pod_namespace)/udp-services\n            - --publish-service=$(pod_namespace)/ingress-nginx\n            - --annotations-prefix=nginx.ingress.kubernetes.io\n          securitycontext:\n            allowprivilegeescalation: true\n            capabilities:\n              drop:\n                - all\n              add:\n                - net_bind_service\n            # www-data -> 101\n            runasuser: 101\n          env:\n            - name: pod_name\n              valuefrom:\n                fieldref:\n                  fieldpath: metadata.name\n            - name: pod_namespace\n              valuefrom:\n                fieldref:\n                  fieldpath: metadata.namespace\n          ports:\n            - name: http\n              containerport: 80\n              protocol: tcp\n            - name: https\n              containerport: 443\n              protocol: tcp\n          livenessprobe:\n            failurethreshold: 3\n            httpget:\n              path: /healthz\n              port: 10254\n              scheme: http\n            initialdelayseconds: 10\n            periodseconds: 10\n            successthreshold: 1\n            timeoutseconds: 10\n          readinessprobe:\n            failurethreshold: 3\n            httpget:\n              path: /healthz\n              port: 10254\n              scheme: http\n            periodseconds: 10\n            successthreshold: 1\n            timeoutseconds: 10\n          lifecycle:\n            prestop:\n              exec:\n                command:\n                  - /wait-shutdown\n\n---\n\napiversion: v1\nkind: limitrange\nmetadata:\n  name: ingress-nginx\n  namespace: ingress-nginx\n  labels:\n    app.kubernetes.io/name: ingress-nginx\n    app.kubernetes.io/part-of: ingress-nginx\nspec:\n  limits:\n  - min:\n      memory: 90mi\n      cpu: 100m\n    type: container\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n\n\n启动\n\nkubectl apply -f ingress-nginx-v0.29.0.yaml\n\n\n1\n\n\n# 安装 dashboard\n\nvi dashboard-v2.0.0-rc5.yaml\n\n# copyright 2017 the kubernetes authors.\n#\n# licensed under the apache license, version 2.0 (the "license");\n# you may not use this file except in compliance with the license.\n# you may obtain a copy of the license at\n#\n#     http://www.apache.org/licenses/license-2.0\n#\n# unless required by applicable law or agreed to in writing, software\n# distributed under the license is distributed on an "as is" basis,\n# without warranties or conditions of any kind, either express or implied.\n# see the license for the specific language governing permissions and\n# limitations under the license.\n\napiversion: v1\nkind: namespace\nmetadata:\n  name: kubernetes-dashboard\n\n---\n\napiversion: v1\nkind: serviceaccount\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\n\n---\n\nkind: service\napiversion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 443\n      targetport: 8443\n  selector:\n    k8s-app: kubernetes-dashboard\n\n---\n\napiversion: v1\nkind: secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-certs\n  namespace: kubernetes-dashboard\ntype: opaque\n\n---\n\napiversion: v1\nkind: secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-csrf\n  namespace: kubernetes-dashboard\ntype: opaque\ndata:\n  csrf: ""\n\n---\n\napiversion: v1\nkind: secret\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-key-holder\n  namespace: kubernetes-dashboard\ntype: opaque\n\n---\n\nkind: configmap\napiversion: v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard-settings\n  namespace: kubernetes-dashboard\n\n---\n\nkind: role\napiversion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nrules:\n  # allow dashboard to get, update and delete dashboard exclusive secrets.\n  - apigroups: [""]\n    resources: ["secrets"]\n    resourcenames: ["kubernetes-dashboard-key-holder", "kubernetes-dashboard-certs", "kubernetes-dashboard-csrf"]\n    verbs: ["get", "update", "delete"]\n    # allow dashboard to get and update \'kubernetes-dashboard-settings\' config map.\n  - apigroups: [""]\n    resources: ["configmaps"]\n    resourcenames: ["kubernetes-dashboard-settings"]\n    verbs: ["get", "update"]\n    # allow dashboard to get metrics.\n  - apigroups: [""]\n    resources: ["services"]\n    resourcenames: ["heapster", "dashboard-metrics-scraper"]\n    verbs: ["proxy"]\n  - apigroups: [""]\n    resources: ["services/proxy"]\n    resourcenames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]\n    verbs: ["get"]\n\n---\n\nkind: clusterrole\napiversion: rbac.authorization.k8s.io/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\nrules:\n  # allow metrics scraper to get metrics from the metrics server\n  - apigroups: ["metrics.k8s.io"]\n    resources: ["pods", "nodes"]\n    verbs: ["get", "list", "watch"]\n\n---\n\napiversion: rbac.authorization.k8s.io/v1\nkind: rolebinding\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: role\n  name: kubernetes-dashboard\nsubjects:\n  - kind: serviceaccount\n    name: kubernetes-dashboard\n    namespace: kubernetes-dashboard\n\n---\n\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrolebinding\nmetadata:\n  name: kubernetes-dashboard\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: kubernetes-dashboard\nsubjects:\n  - kind: serviceaccount\n    name: kubernetes-dashboard\n    namespace: kubernetes-dashboard\n\n---\n\nkind: deployment\napiversion: apps/v1\nmetadata:\n  labels:\n    k8s-app: kubernetes-dashboard\n  name: kubernetes-dashboard\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionhistorylimit: 10\n  selector:\n    matchlabels:\n      k8s-app: kubernetes-dashboard\n  template:\n    metadata:\n      labels:\n        k8s-app: kubernetes-dashboard\n    spec:\n      containers:\n        - name: kubernetes-dashboard\n          image: kubernetesui/dashboard:v2.0.0-rc5\n          # imagepullpolicy: always\n          ports:\n            - containerport: 8443\n              protocol: tcp\n          args:\n            - --auto-generate-certificates\n            - --namespace=kubernetes-dashboard\n            # uncomment the following line to manually specify kubernetes api server host\n            # if not specified, dashboard will attempt to auto discover the api server and connect\n            # to it. uncomment only if the default does not work.\n            # - --apiserver-host=http://my-address:port\n          volumemounts:\n            - name: kubernetes-dashboard-certs\n              mountpath: /certs\n              # create on-disk volume to store exec logs\n            - mountpath: /tmp\n              name: tmp-volume\n          livenessprobe:\n            httpget:\n              scheme: https\n              path: /\n              port: 8443\n            initialdelayseconds: 30\n            timeoutseconds: 30\n          securitycontext:\n            allowprivilegeescalation: false\n            readonlyrootfilesystem: true\n            runasuser: 1001\n            runasgroup: 2001\n      volumes:\n        - name: kubernetes-dashboard-certs\n          secret:\n            secretname: kubernetes-dashboard-certs\n        - name: tmp-volume\n          emptydir: {}\n      serviceaccountname: kubernetes-dashboard\n      nodeselector:\n        "beta.kubernetes.io/os": linux\n      # comment the following tolerations if dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: noschedule\n\n---\n\nkind: service\napiversion: v1\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  ports:\n    - port: 8000\n      targetport: 8000\n  selector:\n    k8s-app: dashboard-metrics-scraper\n\n---\n\nkind: deployment\napiversion: apps/v1\nmetadata:\n  labels:\n    k8s-app: dashboard-metrics-scraper\n  name: dashboard-metrics-scraper\n  namespace: kubernetes-dashboard\nspec:\n  replicas: 1\n  revisionhistorylimit: 10\n  selector:\n    matchlabels:\n      k8s-app: dashboard-metrics-scraper\n  template:\n    metadata:\n      labels:\n        k8s-app: dashboard-metrics-scraper\n      annotations:\n        seccomp.security.alpha.kubernetes.io/pod: \'runtime/default\'\n    spec:\n      containers:\n        - name: dashboard-metrics-scraper\n          image: kubernetesui/metrics-scraper:v1.0.3\n          ports:\n            - containerport: 8000\n              protocol: tcp\n          livenessprobe:\n            httpget:\n              scheme: http\n              path: /\n              port: 8000\n            initialdelayseconds: 30\n            timeoutseconds: 30\n          volumemounts:\n          - mountpath: /tmp\n            name: tmp-volume\n          securitycontext:\n            allowprivilegeescalation: false\n            readonlyrootfilesystem: true\n            runasuser: 1001\n            runasgroup: 2001\n      serviceaccountname: kubernetes-dashboard\n      nodeselector:\n        "beta.kubernetes.io/os": linux\n      # comment the following tolerations if dashboard must not be deployed on master\n      tolerations:\n        - key: node-role.kubernetes.io/master\n          effect: noschedule\n      volumes:\n        - name: tmp-volume\n          emptydir: {}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n\n\n启动\n\nkubectl apply -f dashboard-v2.0.0-rc5.yaml\n\n\n1\n\n\n# 安装 kuboard\n\nvi kuboard.yaml\n\napiversion: apps/v1\nkind: deployment\nmetadata:\n  name: kuboard\n  namespace: kube-system\n  annotations:\n    k8s.eip.work/displayname: kuboard\n    k8s.eip.work/ingress: "true"\n    k8s.eip.work/service: nodeport\n    k8s.eip.work/workload: kuboard\n  labels:\n    k8s.eip.work/layer: monitor\n    k8s.eip.work/name: kuboard\nspec:\n  replicas: 1\n  selector:\n    matchlabels:\n      k8s.eip.work/layer: monitor\n      k8s.eip.work/name: kuboard\n  template:\n    metadata:\n      labels:\n        k8s.eip.work/layer: monitor\n        k8s.eip.work/name: kuboard\n    spec:\n      containers:\n      - name: kuboard\n        image: eipwork/kuboard:latest\n        imagepullpolicy: ifnotpresent\n      tolerations:\n      - key: node-role.kubernetes.io/master\n        effect: noschedule\n\n---\napiversion: v1\nkind: service\nmetadata:\n  name: kuboard\n  namespace: kube-system\nspec:\n  type: nodeport\n  ports:\n  - name: http\n    port: 80\n    targetport: 80\n    nodeport: 32567\n  selector:\n    k8s.eip.work/layer: monitor\n    k8s.eip.work/name: kuboard\n\n---\napiversion: v1\nkind: serviceaccount\nmetadata:\n  name: kuboard-user\n  namespace: kube-system\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrolebinding\nmetadata:\n  name: kuboard-user\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: cluster-admin\nsubjects:\n- kind: serviceaccount\n  name: kuboard-user\n  namespace: kube-system\n\n---\napiversion: v1\nkind: serviceaccount\nmetadata:\n  name: kuboard-viewer\n  namespace: kube-system\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrolebinding\nmetadata:\n  name: kuboard-viewer\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: view\nsubjects:\n- kind: serviceaccount\n  name: kuboard-viewer\n  namespace: kube-system\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrolebinding\nmetadata:\n  name: kuboard-viewer:kuboard-minimum-role\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: kuboard-minimum-role\nsubjects:\n  - kind: serviceaccount\n    name: kuboard-viewer\n    namespace: kube-system\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrole\nmetadata:\n  name: kuboard-minimum-role\nrules:\n  - apigroups:\n    - \'\'\n    resources:\n    - \'namespaces\'\n    - \'nodes\'\n    verbs:\n    - \'list\'\n\n---\napiversion: extensions/v1beta1\nkind: ingress\nmetadata:\n  name: kuboard\n  namespace: kube-system\n  annotations:\n    k8s.eip.work/displayname: kuboard\n    k8s.eip.work/workload: kuboard\n    nginx.org/websocket-services: "kuboard"\n    nginx.com/sticky-cookie-services: "servicename=kuboard srv_id expires=1h path=/"\nspec:\n  rules:\n  - host: kuboard.yourdomain.com\n    http:\n      paths:\n      - path: /\n        backend:\n          servicename: kuboard\n          serviceport: http\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n\n\n启动\n\nkubectl apply -f kuboard.yaml\n\n\n1\n\n\nvi metrics-server-v0.3.6.yaml\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrole\nmetadata:\n  name: system:aggregated-metrics-reader\n  labels:\n    rbac.authorization.k8s.io/aggregate-to-view: "true"\n    rbac.authorization.k8s.io/aggregate-to-edit: "true"\n    rbac.authorization.k8s.io/aggregate-to-admin: "true"\nrules:\n- apigroups: ["metrics.k8s.io"]\n  resources: ["pods", "nodes"]\n  verbs: ["get", "list", "watch"]\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrolebinding\nmetadata:\n  name: metrics-server:system:auth-delegator\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: system:auth-delegator\nsubjects:\n- kind: serviceaccount\n  name: metrics-server\n  namespace: kube-system\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: rolebinding\nmetadata:\n  name: metrics-server-auth-reader\n  namespace: kube-system\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: role\n  name: extension-apiserver-authentication-reader\nsubjects:\n- kind: serviceaccount\n  name: metrics-server\n  namespace: kube-system\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrole\nmetadata:\n  name: system:metrics-server\nrules:\n- apigroups:\n  - ""\n  resources:\n  - pods\n  - nodes\n  - nodes/stats\n  - namespaces\n  verbs:\n  - get\n  - list\n  - watch\n\n---\napiversion: rbac.authorization.k8s.io/v1\nkind: clusterrolebinding\nmetadata:\n  name: system:metrics-server\nroleref:\n  apigroup: rbac.authorization.k8s.io\n  kind: clusterrole\n  name: system:metrics-server\nsubjects:\n- kind: serviceaccount\n  name: metrics-server\n  namespace: kube-system\n  \n---\napiversion: apiregistration.k8s.io/v1beta1\nkind: apiservice\nmetadata:\n  name: v1beta1.metrics.k8s.io\nspec:\n  service:\n    name: metrics-server\n    namespace: kube-system\n  group: metrics.k8s.io\n  version: v1beta1\n  insecureskiptlsverify: true\n  grouppriorityminimum: 100\n  versionpriority: 100\n\n---\napiversion: v1\nkind: serviceaccount\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n---\napiversion: apps/v1\nkind: deployment\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    k8s-app: metrics-server\nspec:\n  selector:\n    matchlabels:\n      k8s-app: metrics-server\n  template:\n    metadata:\n      name: metrics-server\n      labels:\n        k8s-app: metrics-server\n    spec:\n      serviceaccountname: metrics-server\n      volumes:\n      # mount in tmp so we can safely use from-scratch images and/or read-only containers\n      - name: tmp-dir\n        emptydir: {}\n      containers:\n      - name: metrics-server\n        image: registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6\n        # command:\n        # - /metrics-server\n        # - --kubelet-insecure-tls\n        # - --kubelet-preferred-address-types=internalip \n        args:\n          - --cert-dir=/tmp\n          - --secure-port=4443\n          - --kubelet-insecure-tls=true\n          - --kubelet-preferred-address-types=internalip\n        ports:\n        - name: main-port\n          containerport: 4443\n          protocol: tcp\n        securitycontext:\n          readonlyrootfilesystem: true\n          runasnonroot: true\n          runasuser: 1000\n        imagepullpolicy: ifnotpresent\n        volumemounts:\n        - name: tmp-dir\n          mountpath: /tmp\n      nodeselector:\n        beta.kubernetes.io/os: linux\n\n---\napiversion: v1\nkind: service\nmetadata:\n  name: metrics-server\n  namespace: kube-system\n  labels:\n    kubernetes.io/name: "metrics-server"\n    kubernetes.io/cluster-service: "true"\nspec:\n  selector:\n    k8s-app: metrics-server\n  ports:\n  - port: 443\n    protocol: tcp\n    targetport: main-port\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n\n\n启动\n\nkubectl apply -f metrics-server-v0.3.6.yaml\n\n\n1\n\n\n\n# 安装worker（202）\n\n\n# 设置hostname\n\n执行命令\n\nhostnamectl set-hostname k8s-worker202\necho "127.0.0.1   k8s-worker202" >> /etc/hosts \n\n\n1\n2\n\n\n\n# 安装docker\n\n\n# 关闭防火墙\n\nsystemctl stop firewalld\nsystemctl disable firewalld\n\n# 关闭 selinux\nsetenforce 0\nsed -i "s/selinux=enforcing/selinux=disabled/g" /etc/selinux/config\n\n# 关闭 swap\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\n\n# 修改 /etc/sysctl.conf\n# 如果有配置，则修改\nsed -i "s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"  /etc/sysctl.conf\n# 可能没有，追加\necho "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf\n# 执行命令以应用\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 安装k8s\n\n设置k8s yum源\n\ncat <<eof > /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\neof\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n清理yum源\n\nyum clean all\nyum -y makecache\n\n\n1\n2\n\n\n执行安装命令\n\n# 卸载旧版本\nyum remove -y kubelet kubeadm kubectl\n\n# 安装kubelet、kubeadm、kubectl\nyum install -y kubelet-1.17.1 kubeadm-1.17.1 kubectl-1.17.1\n\n\n1\n2\n3\n4\n5\n\n\n启动\n\nsystemctl enable kubelet && systemctl start kubelet\n\n\n1\n\n\n查看版本\n\nkubectl version\n\n\n1\n\n\n\n# 配置worker\n\n# 下载镜像\n\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker pull registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5\n\ndocker pull calico/cni:v3.10.3\ndocker pull calico/pod2daemon-flexvol:v3.10.3\ndocker pull calico/node:v3.10.3\ndocker pull calico/kube-controllers:v3.10.3\ndocker pull quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.29.0\ndocker pull  kubernetesui/dashboard:v2.0.0-rc5\ndocker pull  kubernetesui/metrics-scraper:v1.0.3\ndocker pull  eipwork/kuboard:latest\ndocker pull  registry.cn-hangzhou.aliyuncs.com/google_containers/metrics-server-amd64:v0.3.6\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n# 更换镜像名称\n\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1 k8s.gcr.io/kube-apiserver:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1 k8s.gcr.io/kube-controller-manager:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1 k8s.gcr.io/kube-scheduler:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1 k8s.gcr.io/kube-proxy:v1.17.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1 k8s.gcr.io/pause:3.1\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0 k8s.gcr.io/etcd:3.4.3-0\ndocker tag registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5 k8s.gcr.io/coredns:1.6.5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 删除旧标签\n\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-apiserver:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-controller-manager:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-scheduler:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy:v1.17.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.1\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/etcd:3.4.3-0\ndocker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/coredns:1.6.5\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 配置host\n\necho "192.168.213.201   apiserver.k8s.com" >> /etc/hosts\n\n\n1\n\n\n# 获取参数\n\n获取加入master的参数（是在master节点上执行。）\n\n# 在 master 节点执行\nkubeadm token create --print-join-command\n\n# 得到token和cert，这两个参数在2个小时内可以重复使用，超过以后就得再次生成\nkubeadm join apiserver.k8s.com:6443 --token t8rn2w.zwfd42edrro02c50     --discovery-token-ca-cert-hash sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\n\n\n1\n2\n3\n4\n5\n\n\n# 设置参数并加入\n\n在worker节点上执行\n\nkubeadm join apiserver.k8s.com:6443 \\\n   --token t8rn2w.zwfd42edrro02c50 \\\n   --discovery-token-ca-cert-hash sha256:fe343cc72e449988acf789ba1c47fe83c7f80534fb7e0770f1fbe9b3facdbadb\n\n\n1\n2\n3\n\n\n\n# 完成\n\n现在你可以在master节点，执行kubectl get nodes看到所有节点都在线了。\n\nkubectl get nodes\n\n\n\n\n# 访问kuboard\n\nkuboard是一个非常方便的web管理界面，安装完以后可以通过http://任意节点ip:32567/访问。详细使用请参考 www.kuboard.cn\n\n\n\n\n# 获取登陆token\n\n在 master 节点上执行此命令\n\nkubectl -n kube-system get secret $(kubectl -n kube-system get secret | grep kuboard-user | awk \'{print $1}\') -o go-template=\'{{.data.token}}\' | base64 -d\n\n\n1\n\n\n\n# 登录后\n\n',charsets:{cjk:!0},lastUpdated:"2023/03/14, 05:49:29",lastUpdatedTimestamp:1678772969e3},{title:"K3S-CICD",frontmatter:{title:"K3S-CICD",date:"2023-03-14T10:54:58.000Z",permalink:"/pages/de1358/",categories:["Deploy"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/03.Deploy/10.K3S-CICD.html",relativePath:"03.Deploy/10.K3S-CICD.md",key:"v-6cba1c56",path:"/pages/de1358/",headers:[{level:2,title:"初始化准备（ALL of SERVER）",slug:"初始化准备-all-of-server",normalizedTitle:"初始化准备（all of server）",charIndex:1583},{level:3,title:"设置各个主机名称",slug:"设置各个主机名称",normalizedTitle:"设置各个主机名称",charIndex:1608},{level:2,title:"部署Docker（ALL of SERVER）",slug:"部署docker-all-of-server",normalizedTitle:"部署docker（all of server）",charIndex:2049},{level:3,title:"上传附件",slug:"上传附件",normalizedTitle:"上传附件",charIndex:2077},{level:3,title:"解压赋权并安装",slug:"解压赋权并安装",normalizedTitle:"解压赋权并安装",charIndex:2124},{level:3,title:"安装完成",slug:"安装完成",normalizedTitle:"安装完成",charIndex:2291},{level:2,title:"关闭防火墙（ALL of SERVER）",slug:"关闭防火墙-all-of-server",normalizedTitle:"关闭防火墙（all of server）",charIndex:2302},{level:3,title:"关闭防火墙",slug:"关闭防火墙",normalizedTitle:"关闭防火墙",charIndex:2302},{level:3,title:"重启Docker",slug:"重启docker",normalizedTitle:"重启docker",charIndex:3090},{level:2,title:"部署Harbor（222）",slug:"部署harbor-222",normalizedTitle:"部署harbor（222）",charIndex:3142},{level:3,title:"上传附件",slug:"上传附件-2",normalizedTitle:"上传附件",charIndex:2077},{level:3,title:"解压",slug:"解压",normalizedTitle:"解压",charIndex:2124},{level:3,title:"新建文件harbor.yml",slug:"新建文件harbor-yml",normalizedTitle:"新建文件harbor.yml",charIndex:3295},{level:3,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:2129},{level:3,title:"安装完成验证",slug:"安装完成验证",normalizedTitle:"安装完成验证",charIndex:4237},{level:2,title:"Docker配置Harbor（ALL of SERVER）",slug:"docker配置harbor-all-of-server",normalizedTitle:"docker配置harbor（all of server）",charIndex:4277},{level:3,title:"配置daemon.json",slug:"配置daemon-json",normalizedTitle:"配置daemon.json",charIndex:4311},{level:3,title:"注意",slug:"注意",normalizedTitle:"注意",charIndex:4635},{level:3,title:"登录docker",slug:"登录docker",normalizedTitle:"登录docker",charIndex:4769},{level:2,title:"部署Mysql（221）",slug:"部署mysql-221",normalizedTitle:"部署mysql（221）",charIndex:4851},{level:3,title:"编排文件并启动",slug:"编排文件并启动",normalizedTitle:"编排文件并启动",charIndex:4868},{level:3,title:"创建K3S数据库",slug:"创建k3s数据库",normalizedTitle:"创建k3s数据库",charIndex:5580},{level:2,title:"部署K3S集群(201\\~213)",slug:"部署k3s集群-201-213",normalizedTitle:"部署k3s集群(201~213)",charIndex:5608},{level:3,title:"部署Master（201）",slug:"部署master-201",normalizedTitle:"部署master（201）",charIndex:5629},{level:4,title:"部署",slug:"部署",normalizedTitle:"部署",charIndex:1560},{level:4,title:"查看Token",slug:"查看token",normalizedTitle:"查看token",charIndex:5975},{level:3,title:"部署Slave（202~203）",slug:"部署slave-202-203",normalizedTitle:"部署slave（202~203）",charIndex:6191},{level:4,title:"部署（202~203）",slug:"部署-202-203",normalizedTitle:"部署（202~203）",charIndex:6211},{level:3,title:"设置202和203 Slave角色（201）",slug:"设置202和203-slave角色-201",normalizedTitle:"设置202和203 slave角色（201）",charIndex:6575},{level:3,title:"部署Master（211）",slug:"部署master-211",normalizedTitle:"部署master（211）",charIndex:6759},{level:4,title:"部署",slug:"部署-2",normalizedTitle:"部署",charIndex:1560},{level:3,title:"部署Slave（212~213）",slug:"部署slave-212-213",normalizedTitle:"部署slave（212~213）",charIndex:7251},{level:4,title:"部署（212~213）",slug:"部署-212-213",normalizedTitle:"部署（212~213）",charIndex:7271},{level:3,title:"设置212和213 Slave角色（211）",slug:"设置212和213-slave角色-211",normalizedTitle:"设置212和213 slave角色（211）",charIndex:7635},{level:3,title:"完成部署",slug:"完成部署",normalizedTitle:"完成部署",charIndex:7819},{level:3,title:"注",slug:"注",normalizedTitle:"注",charIndex:591},{level:4,title:"卸载",slug:"卸载",normalizedTitle:"卸载",charIndex:7865},{level:4,title:"查看状态",slug:"查看状态",normalizedTitle:"查看状态",charIndex:8102},{level:4,title:"查看节点",slug:"查看节点",normalizedTitle:"查看节点",charIndex:8174},{level:4,title:"查看版本",slug:"查看版本",normalizedTitle:"查看版本",charIndex:8212},{level:2,title:"部署Rancher（221）",slug:"部署rancher-221",normalizedTitle:"部署rancher（221）",charIndex:9056},{level:3,title:"申请下载证书",slug:"申请下载证书",normalizedTitle:"申请下载证书",charIndex:9075},{level:3,title:"编排文件并启动",slug:"编排文件并启动-2",normalizedTitle:"编排文件并启动",charIndex:4868},{level:3,title:"配置Rancher集群",slug:"配置rancher集群",normalizedTitle:"配置rancher集群",charIndex:9824},{level:4,title:"浏览器访问证书申请域名地址",slug:"浏览器访问证书申请域名地址",normalizedTitle:"浏览器访问证书申请域名地址",charIndex:9839},{level:4,title:"根据提示查找密码",slug:"根据提示查找密码",normalizedTitle:"根据提示查找密码",charIndex:9908},{level:4,title:"输入新密码",slug:"输入新密码",normalizedTitle:"输入新密码",charIndex:10132},{level:4,title:"设置中文",slug:"设置中文",normalizedTitle:"设置中文",charIndex:10164},{level:4,title:"导入集群",slug:"导入集群",normalizedTitle:"导入集群",charIndex:10174},{level:5,title:"点击导入已有集群",slug:"点击导入已有集群",normalizedTitle:"点击导入已有集群",charIndex:10182},{level:5,title:"点击通用",slug:"点击通用",normalizedTitle:"点击通用",charIndex:10196},{level:5,title:"输入集群名称，点击创建",slug:"输入集群名称-点击创建",normalizedTitle:"输入集群名称，点击创建",charIndex:10206},{level:5,title:"复制命令",slug:"复制命令",normalizedTitle:"复制命令",charIndex:10223},{level:5,title:"K3s集群Master201服务器上执行",slug:"k3s集群master201服务器上执行",normalizedTitle:"k3s集群master201服务器上执行",charIndex:10322},{level:5,title:"刷新rancher首页",slug:"刷新rancher首页",normalizedTitle:"刷新rancher首页",charIndex:10348},{level:3,title:"若需更新证书",slug:"若需更新证书",normalizedTitle:"若需更新证书",charIndex:10385},{level:2,title:"部署NFS（ALL of SERVER）",slug:"部署nfs-all-of-server",normalizedTitle:"部署nfs（all of server）",charIndex:10529},{level:3,title:"安装命令",slug:"安装命令",normalizedTitle:"安装命令",charIndex:10554},{level:3,title:"服务端配置（221）",slug:"服务端配置-221",normalizedTitle:"服务端配置（221）",charIndex:10781},{level:4,title:"创建共享文件夹",slug:"创建共享文件夹",normalizedTitle:"创建共享文件夹",charIndex:10837},{level:4,title:"NFS配置",slug:"nfs配置",normalizedTitle:"nfs配置",charIndex:10877},{level:3,title:"客户端测试（201）",slug:"客户端测试-201",normalizedTitle:"客户端测试（201）",charIndex:11091},{level:4,title:"创建共享文件夹",slug:"创建共享文件夹-2",normalizedTitle:"创建共享文件夹",charIndex:10837},{level:4,title:"挂载测试",slug:"挂载测试",normalizedTitle:"挂载测试",charIndex:11153},{level:4,title:"查看挂载情况",slug:"查看挂载情况",normalizedTitle:"查看挂载情况",charIndex:11233},{level:4,title:"卸载",slug:"卸载-2",normalizedTitle:"卸载",charIndex:7865},{level:2,title:"部署Gitlab（222）",slug:"部署gitlab-222",normalizedTitle:"部署gitlab（222）",charIndex:11304},{level:2,title:"部署Gitlab（方式二）",slug:"部署gitlab-方式二",normalizedTitle:"部署gitlab（方式二）",charIndex:12178},{level:3,title:"创建项目",slug:"创建项目",normalizedTitle:"创建项目",charIndex:12196},{level:3,title:"创建命名空间",slug:"创建命名空间",normalizedTitle:"创建命名空间",charIndex:12252},{level:3,title:"创建工作负载",slug:"创建工作负载",normalizedTitle:"创建工作负载",charIndex:12293},{level:4,title:"Containers",slug:"containers",normalizedTitle:"containers",charIndex:12335},{level:4,title:"存储挂载NFS",slug:"存储挂载nfs",normalizedTitle:"存储挂载nfs",charIndex:12576},{level:4,title:"点击创建完成启动",slug:"点击创建完成启动",normalizedTitle:"点击创建完成启动",charIndex:12767},{level:4,title:"服务发现",slug:"服务发现",normalizedTitle:"服务发现",charIndex:12781},{level:4,title:"浏览器访问",slug:"浏览器访问",normalizedTitle:"浏览器访问",charIndex:9839},{level:4,title:"登录密码（221）",slug:"登录密码-221",normalizedTitle:"登录密码（221）",charIndex:12851},{level:2,title:"部署Jenkins（222）",slug:"部署jenkins-222",normalizedTitle:"部署jenkins（222）",charIndex:13045},{level:3,title:"制作镜像",slug:"制作镜像",normalizedTitle:"制作镜像",charIndex:13064},{level:4,title:"构建镜像",slug:"构建镜像",normalizedTitle:"构建镜像",charIndex:13072},{level:4,title:"生成镜像",slug:"生成镜像",normalizedTitle:"生成镜像",charIndex:13116},{level:3,title:"创建启动",slug:"创建启动",normalizedTitle:"创建启动",charIndex:13356},{level:3,title:"浏览器访问",slug:"浏览器访问-2",normalizedTitle:"浏览器访问",charIndex:9839},{level:3,title:"登录密码",slug:"登录密码",normalizedTitle:"登录密码",charIndex:11984},{level:2,title:"初始化Jenkins",slug:"初始化jenkins",normalizedTitle:"初始化jenkins",charIndex:14195},{level:3,title:"初始化",slug:"初始化",normalizedTitle:"初始化",charIndex:1583},{level:3,title:"配置",slug:"配置",normalizedTitle:"配置",charIndex:4283},{level:4,title:"查看java和maven安装地址",slug:"查看java和maven安装地址",normalizedTitle:"查看java和maven安装地址",charIndex:14300},{level:4,title:"配置JDK",slug:"配置jdk",normalizedTitle:"配置jdk",charIndex:14720},{level:4,title:"配置Maven",slug:"配置maven",normalizedTitle:"配置maven",charIndex:14889},{level:3,title:"自定义安装插件",slug:"自定义安装插件",normalizedTitle:"自定义安装插件",charIndex:14984},{level:2,title:"测试Jenkins",slug:"测试jenkins",normalizedTitle:"测试jenkins",charIndex:15036},{level:3,title:"测试(docker-maven)",slug:"测试-docker-maven",normalizedTitle:"测试(docker-maven)",charIndex:15050},{level:4,title:"创建流水线任务",slug:"创建流水线任务",normalizedTitle:"创建流水线任务",charIndex:15070},{level:4,title:"pipeline脚本",slug:"pipeline脚本",normalizedTitle:"pipeline脚本",charIndex:15083},{level:4,title:"构建触发器（关联Gitlab）",slug:"构建触发器-关联gitlab",normalizedTitle:"构建触发器（关联gitlab）",charIndex:15408},{level:4,title:"立即构建",slug:"立即构建",normalizedTitle:"立即构建",charIndex:15527},{level:2,title:"初始化Harbor",slug:"初始化harbor",normalizedTitle:"初始化harbor",charIndex:15545},{level:2,title:"初始化Gitlab",slug:"初始化gitlab",normalizedTitle:"初始化gitlab",charIndex:15668},{level:3,title:"登录",slug:"登录",normalizedTitle:"登录",charIndex:4769},{level:3,title:"创建用户",slug:"创建用户",normalizedTitle:"创建用户",charIndex:15824},{level:4,title:"创建用户",slug:"创建用户-2",normalizedTitle:"创建用户",charIndex:15824},{level:4,title:"初始化密码",slug:"初始化密码",normalizedTitle:"初始化密码",charIndex:12915},{level:3,title:"初始化项目(root权限)",slug:"初始化项目-root权限",normalizedTitle:"初始化项目(root权限)",charIndex:15953},{level:4,title:"创建组",slug:"创建组",normalizedTitle:"创建组",charIndex:15970},{level:4,title:"创建空项目",slug:"创建空项目",normalizedTitle:"创建空项目",charIndex:15990},{level:4,title:"创建dev分支",slug:"创建dev分支",normalizedTitle:"创建dev分支",charIndex:16028},{level:4,title:"提交项目代码",slug:"提交项目代码",normalizedTitle:"提交项目代码",charIndex:16043},{level:4,title:"赋权账号",slug:"赋权账号",normalizedTitle:"赋权账号",charIndex:16093},{level:2,title:"设置jenkins 用户ssh秘钥",slug:"设置jenkins-用户ssh秘钥",normalizedTitle:"设置jenkins 用户ssh秘钥",charIndex:16135},{level:2,title:"获取Access Tokens",slug:"获取access-tokens",normalizedTitle:"获取access tokens",charIndex:16321},{level:2,title:"Jenkins配置Git/GitLab",slug:"jenkins配置git-gitlab",normalizedTitle:"jenkins配置git/gitlab",charIndex:16406},{level:3,title:"Jenkins配置GitLab",slug:"jenkins配置gitlab",normalizedTitle:"jenkins配置gitlab",charIndex:16430},{level:3,title:"Jenkins配置Git",slug:"jenkins配置git",normalizedTitle:"jenkins配置git",charIndex:16406},{level:2,title:"创建Jenkins-job(gitlab)",slug:"创建jenkins-job-gitlab",normalizedTitle:"创建jenkins-job(gitlab)",charIndex:16792},{level:3,title:"新建Item：ok-springboot-imdemo",slug:"新建item-ok-springboot-imdemo",normalizedTitle:"新建item：ok-springboot-imdemo",charIndex:16818},{level:3,title:"配置",slug:"配置-2",normalizedTitle:"配置",charIndex:4283},{level:4,title:"流水线",slug:"流水线",normalizedTitle:"流水线",charIndex:15072},{level:4,title:"构建触发器",slug:"构建触发器",normalizedTitle:"构建触发器",charIndex:15408},{level:2,title:"Rancher创建密文-Harbor（K3S）",slug:"rancher创建密文-harbor-k3s",normalizedTitle:"rancher创建密文-harbor（k3s）",charIndex:17209},{level:2,title:"Rancher更新镜像构建",slug:"rancher更新镜像构建",normalizedTitle:"rancher更新镜像构建",charIndex:17277},{level:3,title:"下载CLI",slug:"下载cli",normalizedTitle:"下载cli",charIndex:17295},{level:3,title:"下载kubectl",slug:"下载kubectl",normalizedTitle:"下载kubectl",charIndex:17334},{level:3,title:"构建镜像并上传",slug:"构建镜像并上传",normalizedTitle:"构建镜像并上传",charIndex:17475},{level:2,title:"Jenkins构建微服务镜像",slug:"jenkins构建微服务镜像",normalizedTitle:"jenkins构建微服务镜像",charIndex:18132},{level:2,title:"Rancher创建微服务",slug:"rancher创建微服务",normalizedTitle:"rancher创建微服务",charIndex:18267},{level:3,title:"创建项目",slug:"创建项目-2",normalizedTitle:"创建项目",charIndex:12196},{level:3,title:"创建命名空间",slug:"创建命名空间-2",normalizedTitle:"创建命名空间",charIndex:12252},{level:3,title:"创建负载",slug:"创建负载",normalizedTitle:"创建负载",charIndex:18345},{level:2,title:"Gitlab触发Jenkins",slug:"gitlab触发jenkins",normalizedTitle:"gitlab触发jenkins",charIndex:18545},{level:3,title:"Gitlab取消限制策略",slug:"gitlab取消限制策略",normalizedTitle:"gitlab取消限制策略",charIndex:18565},{level:3,title:"Jenkins取消限制策略",slug:"jenkins取消限制策略",normalizedTitle:"jenkins取消限制策略",charIndex:18750},{level:3,title:"配置触发",slug:"配置触发",normalizedTitle:"配置触发",charIndex:18987},{level:2,title:"触发Rancher更新镜像",slug:"触发rancher更新镜像",normalizedTitle:"触发rancher更新镜像",charIndex:19180},{level:3,title:"创建API密钥",slug:"创建api密钥",normalizedTitle:"创建api密钥",charIndex:19198},{level:3,title:"复制持有者令牌",slug:"复制持有者令牌",normalizedTitle:"复制持有者令牌",charIndex:19230},{level:3,title:"复制API地址",slug:"复制api地址",normalizedTitle:"复制api地址",charIndex:19315},{level:3,title:"复制项目PROJECT ID",slug:"复制项目project-id",normalizedTitle:"复制项目project id",charIndex:19588},{level:3,title:"复制项目ContainerName",slug:"复制项目containername",normalizedTitle:"复制项目containername",charIndex:19725},{level:3,title:"更新镜像命令说明",slug:"更新镜像命令说明",normalizedTitle:"更新镜像命令说明",charIndex:19778},{level:3,title:"更新镜像容器命令示例",slug:"更新镜像容器命令示例",normalizedTitle:"更新镜像容器命令示例",charIndex:20378}],headersStr:"初始化准备（ALL of SERVER） 设置各个主机名称 部署Docker（ALL of SERVER） 上传附件 解压赋权并安装 安装完成 关闭防火墙（ALL of SERVER） 关闭防火墙 重启Docker 部署Harbor（222） 上传附件 解压 新建文件harbor.yml 安装 安装完成验证 Docker配置Harbor（ALL of SERVER） 配置daemon.json 注意 登录docker 部署Mysql（221） 编排文件并启动 创建K3S数据库 部署K3S集群(201\\~213) 部署Master（201） 部署 查看Token 部署Slave（202~203） 部署（202~203） 设置202和203 Slave角色（201） 部署Master（211） 部署 部署Slave（212~213） 部署（212~213） 设置212和213 Slave角色（211） 完成部署 注 卸载 查看状态 查看节点 查看版本 部署Rancher（221） 申请下载证书 编排文件并启动 配置Rancher集群 浏览器访问证书申请域名地址 根据提示查找密码 输入新密码 设置中文 导入集群 点击导入已有集群 点击通用 输入集群名称，点击创建 复制命令 K3s集群Master201服务器上执行 刷新rancher首页 若需更新证书 部署NFS（ALL of SERVER） 安装命令 服务端配置（221） 创建共享文件夹 NFS配置 客户端测试（201） 创建共享文件夹 挂载测试 查看挂载情况 卸载 部署Gitlab（222） 部署Gitlab（方式二） 创建项目 创建命名空间 创建工作负载 Containers 存储挂载NFS 点击创建完成启动 服务发现 浏览器访问 登录密码（221） 部署Jenkins（222） 制作镜像 构建镜像 生成镜像 创建启动 浏览器访问 登录密码 初始化Jenkins 初始化 配置 查看java和maven安装地址 配置JDK 配置Maven 自定义安装插件 测试Jenkins 测试(docker-maven) 创建流水线任务 pipeline脚本 构建触发器（关联Gitlab） 立即构建 初始化Harbor 初始化Gitlab 登录 创建用户 创建用户 初始化密码 初始化项目(root权限) 创建组 创建空项目 创建dev分支 提交项目代码 赋权账号 设置jenkins 用户ssh秘钥 获取Access Tokens Jenkins配置Git/GitLab Jenkins配置GitLab Jenkins配置Git 创建Jenkins-job(gitlab) 新建Item：ok-springboot-imdemo 配置 流水线 构建触发器 Rancher创建密文-Harbor（K3S） Rancher更新镜像构建 下载CLI 下载kubectl 构建镜像并上传 Jenkins构建微服务镜像 Rancher创建微服务 创建项目 创建命名空间 创建负载 Gitlab触发Jenkins Gitlab取消限制策略 Jenkins取消限制策略 配置触发 触发Rancher更新镜像 创建API密钥 复制持有者令牌 复制API地址 复制项目PROJECT ID 复制项目ContainerName 更新镜像命令说明 更新镜像容器命令示例",content:'# 集群规划\n\n主机              IP                内存    硬盘         应用\nmaster201       192.168.213.201   8G    40G        K3S\nslave202        192.168.213.202   4G    40G        K3S\nslave203        192.168.213.203   4G    40G        K3S\nmaster211       192.168.213.211   4G    40G        K3S\nslave212        192.168.213.212   4G    40G        K3S\nslave213        192.168.213.213   4G    40G        K3S\nmiddleware221   192.168.213.221   4G    40G+100G   Mysql+NFS+Rancher\nmiddleware222   192.168.213.222   10G   40G+100G   Harbor+Jenkins+Gitlab\n\n图例：\n\n\n\n\n# 版本\n\n组件               版本                      备注\nCentOS           7.9.2009 (Core)         CentOS-7-x86_64-Minimal-2009.iso\nK3S              v1.25.3+k3s1            -\nMysql            5.7.39                  K3S外部存储\nJenkins          jenkins:2.377-centos7   CI/CD\nHarbor           v2.2.3                  Docker镜像存储仓库\nGitlab           gitlab-ce:15.5.4-ce.0   Git仓库\nRancher          2.6.9                   K3S界面管理\nDocker           20.10.18                -\nDocker Compose   v2.10.2                 -\n\n\n# 系统信息\n\n系统        地址                              账号               密码\nRancher   https://rancher.ok96.cn:8443/   admin            Rancher123456\nHarbor    http://192.168.213.222:22280    admin            Harbor12345\nJenkins   http://192.168.213.222:7080     admin            Admin123\nGitlab    http://192.168.213.222:8929     root             gTgBikdfbPhNSzcztYyGfXMauatWUP52HsZbZowmgow=\n-         jenkins                         Jenkins123       -\nNFS       192.168.213.221                 目录：/data/share   -\n\n\n# 自动构建部署流程图\n\n\n\n\n# 环境部署步骤\n\n\n# 初始化准备（ALL of SERVER）\n\n\n# 设置各个主机名称\n\n在201上执行命令：\n\nhostnamectl set-hostname master201\n\n\n1\n\n\n在202上执行命令：\n\nhostnamectl set-hostname slave202\n\n\n1\n\n\n在203上执行命令：\n\nhostnamectl set-hostname slave203\n\n\n1\n\n\n在211上执行命令：\n\nhostnamectl set-hostname master211\n\n\n1\n\n\n在212上执行命令：\n\nhostnamectl set-hostname slave212\n\n\n1\n\n\n在213上执行命令：\n\nhostnamectl set-hostname slave213\n\n\n1\n\n\n在221上执行命令：\n\nhostnamectl set-hostname middleware221\n\n\n1\n\n\n在222上执行命令：\n\nhostnamectl set-hostname middleware222\n\n\n1\n\n\n\n# 部署Docker（ALL of SERVER）\n\n\n# 上传附件\n\n上传BinaryInstallation.zip压缩包到/data目录下\n\n\n# 解压赋权并安装\n\n命令：\n\nyum install -y unzip\ncd /data && unzip BinaryInstallation.zip\ncd /data/BinaryInstallation && chmod -R 777 docker-init.sh\n./docker-init.sh\n\n\n1\n2\n3\n4\n\n\n\n# 安装完成\n\n\n\n\n# 关闭防火墙（ALL of SERVER）\n\n\n# 关闭防火墙\n\n执行命令\n\nsystemctl stop firewalld\nsystemctl disable firewalld\nsetenforce 0\nsed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\nsed -i "s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"  /etc/sysctl.conf\necho "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 重启Docker\n\n执行命令\n\n  systemctl restart docker\n\n\n1\n\n\n\n# 部署Harbor（222）\n\n\n# 上传附件\n\n上传harbor-offline-installer-v2.2.3.tgz压缩包到/data目录下\n\n\n# 解压\n\n执行命令\n\ncd /data\ntar xzvf harbor-offline-installer-v2.2.3.tgz\n\n\n1\n2\n\n\n\n# 新建文件harbor.yml\n\n内容可以参考harbor.yml.tmpl\n\n修改 hostname: 192.168.213.222 为本机IP\n\n修改 端口\n\n修改 数据存储地址/data/harbor/data\n\n注释 https\n\n命令\n\ncd /data/harbor\nvi harbor.yml\n\n\n1\n2\n\n\n输入文本内容\n\nhostname: 192.168.213.222 \n\nhttp:\n  port: 22280\n\nharbor_admin_password: Harbor12345\n\ndatabase:\n  password: root123\n  max_idle_conns: 50\n  max_open_conns: 1000\n\ndata_volume: /data/harbor/data\n\ntrivy:\n  ignore_unfixed: false\n  skip_update: false\n  insecure: false\n\njobservice:\n  max_job_workers: 10\n\nnotification:\n  webhook_job_max_retry: 10\n\nchart:\n  absolute_url: disabled\n\nlog:\n  level: info\n  local:\n    rotate_count: 50\n    rotate_size: 200M\n    location: /var/log/harbor\n_version: 2.2.0\n\nproxy:\n  http_proxy:\n  https_proxy:\n  no_proxy:\n  components:\n    - core\n    - jobservice\n    - trivy\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# 安装\n\n执行命令\n\n  sh /data/harbor/install.sh\n\n\n1\n\n\n\n# 安装完成验证\n\n执行命令\n\n  docker ps -a\n\n\n1\n\n\n\n\n\n# Docker配置Harbor（ALL of SERVER）\n\n\n# 配置daemon.json\n\ntee /etc/docker/daemon.json <<-\'EOF\'\n{\n    "log-driver":"json-file",\n    "log-opts":{\n        "max-size":"1000m",\n        "max-file":"3"\n    },\n    "insecure-registries":[\n        "192.168.213.222:22280"\n    ]\n}\nEOF\n\nsystemctl daemon-reload\nsystemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 注意\n\n若是在Harbor部署的服务器（222）执行后，需要重启Harbor，等待系统启动\n\ncd /data/harbor && docker-compose down && docker-compose up -d\ndocker ps -a\n\n\n1\n2\n\n\n\n# 登录docker\n\ndocker login 192.168.213.222:22280\n账号：admin\n密码：Harbor12345\n\n\n1\n2\n3\n\n\n\n# 部署Mysql（221）\n\n\n# 编排文件并启动\n\nmkdir /data/mysql5-7 && cd /data/mysql5-7\nvi docker-compose.yml\n\n\n1\n2\n\n\n输入文件内容\n\nversion: \'3.1\'\nservices:\n  mysql-k3s:\n    image: mysql:5.7.39\n    restart: always\n    container_name: mysql-k3s\n    environment:\n      MYSQL_ROOT_PASSWORD: xiaoku@mysql2205#\n    command:\n      --default-authentication-plugin=mysql_native_password\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n    ports:\n      - 2205:3306\n    volumes:\n      - ./data:/var/lib/mysql\n      - ./conf:/etc/mysql/conf.d\n      - ./logs:/logs\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n启动\n\n  docker-compose up -d\n\n\n1\n\n\n\n# 创建K3S数据库\n\n创建数据库名称为k3s\n\n\n\n\n# 部署K3S集群(201~213)\n\n\n# 部署Master（201）\n\n# 部署\n\ncurl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_VERSION=v1.25.3+k3s1 sh -s - \\\n--datastore-endpoint="mysql://root:xiaoku@mysql2205#@tcp(192.168.213.221:2205)/k3s"  \\\n--docker \\\n--write-kubeconfig ~/.kube/config \\\n--write-kubeconfig-mode 666\n\n\n1\n2\n3\n4\n5\n\n\n# 查看Token\n\n命令及返回\n\n[root@localhost BinaryInstallation]# cat /var/lib/rancher/k3s/server/node-token\nK10bf621cb0bfb8fdbdb87ea0940589b78779b0088c8fdab2a4f5d65ee8d95770bb::server:2a5ed69b7abe52c01a4ab99b5ad836cf\n\n\n1\n2\n\n\n\n# 部署Slave（202~203）\n\n# 部署（202~203）\n\nToken为201返回的数据\n\ncurl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_VERSION=v1.25.3+k3s1 \\\nK3S_URL=https://192.168.213.201:6443 \\\nK3S_TOKEN=K10bf621cb0bfb8fdbdb87ea0940589b78779b0088c8fdab2a4f5d65ee8d95770bb::server:2a5ed69b7abe52c01a4ab99b5ad836cf \\\nsh -s - \\\n--docker\n\n\n1\n2\n3\n4\n5\n\n\n\n# 设置202和203 Slave角色（201）\n\n201执行命令\n\n  kubectl label node slave202 node-role.kubernetes.io/worker=worker\n\n\n1\n\n\n  kubectl label node slave203 node-role.kubernetes.io/worker=worker\n\n\n1\n\n\n\n# 部署Master（211）\n\n# 部署\n\ntoken使用201获取的值\n\ncurl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_VERSION=v1.25.3+k3s1 sh -s - server \\\n--token=K10bf621cb0bfb8fdbdb87ea0940589b78779b0088c8fdab2a4f5d65ee8d95770bb::server:2a5ed69b7abe52c01a4ab99b5ad836cf \\\n--datastore-endpoint="mysql://root:xiaoku@mysql2205#@tcp(192.168.213.221:2205)/k3s"  \\\n--docker \\\n--write-kubeconfig ~/.kube/config \\\n--write-kubeconfig-mode 666 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 部署Slave（212~213）\n\n# 部署（212~213）\n\nToken为201返回的数据\n\ncurl -sfL https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn INSTALL_K3S_VERSION=v1.25.3+k3s1 \\\nK3S_URL=https://192.168.213.211:6443 \\\nK3S_TOKEN=K10bf621cb0bfb8fdbdb87ea0940589b78779b0088c8fdab2a4f5d65ee8d95770bb::server:2a5ed69b7abe52c01a4ab99b5ad836cf \\\nsh -s - \\\n--docker\n\n\n1\n2\n3\n4\n5\n\n\n\n# 设置212和213 Slave角色（211）\n\n211执行命令\n\n  kubectl label node slave212 node-role.kubernetes.io/worker=worker\n\n\n1\n\n\n  kubectl label node slave213 node-role.kubernetes.io/worker=worker\n\n\n1\n\n\n\n# 完成部署\n\n  k3s kubectl get nodes\n\n\n1\n\n\n\n\n\n# 注\n\n# 卸载\n\n使用安装脚本安装了 K3s，那么在安装过程中会生成一个卸载 K3s 的脚本。\n\n卸载 K3s 会删除集群数据和所有脚本。要使用不同的安装选项重新启动集群，请使用不同的标志重新运行安装脚本。\n\n要从 server 节点卸载 K3s，请运行：\n\n  /usr/local/bin/k3s-uninstall.sh\n\n\n1\n\n\n要从 agent 节点卸载 K3s，请运行：\n\n  /usr/local/bin/k3s-agent-uninstall.sh\n\n\n1\n\n\n# 查看状态\n\n  systemctl status k3s\n\n\n1\n\n\n  systemctl status k3s-agent\n\n\n1\n\n\n# 查看节点\n\n  k3s kubectl get nodes\n\n\n1\n\n\n# 查看版本\n\n使用kubectl version 命令，输出的信息会显示client和server的版本信息，client代表kubectl版本信息，server代表的是master节点的k8s版本信息\n\n[root@localhost ~]# kubectl version\nWARNING: This version information is deprecated and will be replaced with the output from kubectl version --short.  Use --output=yaml|json to get the full version.\nClient Version: version.Info{Major:"1", Minor:"25", GitVersion:"v1.25.0+k3s1", GitCommit:"26e9405767263a2915723cb72b1ffd7f50687a8f", GitTreeState:"clean", BuildDate:"2022-09-12T20:11:31Z", GoVersion:"go1.19", Compiler:"gc", Platform:"linux/amd64"}\nKustomize Version: v4.5.7\nServer Version: version.Info{Major:"1", Minor:"25", GitVersion:"v1.25.0+k3s1", GitCommit:"26e9405767263a2915723cb72b1ffd7f50687a8f", GitTreeState:"clean", BuildDate:"2022-09-12T20:11:31Z", GoVersion:"go1.19", Compiler:"gc", Platform:"linux/amd64"}\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 部署Rancher（221）\n\n\n# 申请下载证书\n\n例：阿里云申请完成后，下载Nginx证书\n\n上传至221服务器，目录：/data/rancher/certs下\n\n文件：\n\nrancher.pem 改名cert.pem\n\nrancher.key改名key.pem\n\n下载根证书 WoSign-RSA-root.crt改名cacerts.pem\n\n\n# 编排文件并启动\n\n编排文件\n\n  vi /data/rancher/docker-compose.yml\n\n\n1\n\n\n编辑输入\n\nversion: \'3.1\'\nservices:\n  rancher-server:\n    image: rancher/rancher:v2.6.9\n    restart: unless-stopped\n    container_name: rancher-server\n    ports:\n      - 8082:80\n      - 8443:443\n    volumes:\n      - ./rancher:/var/lib/rancher/\n      - ./ssl/cert.pem:/etc/rancher/ssl/cert.pem\n      - ./ssl/key.pem:/etc/rancher/ssl/key.pem\n      - ./ssl/cacerts.pem:/etc/rancher/ssl/cacerts.pem\n    privileged: true\n    mem_limit: 2048m\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n启动\n\n  cd /data/rancher && docker-compose up -d\n\n\n1\n\n\n\n# 配置Rancher集群\n\n# 浏览器访问证书申请域名地址\n\n例：rancher.ok.cn\n\n则：访问https://rancher.ok96.cn:8443/\n\n# 根据提示查找密码\n\n\n\n命令：\n\n[root@localhost rancher]# docker logs  rancher-server  2>&1 | grep "Bootstrap Password:"\n\n2022/09/26 05:45:32 [INFO] Bootstrap Password:\n rdx4fpcg696hkdq6dmfk7sfzlq7cgknv8kfmp9m58k6bchzldd6ndt\n\n\n1\n2\n3\n4\n\n\n# 输入新密码\n\n例：密码为 Rancher123456\n\n\n\n# 设置中文\n\n\n\n# 导入集群\n\n# 点击导入已有集群\n\n\n\n# 点击通用\n\n\n\n# 输入集群名称，点击创建\n\n\n\n# 复制命令\n\n【在运行支持的 Kubernetes 版本的 Kubernetes 集群上，运行以下 kubectl 命令，以将其导入到 Rancher】提示的命令，粘贴到201服务器上执行\n\n\n\n# K3s集群Master201服务器上执行\n\n\n\n# 刷新rancher首页\n\n等待一段时间后，状态为Active\n\n\n\n\n# 若需更新证书\n\n新申请下来的证书直接替换\n\n目录：/data/rancher/ssl\n\n文件：\n\ncacerts.pem\n\ncert.pem\n\nkey.pem\n\n然后重启即可\n\n  docker-compose down && docker-compose up -d\n\n\n1\n\n\n\n# 部署NFS（ALL of SERVER）\n\n\n# 安装命令\n\n因为每台K8S都可能需要使用到挂载，故每台都需要执行安装\n\nyum -y install nfs-utils  rpcbind \nsystemctl enable rpcbind.service\nsystemctl enable nfs-server.service\n\nsystemctl start rpcbind.service\nsystemctl start nfs-server.service\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 服务端配置（221）\n\n服务端IP：192.168.213.221\n\n服务点目录：/data/share\n\n# 创建共享文件夹\n\n  mkdir -p /data/share\n\n\n1\n\n\n# NFS配置\n\n修改配置文件\n\n  vi /etc/exports\n\n\n1\n\n\n增加下面这一行数据，指定的ip地址为客户端的地址,地址可以是一个网段（如：192.168.0.0/24）\n\n  /data/share 192.168.213.0/24(rw,no_root_squash,no_all_squash,sync)\n\n\n1\n\n\n加载配置文件，在相关软件启动后执行\n\n  exportfs -arv\n\n\n1\n\n\n\n\n\n# 客户端测试（201）\n\n# 创建共享文件夹\n\n命令\n\n  mkdir -p /home/nfs_share\n\n\n1\n\n\n# 挂载测试\n\n命令\n\n  mount -t nfs 192.168.213.221:/data/share /home/nfs_share\n\n\n\n1\n2\n\n\n# 查看挂载情况\n\n命令\n\n  df -TH\n\n\n1\n\n\n# 卸载\n\n命令\n\n  umount /home/nfs_share\n\n\n1\n\n\n\n# 部署Gitlab（222）\n\nmkdir /data/gitlab\ncd /data/gitlab&& vi docker-compose.yml\n\n\n1\n2\n\n\n输入内容\n\nversion: \'3\'\nservices:\n  gitlab:\n    image: \'gitlab/gitlab-ce:15.5.4-ce.0\'\n    container_name: gitlab\n    restart: always\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url \'http://192.168.213.222:8929\' #若有域名可以写域名\n        gitlab_rails[\'gitlab_shell_ssh_port\'] = 2224\n    ports:\n      - \'8929:8929\'\n      - \'2224:22\'\n    volumes:\n      #将相关配置映射到当前目录下的config目录\n      - \'./config:/etc/gitlab\'\n      #将日志映射到当前目录下的logs目录\n      - \'./logs:/var/log/gitlab\'\n      #将数据映射到当前目录下的data目录\n      - \'./data:/var/opt/gitlab\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n登录账号：root\n\n登录密码：在服务启动后，查看config/initial_root_password文件\n\ncat /data/gitlab/config/initial_root_password\n\nPassword: gTgBikdfbPhNSzcztYyGfXMauatWUP52HsZbZowmgow=\n\n\n1\n2\n3\n\n\n启动\n\n  docker-compose up -d\n\n\n1\n\n\n\n# 部署Gitlab（方式二）\n\n\n# 创建项目\n\n进入页面【k3s-项目/命名空间】点击创建项目\n\n\n\n输入创建名称：公共组件 点击创建\n\n\n\n\n# 创建命名空间\n\n点击创建命名空间\n\n\n\n输入名称：cicd 点击创建\n\n\n\n\n# 创建工作负载\n\n进入页面【k3s-工作负载-Deployments】点击创建\n\n# Containers\n\n镜像：gitlab/gitlab-ce:14.0.6-ce.0\n\n端口：集群IP 8929\n\n环境变量：\n\n变量名称                    变量值\nGITLAB_OMNIBUS_CONFIG   external_url \'http://192.168.213.201:8929\';\n                        gitlab_rails[\'gitlab_shell_ssh_port\'] = 2222;\n\n\n\n\n\n\n\n# 存储挂载NFS\n\n卷插件选择：NFS\n\n输入名称：nfs221\n\n服务端部署信息：/data/share 192.168.213.221\n\n挂载点               卷内子路径\n/etc/gitlab       gitlab/config\n/var/log/gitlab   gitlab/logs\n/var/opt/gitlab   gitlab/data\n\n\n\n# 点击创建完成启动\n\n\n\n# 服务发现\n\n进入服务发现页面，编辑配置，修改配置 增加外网ip\n\n\n\n输入：192.168.213.201\n\n\n\n# 浏览器访问\n\n\n\n# 登录密码（221）\n\n因为密码是初始化后的文件内容，而部署时将文件挂载在NFS上，故 直接登录221服务器上即可查看GitLab初始化密码\n\nC8a4/zTtKRT0c64LSTLRxgpK1zQLEst2JbRhEfpFyWk=\n\n\n1\n\n\n命令\n\ncd /data/share\ncat gitlab/config/initial_root_password\n\n\n1\n2\n\n\n\n\n\n# 部署Jenkins（222）\n\n\n# 制作镜像\n\n# 构建镜像\n\n由于原生镜像没有安装maven和git，故我们重新写一个Dockerfile生成镜像，编写Dockerfile文件\n\nmkdir /data/jenkins\ncd /data/jenkins && vi Dockerfile\n\n\n1\n2\n\n\n输入以下内容\n\nFROM jenkins/jenkins:2.377-centos7\nUSER root\nRUN yum install -y maven\n\n\n1\n2\n3\n\n\n# 生成镜像\n\n执行命令\n\n  docker build -t jenkins:2.377-centos7-mvn .\n\n\n1\n\n\n\n# 创建启动\n\n编辑文件\n\n  cd /data/jenkins && vi docker-compose.yml\n\n\n1\n\n\n输入内容\n\nversion: \'3\'\nservices:\n  jenkins:\n    image: \'jenkins:2.377-centos7-mvn\'\n    container_name: jenkins\n    restart: always\n    user: root\n    ports:\n      - \'7080:8080\'\n      - \'7050:50000\'\n    volumes:\n      - \'./jenkins_home:/var/jenkins_home\'\n      - \'/var/run/docker.sock:/var/run/docker.sock\'\n      - \'/usr/bin/docker:/usr/bin/docker\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n启动\n\n  cd /data/jenkins && docker-compose up -d\n\n\n1\n\n\n\n# 浏览器访问\n\n访问地址：192.168.213.222:7080\n\n\n\n\n# 登录密码\n\n[root@middleware222 share]# cat /data/jenkins/jenkins_home/secrets/initialAdminPassword                                                                                                                                                            564de39cc45347589909febf57e73383\n\n\n1\n\n\n\n# 初始化配置\n\n\n# 初始化Jenkins\n\n\n# 初始化\n\n使用管理员账号登录后安装推荐的插件\n\n\n\n\n\n修改管理员信息：\n\n登录名：admin\n账号：admin\n密码：Admin123\n\n\n1\n2\n3\n\n\n\n\n\n# 配置\n\n# 查看java和maven安装地址\n\n进入jenkins容器内执行\n\n[root@middleware222 ~]# docker exec -it jenkins /bin/sh\nsh-4.2# mvn -version\nApache Maven 3.0.5 (Red Hat 3.0.5-17)\nMaven home: /usr/share/maven\nJava version: 11.0.16.1, vendor: Eclipse Adoptium\nJava home: /opt/java/openjdk\nDefault locale: en_US, platform encoding: UTF-8\nOS name: "linux", version: "3.10.0-1160.el7.x86_64", arch: "amd64", family: "unix"\nsh-4.2#\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 配置JDK\n\n登录到Jenkins管理后台，点击 Manage Jenkins --\x3e Global Tool Configuration\n\n\n\n点击新增JDK\n\n\n\n自动安装 前面的勾选，去掉，输入别名和JAVA_HOME\n\n别名：jdk11\nJAVA_HOME：/opt/java/openjdk\n\n\n1\n2\n\n\n\n\n点击应用\n\n# 配置Maven\n\n同JDK配置页面\n\n\n\n取消自动安装，输入配置信息\n\n别名：maven305\nMAVEN_HOME：/usr/share/maven\n\n\n1\n2\n\n\n\n\n点击保存\n\n\n# 自定义安装插件\n\n安装插件：\n\nDocker Pipeline\nGitLab\n\n\n1\n2\n\n\n\n\n\n# 测试Jenkins\n\n\n# 测试(docker-maven)\n\n# 创建流水线任务\n\n\n\n# pipeline脚本\n\n输入内容，点击保存\n\npipeline {\n    agent any\nstages {\n        stage(\'TestMaven\') {\n            steps {\n                sh \'mvn -version\'\n            }\n        }\n        stage(\'TestDocker\') {\n            steps {\n                sh \'docker images\'\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n\n# 构建触发器（关联Gitlab）\n\n选择：触发远程构建 (例如,使用脚本)\n\n例如Token：imtest\n\n后续则可以使用接口地址触发构建\n\nJENKINS_URL/job/imtest1/build?token=imtest\n\n\n\n# 立即构建\n\n查看控制台\n\n\n\n\n# 初始化Harbor\n\n登录Harbor\n\n地址：http://192.168.213.222:22280/\n账号：admin\n密码：Harbor12345\n\n\n1\n2\n3\n\n\n创建公开项目：imdemo\n\n\n\n创建公开项目：cicd\n\n\n\n\n# 初始化Gitlab\n\n\n# 登录\n\n地址：192.168.213.222:8929\n账号：root\n登录密码：在服务启动后，查看config/initial_root_password文件\ncat /data/gitlab/config/initial_root_password\n\n\n1\n2\n3\n4\n\n\n\n# 创建用户\n\n用户信息，例：\n\n账号：jenkins\n密码：Jenkins123\n\n\n1\n2\n\n\n# 创建用户\n\n\n\n\n\n# 初始化密码\n\n在创建完成账号时，密码是不可填写的，在编辑中，初始化一下密码\n\n\n\n登录先重置一下密码，然后保存登录到首页\n\n\n\n\n# 初始化项目(root权限)\n\n# 创建组\n\n创建组名：ar3d\n\n\n\n# 创建空项目\n\n项目名称：ok-springboot-imdemo\n\n\n\n# 创建dev分支\n\n\n\n\n\n# 提交项目代码\n\n附件：ok-springboot-imdemo-dev.zip 上传至dev\n\n# 赋权账号\n\nMembers：\n\n\n\n\n# GitLab+Jenkins配置\n\n\n# 设置jenkins 用户ssh秘钥\n\n登录到jenkins服务器（222），生成秘钥\n\nssh-keygen -t rsa -P "" -f ~/.ssh/id_rsa\n\n\n1\n\n\n查看公钥\n\ncat /root/.ssh/id_rsa.pub\n\n\n1\n\n\n登录GitLab使用Jenkins用户\n\n点击 ssh keys，将公钥内容复制到网页，点击添加秘钥\n\n\n\n\n# 获取Access Tokens\n\n登录jenkins帐号，获取Access Tokens\n\n\n\n点击后返回：glpat-39WoU5Bou4bn6-sqvgPb\n\n\n# Jenkins配置Git/GitLab\n\n\n# Jenkins配置GitLab\n\n点击 系统管理--\x3e 系统配置 --\x3e配置 --\x3eGitlab\n\n\n\nConnection Name "随便填，"Git Host URL"填GitLab的访问地址，然后点"Add"------"jenkins"，如下所示\n\n\n\n选择gitlalb api，输入 jenkins 用户创建的token\n\n  glpat-39WoU5Bou4bn6-sqvgPb\n\n\n1\n\n\n\n\n选择 gitlab api token，点击测试连接，出现 Success，表示成功\n\n\n\n\n# Jenkins配置Git\n\n点击 Manage Jenkins --\x3e Configure System --\x3e配置 --\x3eGit plugin\n\n\n\n设置Git插件的全局配置，然后点击最下面的保存。\n\n\n\n\n# 创建Jenkins-job(gitlab)\n\n\n# 新建Item：ok-springboot-imdemo\n\n点击"流水线"，点击Ok\n\n\n\n\n# 配置\n\n# 流水线\n\n选择"SCM"，选择"Git",然后去GitLab中复制项目地址，粘贴到"Repository URL",然后点击"credentials"后面的添加按钮\n\n\n\n类型，选择 Username with password\n\n用户名 填 jenkins\n\n密码 填 Jenkins123\n\n\n\n添加后选择\n\n\n\n# 构建触发器\n\n填写job名称：ok-springboot-imdemo\n\n则Url：\n\nhttp://192.168.213.222:7080/job/ok-springboot-imdemo/build?token=ok-springboot-imdemo\n\n\n\n保存应用\n\n\n# Rancher+Jenkins+Harbor+GitLab\n\n\n# Rancher创建密文-Harbor（K3S）\n\n进入页面【存储-密文】点击创建，选择镜像仓库\n\n\n\n输入Harbor信息\n\n\n\n\n# Rancher更新镜像构建\n\n\n# 下载CLI\n\n下载地址，点击版本号\n\n\n\n点击Linux版本下载\n\n\n\n\n# 下载kubectl\n\n获取版本\n\nhttps://dl.k8s.io/release/stable.txt\n\n返回版本号：v1.25.4\n\n下载地址则为：\n\nhttps://dl.k8s.io/release/v1.25.4/bin/linux/amd64/kubectl\n\n\n# 构建镜像并上传\n\n上传cli及kubectl至222服务器，创建及上传目录：/data/rancher/docker\n\n编写Dockerfile\n\n  cd /data/rancher/docker && vi Dockerfile\n\n\n1\n\n\n输入文件内容，保存退出\n\nFROM alpine:3.16.3\n\ncopy ./rancher-linux-amd64-v2.6.9.tar.gz /usr/bin/rancher-linux-amd64-v2.6.9.tar.gz\ncopy ./kubectl /usr/bin/kubectl\n\nRUN cd /usr/bin/ \\\n    && tar zxvf rancher-linux-amd64-v2.6.9.tar.gz \\\n    && mv rancher-v2.6.9/rancher . \\\n    && rm rancher-linux-amd64-v2.6.9.tar.gz \\\n    && rm -r rancher-v2.6.9 \\\n    && chmod u+x kubectl\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n构建镜像并上传至harbor\n\ndocker build -t 192.168.213.222:22280/cicd/rancher-cli:1.0.0 .\ndocker push 192.168.213.222:22280/cicd/rancher-cli:1.0.0\n\n\n1\n2\n\n\n\n# Jenkins构建微服务镜像\n\n进入ok-springboot-imdemo，点击立即构建\n\n\n\n立即构建-查看日志，第一次会报错。\n\n\n\n复制镜像地址：192.168.213.222:22280/imdemo/ok-springboot-imdemo:3\n\n\n\n\n# Rancher创建微服务\n\n\n# 创建项目\n\n进入页面：\n\n\n\n创建项目：demo\n\n\n\n\n# 创建命名空间\n\n进入页面\n\n\n\n创建项目：ok\n\n\n\n\n# 创建负载\n\n进入页面：\n\n\n\n命名空间选择：ok\n\n名称：ok-springboot-imdemo\n\n镜像：192.168.213.222:22280/imdemo/ok-springboot-imdemo:3\n\n端口：8610 监听30010\n\n\n\n完成创建后页面访问：\n\nhttp://192.168.213.201:30010/ok-springboot-imdemo/hello\n\n\n\n\n# Gitlab触发Jenkins\n\n\n# Gitlab取消限制策略\n\n禁止向本地连接发送请求\n\n由于Gitlab和Jenkins安装在同台服务器，且Gitlab 10.6 版本以后为了安全，默认不允许向本地网络发送webhook请求。先将禁止取消。\n\n点击勾选[Allow requests to the local network from web hooks and services]，并保存\n\n\n\n\n# Jenkins取消限制策略\n\n由于Gitlab和Jenkins安装在同台服务器\n\n勾选[匿名用户具有可读权限]\n\n\n\n修改222服务器jenkins docker-compose.yml文件\n\n增加文件内容\n\n    environment: \n      - JAVA_OPTS=-Dhudson.security.csrf.GlobalCrumbIssuerConfiguration.DISABLE_CSRF_PROTECTION=true\n\n\n1\n2\n\n\n\n\n\n# 配置触发\n\n进入Gitlab页面：\n\n打开代码仓库，进入回调配置页面。需要仓库维护者权限才能看到此菜单。\n\n\n\nUrl从本文档的jenkins任务配置中获取：\n\nhttp://192.168.213.222:7080/job/ok-springboot-imdemo/build?token=ok-springboot-imdemo\n\n\n\n点击增加\n\n\n\n完成提交代码自动构建\n\n\n# 触发Rancher更新镜像\n\n\n# 创建API密钥\n\n进入页面：\n\n\n\n输入描述并创建\n\n\n\n\n# 复制持有者令牌\n\n\n\n令牌：token-hcht8:wq4s7cwnxj64s5492rtcnz7hsp27dmzl8qxmwgz9v5kl56lqftr4bj\n\n\n# 复制API地址\n\n\n\n地址：https://rancher.ok96.cn:8443/v3\n\n更新命令：\n\ndocker run --rm --name ranchercli 192.168.213.222:22280/cicd/rancher-cli:1.0.0  sh -c  "rancher login https://rancher.ok96.cn:8443/v3 --token token-hcht8:wq4s7cwnxj64s5492rtcnz7hsp27dmzl8qxmwgz9v5kl56lqftr4bj"\n\n\n1\n\n\n\n# 复制项目PROJECT ID\n\n进入页面，查看yaml：\n\n\n\n找到name及namespace：\n\nname: p-4ltfh\nnamespace: c-m-hwhwchxr\n\n\n1\n2\n\n\n即PROJECT ID： c-m-hwhwchxr:p-4ltfh\n\n\n\n\n# 复制项目ContainerName\n\n进入页面：\n\n\n\n复制容器名称：container-0\n\n\n\n\n# 更新镜像命令说明\n\n命令：\n\nrancher login ${Rancher.URL} --token ${rancher} --context ${RancherProjectId}\nrancher kubectl set image deployment.apps/${projectConfig.projectName} ${containerName}=${IMAGE_FULL_PATH} -n ${K8S_NAMESPACE}\n\n\n1\n2\n\n\n其中：\n\n${Rancher.URL}：为api地址【https://rancher.ok96.cn:8443/v3】\n${rancher}：为token【token-hcht8:wq4s7cwnxj64s5492rtcnz7hsp27dmzl8qxmwgz9v5kl56lqftr4bj】\n${RancherProjectId}：为ProjectId【c-m-hwhwchxr:p-4ltfh】\n${projectConfig.projectName}：为项目名称【ok-springboot-imdemo】\n${containerName}：为容器名称【container-0】\n${K8S_NAMESPACE}：为命名空间名称【ok】\n${IMAGE_FULL_PATH}：为更新容器镜像的地址\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 更新镜像容器命令示例\n\n示例：更新容器镜像为【192.168.213.222:22280/imdemo/ok-springboot-imdemo:7】\n\ndocker run --rm --name ranchercli 192.168.213.222:22280/cicd/rancher-cli:1.0.0  sh -c  "rancher login https://rancher.ok96.cn:8443/v3 --token token-hcht8:wq4s7cwnxj64s5492rtcnz7hsp27dmzl8qxmwgz9v5kl56lqftr4bj --context c-m-hwhwchxr:p-4ltfh && rancher kubectl set image deployment.apps/ok-springboot-imdemo container-0=192.168.213.222:22280/imdemo/ok-springboot-imdemo:7 -n ok"\n\n\n1\n\n\n\n# 附件\n\n百度云下载：\n\n链接：https://pan.baidu.com/s/1IXSRk4wSI_-ppAhn1PaFPg \n提取码：izt1\n\n\n1\n2\n\n\n说明\n\n文件名称                                  说明             备注\nharbor-offline-installer-v2.2.3.tgz   harbor安装包      https://github.com/goharbor/harbor/releases/\nBinaryInstallation.zip                Docker二进制安装包   -\nok-springboot-imdemo-dev.zip          微服务工程示例代码      -',normalizedContent:'# 集群规划\n\n主机              ip                内存    硬盘         应用\nmaster201       192.168.213.201   8g    40g        k3s\nslave202        192.168.213.202   4g    40g        k3s\nslave203        192.168.213.203   4g    40g        k3s\nmaster211       192.168.213.211   4g    40g        k3s\nslave212        192.168.213.212   4g    40g        k3s\nslave213        192.168.213.213   4g    40g        k3s\nmiddleware221   192.168.213.221   4g    40g+100g   mysql+nfs+rancher\nmiddleware222   192.168.213.222   10g   40g+100g   harbor+jenkins+gitlab\n\n图例：\n\n\n\n\n# 版本\n\n组件               版本                      备注\ncentos           7.9.2009 (core)         centos-7-x86_64-minimal-2009.iso\nk3s              v1.25.3+k3s1            -\nmysql            5.7.39                  k3s外部存储\njenkins          jenkins:2.377-centos7   ci/cd\nharbor           v2.2.3                  docker镜像存储仓库\ngitlab           gitlab-ce:15.5.4-ce.0   git仓库\nrancher          2.6.9                   k3s界面管理\ndocker           20.10.18                -\ndocker compose   v2.10.2                 -\n\n\n# 系统信息\n\n系统        地址                              账号               密码\nrancher   https://rancher.ok96.cn:8443/   admin            rancher123456\nharbor    http://192.168.213.222:22280    admin            harbor12345\njenkins   http://192.168.213.222:7080     admin            admin123\ngitlab    http://192.168.213.222:8929     root             gtgbikdfbphnszcztyygfxmauatwup52hszbzowmgow=\n-         jenkins                         jenkins123       -\nnfs       192.168.213.221                 目录：/data/share   -\n\n\n# 自动构建部署流程图\n\n\n\n\n# 环境部署步骤\n\n\n# 初始化准备（all of server）\n\n\n# 设置各个主机名称\n\n在201上执行命令：\n\nhostnamectl set-hostname master201\n\n\n1\n\n\n在202上执行命令：\n\nhostnamectl set-hostname slave202\n\n\n1\n\n\n在203上执行命令：\n\nhostnamectl set-hostname slave203\n\n\n1\n\n\n在211上执行命令：\n\nhostnamectl set-hostname master211\n\n\n1\n\n\n在212上执行命令：\n\nhostnamectl set-hostname slave212\n\n\n1\n\n\n在213上执行命令：\n\nhostnamectl set-hostname slave213\n\n\n1\n\n\n在221上执行命令：\n\nhostnamectl set-hostname middleware221\n\n\n1\n\n\n在222上执行命令：\n\nhostnamectl set-hostname middleware222\n\n\n1\n\n\n\n# 部署docker（all of server）\n\n\n# 上传附件\n\n上传binaryinstallation.zip压缩包到/data目录下\n\n\n# 解压赋权并安装\n\n命令：\n\nyum install -y unzip\ncd /data && unzip binaryinstallation.zip\ncd /data/binaryinstallation && chmod -r 777 docker-init.sh\n./docker-init.sh\n\n\n1\n2\n3\n4\n\n\n\n# 安装完成\n\n\n\n\n# 关闭防火墙（all of server）\n\n\n# 关闭防火墙\n\n执行命令\n\nsystemctl stop firewalld\nsystemctl disable firewalld\nsetenforce 0\nsed -i "s/selinux=enforcing/selinux=disabled/g" /etc/selinux/config\nswapoff -a\nyes | cp /etc/fstab /etc/fstab_bak\ncat /etc/fstab_bak |grep -v swap > /etc/fstab\nsed -i "s#^net.ipv4.ip_forward.*#net.ipv4.ip_forward=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-ip6tables.*#net.bridge.bridge-nf-call-ip6tables=1#g"  /etc/sysctl.conf\nsed -i "s#^net.bridge.bridge-nf-call-iptables.*#net.bridge.bridge-nf-call-iptables=1#g"  /etc/sysctl.conf\necho "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-ip6tables = 1" >> /etc/sysctl.conf\necho "net.bridge.bridge-nf-call-iptables = 1" >> /etc/sysctl.conf\nsysctl -p\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n# 重启docker\n\n执行命令\n\n  systemctl restart docker\n\n\n1\n\n\n\n# 部署harbor（222）\n\n\n# 上传附件\n\n上传harbor-offline-installer-v2.2.3.tgz压缩包到/data目录下\n\n\n# 解压\n\n执行命令\n\ncd /data\ntar xzvf harbor-offline-installer-v2.2.3.tgz\n\n\n1\n2\n\n\n\n# 新建文件harbor.yml\n\n内容可以参考harbor.yml.tmpl\n\n修改 hostname: 192.168.213.222 为本机ip\n\n修改 端口\n\n修改 数据存储地址/data/harbor/data\n\n注释 https\n\n命令\n\ncd /data/harbor\nvi harbor.yml\n\n\n1\n2\n\n\n输入文本内容\n\nhostname: 192.168.213.222 \n\nhttp:\n  port: 22280\n\nharbor_admin_password: harbor12345\n\ndatabase:\n  password: root123\n  max_idle_conns: 50\n  max_open_conns: 1000\n\ndata_volume: /data/harbor/data\n\ntrivy:\n  ignore_unfixed: false\n  skip_update: false\n  insecure: false\n\njobservice:\n  max_job_workers: 10\n\nnotification:\n  webhook_job_max_retry: 10\n\nchart:\n  absolute_url: disabled\n\nlog:\n  level: info\n  local:\n    rotate_count: 50\n    rotate_size: 200m\n    location: /var/log/harbor\n_version: 2.2.0\n\nproxy:\n  http_proxy:\n  https_proxy:\n  no_proxy:\n  components:\n    - core\n    - jobservice\n    - trivy\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# 安装\n\n执行命令\n\n  sh /data/harbor/install.sh\n\n\n1\n\n\n\n# 安装完成验证\n\n执行命令\n\n  docker ps -a\n\n\n1\n\n\n\n\n\n# docker配置harbor（all of server）\n\n\n# 配置daemon.json\n\ntee /etc/docker/daemon.json <<-\'eof\'\n{\n    "log-driver":"json-file",\n    "log-opts":{\n        "max-size":"1000m",\n        "max-file":"3"\n    },\n    "insecure-registries":[\n        "192.168.213.222:22280"\n    ]\n}\neof\n\nsystemctl daemon-reload\nsystemctl restart docker\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 注意\n\n若是在harbor部署的服务器（222）执行后，需要重启harbor，等待系统启动\n\ncd /data/harbor && docker-compose down && docker-compose up -d\ndocker ps -a\n\n\n1\n2\n\n\n\n# 登录docker\n\ndocker login 192.168.213.222:22280\n账号：admin\n密码：harbor12345\n\n\n1\n2\n3\n\n\n\n# 部署mysql（221）\n\n\n# 编排文件并启动\n\nmkdir /data/mysql5-7 && cd /data/mysql5-7\nvi docker-compose.yml\n\n\n1\n2\n\n\n输入文件内容\n\nversion: \'3.1\'\nservices:\n  mysql-k3s:\n    image: mysql:5.7.39\n    restart: always\n    container_name: mysql-k3s\n    environment:\n      mysql_root_password: xiaoku@mysql2205#\n    command:\n      --default-authentication-plugin=mysql_native_password\n      --character-set-server=utf8mb4\n      --collation-server=utf8mb4_general_ci\n      --explicit_defaults_for_timestamp=true\n      --lower_case_table_names=1\n    ports:\n      - 2205:3306\n    volumes:\n      - ./data:/var/lib/mysql\n      - ./conf:/etc/mysql/conf.d\n      - ./logs:/logs\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n启动\n\n  docker-compose up -d\n\n\n1\n\n\n\n# 创建k3s数据库\n\n创建数据库名称为k3s\n\n\n\n\n# 部署k3s集群(201~213)\n\n\n# 部署master（201）\n\n# 部署\n\ncurl -sfl https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | install_k3s_mirror=cn install_k3s_version=v1.25.3+k3s1 sh -s - \\\n--datastore-endpoint="mysql://root:xiaoku@mysql2205#@tcp(192.168.213.221:2205)/k3s"  \\\n--docker \\\n--write-kubeconfig ~/.kube/config \\\n--write-kubeconfig-mode 666\n\n\n1\n2\n3\n4\n5\n\n\n# 查看token\n\n命令及返回\n\n[root@localhost binaryinstallation]# cat /var/lib/rancher/k3s/server/node-token\nk10bf621cb0bfb8fdbdb87ea0940589b78779b0088c8fdab2a4f5d65ee8d95770bb::server:2a5ed69b7abe52c01a4ab99b5ad836cf\n\n\n1\n2\n\n\n\n# 部署slave（202~203）\n\n# 部署（202~203）\n\ntoken为201返回的数据\n\ncurl -sfl https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | install_k3s_mirror=cn install_k3s_version=v1.25.3+k3s1 \\\nk3s_url=https://192.168.213.201:6443 \\\nk3s_token=k10bf621cb0bfb8fdbdb87ea0940589b78779b0088c8fdab2a4f5d65ee8d95770bb::server:2a5ed69b7abe52c01a4ab99b5ad836cf \\\nsh -s - \\\n--docker\n\n\n1\n2\n3\n4\n5\n\n\n\n# 设置202和203 slave角色（201）\n\n201执行命令\n\n  kubectl label node slave202 node-role.kubernetes.io/worker=worker\n\n\n1\n\n\n  kubectl label node slave203 node-role.kubernetes.io/worker=worker\n\n\n1\n\n\n\n# 部署master（211）\n\n# 部署\n\ntoken使用201获取的值\n\ncurl -sfl https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | install_k3s_mirror=cn install_k3s_version=v1.25.3+k3s1 sh -s - server \\\n--token=k10bf621cb0bfb8fdbdb87ea0940589b78779b0088c8fdab2a4f5d65ee8d95770bb::server:2a5ed69b7abe52c01a4ab99b5ad836cf \\\n--datastore-endpoint="mysql://root:xiaoku@mysql2205#@tcp(192.168.213.221:2205)/k3s"  \\\n--docker \\\n--write-kubeconfig ~/.kube/config \\\n--write-kubeconfig-mode 666 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 部署slave（212~213）\n\n# 部署（212~213）\n\ntoken为201返回的数据\n\ncurl -sfl https://rancher-mirror.oss-cn-beijing.aliyuncs.com/k3s/k3s-install.sh | install_k3s_mirror=cn install_k3s_version=v1.25.3+k3s1 \\\nk3s_url=https://192.168.213.211:6443 \\\nk3s_token=k10bf621cb0bfb8fdbdb87ea0940589b78779b0088c8fdab2a4f5d65ee8d95770bb::server:2a5ed69b7abe52c01a4ab99b5ad836cf \\\nsh -s - \\\n--docker\n\n\n1\n2\n3\n4\n5\n\n\n\n# 设置212和213 slave角色（211）\n\n211执行命令\n\n  kubectl label node slave212 node-role.kubernetes.io/worker=worker\n\n\n1\n\n\n  kubectl label node slave213 node-role.kubernetes.io/worker=worker\n\n\n1\n\n\n\n# 完成部署\n\n  k3s kubectl get nodes\n\n\n1\n\n\n\n\n\n# 注\n\n# 卸载\n\n使用安装脚本安装了 k3s，那么在安装过程中会生成一个卸载 k3s 的脚本。\n\n卸载 k3s 会删除集群数据和所有脚本。要使用不同的安装选项重新启动集群，请使用不同的标志重新运行安装脚本。\n\n要从 server 节点卸载 k3s，请运行：\n\n  /usr/local/bin/k3s-uninstall.sh\n\n\n1\n\n\n要从 agent 节点卸载 k3s，请运行：\n\n  /usr/local/bin/k3s-agent-uninstall.sh\n\n\n1\n\n\n# 查看状态\n\n  systemctl status k3s\n\n\n1\n\n\n  systemctl status k3s-agent\n\n\n1\n\n\n# 查看节点\n\n  k3s kubectl get nodes\n\n\n1\n\n\n# 查看版本\n\n使用kubectl version 命令，输出的信息会显示client和server的版本信息，client代表kubectl版本信息，server代表的是master节点的k8s版本信息\n\n[root@localhost ~]# kubectl version\nwarning: this version information is deprecated and will be replaced with the output from kubectl version --short.  use --output=yaml|json to get the full version.\nclient version: version.info{major:"1", minor:"25", gitversion:"v1.25.0+k3s1", gitcommit:"26e9405767263a2915723cb72b1ffd7f50687a8f", gittreestate:"clean", builddate:"2022-09-12t20:11:31z", goversion:"go1.19", compiler:"gc", platform:"linux/amd64"}\nkustomize version: v4.5.7\nserver version: version.info{major:"1", minor:"25", gitversion:"v1.25.0+k3s1", gitcommit:"26e9405767263a2915723cb72b1ffd7f50687a8f", gittreestate:"clean", builddate:"2022-09-12t20:11:31z", goversion:"go1.19", compiler:"gc", platform:"linux/amd64"}\n\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 部署rancher（221）\n\n\n# 申请下载证书\n\n例：阿里云申请完成后，下载nginx证书\n\n上传至221服务器，目录：/data/rancher/certs下\n\n文件：\n\nrancher.pem 改名cert.pem\n\nrancher.key改名key.pem\n\n下载根证书 wosign-rsa-root.crt改名cacerts.pem\n\n\n# 编排文件并启动\n\n编排文件\n\n  vi /data/rancher/docker-compose.yml\n\n\n1\n\n\n编辑输入\n\nversion: \'3.1\'\nservices:\n  rancher-server:\n    image: rancher/rancher:v2.6.9\n    restart: unless-stopped\n    container_name: rancher-server\n    ports:\n      - 8082:80\n      - 8443:443\n    volumes:\n      - ./rancher:/var/lib/rancher/\n      - ./ssl/cert.pem:/etc/rancher/ssl/cert.pem\n      - ./ssl/key.pem:/etc/rancher/ssl/key.pem\n      - ./ssl/cacerts.pem:/etc/rancher/ssl/cacerts.pem\n    privileged: true\n    mem_limit: 2048m\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n启动\n\n  cd /data/rancher && docker-compose up -d\n\n\n1\n\n\n\n# 配置rancher集群\n\n# 浏览器访问证书申请域名地址\n\n例：rancher.ok.cn\n\n则：访问https://rancher.ok96.cn:8443/\n\n# 根据提示查找密码\n\n\n\n命令：\n\n[root@localhost rancher]# docker logs  rancher-server  2>&1 | grep "bootstrap password:"\n\n2022/09/26 05:45:32 [info] bootstrap password:\n rdx4fpcg696hkdq6dmfk7sfzlq7cgknv8kfmp9m58k6bchzldd6ndt\n\n\n1\n2\n3\n4\n\n\n# 输入新密码\n\n例：密码为 rancher123456\n\n\n\n# 设置中文\n\n\n\n# 导入集群\n\n# 点击导入已有集群\n\n\n\n# 点击通用\n\n\n\n# 输入集群名称，点击创建\n\n\n\n# 复制命令\n\n【在运行支持的 kubernetes 版本的 kubernetes 集群上，运行以下 kubectl 命令，以将其导入到 rancher】提示的命令，粘贴到201服务器上执行\n\n\n\n# k3s集群master201服务器上执行\n\n\n\n# 刷新rancher首页\n\n等待一段时间后，状态为active\n\n\n\n\n# 若需更新证书\n\n新申请下来的证书直接替换\n\n目录：/data/rancher/ssl\n\n文件：\n\ncacerts.pem\n\ncert.pem\n\nkey.pem\n\n然后重启即可\n\n  docker-compose down && docker-compose up -d\n\n\n1\n\n\n\n# 部署nfs（all of server）\n\n\n# 安装命令\n\n因为每台k8s都可能需要使用到挂载，故每台都需要执行安装\n\nyum -y install nfs-utils  rpcbind \nsystemctl enable rpcbind.service\nsystemctl enable nfs-server.service\n\nsystemctl start rpcbind.service\nsystemctl start nfs-server.service\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 服务端配置（221）\n\n服务端ip：192.168.213.221\n\n服务点目录：/data/share\n\n# 创建共享文件夹\n\n  mkdir -p /data/share\n\n\n1\n\n\n# nfs配置\n\n修改配置文件\n\n  vi /etc/exports\n\n\n1\n\n\n增加下面这一行数据，指定的ip地址为客户端的地址,地址可以是一个网段（如：192.168.0.0/24）\n\n  /data/share 192.168.213.0/24(rw,no_root_squash,no_all_squash,sync)\n\n\n1\n\n\n加载配置文件，在相关软件启动后执行\n\n  exportfs -arv\n\n\n1\n\n\n\n\n\n# 客户端测试（201）\n\n# 创建共享文件夹\n\n命令\n\n  mkdir -p /home/nfs_share\n\n\n1\n\n\n# 挂载测试\n\n命令\n\n  mount -t nfs 192.168.213.221:/data/share /home/nfs_share\n\n\n\n1\n2\n\n\n# 查看挂载情况\n\n命令\n\n  df -th\n\n\n1\n\n\n# 卸载\n\n命令\n\n  umount /home/nfs_share\n\n\n1\n\n\n\n# 部署gitlab（222）\n\nmkdir /data/gitlab\ncd /data/gitlab&& vi docker-compose.yml\n\n\n1\n2\n\n\n输入内容\n\nversion: \'3\'\nservices:\n  gitlab:\n    image: \'gitlab/gitlab-ce:15.5.4-ce.0\'\n    container_name: gitlab\n    restart: always\n    environment:\n      gitlab_omnibus_config: |\n        external_url \'http://192.168.213.222:8929\' #若有域名可以写域名\n        gitlab_rails[\'gitlab_shell_ssh_port\'] = 2224\n    ports:\n      - \'8929:8929\'\n      - \'2224:22\'\n    volumes:\n      #将相关配置映射到当前目录下的config目录\n      - \'./config:/etc/gitlab\'\n      #将日志映射到当前目录下的logs目录\n      - \'./logs:/var/log/gitlab\'\n      #将数据映射到当前目录下的data目录\n      - \'./data:/var/opt/gitlab\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\n登录账号：root\n\n登录密码：在服务启动后，查看config/initial_root_password文件\n\ncat /data/gitlab/config/initial_root_password\n\npassword: gtgbikdfbphnszcztyygfxmauatwup52hszbzowmgow=\n\n\n1\n2\n3\n\n\n启动\n\n  docker-compose up -d\n\n\n1\n\n\n\n# 部署gitlab（方式二）\n\n\n# 创建项目\n\n进入页面【k3s-项目/命名空间】点击创建项目\n\n\n\n输入创建名称：公共组件 点击创建\n\n\n\n\n# 创建命名空间\n\n点击创建命名空间\n\n\n\n输入名称：cicd 点击创建\n\n\n\n\n# 创建工作负载\n\n进入页面【k3s-工作负载-deployments】点击创建\n\n# containers\n\n镜像：gitlab/gitlab-ce:14.0.6-ce.0\n\n端口：集群ip 8929\n\n环境变量：\n\n变量名称                    变量值\ngitlab_omnibus_config   external_url \'http://192.168.213.201:8929\';\n                        gitlab_rails[\'gitlab_shell_ssh_port\'] = 2222;\n\n\n\n\n\n\n\n# 存储挂载nfs\n\n卷插件选择：nfs\n\n输入名称：nfs221\n\n服务端部署信息：/data/share 192.168.213.221\n\n挂载点               卷内子路径\n/etc/gitlab       gitlab/config\n/var/log/gitlab   gitlab/logs\n/var/opt/gitlab   gitlab/data\n\n\n\n# 点击创建完成启动\n\n\n\n# 服务发现\n\n进入服务发现页面，编辑配置，修改配置 增加外网ip\n\n\n\n输入：192.168.213.201\n\n\n\n# 浏览器访问\n\n\n\n# 登录密码（221）\n\n因为密码是初始化后的文件内容，而部署时将文件挂载在nfs上，故 直接登录221服务器上即可查看gitlab初始化密码\n\nc8a4/zttkrt0c64lstlrxgpk1zqlest2jbrhefpfywk=\n\n\n1\n\n\n命令\n\ncd /data/share\ncat gitlab/config/initial_root_password\n\n\n1\n2\n\n\n\n\n\n# 部署jenkins（222）\n\n\n# 制作镜像\n\n# 构建镜像\n\n由于原生镜像没有安装maven和git，故我们重新写一个dockerfile生成镜像，编写dockerfile文件\n\nmkdir /data/jenkins\ncd /data/jenkins && vi dockerfile\n\n\n1\n2\n\n\n输入以下内容\n\nfrom jenkins/jenkins:2.377-centos7\nuser root\nrun yum install -y maven\n\n\n1\n2\n3\n\n\n# 生成镜像\n\n执行命令\n\n  docker build -t jenkins:2.377-centos7-mvn .\n\n\n1\n\n\n\n# 创建启动\n\n编辑文件\n\n  cd /data/jenkins && vi docker-compose.yml\n\n\n1\n\n\n输入内容\n\nversion: \'3\'\nservices:\n  jenkins:\n    image: \'jenkins:2.377-centos7-mvn\'\n    container_name: jenkins\n    restart: always\n    user: root\n    ports:\n      - \'7080:8080\'\n      - \'7050:50000\'\n    volumes:\n      - \'./jenkins_home:/var/jenkins_home\'\n      - \'/var/run/docker.sock:/var/run/docker.sock\'\n      - \'/usr/bin/docker:/usr/bin/docker\'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n启动\n\n  cd /data/jenkins && docker-compose up -d\n\n\n1\n\n\n\n# 浏览器访问\n\n访问地址：192.168.213.222:7080\n\n\n\n\n# 登录密码\n\n[root@middleware222 share]# cat /data/jenkins/jenkins_home/secrets/initialadminpassword                                                                                                                                                            564de39cc45347589909febf57e73383\n\n\n1\n\n\n\n# 初始化配置\n\n\n# 初始化jenkins\n\n\n# 初始化\n\n使用管理员账号登录后安装推荐的插件\n\n\n\n\n\n修改管理员信息：\n\n登录名：admin\n账号：admin\n密码：admin123\n\n\n1\n2\n3\n\n\n\n\n\n# 配置\n\n# 查看java和maven安装地址\n\n进入jenkins容器内执行\n\n[root@middleware222 ~]# docker exec -it jenkins /bin/sh\nsh-4.2# mvn -version\napache maven 3.0.5 (red hat 3.0.5-17)\nmaven home: /usr/share/maven\njava version: 11.0.16.1, vendor: eclipse adoptium\njava home: /opt/java/openjdk\ndefault locale: en_us, platform encoding: utf-8\nos name: "linux", version: "3.10.0-1160.el7.x86_64", arch: "amd64", family: "unix"\nsh-4.2#\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 配置jdk\n\n登录到jenkins管理后台，点击 manage jenkins --\x3e global tool configuration\n\n\n\n点击新增jdk\n\n\n\n自动安装 前面的勾选，去掉，输入别名和java_home\n\n别名：jdk11\njava_home：/opt/java/openjdk\n\n\n1\n2\n\n\n\n\n点击应用\n\n# 配置maven\n\n同jdk配置页面\n\n\n\n取消自动安装，输入配置信息\n\n别名：maven305\nmaven_home：/usr/share/maven\n\n\n1\n2\n\n\n\n\n点击保存\n\n\n# 自定义安装插件\n\n安装插件：\n\ndocker pipeline\ngitlab\n\n\n1\n2\n\n\n\n\n\n# 测试jenkins\n\n\n# 测试(docker-maven)\n\n# 创建流水线任务\n\n\n\n# pipeline脚本\n\n输入内容，点击保存\n\npipeline {\n    agent any\nstages {\n        stage(\'testmaven\') {\n            steps {\n                sh \'mvn -version\'\n            }\n        }\n        stage(\'testdocker\') {\n            steps {\n                sh \'docker images\'\n            }\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n\n# 构建触发器（关联gitlab）\n\n选择：触发远程构建 (例如,使用脚本)\n\n例如token：imtest\n\n后续则可以使用接口地址触发构建\n\njenkins_url/job/imtest1/build?token=imtest\n\n\n\n# 立即构建\n\n查看控制台\n\n\n\n\n# 初始化harbor\n\n登录harbor\n\n地址：http://192.168.213.222:22280/\n账号：admin\n密码：harbor12345\n\n\n1\n2\n3\n\n\n创建公开项目：imdemo\n\n\n\n创建公开项目：cicd\n\n\n\n\n# 初始化gitlab\n\n\n# 登录\n\n地址：192.168.213.222:8929\n账号：root\n登录密码：在服务启动后，查看config/initial_root_password文件\ncat /data/gitlab/config/initial_root_password\n\n\n1\n2\n3\n4\n\n\n\n# 创建用户\n\n用户信息，例：\n\n账号：jenkins\n密码：jenkins123\n\n\n1\n2\n\n\n# 创建用户\n\n\n\n\n\n# 初始化密码\n\n在创建完成账号时，密码是不可填写的，在编辑中，初始化一下密码\n\n\n\n登录先重置一下密码，然后保存登录到首页\n\n\n\n\n# 初始化项目(root权限)\n\n# 创建组\n\n创建组名：ar3d\n\n\n\n# 创建空项目\n\n项目名称：ok-springboot-imdemo\n\n\n\n# 创建dev分支\n\n\n\n\n\n# 提交项目代码\n\n附件：ok-springboot-imdemo-dev.zip 上传至dev\n\n# 赋权账号\n\nmembers：\n\n\n\n\n# gitlab+jenkins配置\n\n\n# 设置jenkins 用户ssh秘钥\n\n登录到jenkins服务器（222），生成秘钥\n\nssh-keygen -t rsa -p "" -f ~/.ssh/id_rsa\n\n\n1\n\n\n查看公钥\n\ncat /root/.ssh/id_rsa.pub\n\n\n1\n\n\n登录gitlab使用jenkins用户\n\n点击 ssh keys，将公钥内容复制到网页，点击添加秘钥\n\n\n\n\n# 获取access tokens\n\n登录jenkins帐号，获取access tokens\n\n\n\n点击后返回：glpat-39wou5bou4bn6-sqvgpb\n\n\n# jenkins配置git/gitlab\n\n\n# jenkins配置gitlab\n\n点击 系统管理--\x3e 系统配置 --\x3e配置 --\x3egitlab\n\n\n\nconnection name "随便填，"git host url"填gitlab的访问地址，然后点"add"------"jenkins"，如下所示\n\n\n\n选择gitlalb api，输入 jenkins 用户创建的token\n\n  glpat-39wou5bou4bn6-sqvgpb\n\n\n1\n\n\n\n\n选择 gitlab api token，点击测试连接，出现 success，表示成功\n\n\n\n\n# jenkins配置git\n\n点击 manage jenkins --\x3e configure system --\x3e配置 --\x3egit plugin\n\n\n\n设置git插件的全局配置，然后点击最下面的保存。\n\n\n\n\n# 创建jenkins-job(gitlab)\n\n\n# 新建item：ok-springboot-imdemo\n\n点击"流水线"，点击ok\n\n\n\n\n# 配置\n\n# 流水线\n\n选择"scm"，选择"git",然后去gitlab中复制项目地址，粘贴到"repository url",然后点击"credentials"后面的添加按钮\n\n\n\n类型，选择 username with password\n\n用户名 填 jenkins\n\n密码 填 jenkins123\n\n\n\n添加后选择\n\n\n\n# 构建触发器\n\n填写job名称：ok-springboot-imdemo\n\n则url：\n\nhttp://192.168.213.222:7080/job/ok-springboot-imdemo/build?token=ok-springboot-imdemo\n\n\n\n保存应用\n\n\n# rancher+jenkins+harbor+gitlab\n\n\n# rancher创建密文-harbor（k3s）\n\n进入页面【存储-密文】点击创建，选择镜像仓库\n\n\n\n输入harbor信息\n\n\n\n\n# rancher更新镜像构建\n\n\n# 下载cli\n\n下载地址，点击版本号\n\n\n\n点击linux版本下载\n\n\n\n\n# 下载kubectl\n\n获取版本\n\nhttps://dl.k8s.io/release/stable.txt\n\n返回版本号：v1.25.4\n\n下载地址则为：\n\nhttps://dl.k8s.io/release/v1.25.4/bin/linux/amd64/kubectl\n\n\n# 构建镜像并上传\n\n上传cli及kubectl至222服务器，创建及上传目录：/data/rancher/docker\n\n编写dockerfile\n\n  cd /data/rancher/docker && vi dockerfile\n\n\n1\n\n\n输入文件内容，保存退出\n\nfrom alpine:3.16.3\n\ncopy ./rancher-linux-amd64-v2.6.9.tar.gz /usr/bin/rancher-linux-amd64-v2.6.9.tar.gz\ncopy ./kubectl /usr/bin/kubectl\n\nrun cd /usr/bin/ \\\n    && tar zxvf rancher-linux-amd64-v2.6.9.tar.gz \\\n    && mv rancher-v2.6.9/rancher . \\\n    && rm rancher-linux-amd64-v2.6.9.tar.gz \\\n    && rm -r rancher-v2.6.9 \\\n    && chmod u+x kubectl\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n构建镜像并上传至harbor\n\ndocker build -t 192.168.213.222:22280/cicd/rancher-cli:1.0.0 .\ndocker push 192.168.213.222:22280/cicd/rancher-cli:1.0.0\n\n\n1\n2\n\n\n\n# jenkins构建微服务镜像\n\n进入ok-springboot-imdemo，点击立即构建\n\n\n\n立即构建-查看日志，第一次会报错。\n\n\n\n复制镜像地址：192.168.213.222:22280/imdemo/ok-springboot-imdemo:3\n\n\n\n\n# rancher创建微服务\n\n\n# 创建项目\n\n进入页面：\n\n\n\n创建项目：demo\n\n\n\n\n# 创建命名空间\n\n进入页面\n\n\n\n创建项目：ok\n\n\n\n\n# 创建负载\n\n进入页面：\n\n\n\n命名空间选择：ok\n\n名称：ok-springboot-imdemo\n\n镜像：192.168.213.222:22280/imdemo/ok-springboot-imdemo:3\n\n端口：8610 监听30010\n\n\n\n完成创建后页面访问：\n\nhttp://192.168.213.201:30010/ok-springboot-imdemo/hello\n\n\n\n\n# gitlab触发jenkins\n\n\n# gitlab取消限制策略\n\n禁止向本地连接发送请求\n\n由于gitlab和jenkins安装在同台服务器，且gitlab 10.6 版本以后为了安全，默认不允许向本地网络发送webhook请求。先将禁止取消。\n\n点击勾选[allow requests to the local network from web hooks and services]，并保存\n\n\n\n\n# jenkins取消限制策略\n\n由于gitlab和jenkins安装在同台服务器\n\n勾选[匿名用户具有可读权限]\n\n\n\n修改222服务器jenkins docker-compose.yml文件\n\n增加文件内容\n\n    environment: \n      - java_opts=-dhudson.security.csrf.globalcrumbissuerconfiguration.disable_csrf_protection=true\n\n\n1\n2\n\n\n\n\n\n# 配置触发\n\n进入gitlab页面：\n\n打开代码仓库，进入回调配置页面。需要仓库维护者权限才能看到此菜单。\n\n\n\nurl从本文档的jenkins任务配置中获取：\n\nhttp://192.168.213.222:7080/job/ok-springboot-imdemo/build?token=ok-springboot-imdemo\n\n\n\n点击增加\n\n\n\n完成提交代码自动构建\n\n\n# 触发rancher更新镜像\n\n\n# 创建api密钥\n\n进入页面：\n\n\n\n输入描述并创建\n\n\n\n\n# 复制持有者令牌\n\n\n\n令牌：token-hcht8:wq4s7cwnxj64s5492rtcnz7hsp27dmzl8qxmwgz9v5kl56lqftr4bj\n\n\n# 复制api地址\n\n\n\n地址：https://rancher.ok96.cn:8443/v3\n\n更新命令：\n\ndocker run --rm --name ranchercli 192.168.213.222:22280/cicd/rancher-cli:1.0.0  sh -c  "rancher login https://rancher.ok96.cn:8443/v3 --token token-hcht8:wq4s7cwnxj64s5492rtcnz7hsp27dmzl8qxmwgz9v5kl56lqftr4bj"\n\n\n1\n\n\n\n# 复制项目project id\n\n进入页面，查看yaml：\n\n\n\n找到name及namespace：\n\nname: p-4ltfh\nnamespace: c-m-hwhwchxr\n\n\n1\n2\n\n\n即project id： c-m-hwhwchxr:p-4ltfh\n\n\n\n\n# 复制项目containername\n\n进入页面：\n\n\n\n复制容器名称：container-0\n\n\n\n\n# 更新镜像命令说明\n\n命令：\n\nrancher login ${rancher.url} --token ${rancher} --context ${rancherprojectid}\nrancher kubectl set image deployment.apps/${projectconfig.projectname} ${containername}=${image_full_path} -n ${k8s_namespace}\n\n\n1\n2\n\n\n其中：\n\n${rancher.url}：为api地址【https://rancher.ok96.cn:8443/v3】\n${rancher}：为token【token-hcht8:wq4s7cwnxj64s5492rtcnz7hsp27dmzl8qxmwgz9v5kl56lqftr4bj】\n${rancherprojectid}：为projectid【c-m-hwhwchxr:p-4ltfh】\n${projectconfig.projectname}：为项目名称【ok-springboot-imdemo】\n${containername}：为容器名称【container-0】\n${k8s_namespace}：为命名空间名称【ok】\n${image_full_path}：为更新容器镜像的地址\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 更新镜像容器命令示例\n\n示例：更新容器镜像为【192.168.213.222:22280/imdemo/ok-springboot-imdemo:7】\n\ndocker run --rm --name ranchercli 192.168.213.222:22280/cicd/rancher-cli:1.0.0  sh -c  "rancher login https://rancher.ok96.cn:8443/v3 --token token-hcht8:wq4s7cwnxj64s5492rtcnz7hsp27dmzl8qxmwgz9v5kl56lqftr4bj --context c-m-hwhwchxr:p-4ltfh && rancher kubectl set image deployment.apps/ok-springboot-imdemo container-0=192.168.213.222:22280/imdemo/ok-springboot-imdemo:7 -n ok"\n\n\n1\n\n\n\n# 附件\n\n百度云下载：\n\n链接：https://pan.baidu.com/s/1ixsrk4wsi_-ppahn1pafpg \n提取码：izt1\n\n\n1\n2\n\n\n说明\n\n文件名称                                  说明             备注\nharbor-offline-installer-v2.2.3.tgz   harbor安装包      https://github.com/goharbor/harbor/releases/\nbinaryinstallation.zip                docker二进制安装包   -\nok-springboot-imdemo-dev.zip          微服务工程示例代码      -',charsets:{cjk:!0},lastUpdated:"2023/03/14, 05:37:24",lastUpdatedTimestamp:1678772244e3},{title:"常用Nginx配置",frontmatter:{title:"常用Nginx配置",date:"2023-03-13T11:12:25.000Z",permalink:"/pages/938c44/",categories:["Application","Nginx"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/01.Nginx/02.%E5%B8%B8%E7%94%A8Nginx%E9%85%8D%E7%BD%AE.html",relativePath:"04.Application/01.Nginx/02.常用Nginx配置.md",key:"v-5ff65d10",path:"/pages/938c44/",headers:[{level:2,title:"同一端口HTTP跳转HTTPS",slug:"同一端口http跳转https",normalizedTitle:"同一端口http跳转https",charIndex:2},{level:2,title:"测试返回文本",slug:"测试返回文本",normalizedTitle:"测试返回文本",charIndex:136},{level:2,title:"非默认443端口",slug:"非默认443端口",normalizedTitle:"非默认443端口",charIndex:315},{level:2,title:"端口转发",slug:"端口转发",normalizedTitle:"端口转发",charIndex:1487},{level:2,title:"同一端口根据不同域名转发",slug:"同一端口根据不同域名转发",normalizedTitle:"同一端口根据不同域名转发",charIndex:1852},{level:2,title:"http自动跳转https",slug:"http自动跳转https",normalizedTitle:"http自动跳转https",charIndex:3603}],headersStr:"同一端口HTTP跳转HTTPS 测试返回文本 非默认443端口 端口转发 同一端口根据不同域名转发 http自动跳转https",content:'# 同一端口HTTP跳转HTTPS\n\n在只监听一个端口的情况下，将http访问跳转为https 尝试通用error_page去拦截\n\nerror_page 497 https://$host:$server_port$uri$is_args$args;\n\n\n1\n\n\n\n# 测试返回文本\n\n使用application/json\n\nlocation /hello {\n          default_type application/json;\n          return 200 \'{"status":"success","result":"nginx json"}\';\n        }\n\n\n1\n2\n3\n4\n\n\n\n# 非默认443端口\n\n使用https协议，不用443端口\n\nlisten default\n\nserver {\n    listen 2443 default ssl;\n     \n     ssl_certificate /ssl/hellossl/hello.ok96.cn.pem;\n     ssl_certificate_key /ssl/hellossl/hello.ok96.cn.key;\n        ssl_session_timeout 5m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n     return 404;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nlisten\n\nserver {\n    listen       2443    ssl;\n    server_name git.ok96.cn;\n    client_max_body_size 60M;\n    client_body_buffer_size 512k;\n\n    ssl_certificate /ssl/hellossl/hello.ok96.cn.pem;\n    ssl_certificate_key /ssl/hellossl/hello.ok96.cn.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;   \n\n    error_page 497 https://$host:$server_port$uri$is_args$args;\n\n    location /hello {\n        default_type application/json;\n        return 200 \'{"status":"success","result":"nginx json"}\';\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 端口转发\n\n配置文件与http同级，如下将本机端口7070转发到213服务器的6060端口\n\nstream{\n        upstream mysqlmaster {\n                server 192.168.213.213:6060 weight=1;\n        }\n        server {\n                listen 7070;\n                proxy_upload_rate 102400;\n                proxy_download_rate 102400;\n                proxy_pass mysqlmaster;\n        }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 同一端口根据不同域名转发\n\n增加两个一样的listen，不同server_name\n\nlisten default\n\nserver {\n    listen 443 default ssl;\n     \n     ssl_certificate /ssl/5499474_ok96.cn.pem;\n     ssl_certificate_key /ssl/5499474_ok96.cn.key;\n        ssl_session_timeout 5m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers on;\n     return 404;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n两个listen ，可用不同证书\n\nserver {\n    listen       443    ssl;\n    server_name ok96.cn;\n    client_max_body_size 60M;\n    client_body_buffer_size 512k;\n         \n    ssl_certificate /ssl/5499474_ok96.cn.pem;\n    ssl_certificate_key /ssl/5499474_ok96.cn.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;   \n\n    location /hello {\n          default_type application/json;\n          return 200 \'{"status":"success","result":"nginx json"}\';\n    }\n\n}\nserver {\n    listen       443    ssl;\n    server_name hello.ok96.cn;\n    client_max_body_size 60M;\n    client_body_buffer_size 512k;\n         \n    ssl_certificate  /ssl/hellossl/hello.ok96.cn.pem;\n    ssl_certificate_key  /ssl/hellossl/hello.ok96.cn.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;   \n\n    location /hello {\n          default_type application/json;\n          return 200 \'{"status":"success","result":"nginx json"}\';\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# http自动跳转https\n\n让80端口全部转发到443\n\nlisten default\n\nserver {\n    listen 80 default;\n    return 404;\n}\n\n\n1\n2\n3\n4\n\n\nlisten\n\nserver {\n        listen       80;\n        server_name  ok96.cn www.ok96.cn hello.ok96.cn;\n        client_max_body_size 60M;\n        client_body_buffer_size 512k;\n\n\n        #rewrite ^(.*) https://$server_name$1 permanent;\n        rewrite ^(.*)$ https://$host$1 permanent;  \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',normalizedContent:'# 同一端口http跳转https\n\n在只监听一个端口的情况下，将http访问跳转为https 尝试通用error_page去拦截\n\nerror_page 497 https://$host:$server_port$uri$is_args$args;\n\n\n1\n\n\n\n# 测试返回文本\n\n使用application/json\n\nlocation /hello {\n          default_type application/json;\n          return 200 \'{"status":"success","result":"nginx json"}\';\n        }\n\n\n1\n2\n3\n4\n\n\n\n# 非默认443端口\n\n使用https协议，不用443端口\n\nlisten default\n\nserver {\n    listen 2443 default ssl;\n     \n     ssl_certificate /ssl/hellossl/hello.ok96.cn.pem;\n     ssl_certificate_key /ssl/hellossl/hello.ok96.cn.key;\n        ssl_session_timeout 5m;\n        ssl_ciphers ecdhe-rsa-aes128-gcm-sha256:ecdhe:ecdh:aes:high:!null:!anull:!md5:!adh:!rc4;\n        ssl_protocols tlsv1 tlsv1.1 tlsv1.2;\n        ssl_prefer_server_ciphers on;\n     return 404;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nlisten\n\nserver {\n    listen       2443    ssl;\n    server_name git.ok96.cn;\n    client_max_body_size 60m;\n    client_body_buffer_size 512k;\n\n    ssl_certificate /ssl/hellossl/hello.ok96.cn.pem;\n    ssl_certificate_key /ssl/hellossl/hello.ok96.cn.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ecdhe-rsa-aes128-gcm-sha256:ecdhe:ecdh:aes:high:!null:!anull:!md5:!adh:!rc4;\n    ssl_protocols tlsv1 tlsv1.1 tlsv1.2;\n    ssl_prefer_server_ciphers on;   \n\n    error_page 497 https://$host:$server_port$uri$is_args$args;\n\n    location /hello {\n        default_type application/json;\n        return 200 \'{"status":"success","result":"nginx json"}\';\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# 端口转发\n\n配置文件与http同级，如下将本机端口7070转发到213服务器的6060端口\n\nstream{\n        upstream mysqlmaster {\n                server 192.168.213.213:6060 weight=1;\n        }\n        server {\n                listen 7070;\n                proxy_upload_rate 102400;\n                proxy_download_rate 102400;\n                proxy_pass mysqlmaster;\n        }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 同一端口根据不同域名转发\n\n增加两个一样的listen，不同server_name\n\nlisten default\n\nserver {\n    listen 443 default ssl;\n     \n     ssl_certificate /ssl/5499474_ok96.cn.pem;\n     ssl_certificate_key /ssl/5499474_ok96.cn.key;\n        ssl_session_timeout 5m;\n        ssl_ciphers ecdhe-rsa-aes128-gcm-sha256:ecdhe:ecdh:aes:high:!null:!anull:!md5:!adh:!rc4;\n        ssl_protocols tlsv1 tlsv1.1 tlsv1.2;\n        ssl_prefer_server_ciphers on;\n     return 404;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n两个listen ，可用不同证书\n\nserver {\n    listen       443    ssl;\n    server_name ok96.cn;\n    client_max_body_size 60m;\n    client_body_buffer_size 512k;\n         \n    ssl_certificate /ssl/5499474_ok96.cn.pem;\n    ssl_certificate_key /ssl/5499474_ok96.cn.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ecdhe-rsa-aes128-gcm-sha256:ecdhe:ecdh:aes:high:!null:!anull:!md5:!adh:!rc4;\n    ssl_protocols tlsv1 tlsv1.1 tlsv1.2;\n    ssl_prefer_server_ciphers on;   \n\n    location /hello {\n          default_type application/json;\n          return 200 \'{"status":"success","result":"nginx json"}\';\n    }\n\n}\nserver {\n    listen       443    ssl;\n    server_name hello.ok96.cn;\n    client_max_body_size 60m;\n    client_body_buffer_size 512k;\n         \n    ssl_certificate  /ssl/hellossl/hello.ok96.cn.pem;\n    ssl_certificate_key  /ssl/hellossl/hello.ok96.cn.key;\n    ssl_session_timeout 5m;\n    ssl_ciphers ecdhe-rsa-aes128-gcm-sha256:ecdhe:ecdh:aes:high:!null:!anull:!md5:!adh:!rc4;\n    ssl_protocols tlsv1 tlsv1.1 tlsv1.2;\n    ssl_prefer_server_ciphers on;   \n\n    location /hello {\n          default_type application/json;\n          return 200 \'{"status":"success","result":"nginx json"}\';\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n\n\n\n# http自动跳转https\n\n让80端口全部转发到443\n\nlisten default\n\nserver {\n    listen 80 default;\n    return 404;\n}\n\n\n1\n2\n3\n4\n\n\nlisten\n\nserver {\n        listen       80;\n        server_name  ok96.cn www.ok96.cn hello.ok96.cn;\n        client_max_body_size 60m;\n        client_body_buffer_size 512k;\n\n\n        #rewrite ^(.*) https://$server_name$1 permanent;\n        rewrite ^(.*)$ https://$host$1 permanent;  \n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n',charsets:{cjk:!0},lastUpdated:"2023/03/13, 03:16:04",lastUpdatedTimestamp:1678677364e3},{title:"修改已提交的commit的注释",frontmatter:{title:"修改已提交的commit的注释",date:"2023-03-10T16:54:11.000Z",permalink:"/pages/f062a7/",categories:["Application","Git"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/02.Git/01.%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84commit%E7%9A%84%E6%B3%A8%E9%87%8A.html",relativePath:"04.Application/02.Git/01.修改已提交的commit的注释.md",key:"v-61e7116b",path:"/pages/f062a7/",headers:[{level:2,title:"修改某次的commit的注释",slug:"修改某次的commit的注释",normalizedTitle:"修改某次的commit的注释",charIndex:2},{level:2,title:"修改注释",slug:"修改注释",normalizedTitle:"修改注释",charIndex:114},{level:2,title:"执行命令",slug:"执行命令",normalizedTitle:"执行命令",charIndex:120},{level:2,title:"强制推送到远端",slug:"强制推送到远端",normalizedTitle:"强制推送到远端",charIndex:212},{level:2,title:"缺点",slug:"缺点",normalizedTitle:"缺点",charIndex:275}],headersStr:"修改某次的commit的注释 修改注释 执行命令 强制推送到远端 缺点",content:"# 修改某次的commit的注释\n\n例：修改倒数第16次commit的注释\n\ngit rebase -i HEAD~16\n\n\n1\n\n\n进入vim后，i进入编辑模式 将需要修改的那行的单词pick修改为edit,保存退出\n\n\n# 修改注释\n\n执行命令\n\ngit commit --amend\n\n\n1\n\n\ni进入编辑模式，然后修改注释，保存退出\n\n\n# 执行命令\n\ngit rebase --continue\n\n\n1\n\n\n\n# 强制推送到远端\n\n例：分支名称2022.1.x\n\ngit push  -f origin 2022.1.x\n\n\n1\n\n\n\n# 缺点\n\n会将修改注释的提交时间自动修改为当前",normalizedContent:"# 修改某次的commit的注释\n\n例：修改倒数第16次commit的注释\n\ngit rebase -i head~16\n\n\n1\n\n\n进入vim后，i进入编辑模式 将需要修改的那行的单词pick修改为edit,保存退出\n\n\n# 修改注释\n\n执行命令\n\ngit commit --amend\n\n\n1\n\n\ni进入编辑模式，然后修改注释，保存退出\n\n\n# 执行命令\n\ngit rebase --continue\n\n\n1\n\n\n\n# 强制推送到远端\n\n例：分支名称2022.1.x\n\ngit push  -f origin 2022.1.x\n\n\n1\n\n\n\n# 缺点\n\n会将修改注释的提交时间自动修改为当前",charsets:{cjk:!0},lastUpdated:"2023/03/10, 09:02:56",lastUpdatedTimestamp:1678438976e3},{title:"常用lua命令",frontmatter:{title:"常用lua命令",date:"2023-03-10T16:03:25.000Z",permalink:"/pages/076107/",categories:["Application","Nginx"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/01.Nginx/01.%E5%B8%B8%E7%94%A8lua%E5%91%BD%E4%BB%A4.html",relativePath:"04.Application/01.Nginx/01.常用lua命令.md",key:"v-23aba859",path:"/pages/076107/",headers:[{level:2,title:"判断字符串包含另外一个字符串",slug:"判断字符串包含另外一个字符串",normalizedTitle:"判断字符串包含另外一个字符串",charIndex:2},{level:2,title:"if...else 语句",slug:"if-else-语句",normalizedTitle:"if...else 语句",charIndex:295}],headersStr:"判断字符串包含另外一个字符串 if...else 语句",content:'# 判断字符串包含另外一个字符串\n\nlocal isGlobleBlack = string.match("http://CCBWebView:443/dfss,http://dsas:66/sda","http://CCBWebView:443/");\n if isGlobleBlack ~=ngx.null and isGlobleBlack then\n  ngx.say("have")--包含\n else\n  ngx.say("no")--不包含\n end\n--isGlobleBlack值为http://CCBWebView:443/\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# if...else 语句\n\nif(布尔表达式)\nthen\n--[ 布尔表达式为 true 时执行该语句块 --]\nelse\n--[ 布尔表达式为 false 时执行该语句块 --]\nend\n\n\n1\n2\n3\n4\n5\n6\n',normalizedContent:'# 判断字符串包含另外一个字符串\n\nlocal isglobleblack = string.match("http://ccbwebview:443/dfss,http://dsas:66/sda","http://ccbwebview:443/");\n if isglobleblack ~=ngx.null and isglobleblack then\n  ngx.say("have")--包含\n else\n  ngx.say("no")--不包含\n end\n--isglobleblack值为http://ccbwebview:443/\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# if...else 语句\n\nif(布尔表达式)\nthen\n--[ 布尔表达式为 true 时执行该语句块 --]\nelse\n--[ 布尔表达式为 false 时执行该语句块 --]\nend\n\n\n1\n2\n3\n4\n5\n6\n',charsets:{cjk:!0},lastUpdated:"2023/03/10, 09:02:56",lastUpdatedTimestamp:1678438976e3},{title:"修改已提交的用户名与邮箱",frontmatter:{title:"修改已提交的用户名与邮箱",date:"2023-03-10T16:56:42.000Z",permalink:"/pages/dfef00/",categories:["Application","Git"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/02.Git/02.%E4%BF%AE%E6%94%B9%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%8E%E9%82%AE%E7%AE%B1.html",relativePath:"04.Application/02.Git/02.修改已提交的用户名与邮箱.md",key:"v-6aca16ca",path:"/pages/dfef00/",headers:[{level:2,title:"命令行执行",slug:"命令行执行",normalizedTitle:"命令行执行",charIndex:2},{level:2,title:"更新远程仓库",slug:"更新远程仓库",normalizedTitle:"更新远程仓库",charIndex:497}],headersStr:"命令行执行 更新远程仓库",content:'# 命令行执行\n\ngit filter-branch --env-filter \'\n\noldEmail="71479461+ok1996@users.noreply.github.com"\nnewName="ok1996"\nnewEmail="ku29@qq.com"\n\nif [ "$GIT_COMMITTER_EMAIL" = "$oldEmail" ]; then\n    export GIT_COMMITTER_NAME="$newName"\n    export GIT_COMMITTER_EMAIL="$newEmail"\nfi\n\nif [ "$GIT_AUTHOR_EMAIL" = "$oldEmail" ]; then\n    export GIT_AUTHOR_NAME="$newName"\n    export GIT_AUTHOR_EMAIL="$newEmail"\nfi\n\n\' --tag-name-filter cat -- --branches --tags\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 更新远程仓库\n\ngit push -f\n\n\n1\n',normalizedContent:'# 命令行执行\n\ngit filter-branch --env-filter \'\n\noldemail="71479461+ok1996@users.noreply.github.com"\nnewname="ok1996"\nnewemail="ku29@qq.com"\n\nif [ "$git_committer_email" = "$oldemail" ]; then\n    export git_committer_name="$newname"\n    export git_committer_email="$newemail"\nfi\n\nif [ "$git_author_email" = "$oldemail" ]; then\n    export git_author_name="$newname"\n    export git_author_email="$newemail"\nfi\n\n\' --tag-name-filter cat -- --branches --tags\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 更新远程仓库\n\ngit push -f\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2023/03/10, 09:02:56",lastUpdatedTimestamp:1678438976e3},{title:"纯Git服务器搭载",frontmatter:{title:"纯Git服务器搭载",date:"2023-03-10T16:59:05.000Z",permalink:"/pages/9de1e8/",categories:["Application","Git"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/02.Git/03.%E7%BA%AFGit%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E8%BD%BD.html",relativePath:"04.Application/02.Git/03.纯Git服务器搭载.md",key:"v-7b1d014e",path:"/pages/9de1e8/",headers:[{level:2,title:"centos安装git",slug:"centos安装git",normalizedTitle:"centos安装git",charIndex:2},{level:2,title:"创建git用户和组",slug:"创建git用户和组",normalizedTitle:"创建git用户和组",charIndex:48},{level:3,title:"新建脚本init.sh",slug:"新建脚本init-sh",normalizedTitle:"新建脚本init.sh",charIndex:254},{level:2,title:"新建仓库",slug:"新建仓库",normalizedTitle:"新建仓库",charIndex:638},{level:2,title:"克隆",slug:"克隆",normalizedTitle:"克隆",charIndex:676}],headersStr:"centos安装git 创建git用户和组 新建脚本init.sh 新建仓库 克隆",content:"# centos安装git\n\nsudo yum install -y git\n\n\n1\n\n\n\n# 创建git用户和组\n\ngroupadd gitgroup\n创建用户及用户组\nuseradd wuzh\npasswd g.wuzh  # 设置密码\n\nuseradd xiaoku\npasswd xiaoku # 设置密码\n\n #将用户添加到用户组\nusermod -G gitgroup wuzh\nusermod -G gitgroup xiaoku\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 新建脚本init.sh\n\n目录位置/data/software/git\n目录位置下新建data\n脚本内容\n\nmkdir -p /data/software/git/data/$1.git\ncd /data/software/git/data/$1.git\ngit init --bare\n#chown -R git:git /data/software/git\nchgrp -R gitgroup /data/software/git/\nchmod g+w -R /data/software/git/data/$1.git/objects/\nchmod g+w -R /data/software/git/data/$1.git/refs/\ngit config core.sharedRepository group\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 新建仓库\n\n执行脚本\n\n./init.sh imdemo\n\n\n1\n\n\n\n# 克隆\n\ngit clone ssh://g.wuzh@{{IP}}:/data/software/git/data/imdemo.git\n\n\n1\n",normalizedContent:"# centos安装git\n\nsudo yum install -y git\n\n\n1\n\n\n\n# 创建git用户和组\n\ngroupadd gitgroup\n创建用户及用户组\nuseradd wuzh\npasswd g.wuzh  # 设置密码\n\nuseradd xiaoku\npasswd xiaoku # 设置密码\n\n #将用户添加到用户组\nusermod -g gitgroup wuzh\nusermod -g gitgroup xiaoku\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 新建脚本init.sh\n\n目录位置/data/software/git\n目录位置下新建data\n脚本内容\n\nmkdir -p /data/software/git/data/$1.git\ncd /data/software/git/data/$1.git\ngit init --bare\n#chown -r git:git /data/software/git\nchgrp -r gitgroup /data/software/git/\nchmod g+w -r /data/software/git/data/$1.git/objects/\nchmod g+w -r /data/software/git/data/$1.git/refs/\ngit config core.sharedrepository group\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 新建仓库\n\n执行脚本\n\n./init.sh imdemo\n\n\n1\n\n\n\n# 克隆\n\ngit clone ssh://g.wuzh@{{ip}}:/data/software/git/data/imdemo.git\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2023/03/10, 09:02:56",lastUpdatedTimestamp:1678438976e3},{title:"常用docker命令",frontmatter:{title:"常用docker命令",date:"2023-03-10T16:06:09.000Z",permalink:"/pages/d6f4bc/",categories:["Application","Docker"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/03.Docker/01.%E5%B8%B8%E7%94%A8docker%E5%91%BD%E4%BB%A4.html",relativePath:"04.Application/03.Docker/01.常用docker命令.md",key:"v-43867bf6",path:"/pages/d6f4bc/",headers:[{level:2,title:"进程PID查找归属容器ID",slug:"进程pid查找归属容器id",normalizedTitle:"进程pid查找归属容器id",charIndex:2},{level:2,title:"进入docker容器",slug:"进入docker容器",normalizedTitle:"进入docker容器",charIndex:292},{level:3,title:"redis",slug:"redis",normalizedTitle:"redis",charIndex:307},{level:3,title:"mysql",slug:"mysql",normalizedTitle:"mysql",charIndex:481},{level:3,title:"kafka",slug:"kafka",normalizedTitle:"kafka",charIndex:565},{level:2,title:"docker ps -a",slug:"docker-ps-a",normalizedTitle:"docker ps -a",charIndex:845},{level:2,title:"删除所有镜像",slug:"删除所有镜像",normalizedTitle:"删除所有镜像",charIndex:929},{level:2,title:"删除所有docker容器",slug:"删除所有docker容器",normalizedTitle:"删除所有docker容器",charIndex:977},{level:2,title:"docker镜像导入导出",slug:"docker镜像导入导出",normalizedTitle:"docker镜像导入导出",charIndex:1062},{level:2,title:"监听服务，若异常则重启",slug:"监听服务-若异常则重启",normalizedTitle:"监听服务，若异常则重启",charIndex:1170},{level:3,title:"脚本",slug:"脚本",normalizedTitle:"脚本",charIndex:1186},{level:3,title:"检查脚本是否能够正常启动",slug:"检查脚本是否能够正常启动",normalizedTitle:"检查脚本是否能够正常启动",charIndex:1808},{level:3,title:"加入定时任务",slug:"加入定时任务",normalizedTitle:"加入定时任务",charIndex:1868},{level:2,title:"构建镜像",slug:"构建镜像",normalizedTitle:"构建镜像",charIndex:1980}],headersStr:"进程PID查找归属容器ID 进入docker容器 redis mysql kafka docker ps -a 删除所有镜像 删除所有docker容器 docker镜像导入导出 监听服务，若异常则重启 脚本 检查脚本是否能够正常启动 加入定时任务 构建镜像",content:'# 进程PID查找归属容器ID\n\n根据进程PID查找归属容器ID\n\n使用inspect\n\ndocker inspect -f \'{{.State.Pid}} {{.Id}}\' $(docker ps -q) | grep <PID>\n\n\n1\n\n\n\n\n如果PID是容器内运行子进程那docker inspect就无法显示了，使用以下命令\n\nfor i in  `docker ps |grep Up|awk \'{print $1}\'`;do echo \\ &&docker top $i &&echo ID=$i; done |grep -A 10  <PID>\n\n\n1\n\n\n\n\n\n# 进入docker容器\n\n\n# redis\n\ndocker exec -it redis redis-cli -a 密码\n获取 redis 中所有的 key:\nKEYS *\n//删除当前数据库中的所有Key\nflushdb\n获取过期时间\nttl key\n\nSET runoobkey redis\nDEL runoobkey\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# mysql\n\ndocker exec -it mysql bash\n链接数据库\nmysql -uroot -p\n输入密码后就进入数据库了\n\n\n1\n2\n3\n4\n\n\n\n# kafka\n\n1.进入容器\ndocker exec -it kafka-zookeeper /bin/sh\n2. 生产者(容器内部使用127.0.0.1:9092)\n./bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test \n3. 消费者\n./bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test --from-beginning\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# docker ps -a\n\n只输出docker的ID和Name\ndocker ps --format "{{.ID}}: {{.Names}}"\n\n\n1\n2\n\n\n\n# 删除所有镜像\n\ndocker rmi $(docker images -q)\n\n\n1\n\n\n\n# 删除所有docker容器\n\ndocker kill $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n\n\n1\n2\n\n\n\n# docker镜像导入导出\n\n导出\n\ndocker save -o mysql5721.tar mysql:5.7.21\n\n\n1\n\n\n导入\n\ndocker load -i mysql5721.tar\n\n\n1\n\n\n\n# 监听服务，若异常则重启\n\n\n# 脚本\n\n/home/check/checkDockerServer.sh如下：\n\n#!/bin/bash\n#当前时间\nnow=`date +"%Y-%m-%d %H:%M:%S"`\n#获取所有容器\narr=`docker ps --format "{{.Names}}"`\n#清空正常的日志\necho " " >/home/check/checkDocker.log\n#循环\nfor item in ${arr[*]}\ndo\n   # 查看进程是否存在\n   exist=`docker inspect --format \'{{.State.Running}}\' ${item}`\n\n    if [ "${exist}" != "true" ]\n    then {\n        echo "${now} 重启docker容器，容器：${item}" >> /home/check/restartDockerServer.log\n        docker restart ${item}\n    }\n    else\n    {\n      echo "${now} 容器：${item} 正常" >>/home/check/checkDocker.log\n    }\n    fi\ndone\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 检查脚本是否能够正常启动\n\n sh /home/check/checkDockerServer.sh\n\n\n1\n\n\n\n# 加入定时任务\n\n crontab -e\n\n\n1\n\n\n每个一分钟执行一次脚本\n\n*/1 * * * * sh /home/check/checkDockerServer.sh >/dev/null 2>&1\n\n\n1\n\n\n\n# 构建镜像\n\n例：基于openjdk:8-jre\n\n配置文件：/home/application.yml或/home/application.properties\njar包：/app.jar\n时区：上海\n其他：更新apt-get，安装zip、unzip\n可根据实际需求增删相关配置\n\n\n1\n2\n3\n4\n5\n\n\nDockerfile\n\nFROM openjdk:8-jre\nRUN sh -c \'touch /app.jar\'\nENV TZ=Asia/Shanghai\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\nENTRYPOINT ["java","-Xmx800m","-Dspring.config.location=/home/application.yml,/home/application.properties","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]\nRUN apt-get update -y &&apt-get install -y zip unzip\n\n\n1\n2\n3\n4\n5\n6\n\n\n构建命令：openjdk-jar 镜像，版本号8，根据当前目录Dockerfile文件\n\ndocker build -t openjdk-jar:8 ./\n\n\n1\n',normalizedContent:'# 进程pid查找归属容器id\n\n根据进程pid查找归属容器id\n\n使用inspect\n\ndocker inspect -f \'{{.state.pid}} {{.id}}\' $(docker ps -q) | grep <pid>\n\n\n1\n\n\n\n\n如果pid是容器内运行子进程那docker inspect就无法显示了，使用以下命令\n\nfor i in  `docker ps |grep up|awk \'{print $1}\'`;do echo \\ &&docker top $i &&echo id=$i; done |grep -a 10  <pid>\n\n\n1\n\n\n\n\n\n# 进入docker容器\n\n\n# redis\n\ndocker exec -it redis redis-cli -a 密码\n获取 redis 中所有的 key:\nkeys *\n//删除当前数据库中的所有key\nflushdb\n获取过期时间\nttl key\n\nset runoobkey redis\ndel runoobkey\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# mysql\n\ndocker exec -it mysql bash\n链接数据库\nmysql -uroot -p\n输入密码后就进入数据库了\n\n\n1\n2\n3\n4\n\n\n\n# kafka\n\n1.进入容器\ndocker exec -it kafka-zookeeper /bin/sh\n2. 生产者(容器内部使用127.0.0.1:9092)\n./bin/kafka-console-producer.sh --broker-list 127.0.0.1:9092 --topic test \n3. 消费者\n./bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic test --from-beginning\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# docker ps -a\n\n只输出docker的id和name\ndocker ps --format "{{.id}}: {{.names}}"\n\n\n1\n2\n\n\n\n# 删除所有镜像\n\ndocker rmi $(docker images -q)\n\n\n1\n\n\n\n# 删除所有docker容器\n\ndocker kill $(docker ps -a -q)\ndocker rm $(docker ps -a -q)\n\n\n1\n2\n\n\n\n# docker镜像导入导出\n\n导出\n\ndocker save -o mysql5721.tar mysql:5.7.21\n\n\n1\n\n\n导入\n\ndocker load -i mysql5721.tar\n\n\n1\n\n\n\n# 监听服务，若异常则重启\n\n\n# 脚本\n\n/home/check/checkdockerserver.sh如下：\n\n#!/bin/bash\n#当前时间\nnow=`date +"%y-%m-%d %h:%m:%s"`\n#获取所有容器\narr=`docker ps --format "{{.names}}"`\n#清空正常的日志\necho " " >/home/check/checkdocker.log\n#循环\nfor item in ${arr[*]}\ndo\n   # 查看进程是否存在\n   exist=`docker inspect --format \'{{.state.running}}\' ${item}`\n\n    if [ "${exist}" != "true" ]\n    then {\n        echo "${now} 重启docker容器，容器：${item}" >> /home/check/restartdockerserver.log\n        docker restart ${item}\n    }\n    else\n    {\n      echo "${now} 容器：${item} 正常" >>/home/check/checkdocker.log\n    }\n    fi\ndone\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 检查脚本是否能够正常启动\n\n sh /home/check/checkdockerserver.sh\n\n\n1\n\n\n\n# 加入定时任务\n\n crontab -e\n\n\n1\n\n\n每个一分钟执行一次脚本\n\n*/1 * * * * sh /home/check/checkdockerserver.sh >/dev/null 2>&1\n\n\n1\n\n\n\n# 构建镜像\n\n例：基于openjdk:8-jre\n\n配置文件：/home/application.yml或/home/application.properties\njar包：/app.jar\n时区：上海\n其他：更新apt-get，安装zip、unzip\n可根据实际需求增删相关配置\n\n\n1\n2\n3\n4\n5\n\n\ndockerfile\n\nfrom openjdk:8-jre\nrun sh -c \'touch /app.jar\'\nenv tz=asia/shanghai\nrun ln -snf /usr/share/zoneinfo/$tz /etc/localtime && echo $tz > /etc/timezone\nentrypoint ["java","-xmx800m","-dspring.config.location=/home/application.yml,/home/application.properties","-djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]\nrun apt-get update -y &&apt-get install -y zip unzip\n\n\n1\n2\n3\n4\n5\n6\n\n\n构建命令：openjdk-jar 镜像，版本号8，根据当前目录dockerfile文件\n\ndocker build -t openjdk-jar:8 ./\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2023/03/10, 10:08:26",lastUpdatedTimestamp:1678442906e3},{title:"使用docker构建前端项目",frontmatter:{title:"使用docker构建前端项目",date:"2023-06-01T11:46:52.000Z",permalink:"/pages/8a962d/",categories:["Application","Docker"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/03.Docker/02.%E4%BD%BF%E7%94%A8docker%E6%9E%84%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE.html",relativePath:"04.Application/03.Docker/02.使用docker构建前端项目.md",key:"v-6d504496",path:"/pages/8a962d/",headers:[{level:2,title:"docker-compose",slug:"docker-compose",normalizedTitle:"docker-compose",charIndex:2},{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:606},{level:2,title:"操作命令",slug:"操作命令",normalizedTitle:"操作命令",charIndex:770},{level:3,title:"启动容器构建前端项目",slug:"启动容器构建前端项目",normalizedTitle:"启动容器构建前端项目",charIndex:779},{level:3,title:"查看日志构建进度",slug:"查看日志构建进度",normalizedTitle:"查看日志构建进度",charIndex:821},{level:3,title:"关闭容器",slug:"关闭容器",normalizedTitle:"关闭容器",charIndex:701},{level:3,title:"构建dist包目录",slug:"构建dist包目录",normalizedTitle:"构建dist包目录",charIndex:1322}],headersStr:"docker-compose 说明 操作命令 启动容器构建前端项目 查看日志构建进度 关闭容器 构建dist包目录",content:'# docker-compose\n\ndocker-compose.yml\n\nversion: "3"\nservices:\n  puredoc:\n    image: node:14.18.1\n    container_name: puredoc\n    volumes:\n      - ./app:/app\n    working_dir: /app\n    command: >\n      bash -c \'\n        if [ -d /app/.git ]; then\n          cd /app &&\n          git pull &&\n          yarn install &&\n          yarn build\n        else\n          git clone -b dev https://帐号:密码@gitlab.xxxx.cn/pure-doc.git /app &&\n          cd /app &&\n          yarn install &&\n          yarn build\n        fi &&\n        tail -f /dev/null\n      \'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 说明\n\n 1. "git clone -b dev"中 -b dev指的是拉取dev分支 可根据实际情况修改\n 2. 容器启动后便一直在运行中，启动后可查看日志，等待日志输出构建完成后可手动关闭容器\n 3. 首次启动会git clone代码，第二次启动会git pull代码。检测条件为[ -d /app/.git ]\n\n\n# 操作命令\n\n\n# 启动容器构建前端项目\n\ndocker-compose up -d\n\n\n1\n\n\n\n# 查看日志构建进度\n\ndocker logs -f puredoc\n\n\n1\n\n\n若日志输出如下，则说明已经构建完成\n\nℹ Compiling Client\nℹ Compiling Server\nLanguage does not exist: @data\n✔ Server: Compiled successfully in 34.50s\n✔ Client: Compiled successfully in 40.62s\nwait Rendering static HTML...\n\n SITEMAP  Generating sitemap...\n\n SITEMAP  found 61 locations\n\n SITEMAP  61 locations have been written.\nsuccess Generated static files in docs/.vuepress/dist.\n\nDone in 48.61s.\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 关闭容器\n\ndocker-compose down\n\n\n1\n\n\n\n# 构建dist包目录\n\n可根据日志输出得知构建完成的目录地址为\n\ndocs/.vuepress/dist.\n\n\n1\n\n\n由已经把docker目录地址映射出来，可在当前目录地址app下查看',normalizedContent:'# docker-compose\n\ndocker-compose.yml\n\nversion: "3"\nservices:\n  puredoc:\n    image: node:14.18.1\n    container_name: puredoc\n    volumes:\n      - ./app:/app\n    working_dir: /app\n    command: >\n      bash -c \'\n        if [ -d /app/.git ]; then\n          cd /app &&\n          git pull &&\n          yarn install &&\n          yarn build\n        else\n          git clone -b dev https://帐号:密码@gitlab.xxxx.cn/pure-doc.git /app &&\n          cd /app &&\n          yarn install &&\n          yarn build\n        fi &&\n        tail -f /dev/null\n      \'\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 说明\n\n 1. "git clone -b dev"中 -b dev指的是拉取dev分支 可根据实际情况修改\n 2. 容器启动后便一直在运行中，启动后可查看日志，等待日志输出构建完成后可手动关闭容器\n 3. 首次启动会git clone代码，第二次启动会git pull代码。检测条件为[ -d /app/.git ]\n\n\n# 操作命令\n\n\n# 启动容器构建前端项目\n\ndocker-compose up -d\n\n\n1\n\n\n\n# 查看日志构建进度\n\ndocker logs -f puredoc\n\n\n1\n\n\n若日志输出如下，则说明已经构建完成\n\nℹ compiling client\nℹ compiling server\nlanguage does not exist: @data\n✔ server: compiled successfully in 34.50s\n✔ client: compiled successfully in 40.62s\nwait rendering static html...\n\n sitemap  generating sitemap...\n\n sitemap  found 61 locations\n\n sitemap  61 locations have been written.\nsuccess generated static files in docs/.vuepress/dist.\n\ndone in 48.61s.\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# 关闭容器\n\ndocker-compose down\n\n\n1\n\n\n\n# 构建dist包目录\n\n可根据日志输出得知构建完成的目录地址为\n\ndocs/.vuepress/dist.\n\n\n1\n\n\n由已经把docker目录地址映射出来，可在当前目录地址app下查看',charsets:{cjk:!0},lastUpdated:"2023/06/01, 03:48:34",lastUpdatedTimestamp:1685591314e3},{title:"导出docker镜像脚本",frontmatter:{title:"导出docker镜像脚本",date:"2023-07-12T10:11:09.000Z",permalink:"/pages/b2456e/",categories:["Application","Docker"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/03.Docker/03.%E5%AF%BC%E5%87%BAdocker%E9%95%9C%E5%83%8F%E8%84%9A%E6%9C%AC.html",relativePath:"04.Application/03.Docker/03.导出docker镜像脚本.md",key:"v-711c8354",path:"/pages/b2456e/",headers:[{level:2,title:"脚本逻辑",slug:"脚本逻辑",normalizedTitle:"脚本逻辑",charIndex:2},{level:2,title:"脚本内容",slug:"脚本内容",normalizedTitle:"脚本内容",charIndex:246},{level:2,title:"执行命令",slug:"执行命令",normalizedTitle:"执行命令",charIndex:1050}],headersStr:"脚本逻辑 脚本内容 执行命令",content:'# 脚本逻辑\n\n写一个shell脚本，执行的时候参数为："镜像名称:版本号" 执行后： 1.服务器检查docker是否存在，不存在则提示异常 2.检查输入参数是否为空。为空则提示请输入 镜像名称:版本号 3.服务器进行下载镜像 docker pull 镜像名称:版本号，完成打印日志到屏幕上 4.下载完成后对镜像进行打包 docker save -o xxx.tar 镜像名称:版本号，完成打印日志到屏幕上 5.删除镜像 docker rmi 镜像名称:版本号，完成打印日志到屏幕上\n\n\n# 脚本内容\n\ndownload_image.sh\n\n#!/bin/bash\n\n# 检查docker是否存在\nif ! command -v docker &> /dev/null; then\n    echo "异常：Docker未安装或未配置环境变量"\n    exit 1\nfi\n\n# 检查输入参数\nif [ -z "$1" ]; then\n    echo "请输入 镜像名称:版本号"\n    exit 1\nfi\n\nimage_name="$1"\n\n# 下载镜像\necho "开始下载镜像 $image_name"\ndocker pull "$image_name"\n\n# 提取镜像名称和版本号\nIFS=\':\' read -r -a name_parts <<< "$image_name"\nname="${name_parts[0]}"\nversion="${name_parts[1]}"\n\n# 替换冒号和斜杠为下划线\nname_with_underscore="$(echo "$name" | sed \'s/[:/]/_/g\')"\nimage_file="${name_with_underscore}_${version}.tar"\n\n# 打包镜像\necho "开始打包镜像 $image_name 到文件 $image_file"\ndocker save -o "$image_file" "$image_name"\n\n# 删除镜像\necho "开始删除镜像 $image_name"\ndocker rmi "$image_name"\n\necho "脚本执行完成"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# 执行命令\n\n赋权\n\nchmod +x download_image.sh  \n\n\n1\n\n\n例：镜像 redis:7.0.11\n\n./download_image.sh redis:7.0.11\n\n\n1\n',normalizedContent:'# 脚本逻辑\n\n写一个shell脚本，执行的时候参数为："镜像名称:版本号" 执行后： 1.服务器检查docker是否存在，不存在则提示异常 2.检查输入参数是否为空。为空则提示请输入 镜像名称:版本号 3.服务器进行下载镜像 docker pull 镜像名称:版本号，完成打印日志到屏幕上 4.下载完成后对镜像进行打包 docker save -o xxx.tar 镜像名称:版本号，完成打印日志到屏幕上 5.删除镜像 docker rmi 镜像名称:版本号，完成打印日志到屏幕上\n\n\n# 脚本内容\n\ndownload_image.sh\n\n#!/bin/bash\n\n# 检查docker是否存在\nif ! command -v docker &> /dev/null; then\n    echo "异常：docker未安装或未配置环境变量"\n    exit 1\nfi\n\n# 检查输入参数\nif [ -z "$1" ]; then\n    echo "请输入 镜像名称:版本号"\n    exit 1\nfi\n\nimage_name="$1"\n\n# 下载镜像\necho "开始下载镜像 $image_name"\ndocker pull "$image_name"\n\n# 提取镜像名称和版本号\nifs=\':\' read -r -a name_parts <<< "$image_name"\nname="${name_parts[0]}"\nversion="${name_parts[1]}"\n\n# 替换冒号和斜杠为下划线\nname_with_underscore="$(echo "$name" | sed \'s/[:/]/_/g\')"\nimage_file="${name_with_underscore}_${version}.tar"\n\n# 打包镜像\necho "开始打包镜像 $image_name 到文件 $image_file"\ndocker save -o "$image_file" "$image_name"\n\n# 删除镜像\necho "开始删除镜像 $image_name"\ndocker rmi "$image_name"\n\necho "脚本执行完成"\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\n\n\n# 执行命令\n\n赋权\n\nchmod +x download_image.sh  \n\n\n1\n\n\n例：镜像 redis:7.0.11\n\n./download_image.sh redis:7.0.11\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2023/07/12, 03:07:58",lastUpdatedTimestamp:1689131278e3},{title:"常用Vue方法",frontmatter:{title:"常用Vue方法",date:"2023-03-10T16:49:16.000Z",permalink:"/pages/182fb5/",categories:["Application","Vue"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/04.Vue/01.%E5%B8%B8%E7%94%A8Vue%E6%96%B9%E6%B3%95.html",relativePath:"04.Application/04.Vue/01.常用Vue方法.md",key:"v-7485b39d",path:"/pages/182fb5/",headers:[{level:2,title:"命令",slug:"命令",normalizedTitle:"命令",charIndex:2},{level:2,title:"id替换名称",slug:"id替换名称",normalizedTitle:"id替换名称",charIndex:131},{level:3,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:142},{level:3,title:"代码",slug:"代码",normalizedTitle:"代码",charIndex:221},{level:4,title:"1.定义请求后台数据方法",slug:"_1-定义请求后台数据方法",normalizedTitle:"1.定义请求后台数据方法",charIndex:227},{level:4,title:"2.页面初始化",slug:"_2-页面初始化",normalizedTitle:"2.页面初始化",charIndex:423},{level:4,title:"3.数据列表替换方法",slug:"_3-数据列表替换方法",normalizedTitle:"3.数据列表替换方法",charIndex:742},{level:2,title:"下拉框遍历数组",slug:"下拉框遍历数组",normalizedTitle:"下拉框遍历数组",charIndex:1102},{level:3,title:"说明",slug:"说明-2",normalizedTitle:"说明",charIndex:142},{level:3,title:"代码",slug:"代码-2",normalizedTitle:"代码",charIndex:221},{level:2,title:"嵌套dialog",slug:"嵌套dialog",normalizedTitle:"嵌套dialog",charIndex:1966},{level:3,title:"说明",slug:"说明-3",normalizedTitle:"说明",charIndex:142},{level:3,title:"代码",slug:"代码-3",normalizedTitle:"代码",charIndex:221},{level:2,title:"cron表达式生成插件",slug:"cron表达式生成插件",normalizedTitle:"cron表达式生成插件",charIndex:2752},{level:3,title:"实现效果",slug:"实现效果",normalizedTitle:"实现效果",charIndex:209},{level:3,title:"github代码",slug:"github代码",normalizedTitle:"github代码",charIndex:2785},{level:2,title:"表字段太长，用...缩略",slug:"表字段太长-用-缩略",normalizedTitle:"表字段太长，用...缩略",charIndex:2814},{level:3,title:"效果",slug:"效果",normalizedTitle:"效果",charIndex:202},{level:3,title:"代码",slug:"代码-4",normalizedTitle:"代码",charIndex:221},{level:2,title:"弹窗",slug:"弹窗",normalizedTitle:"弹窗",charIndex:3124},{level:3,title:"效果",slug:"效果-2",normalizedTitle:"效果",charIndex:202},{level:3,title:"代码",slug:"代码-5",normalizedTitle:"代码",charIndex:221},{level:4,title:"页面",slug:"页面",normalizedTitle:"页面",charIndex:146},{level:4,title:"JS",slug:"js",normalizedTitle:"js",charIndex:3571},{level:2,title:"下拉选择框",slug:"下拉选择框",normalizedTitle:"下拉选择框",charIndex:3692},{level:3,title:"传参时为数字",slug:"传参时为数字",normalizedTitle:"传参时为数字",charIndex:3702},{level:4,title:"效果",slug:"效果-3",normalizedTitle:"效果",charIndex:202},{level:4,title:"代码",slug:"代码-6",normalizedTitle:"代码",charIndex:221},{level:2,title:"下拉框添加删除选项",slug:"下拉框添加删除选项",normalizedTitle:"下拉框添加删除选项",charIndex:4209},{level:3,title:"效果",slug:"效果-4",normalizedTitle:"效果",charIndex:202},{level:3,title:"代码",slug:"代码-7",normalizedTitle:"代码",charIndex:221},{level:2,title:"标签属性拼接变量",slug:"标签属性拼接变量",normalizedTitle:"标签属性拼接变量",charIndex:4526},{level:3,title:"效果",slug:"效果-5",normalizedTitle:"效果",charIndex:202},{level:3,title:"实现",slug:"实现",normalizedTitle:"实现",charIndex:209}],headersStr:"命令 id替换名称 说明 代码 1.定义请求后台数据方法 2.页面初始化 3.数据列表替换方法 下拉框遍历数组 说明 代码 嵌套dialog 说明 代码 cron表达式生成插件 实现效果 github代码 表字段太长，用...缩略 效果 代码 弹窗 效果 代码 页面 JS 下拉选择框 传参时为数字 效果 代码 下拉框添加删除选项 效果 代码 标签属性拼接变量 效果 实现",content:'# 命令\n\n安装依赖\nnpm install\n\n启动服务, 热加载 默认 localhost:8080, 若8080已使用会自动找另外一个端口\nnpm run dev\n\n压缩构建生产环境\nnpm run build\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# id替换名称\n\n\n# 说明\n\n页面数据列表中存在一列数据为jobTypeId，但是想展示需要取另外一张表中的数据来替换id与名称的关系。\n\n原效果：\n\n\n\n实现效果：\n\n\n\n\n# 代码\n\n# 1.定义请求后台数据方法\n\nexport function pageOssJobType (query) {\n    return fetch({\n        url: \'/api/admin/OssJobType/findByPage\',\n        method: \'post\',\n        data: query\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 2.页面初始化\n\n初始化待替换OssJobType数据列表\n\n定义初始化数据jobType\n\n  data() {\n    return {\n      jobType: []\n    }\n  }\n\n\n1\n2\n3\n4\n5\n\n\n初始化方法\n\ninitJobType() {\n      pageOssJobType({page:1,limit:10000}).then(res => {\n        this.jobType = res.rows;\n      });\n    }\n\n\n1\n2\n3\n4\n5\n\n\n进入页面初始化\n\n  mounted() {\n    this.initJobType();\n  }\n\n\n1\n2\n3\n\n\n# 3.数据列表替换方法\n\n页面代码\n\n      <el-table-column align="center"  width="250px" label="任务类型":formatter="isJobTypeFormat">\n      </el-table-column>\n\n\n1\n2\n\n\n方法\n\nisJobTypeFormat(row, column) {\n      var temp = this.jobType;\n      for (var i = 0; i < temp.length; i++) {\n        if (row.jobTypeId == temp[i].id) return temp[i].jobTypeName;\n      }\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 下拉框遍历数组\n\n\n# 说明\n\n以上一标题数组为例，实现效果如下\n\n\n\n\n\n\n# 代码\n\n页面代码\n\n<el-form-item v-if="dialogStatus==\'create\'" label="任务类型" prop="jobTypeId" >\n          <el-select placeholder="请选择任务类型" v-model="form.jobTypeId"  size="small" style="margin-right:10px;width: 550px;" autocomplete="off" clearable filterable>\n            <el-option v-for="item in jobType" :key="item.id" :label="item.jobTypeName" :value="item.id"></el-option>\n          </el-select>\n</el-form-item>\n\n\n<el-form-item v-else label="任务类型" prop="jobTypeId">\n          <el-select disabled placeholder="请选择任务类型" v-model="form.jobTypeId"  size="small" style="margin-right:10px;width: 550px;" autocomplete="off" clearable filterable>\n            <el-option v-for="item in jobType" :key="item.id" :label="item.jobTypeName" :value="item.id"></el-option>\n          </el-select>\n</el-form-item>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 嵌套dialog\n\n\n# 说明\n\n在点击第二层dialog时，页面出现遮罩层，如图显示偏灰色\n\n\n\n\n# 代码\n\n正常情况下，我们不建议使用嵌套的 Dialog，如果需要在页面上同时显示多个 Dialog，可以将它们平级放置。对于确实需要嵌套 Dialog 的场景，提供了append-to-body属性。将内层 Dialog 的该属性设置为 true，它就会插入至 body 元素上，从而保证内外层 Dialog 和遮罩层级关系的正确。\n\n <template>\n  <el-button type="text" @click="outerVisible = true">点击打开外层 Dialog</el-button>\n  \n  <el-dialog title="外层 Dialog" :visible.sync="outerVisible">\n    <el-dialog\n      width="30%"\n      title="内层 Dialog"\n      :visible.sync="innerVisible"\n      append-to-body>\n    </el-dialog>\n    <div slot="footer" class="dialog-footer">\n      <el-button @click="outerVisible = false">取 消</el-button>\n      <el-button type="primary" @click="innerVisible = true">打开内层 Dialog</el-button>\n    </div>\n  </el-dialog>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# cron表达式生成插件\n\n\n# 实现效果\n\n\n\n\n\n\n\n\n\n\n# github代码\n\nvue-quick-cron\n\n\n# 表字段太长，用...缩略\n\nel-table对于超出长度限制的文本的处理\n\n\n# 效果\n\n\n\n\n\n\n# 代码\n\n只要增加show-overflow-tooltip\n\n <el-table-column align="center" label="信息" width="200px" show-overflow-tooltip>\n        <template slot-scope="scope">\n          <span>{{scope.row.messInfo}}</span>\n        </template>\n      </el-table-column>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 弹窗\n\n\n# 效果\n\n\n\n\n# 代码\n\n# 页面\n\n\x3c!--弹出层--\x3e\n    <el-dialog :title="textMap[dialogStatus]" :visible.sync="dialogFormVisible":modal-append-to-body="false">\n      <el-form :model="form" :rules="rules" ref="form" label-width="120px">\n              <el-table :key=\'tableKey\' :data="list" v-loading.body="listLoading" size="small" stripe highlight-current-row style="width:100%">\n              </el-table>\n      </el-form>\n    </el-dialog>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# JS\n\n初始化：\ndialogFormVisible: false, \n函数：\nhandleGetMs(row) {\n      this.dialogFormVisible = true;\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 下拉选择框\n\n\n# 传参时为数字\n\n# 效果\n\n原：\n\n\n\n实现后\n\n\n\n# 代码\n\n由于element-ui select组件会自动匹配 传入的值 和 value值,如果相等 则显示此value所对应的label值，这里没有匹配原因则是我们绑定值是字符串 也就是 “0”，后端数据是 0 类型是number，因此加上 v-bind , ’ : \'是 v-bind 简写,value的值类型就为number了，也就是:value="1"的写法就好了\n\n<el-form-item label="任务状态" prop="jobStatus">\n          <el-select v-model="form.jobStatus" placeholder="请请输入任务状态">\n            <el-option label="启动" :value="1"></el-option>\n            <el-option label="暂停" :value="2"></el-option>\n          </el-select>\n  </el-form-item>\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 下拉框添加删除选项\n\n\n# 效果\n\n\n\n\n# 代码\n\n只需增加 :clearable="true"\n\n<el-select style="width: 200px;margin-right: 10px;"  v-model="listQuery.jobStatus" placeholder="请输入任务状态" :clearable="true">\n        <el-option label="启动" :value="1"></el-option>\n        <el-option label="暂停" :value="2"></el-option>\n      </el-select>\n\n\n1\n2\n3\n4\n\n\n\n# 标签属性拼接变量\n\n\n# 效果\n\n\n\n\n# 实现\n\n变量写在${(item.app)}中\n\n       <el-select placeholder="服务名【地址】" v-model="listQuery.ossRegistryId" size="small" style="margin-right:10px;width: 250px;"\n                 autocomplete="off" clearable filterable>\n        <el-option v-for="item in registryList" :key="item.id" :label="`${(item.app)}【${(item.address)}】`" :value="item.id"></el-option>\n      </el-select>\n\n\n1\n2\n3\n4\n',normalizedContent:'# 命令\n\n安装依赖\nnpm install\n\n启动服务, 热加载 默认 localhost:8080, 若8080已使用会自动找另外一个端口\nnpm run dev\n\n压缩构建生产环境\nnpm run build\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# id替换名称\n\n\n# 说明\n\n页面数据列表中存在一列数据为jobtypeid，但是想展示需要取另外一张表中的数据来替换id与名称的关系。\n\n原效果：\n\n\n\n实现效果：\n\n\n\n\n# 代码\n\n# 1.定义请求后台数据方法\n\nexport function pageossjobtype (query) {\n    return fetch({\n        url: \'/api/admin/ossjobtype/findbypage\',\n        method: \'post\',\n        data: query\n    })\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 2.页面初始化\n\n初始化待替换ossjobtype数据列表\n\n定义初始化数据jobtype\n\n  data() {\n    return {\n      jobtype: []\n    }\n  }\n\n\n1\n2\n3\n4\n5\n\n\n初始化方法\n\ninitjobtype() {\n      pageossjobtype({page:1,limit:10000}).then(res => {\n        this.jobtype = res.rows;\n      });\n    }\n\n\n1\n2\n3\n4\n5\n\n\n进入页面初始化\n\n  mounted() {\n    this.initjobtype();\n  }\n\n\n1\n2\n3\n\n\n# 3.数据列表替换方法\n\n页面代码\n\n      <el-table-column align="center"  width="250px" label="任务类型":formatter="isjobtypeformat">\n      </el-table-column>\n\n\n1\n2\n\n\n方法\n\nisjobtypeformat(row, column) {\n      var temp = this.jobtype;\n      for (var i = 0; i < temp.length; i++) {\n        if (row.jobtypeid == temp[i].id) return temp[i].jobtypename;\n      }\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 下拉框遍历数组\n\n\n# 说明\n\n以上一标题数组为例，实现效果如下\n\n\n\n\n\n\n# 代码\n\n页面代码\n\n<el-form-item v-if="dialogstatus==\'create\'" label="任务类型" prop="jobtypeid" >\n          <el-select placeholder="请选择任务类型" v-model="form.jobtypeid"  size="small" style="margin-right:10px;width: 550px;" autocomplete="off" clearable filterable>\n            <el-option v-for="item in jobtype" :key="item.id" :label="item.jobtypename" :value="item.id"></el-option>\n          </el-select>\n</el-form-item>\n\n\n<el-form-item v-else label="任务类型" prop="jobtypeid">\n          <el-select disabled placeholder="请选择任务类型" v-model="form.jobtypeid"  size="small" style="margin-right:10px;width: 550px;" autocomplete="off" clearable filterable>\n            <el-option v-for="item in jobtype" :key="item.id" :label="item.jobtypename" :value="item.id"></el-option>\n          </el-select>\n</el-form-item>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n\n# 嵌套dialog\n\n\n# 说明\n\n在点击第二层dialog时，页面出现遮罩层，如图显示偏灰色\n\n\n\n\n# 代码\n\n正常情况下，我们不建议使用嵌套的 dialog，如果需要在页面上同时显示多个 dialog，可以将它们平级放置。对于确实需要嵌套 dialog 的场景，提供了append-to-body属性。将内层 dialog 的该属性设置为 true，它就会插入至 body 元素上，从而保证内外层 dialog 和遮罩层级关系的正确。\n\n <template>\n  <el-button type="text" @click="outervisible = true">点击打开外层 dialog</el-button>\n  \n  <el-dialog title="外层 dialog" :visible.sync="outervisible">\n    <el-dialog\n      width="30%"\n      title="内层 dialog"\n      :visible.sync="innervisible"\n      append-to-body>\n    </el-dialog>\n    <div slot="footer" class="dialog-footer">\n      <el-button @click="outervisible = false">取 消</el-button>\n      <el-button type="primary" @click="innervisible = true">打开内层 dialog</el-button>\n    </div>\n  </el-dialog>\n</template>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# cron表达式生成插件\n\n\n# 实现效果\n\n\n\n\n\n\n\n\n\n\n# github代码\n\nvue-quick-cron\n\n\n# 表字段太长，用...缩略\n\nel-table对于超出长度限制的文本的处理\n\n\n# 效果\n\n\n\n\n\n\n# 代码\n\n只要增加show-overflow-tooltip\n\n <el-table-column align="center" label="信息" width="200px" show-overflow-tooltip>\n        <template slot-scope="scope">\n          <span>{{scope.row.messinfo}}</span>\n        </template>\n      </el-table-column>\n\n\n1\n2\n3\n4\n5\n\n\n\n# 弹窗\n\n\n# 效果\n\n\n\n\n# 代码\n\n# 页面\n\n\x3c!--弹出层--\x3e\n    <el-dialog :title="textmap[dialogstatus]" :visible.sync="dialogformvisible":modal-append-to-body="false">\n      <el-form :model="form" :rules="rules" ref="form" label-width="120px">\n              <el-table :key=\'tablekey\' :data="list" v-loading.body="listloading" size="small" stripe highlight-current-row style="width:100%">\n              </el-table>\n      </el-form>\n    </el-dialog>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# js\n\n初始化：\ndialogformvisible: false, \n函数：\nhandlegetms(row) {\n      this.dialogformvisible = true;\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 下拉选择框\n\n\n# 传参时为数字\n\n# 效果\n\n原：\n\n\n\n实现后\n\n\n\n# 代码\n\n由于element-ui select组件会自动匹配 传入的值 和 value值,如果相等 则显示此value所对应的label值，这里没有匹配原因则是我们绑定值是字符串 也就是 “0”，后端数据是 0 类型是number，因此加上 v-bind , ’ : \'是 v-bind 简写,value的值类型就为number了，也就是:value="1"的写法就好了\n\n<el-form-item label="任务状态" prop="jobstatus">\n          <el-select v-model="form.jobstatus" placeholder="请请输入任务状态">\n            <el-option label="启动" :value="1"></el-option>\n            <el-option label="暂停" :value="2"></el-option>\n          </el-select>\n  </el-form-item>\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 下拉框添加删除选项\n\n\n# 效果\n\n\n\n\n# 代码\n\n只需增加 :clearable="true"\n\n<el-select style="width: 200px;margin-right: 10px;"  v-model="listquery.jobstatus" placeholder="请输入任务状态" :clearable="true">\n        <el-option label="启动" :value="1"></el-option>\n        <el-option label="暂停" :value="2"></el-option>\n      </el-select>\n\n\n1\n2\n3\n4\n\n\n\n# 标签属性拼接变量\n\n\n# 效果\n\n\n\n\n# 实现\n\n变量写在${(item.app)}中\n\n       <el-select placeholder="服务名【地址】" v-model="listquery.ossregistryid" size="small" style="margin-right:10px;width: 250px;"\n                 autocomplete="off" clearable filterable>\n        <el-option v-for="item in registrylist" :key="item.id" :label="`${(item.app)}【${(item.address)}】`" :value="item.id"></el-option>\n      </el-select>\n\n\n1\n2\n3\n4\n',charsets:{cjk:!0},lastUpdated:"2023/03/14, 05:49:29",lastUpdatedTimestamp:1678772969e3},{title:"使用跳板机进行端口转发-插件版",frontmatter:{title:"使用跳板机进行端口转发-插件版",date:"2023-03-13T10:45:41.000Z",permalink:"/pages/92cff2/",categories:["Application","Macos"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/05.Macos/01.%E4%BD%BF%E7%94%A8%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%BF%9B%E8%A1%8C%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E6%8F%92%E4%BB%B6%E7%89%88.html",relativePath:"04.Application/05.Macos/01.使用跳板机进行端口转发-插件版.md",key:"v-47c092ae",path:"/pages/92cff2/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:3,title:"准备工作如下",slug:"准备工作如下",normalizedTitle:"准备工作如下",charIndex:280},{level:3,title:"开始针对你需要的跳板机账号密码以及端口进行修改",slug:"开始针对你需要的跳板机账号密码以及端口进行修改",normalizedTitle:"开始针对你需要的跳板机账号密码以及端口进行修改",charIndex:576},{level:3,title:"脚本命令示例",slug:"脚本命令示例",normalizedTitle:"脚本命令示例",charIndex:931}],headersStr:"介绍 准备工作如下 开始针对你需要的跳板机账号密码以及端口进行修改 脚本命令示例",content:'# 介绍\n\n在Windows的时候，可以使用Bitvise SSH Client进行端口转发很方便，但是换成Mac系统的时候，找不到类似的工具。只能手撕代码进行转发，但是不同环境不同端口一多，就很浪费时间，故而写了一个脚本工具以便开启端口。\n\n因为跳板密码需要明文放在脚本中，不太安全，所以分为两个文件，一个作为开启端口列表文件，一个为存储跳板密码开启端口脚本。可以对脚本进行加密，端口列表文件则明文开放。\n\n所有文件存储地址为\n\n链接：https://pan.baidu.com/s/1XuFDag7I9fQMw0MG7UYBcQ 提取码：0i9n\n\n\n# 准备工作如下\n\n在使用脚本之前需要安装sshpass（原因为写脚本的时候已经使用/bin/bash，而没有使用/usr/bin/expect，为了方便就直接使用sshpass了）\n网上安装方式比较多，这里也说明一下 根据下载到的sshpass.rb文件进行安装\n\n先赋权\n\nsudo chown -R `whoami`:admin /usr/local/bin\n\nsudo chown -R `whoami`:admin /usr/local/share\n\n\n1\n2\n3\n\n\n安装sshpass.rb。文件需要写下载到你电脑的绝对路径\nbrew install sshpass.rb\n\n\n# 开始针对你需要的跳板机账号密码以及端口进行修改\n\n文件1:forward.sh\ntiaobanip为跳板机的ip地址\ntiaobanmima为跳板机的密码\ntiaobanduankou为跳板机的ssh端口号\n文件2:portList.txt\n在“localPort-serverIp-serverPort”和“------------end--------------”行中间写跳转信息\n本地端口号:远程服务器ip地址:远程服务器端口号\n含义为：\n第一个为映射后自己电脑的端口号\n第二个为目的服务器ip地址\n第三个为目的服务器端口号\n例：\n18501:192.168.122.31:8500\n含义是映射192.168.122.31服务器地址的8500端口，变成本地127.0.0.1的18501端口号\n\n\n# 脚本命令示例\n\n命令1用于根据portList.txt文件端口号列表启动隧道\n\nforward.sh portList.txt startbytxt  \n\n\n1\n\n\n命令2用于根据portList.txt文件端口号列表关闭隧道\n\nforward.sh portList.txt stopbytxt  \n\n\n1\n\n\n命令3用于关闭所有隧道端口\n\nforward.sh portList.txt stop\n\n\n1\n\n\n命令4用于关闭所有隧道端口并根据portList.txt文件端口号列表启动隧道\n\nforward.sh portList.txt restart  \n\n\n1\n\n\n命令5用于展示所有已经开启的隧道宽口\n\nforward.sh portList.txt alllist  \n\n\n1\n\n\n注：以上所有命令脚本要路径正确，例如\n\n/Users/wuxiaoku/Documents/forward.sh /Users/wuxiaoku/Documents/portList.txt stop\n\n\n1\n\n\n附：安装brew命令\n\n/bin/zsh -c "$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)"\n\n\n1\n',normalizedContent:'# 介绍\n\n在windows的时候，可以使用bitvise ssh client进行端口转发很方便，但是换成mac系统的时候，找不到类似的工具。只能手撕代码进行转发，但是不同环境不同端口一多，就很浪费时间，故而写了一个脚本工具以便开启端口。\n\n因为跳板密码需要明文放在脚本中，不太安全，所以分为两个文件，一个作为开启端口列表文件，一个为存储跳板密码开启端口脚本。可以对脚本进行加密，端口列表文件则明文开放。\n\n所有文件存储地址为\n\n链接：https://pan.baidu.com/s/1xufdag7i9fqmw0mg7uybcq 提取码：0i9n\n\n\n# 准备工作如下\n\n在使用脚本之前需要安装sshpass（原因为写脚本的时候已经使用/bin/bash，而没有使用/usr/bin/expect，为了方便就直接使用sshpass了）\n网上安装方式比较多，这里也说明一下 根据下载到的sshpass.rb文件进行安装\n\n先赋权\n\nsudo chown -r `whoami`:admin /usr/local/bin\n\nsudo chown -r `whoami`:admin /usr/local/share\n\n\n1\n2\n3\n\n\n安装sshpass.rb。文件需要写下载到你电脑的绝对路径\nbrew install sshpass.rb\n\n\n# 开始针对你需要的跳板机账号密码以及端口进行修改\n\n文件1:forward.sh\ntiaobanip为跳板机的ip地址\ntiaobanmima为跳板机的密码\ntiaobanduankou为跳板机的ssh端口号\n文件2:portlist.txt\n在“localport-serverip-serverport”和“------------end--------------”行中间写跳转信息\n本地端口号:远程服务器ip地址:远程服务器端口号\n含义为：\n第一个为映射后自己电脑的端口号\n第二个为目的服务器ip地址\n第三个为目的服务器端口号\n例：\n18501:192.168.122.31:8500\n含义是映射192.168.122.31服务器地址的8500端口，变成本地127.0.0.1的18501端口号\n\n\n# 脚本命令示例\n\n命令1用于根据portlist.txt文件端口号列表启动隧道\n\nforward.sh portlist.txt startbytxt  \n\n\n1\n\n\n命令2用于根据portlist.txt文件端口号列表关闭隧道\n\nforward.sh portlist.txt stopbytxt  \n\n\n1\n\n\n命令3用于关闭所有隧道端口\n\nforward.sh portlist.txt stop\n\n\n1\n\n\n命令4用于关闭所有隧道端口并根据portlist.txt文件端口号列表启动隧道\n\nforward.sh portlist.txt restart  \n\n\n1\n\n\n命令5用于展示所有已经开启的隧道宽口\n\nforward.sh portlist.txt alllist  \n\n\n1\n\n\n注：以上所有命令脚本要路径正确，例如\n\n/users/wuxiaoku/documents/forward.sh /users/wuxiaoku/documents/portlist.txt stop\n\n\n1\n\n\n附：安装brew命令\n\n/bin/zsh -c "$(curl -fssl https://gitee.com/cunkai/homebrewcn/raw/master/homebrew.sh)"\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2023/03/13, 02:56:26",lastUpdatedTimestamp:1678676186e3},{title:"使用跳板机进行端口转发-自动化",frontmatter:{title:"使用跳板机进行端口转发-自动化",date:"2023-03-13T10:48:38.000Z",permalink:"/pages/d83da9/",categories:["Application","Macos"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/05.Macos/02.%E4%BD%BF%E7%94%A8%E8%B7%B3%E6%9D%BF%E6%9C%BA%E8%BF%9B%E8%A1%8C%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E8%87%AA%E5%8A%A8%E5%8C%96.html",relativePath:"04.Application/05.Macos/02.使用跳板机进行端口转发-自动化.md",key:"v-0a28b68a",path:"/pages/d83da9/",headers:[{level:2,title:"开始针对你需要的跳板机账号密码以及端口进行修改",slug:"开始针对你需要的跳板机账号密码以及端口进行修改",normalizedTitle:"开始针对你需要的跳板机账号密码以及端口进行修改",charIndex:118},{level:2,title:"脚本命令示例",slug:"脚本命令示例",normalizedTitle:"脚本命令示例",charIndex:473}],headersStr:"开始针对你需要的跳板机账号密码以及端口进行修改 脚本命令示例",content:"本章节和插件版区别为免安装sshpass依赖，可以说是升级版。\n\n本次文件存储地址为：\n\n链接：https://pan.baidu.com/s/1LWZvGBBQ1s0LDNA1dwqxAA \n提取码：5bdu \n\n\n1\n2\n\n\n\n# 开始针对你需要的跳板机账号密码以及端口进行修改\n\n文件1:forward.sh\ntiaobanip为跳板机的ip地址\ntiaobanmima为跳板机的密码\ntiaobanduankou为跳板机的ssh端口号\n文件2:portList.txt\n在“localPort-serverIp-serverPort”和“------------end--------------”行中间写跳转信息\n本地端口号:远程服务器ip地址:远程服务器端口号\n含义为：\n第一个为映射后自己电脑的端口号\n第二个为目的服务器ip地址\n第三个为目的服务器端口号\n例：\n18501:192.168.122.31:8500\n含义是映射192.168.122.31服务器地址的8500端口，变成本地127.0.0.1的18501端口号\n\n\n# 脚本命令示例\n\n命令1用于根据portList.txt文件端口号列表启动隧道\n\nforward.sh portList.txt startbytxt \n\n\n1\n\n\n命令2用于根据portList.txt文件端口号列表关闭隧道\n\nforward.sh portList.txt stopbytxt \n\n\n1\n\n\n命令3用于关闭所有隧道端口\n\nforward.sh portList.txt stop \n\n\n1\n\n\n命令4用于关闭所有隧道端口并根据portList.txt文件端口号列表启动隧道\n\nforward.sh portList.txt restart \n\n\n1\n\n\n命令5用于展示所有已经开启的隧道宽口\n\nforward.sh portList.txt alllist\n\n\n1\n\n\n注：以上所有命令脚本要路径正确，例如\n\n/Users/wuxiaoku/Documents/forward.sh /Users/wuxiaoku/Documents/portList.txt stop\n\n\n1\n",normalizedContent:"本章节和插件版区别为免安装sshpass依赖，可以说是升级版。\n\n本次文件存储地址为：\n\n链接：https://pan.baidu.com/s/1lwzvgbbq1s0ldna1dwqxaa \n提取码：5bdu \n\n\n1\n2\n\n\n\n# 开始针对你需要的跳板机账号密码以及端口进行修改\n\n文件1:forward.sh\ntiaobanip为跳板机的ip地址\ntiaobanmima为跳板机的密码\ntiaobanduankou为跳板机的ssh端口号\n文件2:portlist.txt\n在“localport-serverip-serverport”和“------------end--------------”行中间写跳转信息\n本地端口号:远程服务器ip地址:远程服务器端口号\n含义为：\n第一个为映射后自己电脑的端口号\n第二个为目的服务器ip地址\n第三个为目的服务器端口号\n例：\n18501:192.168.122.31:8500\n含义是映射192.168.122.31服务器地址的8500端口，变成本地127.0.0.1的18501端口号\n\n\n# 脚本命令示例\n\n命令1用于根据portlist.txt文件端口号列表启动隧道\n\nforward.sh portlist.txt startbytxt \n\n\n1\n\n\n命令2用于根据portlist.txt文件端口号列表关闭隧道\n\nforward.sh portlist.txt stopbytxt \n\n\n1\n\n\n命令3用于关闭所有隧道端口\n\nforward.sh portlist.txt stop \n\n\n1\n\n\n命令4用于关闭所有隧道端口并根据portlist.txt文件端口号列表启动隧道\n\nforward.sh portlist.txt restart \n\n\n1\n\n\n命令5用于展示所有已经开启的隧道宽口\n\nforward.sh portlist.txt alllist\n\n\n1\n\n\n注：以上所有命令脚本要路径正确，例如\n\n/users/wuxiaoku/documents/forward.sh /users/wuxiaoku/documents/portlist.txt stop\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2023/03/13, 02:56:26",lastUpdatedTimestamp:1678676186e3},{title:"常用功能",frontmatter:{title:"常用功能",date:"2023-03-13T10:53:01.000Z",permalink:"/pages/a4c46d/",categories:["Application","Macos"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/04.Application/05.Macos/03.%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD.html",relativePath:"04.Application/05.Macos/03.常用功能.md",key:"v-fbc57f00",path:"/pages/a4c46d/",headers:[{level:2,title:"显示和隐藏程序坞不再延迟",slug:"显示和隐藏程序坞不再延迟",normalizedTitle:"显示和隐藏程序坞不再延迟",charIndex:2},{level:2,title:"锁屏壁纸重启后就失效",slug:"锁屏壁纸重启后就失效",normalizedTitle:"锁屏壁纸重启后就失效",charIndex:200},{level:2,title:"macOS 时光机器备份加速命令",slug:"macos-时光机器备份加速命令",normalizedTitle:"macos 时光机器备份加速命令",charIndex:581}],headersStr:"显示和隐藏程序坞不再延迟 锁屏壁纸重启后就失效 macOS 时光机器备份加速命令",content:"# 显示和隐藏程序坞不再延迟\n\n设置操作\n\n打开终端输入如下命令即可将延迟去除：\n\ndefaults write com.apple.Dock autohide-delay -float 0 && killall Dock\n\n\n1\n\n\n恢复延迟的命令为：\n\ndefaults delete com.apple.Dock autohide-delay && killall Dock\n\n\n1\n\n\n\n# 锁屏壁纸重启后就失效\n\n使用Clean my Mac清理文件之后就导致重启后的壁纸都为系统默认壁纸\n\n解决方案：\n\n Mac 系统的开机登录界面壁纸缓存在「资源库--Caches--Desktop Pictures--XXX--lockscreen.png」 \n（其中的XXX为你的UUID，进入系统偏好设置--用户与群组，先把下面的锁解开，然后右键你的用户，点击高级选项，弹出的页面中即有UUID）\n 部分用户由于使用Clean my Mac清理文件，导致这个文件夹从Desktop Pictures开始被删掉，而系统又不会自动生成这个文件夹，只能读取Mojave.heic，只需要把这个文件夹和图片补上即可。\n 补上文件夹和lockscreen.png图片之后，重启系统，更换系统壁纸，这个缓存文件夹的文件会随着系统壁纸改变。\n\n\n1\n2\n3\n4\n\n\n\n# macOS 时光机器备份加速命令\n\n如果你真的打算让时光机器全力全速工作，那也是有办法的，就是通过命令行，用命令强制关闭系统对时光机器的限流，俗称“解除封印”。打开终端，输入以下命令\n\n sudo sysctl debug.lowpri_throttle_enabled=0\n\n\n1\n\n\n这时你就会发现时光机器的备份速度变快很多很多了！！基本能达到网络和硬盘读写的应有的速度了。等它完成了首次的备份之后，你可以再执行下面的命令，恢复到原本限流的状态，以保证日后使用电脑时不被时光机器备份占去太多的资源导致变卡\n\n sudo sysctl debug.lowpri_throttle_enabled=1\n\n\n1\n",normalizedContent:"# 显示和隐藏程序坞不再延迟\n\n设置操作\n\n打开终端输入如下命令即可将延迟去除：\n\ndefaults write com.apple.dock autohide-delay -float 0 && killall dock\n\n\n1\n\n\n恢复延迟的命令为：\n\ndefaults delete com.apple.dock autohide-delay && killall dock\n\n\n1\n\n\n\n# 锁屏壁纸重启后就失效\n\n使用clean my mac清理文件之后就导致重启后的壁纸都为系统默认壁纸\n\n解决方案：\n\n mac 系统的开机登录界面壁纸缓存在「资源库--caches--desktop pictures--xxx--lockscreen.png」 \n（其中的xxx为你的uuid，进入系统偏好设置--用户与群组，先把下面的锁解开，然后右键你的用户，点击高级选项，弹出的页面中即有uuid）\n 部分用户由于使用clean my mac清理文件，导致这个文件夹从desktop pictures开始被删掉，而系统又不会自动生成这个文件夹，只能读取mojave.heic，只需要把这个文件夹和图片补上即可。\n 补上文件夹和lockscreen.png图片之后，重启系统，更换系统壁纸，这个缓存文件夹的文件会随着系统壁纸改变。\n\n\n1\n2\n3\n4\n\n\n\n# macos 时光机器备份加速命令\n\n如果你真的打算让时光机器全力全速工作，那也是有办法的，就是通过命令行，用命令强制关闭系统对时光机器的限流，俗称“解除封印”。打开终端，输入以下命令\n\n sudo sysctl debug.lowpri_throttle_enabled=0\n\n\n1\n\n\n这时你就会发现时光机器的备份速度变快很多很多了！！基本能达到网络和硬盘读写的应有的速度了。等它完成了首次的备份之后，你可以再执行下面的命令，恢复到原本限流的状态，以保证日后使用电脑时不被时光机器备份占去太多的资源导致变卡\n\n sudo sysctl debug.lowpri_throttle_enabled=1\n\n\n1\n",charsets:{cjk:!0},lastUpdated:"2023/03/13, 02:56:26",lastUpdatedTimestamp:1678676186e3},{title:"版本日志",frontmatter:{title:"版本日志",date:"2023-03-14T09:21:35.000Z",permalink:"/pages/ae03ef/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/01.%E7%89%88%E6%9C%AC%E6%97%A5%E5%BF%97.html",relativePath:"05.OpenSource/01.版本日志.md",key:"v-9e01ea5e",path:"/pages/ae03ef/",headers:[{level:2,title:"核心依赖",slug:"核心依赖",normalizedTitle:"核心依赖",charIndex:2},{level:2,title:"待发布",slug:"待发布",normalizedTitle:"待发布",charIndex:1873},{level:2,title:"已发布",slug:"已发布",normalizedTitle:"已发布",charIndex:125},{level:2,title:"2024.1",slug:"_2024-1",normalizedTitle:"2024.1",charIndex:75},{level:3,title:"2024.1.1.1",slug:"_2024-1-1-1",normalizedTitle:"2024.1.1.1",charIndex:75},{level:3,title:"2024.1.1.0",slug:"_2024-1-1-0",normalizedTitle:"2024.1.1.0",charIndex:135},{level:3,title:"2024.1.0.0",slug:"_2024-1-0-0",normalizedTitle:"2024.1.0.0",charIndex:195},{level:2,title:"2023.5",slug:"_2023-5",normalizedTitle:"2023.5",charIndex:255},{level:3,title:"2023.5.2.0",slug:"_2023-5-2-0",normalizedTitle:"2023.5.2.0",charIndex:255},{level:3,title:"2023.5.1.0",slug:"_2023-5-1-0",normalizedTitle:"2023.5.1.0",charIndex:315},{level:3,title:"2023.5.0.0 [重构优化]",slug:"_2023-5-0-0-重构优化",normalizedTitle:"2023.5.0.0 [重构优化]",charIndex:7559},{level:2,title:"2023.4",slug:"_2023-4",normalizedTitle:"2023.4",charIndex:435},{level:3,title:"2023.4.1.0",slug:"_2023-4-1-0",normalizedTitle:"2023.4.1.0",charIndex:435},{level:3,title:"2023.4.0.0 [增加版本模块]",slug:"_2023-4-0-0-增加版本模块",normalizedTitle:"2023.4.0.0 [增加版本模块]",charIndex:10272},{level:2,title:"2023.3",slug:"_2023-3",normalizedTitle:"2023.3",charIndex:555},{level:3,title:"2023.3.5.2",slug:"_2023-3-5-2",normalizedTitle:"2023.3.5.2",charIndex:555},{level:3,title:"2023.3.5.0",slug:"_2023-3-5-0",normalizedTitle:"2023.3.5.0",charIndex:615},{level:3,title:"2023.3.4.0",slug:"_2023-3-4-0",normalizedTitle:"2023.3.4.0",charIndex:675},{level:3,title:"2023.3.3.0",slug:"_2023-3-3-0",normalizedTitle:"2023.3.3.0",charIndex:735},{level:3,title:"2023.3.2.1",slug:"_2023-3-2-1",normalizedTitle:"2023.3.2.1",charIndex:795},{level:3,title:"2023.3.1.0",slug:"_2023-3-1-0",normalizedTitle:"2023.3.1.0",charIndex:855},{level:3,title:"2023.3.0.0 [重构优化]",slug:"_2023-3-0-0-重构优化",normalizedTitle:"2023.3.0.0 [重构优化]",charIndex:16083},{level:2,title:"2023.2",slug:"_2023-2",normalizedTitle:"2023.2",charIndex:975},{level:3,title:"2023.2.3.1",slug:"_2023-2-3-1",normalizedTitle:"2023.2.3.1",charIndex:975},{level:3,title:"2023.2.3.0",slug:"_2023-2-3-0",normalizedTitle:"2023.2.3.0",charIndex:1035},{level:3,title:"2023.2.2.1",slug:"_2023-2-2-1",normalizedTitle:"2023.2.2.1",charIndex:1095},{level:3,title:"2023.2.2.0",slug:"_2023-2-2-0",normalizedTitle:"2023.2.2.0",charIndex:1155},{level:3,title:"2023.2.1.0",slug:"_2023-2-1-0",normalizedTitle:"2023.2.1.0",charIndex:1215},{level:3,title:"2023.2.0.0 [同步2022.2.0.0版本]",slug:"_2023-2-0-0-同步2022-2-0-0版本",normalizedTitle:"2023.2.0.0 [同步2022.2.0.0版本]",charIndex:19315},{level:2,title:"2023.1",slug:"_2023-1",normalizedTitle:"2023.1",charIndex:1275},{level:3,title:"2023.1.0.0",slug:"_2023-1-0-0",normalizedTitle:"2023.1.0.0",charIndex:1275},{level:2,title:"2022-不再维护",slug:"_2022-不再维护",normalizedTitle:"2022-不再维护",charIndex:20213},{level:2,title:"2022.5",slug:"_2022-5",normalizedTitle:"2022.5",charIndex:1395},{level:3,title:"2022.5.0.0",slug:"_2022-5-0-0",normalizedTitle:"2022.5.0.0",charIndex:1395},{level:2,title:"2022.4",slug:"_2022-4",normalizedTitle:"2022.4",charIndex:1455},{level:3,title:"2022.4.1.0",slug:"_2022-4-1-0",normalizedTitle:"2022.4.1.0",charIndex:1455},{level:3,title:"2022.4.0.0",slug:"_2022-4-0-0",normalizedTitle:"2022.4.0.0",charIndex:1515},{level:2,title:"2022.3",slug:"_2022-3",normalizedTitle:"2022.3",charIndex:1575},{level:3,title:"2022.3.5.2",slug:"_2022-3-5-2",normalizedTitle:"2022.3.5.2",charIndex:1575},{level:3,title:"2022.3.5.0",slug:"_2022-3-5-0",normalizedTitle:"2022.3.5.0",charIndex:1635},{level:3,title:"2022.3.4.0",slug:"_2022-3-4-0",normalizedTitle:"2022.3.4.0",charIndex:1695},{level:3,title:"2022.3.3.0",slug:"_2022-3-3-0",normalizedTitle:"2022.3.3.0",charIndex:1755},{level:3,title:"2022.3.2.0",slug:"_2022-3-2-0",normalizedTitle:"2022.3.2.0",charIndex:27251},{level:2,title:"2022.2",slug:"_2022-2",normalizedTitle:"2022.2",charIndex:1815},{level:3,title:"2022.2.0.0",slug:"_2022-2-0-0",normalizedTitle:"2022.2.0.0",charIndex:1815},{level:2,title:"2022.1",slug:"_2022-1",normalizedTitle:"2022.1",charIndex:27586},{level:3,title:"2022.1.2.0",slug:"_2022-1-2-0",normalizedTitle:"2022.1.2.0",charIndex:27597}],headersStr:"核心依赖 待发布 已发布 2024.1 2024.1.1.1 2024.1.1.0 2024.1.0.0 2023.5 2023.5.2.0 2023.5.1.0 2023.5.0.0 [重构优化] 2023.4 2023.4.1.0 2023.4.0.0 [增加版本模块] 2023.3 2023.3.5.2 2023.3.5.0 2023.3.4.0 2023.3.3.0 2023.3.2.1 2023.3.1.0 2023.3.0.0 [重构优化] 2023.2 2023.2.3.1 2023.2.3.0 2023.2.2.1 2023.2.2.0 2023.2.1.0 2023.2.0.0 [同步2022.2.0.0版本] 2023.1 2023.1.0.0 2022-不再维护 2022.5 2022.5.0.0 2022.4 2022.4.1.0 2022.4.0.0 2022.3 2022.3.5.2 2022.3.5.0 2022.3.4.0 2022.3.3.0 2022.3.2.0 2022.2 2022.2.0.0 2022.1 2022.1.2.0",content:"# 核心依赖\n\nJDK   SIMPLE版本号    SPRINGBOOT   SPRING CLOUD   代码分支     发布状态\n17    2024.1.1.1   3.2.2        2023.0.0       main     已发布\n      2024.1.1.0                                        已发布\n      2024.1.0.0   3.2.1                                已发布\n      2023.5.2.0   3.1.6        2022.0.4       2023.x   已发布\n      2023.5.1.0   3.1.4                                已发布\n      2023.5.0.0   3.1.2                                已发布\n      2023.4.1.0                2022.0.3                已发布\n      2023.4.0.0   3.1.1                                已发布\n      2023.3.5.2   3.1.0                                已发布\n      2023.3.5.0                                        已发布\n      2023.3.4.0                                        已发布\n      2023.3.3.0   3.0.6        2022.0.2                已发布\n      2023.3.2.1                                        已发布\n      2023.3.1.0   3.0.5                                已发布\n      2023.3.0.0                2022.0.1                已发布\n      2023.2.3.1   3.0.4                                已发布\n      2023.2.3.0                                        已发布\n      2023.2.2.1   3.0.3                                已发布\n      2023.2.2.0                                        已发布\n      2023.2.1.0   3.0.2                                已发布\n      2023.1.0.0   3.0.1        2022.0.0                已发布\n1.8   2022.x.x.x   -            -              2022.x   不维护\n      2022.5.0.0   2.7.14       2021.0.8                已发布\n      2022.4.1.0                                        已发布\n      2022.4.0.0   2.7.13       2021.0.7                已发布\n      2022.3.5.2   2.7.12                               已发布\n      2022.3.5.0                                        已发布\n      2022.3.4.0                                        已发布\n      2022.3.3.0   2.7.11       2021.0.6                已发布\n      2022.2.0.0   2.7.7        2021.0.5                已发布\n\n\n# 待发布\n\n\n# 已发布\n\n\n# 2024.1\n\n\n# 2024.1.1.1\n\n[已完成]Simple系统2024.1.1.1\n|---[功能][simple-utils-common]增加唯一主键工厂及默认实现，开放自定义实现\n|---[功能][simple-dependencies]增加simple-utils-common模块管理\n|---[优化][simple-starter-datasource]简化调用\n|---[优化][simple-base-s3]依赖使用common依赖的唯一主键工厂及默认实现\n|---[版本]补充更新依赖  \n    |--- [Spring Boot] 3.2.1 -> 3.2.2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 2024.1.1.0\n\n[已完成]Simple系统2024.1.1.0\n|---[优化][simple-starter-socket]测试页面优化\n|---[功能][simple-parent]增加项目父级管理模块\n|---[优化][simple-utils-common]移除易混淆使用的方法函数\n|---[优化][simple-utils-common]增强方法使用参数\n|---[优化][simple-starter-grpc]简化代码\n|---[功能][simple-starter-encrypt]增加开启全局接口加解密功能，增加UnEncrypted注解\n|---[优化][simple-starter-redisson]避免抛出原始异常\n|---[重构][simple-base-config]重命名模块,更符合其实际目的\n|---[优化][simple-starter-web]通用接口返回修改实体\n|---[优化][simple-base-config]优化日志打印\n|---[优化][simple-starter-web]响应类支持链式调用\n|---[优化][simple-starter-dict]增强Optional方法使用\n|---[优化][simple-base-s3]使用SecureRandom方法生成字符串\n|---[优化][simple-base-s3]简化上传文件入参\n|---[优化][simple-starter-s3]增加过期时间参数\n|---[优化][simple-starter-encrypt]修改注释\n|---[版本]更新依赖  \n    |--- [Spring Boot] 3.2.1 -> 3.2.2\n    |--- [knife4j] 4.4.0 -> 4.5.0\n\t|--- [dynamic-datasource] 4.2.0 -> 4.3.0\n\t|--- [netty-socketio] 2.0.6 -> 2.0.8\n\t|--- [redisson] 3.25.2  -> 3.26.0\n\t|--- [io-grpc] 1.60.1 -> 1.61.0\n\t|--- [aws-java-sdk-s3] 1.12.599 -> 1.12.647\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 2024.1.0.0\n\n[已完成]Simple系统2024.1.0.0\n|---[优化][simple-starter-grpc]优化GrpcClientBean嵌套对象获取逻辑\n|---[优化][simple-starter-grpc]移除多余方法\n|---[优化][simple-starter-grpc]增加注释说明\n|---[优化][simple-starter-s3]修改AmazonS3对象注入方式\n|---[优化][simple-base-param]增加常量及简化代码\n|---[优化][simple-starter-datasource]移除工具类，方法迁移PageRequest类中，便于维护\n|---[优化][simple-base-s3]增加构造函数，简化代码\n|---[优化][simple-base-socket]分解方法便于阅读\n|---[优化][simple-base-datasource]抽取常量，代码优化\n|---[优化][simple-starter-cloud]解决Springboot新版本依赖冲突\n|---[优化][simple-base-generator]增加自定义生成项目端口号和版本号\n|---[重构][simple-starter-redisson]幂等和锁注解参数拆分，独立动态参数部分\n|---[BUG][simple-starter-redisson]幂等注解增加判断锁状态，避免同线程内无效\n|---[功能][simple-starter-redisson]增加分布式限流器注解功能\n|---[功能][simple-starter-redisson]注解增加字段，开放功能：key是否拼接md5（切点数据生成md5）\n|---[优化][simple-starter-redisson]MethodContext使用实例字符串进行存储对象，避免同方法名md5重复\n|---[优化][simple-demo-redisson]修改测试方法，增加限流器压测\n|---[优化][application.yml]修改配置，灵活开关SpringCloud配置项\n|---[版本]更新部署包   \n    |---[nacos] 2.2.3 -> 2.3.0 \n    |---[redis] 7.0.11 -> 7.2.3\n|---[版本]更新依赖  \n    |--- [Spring Boot] 3.1.6 -> 3.2.1\n    |--- [Spring Cloud] 2022.0.4 -> 2023.0.4 \n    |--- [knife4j] 4.3.0 -> 4.4.0\n    |--- [mybatis-plus] 3.5.4.1 -> 3.5.5\n    |--- [io-grpc] 1.59.1 -> 1.60.1\n    |--- [redisson] 3.24.3 -> 3.25.2\n    |--- [apm-toolkit-logback-1.x] 9.0.0 -> 9.1.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 2023.5\n\n\n# 2023.5.2.0\n\n[已完成]Simple系统2023.5.2.0\n|---[功能][simple-starter-package]增加自定义Maven构建打包逻辑模块\n|---[优化][simple-starter-package]构建输出增加git版本文件\n|---[优化][simple-starter-package]添加Shell脚本命令提示语句\n|---[功能][simple-base-generator]拆分独立模块，便于使用\n|---[优化][simple-starter-package]增加异常提示操作说明\n|---[优化][simple-starter-package]修复脚本变量\n|---[优化][simple-starter-package]增加检测脚本是否已经关闭进程\n|---[优化][simple-starter-datasource]移除非必要使用的变量\n|---[优化][simple-demo-socket-one]更新netty-socketio版本，权限认证方法同步更新\n|---[优化][simple-starter-package]使用优雅的关闭服务进程命令\n|---[优化][simple-starter-dict]使用BeanPostProcessor提升效率，避免直接操作ApplicationContext\n|---[优化][simple-starter-dict]使用ConcurrentHashMap线程安全及提升并发性能\n|---[优化][simple-starter-grpc]客户端使用BeanPostProcessor提升效率\n|---[优化][simple-starter-grpc]服务端注入BindableService替代ApplicationContext，使用PostConstruct初始化，简化代码\n|---[优化][simple-starter-socket]简化代码逻辑模块\n|---[优化][simple-starter-redisson]修改配置参数实体\n|---[优化][simple-starter-redisson]修改代码目录结构\n|---[优化][simple-starter-redisson]重构锁逻辑，增加实体简洁含义\n|---[优化][simple-starter-redisson]修改抛出异常类型\n|---[优化][simple-base-param]修改静态变量及增加调试日志输出\n|---[优化][simple-starter-grpc]修改GrpcClient注解属性，提升代码类型安全性\n|---[优化][simple-starter-dict]修改DictField注解dictImplClass属性，提升代码类型安全性\n|---[优化][simple-starter-dict]简化代码逻辑\n|---[优化][simple-starter-grpc]简化代码逻辑\n|---[优化][simple-starter-email]简化代码逻辑\n|---[优化][simple-base-generator]初始化项目增加依赖打包逻辑模块，增加生成代码测试模块\n|---[版本]更新依赖  \n    |--- [Spring Boot] 3.1.4 -> 3.1.6\n    |--- [io-grpc] 1.57.2 -> 1.59.1\n\t|--- [netty-socketio] 2.0.3 -> 2.0.6\n\t|--- [redisson] 3.23.4  -> 3.24.3\n\t|--- [mybatis-plus] 3.5.3.2  -> 3.5.4.1\n\t|--- [dynamic-datasource] 4.1.3 -> 4.2.0\n\t|--- [aws-java-sdk-s3] 1.12.533 -> 1.12.599\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 2023.5.1.0\n\n[已完成]Simple系统2023.5.1.0\n|---[优化][simple-base-param]优化记录历史配置\n|---[功能][simple-base-param]增加查询历史参数配置接口\n|---[优化][simple-starter-web]全局异常拦截移除运行时异常处理\n|---[优化][simple-starter-web]响应实体增加抛出异常方法\n|---[优化][simple-starter-web]增加响应异常\n|---[优化][simple-base-generator]服务实现类重命名\n|---[功能][simple-base-s3]重构服务，拆分服务端及客户端\n|---[优化][simple-starter-datasource]指明基础接口实现\n|---[优化][simple-base-generator]优化接口地址\n|---[优化][simple-starter-dict]优化代码参数\n|---[优化][simple-starter-dict]增加日志记录\n|---[优化][demo-base-generator]默认关闭flyway\n|---[优化][simple-starter-dict]增加注释说明\n|---[优化][simple-base-generator]增加Primary优先服务类\n|---[优化][simple-starter-dict]增加Constructor\n|---[优化][simple-starter-dict]增加优先级排序及获取方式\n|---[优化][simple-starter-dict]优化方法获取\n|---[Bug][simple-base-generator]修复增加服务实现类注解\n|---[功能][simpale-base-dict]增加基础字典服务类模块\n|---[优化][simple-base-param]重命名实体及调用地址\n|---[优化][simple-utils-jackson]rename package\n|---[优化][simple-starter-encrypt]完善姓名脱敏方法\n|---[优化][simple-starter-s3]默认开启\n|---[功能][simple-utils-common]增加通用工具类模块\n|---[优化][simple-utils-common]单元测试增加断言方法\n|---[版本]更新依赖  \n    |--- [Spring Boot] 3.1.2 -> 3.1.4\n    |--- [redisson] 3.23.3  -> 3.23.4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 2023.5.0.0 [重构优化]\n\n[已完成]Simple系统2023.5.0.0\n|---[优化]增加服务接口地址前缀\n|---[优化][simple-starter-cloud]优化依赖使用\n|---[优化][simple-base-param]优化ParamInit配置\n|---[优化][simple-base-param]移除未使用到的引入\n|---[功能][simple-base-param]重构服务，拆分服务端及客户端\n|---[优化][simple-base-param]优化初始化异常跳过当前处理、及告警日志输出\n|---[优化][simple-starter-datasource]移除自定义类型处理器\n|---[优化][simple-starter-dict]优化异常时只跳过当前字段的处理\n|---[优化][simple-utils-jackson]增加JSON字符串反序列化为对象方法\n|---[优化][simple-starter-grpc]优化迭代使用entrySet()遍历，减少查找开销\n|---[优化][simple-starter-web]增加时间戳转换LocalDateTime的Deserializer\n|---[优化][simple-starter-web]对应simple-starter-datasource增加通用CrudOperations接口\n|---[功能][simple-starter-gateway]增加网关聚合文档兼容性，支持网关配置过滤器为->将请求的路径前缀去除\n|---[优化][simple-starter-web]避免重定向文档地址时的异常问题\n|---[功能][simple-base-generator]重构服务，拆分服务端及客户端。增加项目生成功能\n|---[优化][simple-base-generator]避免重新分配变量值\n|---[优化][simple-base-param]优化命名\n|---[功能][simple-base-generator]支持多表生成\n|---[优化][simple-base-generator]优化springboot版本号配置项\n|---[功能][simple-starter-cloud]增加Feign配置日志打印项\n|---[优化][simple-base-param]优化启用配置项参数\n|---[优化][simple-base-generator]优化初始化项目启用配置项参数\n|---[版本]更新依赖  \n    |--- [Dynamic Datasource] 4.1.1 -> 4.1.2\n    |--- [redisson] 3.23.0 -> 3.23.1\n\t|--- [knife4j] 4.1.0 -> 4.3.0\n\t|--- [spring-cloud-alibaba] 2022.0.0.0-RC2 -> 2022.0.0.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 2023.4\n\n\n# 2023.4.1.0\n\n[已完成]Simple系统2023.4.1.0\n|---[功能][simple-starter-redisson]创建CacheManager并配置Cacheable注解常用配置及自定义CacheName对应配置\n|---[优化][simple-starter-redisson]简化循环遍历和集合操作\n|---[功能][simple-starter-gateway]增加微服务网关基础模块\n|---[功能][simple-demo-gateway]增加微服务网关基础模块示例\n|---[优化][simple-starter-web]使用knife4j增强依赖关系\n|---[优化][simple-base-param]简化代码且明确指定依赖关系\n|---[优化][simple-starter-socket]优化代码提升简洁性，避免重新分配参数\n|---[优化][pom.xml]移除未使用到的依赖管理\n|---[优化][simple-demo-socket]优化接口请求示例\n|---[优化][simple-starter-socket]优化连接事件\n|---[优化][simple-starter-web]序列化增加默认将Long类型转换为字符串，避免精度丢失\n|---[优化][simple-demo-redisson]优化日志输出\n|---[功能]增加Postman接口测试列表及断言\n|---[优化][simple-starter-datasource]优化mapper-locations配置\n|---[功能]增加Postman接口测试列表及断言\n|---[功能]增加Jmeter接口并发测试及断言\n|---[优化][simple-starter-datasource]简化循环和条件判断\n|---[优化][simple-starter-grpc]优化\"field is never assigned\"提示\n|---[功能][simple-starter-redisson]分布式幂等增加若干时间内防重复提交功能\n|---[功能]增加Postman接口:分布式幂等-等待expireTime过期后自动解锁\n|---[优化][simple-starter-dict]优化从本地文件读取字典项列表代码\n|---[优化][simple-starter-grpc]优化获取请求头代码\n|---[版本]增加部署包  \n    |---[redis] 7.0.11\n    |---[seaweedfs] 3.53\n|---[版本]更新依赖  \n    |--- [Spring Boot] 3.1.1 -> 3.1.2\n    |--- [netty-socketio] 2.0.2 -> 2.0.3\n    |--- [dynamic-datasource] 3.6.1 -> 4.1.1\n    |--- [io-grpc] 1.56.0 -> 1.56.1\n    |--- [redisson]  3.22.1 -> 3.23.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 2023.4.0.0 [增加版本模块]\n\n[已完成]Simple系统2023.4.0.0\n|---[功能][simple-dependencies]添加用于管理依赖组件版本模块\n|---[优化][simple-starter-encrypt]抛出更详细的异常类型\n|---[优化][simple-starter-grpc]优化代码格式以提高可读性\n|---[功能][simple-base-generator]将依赖项管理内容添加到pom.xml\n|---[优化][simple-base-param]增加工具类方法\n|---[优化][simple-starter-web]优化异常处理器\n|---[优化][simple-starter-redisson]优化异常处理\n|---[优化][simple-starter-redisson]简化缓存key;优化日志输出;优化代码\n|---[优化][simple-base-param]优化参数配置接口\n|---[优化][simple-starter-email]优化依赖项\n|---[优化][simple-starter-dict]优化使用静态变量避免重复创建对象\n|---[优化][simple-starter-dict]独立字典项获取逻辑方法\n|---[优化][simple-starter-grpc]独立获取超时时间、获取请求头方法\n|---[优化][simple-base-param]重命名实体以更好地符合其实际用途\n|---[优化][pom.xml]优化依赖关系版本管理\n|---[版本]更新部署包   \n    |---[nacos] 2.2.2 -> 2.2.3  \n|---[版本]更新依赖   \n    |--- [io-grpc] 1.55.1 -> 1.56.0\n    |--- [Spring Boot] 3.1.0 -> 3.1.1\n    |--- [Redisson] 3.21.3 -> 3.22.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2023.3\n\n\n# 2023.3.5.2\n\n[已完成]Simple系统2023.3.5.2发布 \n|---[优化][simple-base-generator]增加默认服务启动端口\n|---[功能][simple-base-generator]增加数据库版本管理脚本基线文件创建\n|---[功能][simple-base-generator]增加SpringBoot自动配置元数据文件，便于服务集成\n|---[Bug][simple-base-generator]修复代码生成配置扫描及包名导入\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2023.3.5.0\n\n[已完成]Simple系统2023.3.5.0发布 \n|---[优化]更新readme.md文件及一些Community Standards\n|---[优化][simple-starter-redisson]Replace 'config' with a local variable\n|---[Bug][simple-starter-grpc]修复ClientCallStartHeaders实现类为空时异常\n|---[优化][simple-starter-dict]更换使用ReflectionUtils\n|---[优化][simple-starter-encrypt]更换使用ReflectionUtils\n|---[优化][simple-base-param]移除未使用到的类\n|---[优化][demo-base-param]优化示例逻辑\n|---[优化][simple-starter-encrypt]优化异常抛出，调整为日志异常记录\n|---[优化][simple-base-param]工具类增加常用字段定义\n|---[优化][simple-starter-datasource]优化避免重新分配参数\n|---[优化][simple-starter-datasource]优化通过实现MapperLocationsProvider接口获取配置值支持和配置文件中的mapperLocations属性值同时生效，默认开启\n|---[优化][demo-base-param]优化精简工具类依赖\n|---[优化][simple-base-param]独立运行Flyway实例，库表语句不再需要手动增加\n|---[优化][simple-demo-datasource]独立运行Flyway实例，增加MapperLocationsProvider实现类\n|---[优化][simple-base-param]优化配置文件结构\n|---[优化][simple-base-generator]代码生成增加配置文件等\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 2023.3.4.0\n\n[已完成]Simple系统2023.3.4.0发布 \n|---[功能][simple-starter-email]增加推送邮件模块\n|---[功能][simple-demo-email]增加推送邮件模块使用示例\n|---[优化][simple-starter-email] 重构服务：简化方法、增加自定义发件人邮件配置参数方法\n|---[优化][simple-starter-datasource]使用更简洁的条件判断Boolean;使用try-with-resources自动调用close()方法关闭资源;优化方法调用\n|---[功能][simple-starter-grpc]客户端增加设置请求头参数接口，服务端增加获取请求头参数接口\n|---[优化][simple-starter-grpc]优化客户端设置请求头参数接口 支持多个实现类，优化增加Header后避免多次注解导致重复bean使用\n|---[功能][simple-demo-grpc-client]客户端增加设置请求头参数接口实现示例\n|---[功能][simple-demo-grpc-server]服务端增加获取请求头参数接口实现示例\n|---[优化][simple-starter-grpc]优化避免重复的异常抛出\n|---[优化][simple-starter-socket]移除自定义netty异常处理器\n|---[优化][simple-starter-socket]移除多余变量\n|---[Bug][simple-demo-datasource]修复配置文件关闭自动创建库表未生效\n|---[优化][simple-starter-socket]优化日志输出信息\n|---[优化]优化readme.md文件\n|---[版本]更新部署包   \n    |---[nacos] 2.2.0 -> 2.2.2  \n|---[版本]更新依赖   \n    |--- [Spring Boot] 3.0.6 -> 3.1.0\n    |--- [Spring Cloud] 2022.0.2 -> 2022.0.3\n    |--- [Redisson] 3.20.1 -> 3.21.3\n    |--- [netty-socketio] 1.7.25 -> 2.0.2\n    |--- [aws-java-sdk-s3] 1.12.446-> 1.12.469\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2023.3.3.0\n\n[已完成]Simple系统2023.3.3.0发布 \n|---[优化][simple-starter-grpc] 使用ConcurrentHashMap存储，避免多次注解同一个Stub导致重复bean使用\n|---[优化][simple-starter-encrypt]  重命名simple-starter-encode模块为simple-starter-encrypt 更符合其实际目的\n|---[功能][simple-starter-datasource] 新增通过实现MapperLocationsProvider接口获取配置值，自动配置MybatisPlus的mapper-locations属性\n|---[优化]格式化代码\n|---[版本]更新依赖   \n    |---[io-grpc] 1.54.0 -> 1.55.1  \n    |---[spring-cloud-alibaba] 2022.0.0.0-RC1 -> 2022.0.0.0-RC2  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2023.3.2.1\n\n[已完成]Simple系统2023.3.2.1发布 \n|---[功能][simple-starter-redisson] 新增 RedissonCacheService 类，用于封装 Redisson 对象缓存的常用操作\n|---[优化][simple-starter-redisson]  RedissonService 类重命名为 RedissonLockService，以便更好地表达它的作用和用途\n|---[优化][simple-starter-socket] 更新使用RedissonManager获取客户端\n|---[功能][simple-starter-encode] 增加时间戳校验功能，默认关闭 默认校验时间戳的差值为5秒\n|---[功能][simple-starter-encode] 对接口的请求参数解密增加支持GetMapping的URL查询参数解密\n|---[优化][simple-base-param]优化接口文档示例\n|---[功能][simple-utils] 新增工具类模块项\n|---[功能][simple-utils-jackson] 新增Jackson工具类模块\n|---[优化][simple-starter-web] 优化移除jackson-databind依赖\n|---[优化][simple-starter-datasource] 增加依赖simple-utils-jackson使用\n|---[优化][simple-starter-encode] 增加依赖simple-utils-jackson使用\n|---[性能][simple-starter-dict] 优化字典翻译性能，在同一个目标对象数据开启临时缓存，避免重复请求。测试1W条数据原耗时 2686 ms，优化后耗时258 ms\n|---[功能][simple-starter-grpc] 增加拦截设置Grpc客户端调用服务端超时时间\n|---[版本]更新依赖   \n    |---[Spring Boot] 3.0.5 -> 3.0.6  \n    |---[netty-socketio] 1.7.23 -> 1.7.25 \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 2023.3.1.0\n\n[已完成]Simple系统2023.3.1.0发布 \n|---[优化][simple-starter-web] 将ObjectMapper封装为私有静态变量并提供两个公共静态方法将对象转换为 Class 或 TypeReference 来简化代码并提高其可维护性\n|---[优化][simple-starter-web] 重命名Json工具类并提供注释\n|---[功能][simple-starter-dict] 增加注解字段进行字典翻译功能模块 \n|---[优化][simple-starter-dict] 优化切面核心方法:字典实现类（指定优先级 注解>配置项，均为空则使用默认实现方法）;默认字典实现类:优化从本地字典文件读取\n|---[优化][simple-starter-dict] 调用远程接口实现类接口地址拆分，可统一读取配置项\n|---[优化][simple-starter-dict] 可通过配置文件来自定义本地字典文件目录\n|---[功能][simple-demo-dict] 增加注解字段字典翻译使用示例 \n|---[功能][simple-demo-dict] 增加自定义实现获取指定类型的字典项列表\n|---[优化][simple-base-param] 优化ParamInitUtil注释\n|---[优化][demo-base-param] 优化注释\n|---[优化][simple-starter-socket] 优化注释\n|---[功能][simple-starter-encode] 增加自定义注解：接口请求参数或返回参数Rsa加密解密\n|---[优化][simple-starter-encode] 优化Optional.of(null)异常抛出\n|---[优化][simple-starter-encode] 变量名称格式化\n|---[优化]移除使用@RequestParam注解\n|---[优化][pom.xml] 增加-parameters编译参数:提高代码可读性和反射支持\n|---[版本]更新依赖   \n    |---[Spring Cloud] 2022.0.1 -> 2022.0.2 \n    |---[io-grpc] 1.53.0 -> 1.54.0\n    |---[redisson] 3.20.0 -> 3.20.1\n    |---[aws-java-sdk-s3] 1.12.430 -> 1.12.446\n    |---[springdoc-openapi-starter] 2.0.4 -> 2.1.0 \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2023.3.0.0 [重构优化]\n\n[已完成]Simple系统2023.3.0.0发布  \n|---[优化][simple-starter-web] 优化序列化代码\n|---[优化][simple-starter-web] 优化OpenApiAutoConfiguration\n|---[优化][simple-starter-s3] 优化代码返回逻辑\n|---[优化][simple-starter-s3] 重构代码提供提供基础服务方法\n|---[优化][simple-starter-grpc] 重构代码\n|---[优化][simple-starter-encode] 优化代码使用函数式接口等\n|---[优化][simple-starter-redisson] 重构注解解析器\n|---[优化][simple-starter-redisson] 双重检查锁改为静态内部类的单例模式：线程安全\n|---[优化][simple-starter-datasource] 优化校验配置参数 \n|---[优化][simple-starter-datasource] 优化使用URI解析器来提取数据库名称\n|---[优化][simple-starter-datasource] 映射转换类优化 避免重复代码及判空\n|---[优化][simple-starter-datasource] 重构模块，增加通用CURD控制层，使用mybatis-plus依赖\n|---[优化][simple-base-param] 优化ParamInitUtil工具类\n|---[优化][simple-base-param] 优化适配新版datasource\n|---[优化][simple-base-generator] 优化MybatisGenerator提升易读性\n|---[优化][simple-base-generator] 优化适配新版datasource\n|---[优化][simple-base-generator] 优化CUSTOM_FILE_PREFIX支持MacOS\n|---[功能][simple-base-s3] 增加提供文件管理服务及接口\n|---[优化][simple-demo-datasource] 优化适配新版datasource\n|---[版本]更新依赖   \n    |---[Spring Boot] 3.0.4 -> 3.0.5  \n    |---[springdoc-openapi-starter] 2.0.2 -> 2.0.4 \n    |---[aws-java-sdk-s3] 1.12.416 -> 1.12.430\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 2023.2\n\n\n# 2023.2.3.1\n\n[已完成]Simple系统2023.2.3.1发布  \n|---[功能][simple-starter-encode] 自定义项支持两侧保留明文或两侧密文 \n|---[优化][simple-starter-encode] 两侧保留明文方法优化   \n\n\n1\n2\n3\n\n\n\n# 2023.2.3.0\n\n[已完成]Simple系统2023.2.3.0发布  \n|---[文档][readme.md] 优化文档说明\n|---[优化][simple-base-param] 优化代码，规范使用参数文档  \n|---[优化][simple-starter-web]优化依赖，使用knife4j-openapi3-ui  \n|---[功能][simple-starter-encode] 增加注解字段进行加密脱敏功能模块 \n|---[优化][simple-starter-encode] 支持对List列表进行脱敏加密   \n|---[优化][simple-starter-encode] 支持对实体嵌套进行脱敏加密\n|---[优化][simple-base-generator] 优化代码、模板升级  spring-boot-starter-parent版本  \n|---[版本]更新依赖  \n    |---[Spring Boot] 3.0.3 -> 3.0.4  \n    |---[springdoc-openapi-starter] 2.0.0 -> 2.0.2  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 2023.2.2.1\n\n[已完成]Simple系统2023.2.2.1发布  \n|---[Bug][simple-starter-web]添加Validation依赖解决构建native:compile异常  \n\n\n1\n2\n\n\n\n# 2023.2.2.0\n\n[已完成]Simple系统2023.2.2.0发布\n|---[优化][simple-demo]优化maven构建参数  \n|---[优化][simple-demo-cloud]优化配置参数  \n|---[优化][simple-demo-grpc-proto]优化依赖  \n|---[优化][demo-base-param]优化create table语句 \n|---[Bug][simple-base-param]修复relative示例独立引用时ComponentScan失效问题  \n|---[功能][simple-demo-relative][demo-single-collection]新增单体集合各模块测试类  \n|---[版本]更新依赖  \n    |---[Spring Boot] 3.0.2 -> 3.0.3 \n    |---[maven-deploy-plugin] 3.0.0->3.1.0 \n    |---[maven-javadoc-plugin] 3.0.0->3.5.0  \n    |---[aws-java-sdk-s3] 1.12.362 -> 1.12.416   \n    |---[maven-compiler-plugin] 3.10.1->3.11.0   \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 2023.2.1.0\n\n[已完成]Simple系统2023.2.1.0发布\n|---[功能][simple-base]增加simple-base基础模块 \n    |---[功能][simple-base-param]增加simple-base-param基础参数配置模块\n    |---[功能][demo-base-param]增加demo-base-param基础参数配置模块使用示例\n    |---[功能][demo-base-generator]增加demo-base-generator代码生成模块使用示例\n    |---[功能][simple-base-generator]增加simple-base-generator代码生成配置模块\n|---[功能][simple-demo-relative]新增Simple独立示例模块（独立Git）  \n|---[版本]更新依赖  \n    |---[io-grpc] 1.51.1 -> 1.53.0\n    |---[Redisson] 3.19.0 -> 3.19.3\n    |---[Spring Boot] 3.0.1 -> 3.0.2\n    |---[netty-socketio] 1.7.22 -> 1.7.23\n    |---[Spring Cloud] 2022.0.0 -> 2022.0.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 2023.2.0.0 [同步2022.2.0.0版本]\n\n[已完成]Simple系统2023.2.0.0发布\n|---[优化][simple-demo]精简simple-demo依赖\n|---[优化][simple-system]统一格式启动类名称\n|---[优化][simple-starter]精简simple-starter依赖\n|---[功能][simple-starter-web]增加全局异常处理器\n|---[功能][simple-starter-web]支持Graalvm Native\n|---[功能][simple-starter-web]使用knife4j增强功能依赖\n|---[Bug][simple-starter-socket]修复socketio.html测试页\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2023.1\n\n\n# 2023.1.0.0\n\n[已完成]Simple系统2023.1.0.0发布\n|---[功能]发布Maven中央仓库\n|---[功能]常用starter模块支持JDK17、Spring Boot 3.0.1\n|---[功能]发布simple-starter-web集成SpringBoot Web、接口文档\n|---[功能]发布simple-starter-redisson自定义注解简化使用：分布式锁、分布式幂等\n|---[功能]发布simple-starter-s3简化文件存储管理导入配置参数，封装管理接口\n|---[功能]发布simple-starter-socket长链接通讯及集群\n|---[功能]发布simple-starter-grpc自定义注解Grpc简化使用：客户端、服务端\n|---[功能]发布simple-starter-datasource集成数据库连接\n|---[功能]发布simple-starter-freemarker集成模板引擎应用\n|---[功能]发布simple-starter-cloud常用微服务依赖集成：服务发现、远程配置中心等\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 2022-不再维护\n\n\n# 2022.5\n\n\n# 2022.5.0.0\n\n[已完成]Simple系统2022.5.0.0\n|---[优化]增加服务接口地址前缀\n|---[优化][simple-starter-cloud]优化依赖使用\n|---[优化][simple-base-param]优化ParamInit配置\n|---[优化][simple-base-param]移除未使用到的引入\n|---[功能][simple-base-param]重构服务，拆分服务端及客户端\n|---[优化][simple-base-param]优化初始化异常跳过当前处理、及告警日志输出\n|---[优化][simple-starter-datasource]移除自定义类型处理器\n|---[优化][simple-starter-dict]优化异常时只跳过当前字段的处理\n|---[优化][simple-utils-jackson]增加JSON字符串反序列化为对象方法\n|---[优化][simple-starter-grpc]优化迭代使用entrySet()遍历，减少查找开销\n|---[优化][simple-starter-web]增加时间戳转换LocalDateTime的Deserializer\n|---[优化][simple-starter-web]对应simple-starter-datasource增加通用CrudOperations接口\n|---[功能][simple-starter-gateway]增加网关聚合文档兼容性，支持网关配置过滤器为->将请求的路径前缀去除\n|---[优化][simple-starter-web]避免重定向文档地址时的异常问题\n|---[功能][simple-base-generator]重构服务，拆分服务端及客户端。增加项目生成功能\n|---[优化][simple-base-generator]避免重新分配变量值\n|---[优化][simple-base-param]优化命名\n|---[功能][simple-base-generator]支持多表生成\n|---[版本]更新依赖  \n    |--- [Dynamic Datasource] 4.1.1 -> 4.1.2\n    |--- [redisson] 3.23.0 -> 3.23.1\n\t|--- [knife4j] 4.1.0 -> 4.3.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2022.4\n\n\n# 2022.4.1.0\n\n[已完成]Simple系统2022.4.1.0\n|---[功能][simple-starter-redisson]创建CacheManager并配置Cacheable注解常用配置及自定义CacheName对应配置\n|---[优化][simple-starter-redisson]简化循环遍历和集合操作\n|---[功能][simple-starter-gateway]增加微服务网关基础模块\n|---[功能][simple-demo-gateway]增加微服务网关基础模块示例\n|---[优化][simple-starter-web]使用knife4j增强依赖关系\n|---[优化][simple-base-param]简化代码且明确指定依赖关系\n|---[优化][simple-starter-socket]优化代码提升简洁性，避免重新分配参数\n|---[优化][pom.xml]移除未使用到的依赖管理\n|---[优化][simple-demo-socket]优化接口请求示例\n|---[优化][simple-starter-socket]优化连接事件\n|---[优化][simple-starter-web]序列化增加默认将Long类型转换为字符串，避免精度丢失\n|---[优化][simple-demo-redisson]优化日志输出\n|---[功能]增加Postman接口测试列表及断言\n|---[优化][simple-starter-datasource]优化mapper-locations配置\n|---[功能]增加Postman接口测试列表及断言\n|---[功能]增加Jmeter接口并发测试及断言\n|---[优化][simple-starter-datasource]简化循环和条件判断\n|---[优化][simple-starter-grpc]优化\"field is never assigned\"提示\n|---[功能][simple-starter-redisson]分布式幂等增加若干时间内防重复提交功能\n|---[功能]增加Postman接口:分布式幂等-等待expireTime过期后自动解锁\n|---[优化][simple-starter-dict]优化从本地文件读取字典项列表代码\n|---[优化][simple-starter-grpc]优化获取请求头代码\n|---[版本]增加部署包  \n    |---[redis] 7.0.11\n    |---[seaweedfs] 3.53\n|---[版本]更新依赖   \n    |--- [Spring Boot] 2.7.13 -> 2.7.14\n    |--- [Spring Cloud] 2021.0.7 -> 2021.0.8\n    |--- [Spring Cloud Alibaba] 2021.0.4.0 -> 2021.0.5.0\n    |--- [netty-socketio] 2.0.2 -> 2.0.3\n    |--- [dynamic-datasource] 3.6.1 -> 4.1.1\n    |--- [io-grpc] 1.56.0 -> 1.56.1\n    |--- [redisson]  3.22.1 -> 3.23.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# 2022.4.0.0\n\n[已完成]Simple系统2022.4.0.0\n|---[功能][simple-dependencies]添加用于管理依赖组件版本模块\n|---[优化][simple-starter-encrypt]抛出更详细的异常类型\n|---[优化][simple-starter-grpc]优化代码格式以提高可读性\n|---[功能][simple-base-generator]将依赖项管理内容添加到pom.xml\n|---[优化][simple-base-param]增加工具类方法\n|---[优化][simple-starter-web]优化异常处理器\n|---[优化][simple-starter-redisson]优化异常处理\n|---[优化][simple-starter-redisson]简化缓存key;优化日志输出;优化代码\n|---[优化][simple-base-param]优化参数配置接口\n|---[优化][simple-starter-email]优化依赖项\n|---[优化][simple-starter-dict]优化使用静态变量避免重复创建对象\n|---[优化][simple-starter-dict]独立字典项获取逻辑方法\n|---[优化][simple-starter-grpc]独立获取超时时间、获取请求头方法\n|---[优化][simple-base-param]重命名实体以更好地符合其实际用途\n|---[优化][pom.xml]优化依赖关系版本管理\n|---[版本]更新部署包   \n    |---[nacos] 2.2.2 -> 2.2.3 \n|---[版本]更新依赖   \n    |--- [io-grpc] 1.55.1 -> 1.56.0\n    |--- [Spring Boot] 2.7.12 -> 2.7.13\n    |--- [Redisson] 3.21.3 -> 3.22.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2022.3\n\n\n# 2022.3.5.2\n\n[已完成]Simple系统2022.3.5.2发布 \n|---[优化][simple-base-generator]增加默认服务启动端口\n|---[功能][simple-base-generator]增加数据库版本管理脚本基线文件创建\n|---[功能][simple-base-generator]增加SpringBoot自动配置元数据文件，便于服务集成\n|---[Bug][simple-base-generator]修复代码生成配置扫描及包名导入\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2022.3.5.0\n\n[已完成]Simple系统2022.3.5.0发布 \n|---[优化]更新readme.md文件及一些Community Standards\n|---[优化][simple-starter-redisson]Replace 'config' with a local variable\n|---[Bug][simple-starter-grpc]修复ClientCallStartHeaders实现类为空时异常\n|---[优化][simple-starter-dict]更换使用ReflectionUtils\n|---[优化][simple-starter-encrypt]更换使用ReflectionUtils\n|---[优化][simple-base-param]移除未使用到的类\n|---[优化][demo-base-param]优化示例逻辑\n|---[优化][simple-starter-encrypt]优化异常抛出，调整为日志异常记录\n|---[优化][simple-base-param]工具类增加常用字段定义\n|---[优化][simple-starter-datasource]优化避免重新分配参数\n|---[优化][simple-starter-datasource]优化通过实现MapperLocationsProvider接口获取配置值支持和配置文件中的mapperLocations属性值同时生效，默认开启\n|---[优化][demo-base-param]优化精简工具类依赖\n|---[优化][simple-base-param]独立运行Flyway实例，库表语句不再需要手动增加\n|---[优化][simple-demo-datasource]独立运行Flyway实例，增加MapperLocationsProvider实现类\n|---[优化][simple-base-param]优化配置文件结构\n|---[优化][simple-base-generator]代码生成增加配置文件等\n|---[适配][demo-base-param] 创建List方法-适配JDK8\n|---[适配][simple-starter-datasource] 创建List方法-适配JDK8\n|---[适配][simple-base-generator]创建List方法-适配JDK8\n|---[适配][simple-base-generator]pom依赖-适配JDK8\n|---[适配][simple-starter-email] Smtp邮件推送适配Jdk8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2022.3.4.0\n\n[已完成]Simple系统2023.3.4.0发布 \n|---[功能][simple-starter-email]增加推送邮件模块\n|---[功能][simple-demo-email]增加推送邮件模块使用示例\n|---[优化][simple-starter-email] 重构服务：简化方法、增加自定义发件人邮件配置参数方法\n|---[优化][simple-starter-datasource]使用更简洁的条件判断Boolean;使用try-with-resources自动调用close()方法关闭资源;优化方法调用\n|---[功能][simple-starter-grpc]客户端增加设置请求头参数接口，服务端增加获取请求头参数接口\n|---[优化][simple-starter-grpc]优化客户端设置请求头参数接口 支持多个实现类，优化增加Header后避免多次注解导致重复bean使用\n|---[功能][simple-demo-grpc-client]客户端增加设置请求头参数接口实现示例\n|---[功能][simple-demo-grpc-server]服务端增加获取请求头参数接口实现示例\n|---[优化][simple-starter-grpc]优化避免重复的异常抛出\n|---[优化][simple-starter-socket]移除自定义netty异常处理器\n|---[优化][simple-starter-socket]移除多余变量\n|---[Bug][simple-demo-datasource]修复配置文件关闭自动创建库表未生效\n|---[优化][simple-starter-socket]优化日志输出信息\n|---[优化]优化readme.md文件\n|---[版本]更新部署包   \n    |---[nacos] 2.2.0 -> 2.2.2\n|---[版本]更新依赖   \n    |--- [Redisson] 3.20.1 -> 3.21.3\n    |--- [netty-socketio] 1.7.25 -> 2.0.2\n    |--- [aws-java-sdk-s3] 1.12.446-> 1.12.469\n|---[适配][simple-starter-grpc] 请求头参数接口适配Jdk8修改\n|---[适配][simple-starter-email] 推送邮件模块适配Jdk8修改\n|---[适配]依赖\n    |---[spring-boot] 2.7.11 -> 2.7.12\n    |---[spring-cloud]2021.0.6 -> 2021.0.7\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 2022.3.3.0\n\n[已完成]Simple系统2023.3.3.0发布\n|---[功能]同步2023.3.3.0所有功能模块到2022.3.3.0 适配Jdk8及相关依赖\n|---[优化][simple-starter-grpc] 使用ConcurrentHashMap存储，避免多次注解同一个Stub导致重复bean使用\n|---[优化][simple-starter-encrypt]  重命名simple-starter-encode模块为simple-starter-encrypt 更符合其实际目的\n|---[功能][simple-starter-datasource] 新增通过实现MapperLocationsProvider接口获取配置值，自动配置MybatisPlus的mapper-locations属性\n|---[优化]格式化代码\n|---[版本]更新依赖   \n    |---[io-grpc] 1.54.0 -> 1.55.1  \n|---[适配][simple-base-generator]Map.of适配Jdk8修改\n|---[适配][simple-starter-datasource]ParameterObject参数适配Jdk8修改\n|---[适配][simple-starter-encrypt]switch case适配Jdk8修改\n|---[适配][simple-starter-grpc]类型record适配Jdk8修改 field.isAccessible()方法适配\n|---[适配][simple-starter-redisson]switch case适配Jdk8修改\n|---[适配]依赖\n    |---[spring-boot]2.7.11\n    |---[spring-cloud]2021.0.6\n    |---[spring-cloud-alibaba]2021.0.4.0\n    |---[springdoc-openapi]1.7.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 2022.3.2.0\n\n错误版本号，命名时标注错误，已修正为：2023.3.2.1\n\n\n# 2022.2\n\n\n# 2022.2.0.0\n\n[已完成]Simple系统2022.2.0.0发布\n|---[simple-demo]精简simple-demo依赖\n|---[simple-demo]统一格式启动类名称\n|---[simple-starter]精简simple-starter依赖\n|---[simple-starter-web]增加全局异常处理器\n|---[simple-starter-socket]修复socketio.html测试页\n|---[simple-starter-datasource]增加集成分页插件\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 2022.1\n\n\n# 2022.1.2.0\n\n[已完成]Simple系统2022.1.2.0发布\n|---[功能]常用starter模块支持JDK1.8\n|---[功能]发布simple-starter-web集成SpringBoot Web、接口文档\n|---[功能]发布simple-starter-redisson自定义注解简化使用：分布式锁、分布式幂等\n|---[功能]发布simple-starter-s3简化文件存储管理导入配置参数，封装管理接口\n|---[功能]发布simple-starter-socket长链接通讯及集群\n|---[功能]发布simple-starter-grpc自定义注解Grpc简化使用：客户端、服务端\n|---[功能]发布simple-starter-datasource集成数据库连接\n|---[功能]发布simple-starter-freemarker集成模板引擎应用\n|---[功能]发布simple-starter-cloud常用微服务依赖集成：服务发现、远程配置中心等\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",normalizedContent:"# 核心依赖\n\njdk   simple版本号    springboot   spring cloud   代码分支     发布状态\n17    2024.1.1.1   3.2.2        2023.0.0       main     已发布\n      2024.1.1.0                                        已发布\n      2024.1.0.0   3.2.1                                已发布\n      2023.5.2.0   3.1.6        2022.0.4       2023.x   已发布\n      2023.5.1.0   3.1.4                                已发布\n      2023.5.0.0   3.1.2                                已发布\n      2023.4.1.0                2022.0.3                已发布\n      2023.4.0.0   3.1.1                                已发布\n      2023.3.5.2   3.1.0                                已发布\n      2023.3.5.0                                        已发布\n      2023.3.4.0                                        已发布\n      2023.3.3.0   3.0.6        2022.0.2                已发布\n      2023.3.2.1                                        已发布\n      2023.3.1.0   3.0.5                                已发布\n      2023.3.0.0                2022.0.1                已发布\n      2023.2.3.1   3.0.4                                已发布\n      2023.2.3.0                                        已发布\n      2023.2.2.1   3.0.3                                已发布\n      2023.2.2.0                                        已发布\n      2023.2.1.0   3.0.2                                已发布\n      2023.1.0.0   3.0.1        2022.0.0                已发布\n1.8   2022.x.x.x   -            -              2022.x   不维护\n      2022.5.0.0   2.7.14       2021.0.8                已发布\n      2022.4.1.0                                        已发布\n      2022.4.0.0   2.7.13       2021.0.7                已发布\n      2022.3.5.2   2.7.12                               已发布\n      2022.3.5.0                                        已发布\n      2022.3.4.0                                        已发布\n      2022.3.3.0   2.7.11       2021.0.6                已发布\n      2022.2.0.0   2.7.7        2021.0.5                已发布\n\n\n# 待发布\n\n\n# 已发布\n\n\n# 2024.1\n\n\n# 2024.1.1.1\n\n[已完成]simple系统2024.1.1.1\n|---[功能][simple-utils-common]增加唯一主键工厂及默认实现，开放自定义实现\n|---[功能][simple-dependencies]增加simple-utils-common模块管理\n|---[优化][simple-starter-datasource]简化调用\n|---[优化][simple-base-s3]依赖使用common依赖的唯一主键工厂及默认实现\n|---[版本]补充更新依赖  \n    |--- [spring boot] 3.2.1 -> 3.2.2\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 2024.1.1.0\n\n[已完成]simple系统2024.1.1.0\n|---[优化][simple-starter-socket]测试页面优化\n|---[功能][simple-parent]增加项目父级管理模块\n|---[优化][simple-utils-common]移除易混淆使用的方法函数\n|---[优化][simple-utils-common]增强方法使用参数\n|---[优化][simple-starter-grpc]简化代码\n|---[功能][simple-starter-encrypt]增加开启全局接口加解密功能，增加unencrypted注解\n|---[优化][simple-starter-redisson]避免抛出原始异常\n|---[重构][simple-base-config]重命名模块,更符合其实际目的\n|---[优化][simple-starter-web]通用接口返回修改实体\n|---[优化][simple-base-config]优化日志打印\n|---[优化][simple-starter-web]响应类支持链式调用\n|---[优化][simple-starter-dict]增强optional方法使用\n|---[优化][simple-base-s3]使用securerandom方法生成字符串\n|---[优化][simple-base-s3]简化上传文件入参\n|---[优化][simple-starter-s3]增加过期时间参数\n|---[优化][simple-starter-encrypt]修改注释\n|---[版本]更新依赖  \n    |--- [spring boot] 3.2.1 -> 3.2.2\n    |--- [knife4j] 4.4.0 -> 4.5.0\n\t|--- [dynamic-datasource] 4.2.0 -> 4.3.0\n\t|--- [netty-socketio] 2.0.6 -> 2.0.8\n\t|--- [redisson] 3.25.2  -> 3.26.0\n\t|--- [io-grpc] 1.60.1 -> 1.61.0\n\t|--- [aws-java-sdk-s3] 1.12.599 -> 1.12.647\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n\n\n\n# 2024.1.0.0\n\n[已完成]simple系统2024.1.0.0\n|---[优化][simple-starter-grpc]优化grpcclientbean嵌套对象获取逻辑\n|---[优化][simple-starter-grpc]移除多余方法\n|---[优化][simple-starter-grpc]增加注释说明\n|---[优化][simple-starter-s3]修改amazons3对象注入方式\n|---[优化][simple-base-param]增加常量及简化代码\n|---[优化][simple-starter-datasource]移除工具类，方法迁移pagerequest类中，便于维护\n|---[优化][simple-base-s3]增加构造函数，简化代码\n|---[优化][simple-base-socket]分解方法便于阅读\n|---[优化][simple-base-datasource]抽取常量，代码优化\n|---[优化][simple-starter-cloud]解决springboot新版本依赖冲突\n|---[优化][simple-base-generator]增加自定义生成项目端口号和版本号\n|---[重构][simple-starter-redisson]幂等和锁注解参数拆分，独立动态参数部分\n|---[bug][simple-starter-redisson]幂等注解增加判断锁状态，避免同线程内无效\n|---[功能][simple-starter-redisson]增加分布式限流器注解功能\n|---[功能][simple-starter-redisson]注解增加字段，开放功能：key是否拼接md5（切点数据生成md5）\n|---[优化][simple-starter-redisson]methodcontext使用实例字符串进行存储对象，避免同方法名md5重复\n|---[优化][simple-demo-redisson]修改测试方法，增加限流器压测\n|---[优化][application.yml]修改配置，灵活开关springcloud配置项\n|---[版本]更新部署包   \n    |---[nacos] 2.2.3 -> 2.3.0 \n    |---[redis] 7.0.11 -> 7.2.3\n|---[版本]更新依赖  \n    |--- [spring boot] 3.1.6 -> 3.2.1\n    |--- [spring cloud] 2022.0.4 -> 2023.0.4 \n    |--- [knife4j] 4.3.0 -> 4.4.0\n    |--- [mybatis-plus] 3.5.4.1 -> 3.5.5\n    |--- [io-grpc] 1.59.1 -> 1.60.1\n    |--- [redisson] 3.24.3 -> 3.25.2\n    |--- [apm-toolkit-logback-1.x] 9.0.0 -> 9.1.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\n\n\n# 2023.5\n\n\n# 2023.5.2.0\n\n[已完成]simple系统2023.5.2.0\n|---[功能][simple-starter-package]增加自定义maven构建打包逻辑模块\n|---[优化][simple-starter-package]构建输出增加git版本文件\n|---[优化][simple-starter-package]添加shell脚本命令提示语句\n|---[功能][simple-base-generator]拆分独立模块，便于使用\n|---[优化][simple-starter-package]增加异常提示操作说明\n|---[优化][simple-starter-package]修复脚本变量\n|---[优化][simple-starter-package]增加检测脚本是否已经关闭进程\n|---[优化][simple-starter-datasource]移除非必要使用的变量\n|---[优化][simple-demo-socket-one]更新netty-socketio版本，权限认证方法同步更新\n|---[优化][simple-starter-package]使用优雅的关闭服务进程命令\n|---[优化][simple-starter-dict]使用beanpostprocessor提升效率，避免直接操作applicationcontext\n|---[优化][simple-starter-dict]使用concurrenthashmap线程安全及提升并发性能\n|---[优化][simple-starter-grpc]客户端使用beanpostprocessor提升效率\n|---[优化][simple-starter-grpc]服务端注入bindableservice替代applicationcontext，使用postconstruct初始化，简化代码\n|---[优化][simple-starter-socket]简化代码逻辑模块\n|---[优化][simple-starter-redisson]修改配置参数实体\n|---[优化][simple-starter-redisson]修改代码目录结构\n|---[优化][simple-starter-redisson]重构锁逻辑，增加实体简洁含义\n|---[优化][simple-starter-redisson]修改抛出异常类型\n|---[优化][simple-base-param]修改静态变量及增加调试日志输出\n|---[优化][simple-starter-grpc]修改grpcclient注解属性，提升代码类型安全性\n|---[优化][simple-starter-dict]修改dictfield注解dictimplclass属性，提升代码类型安全性\n|---[优化][simple-starter-dict]简化代码逻辑\n|---[优化][simple-starter-grpc]简化代码逻辑\n|---[优化][simple-starter-email]简化代码逻辑\n|---[优化][simple-base-generator]初始化项目增加依赖打包逻辑模块，增加生成代码测试模块\n|---[版本]更新依赖  \n    |--- [spring boot] 3.1.4 -> 3.1.6\n    |--- [io-grpc] 1.57.2 -> 1.59.1\n\t|--- [netty-socketio] 2.0.3 -> 2.0.6\n\t|--- [redisson] 3.23.4  -> 3.24.3\n\t|--- [mybatis-plus] 3.5.3.2  -> 3.5.4.1\n\t|--- [dynamic-datasource] 4.1.3 -> 4.2.0\n\t|--- [aws-java-sdk-s3] 1.12.533 -> 1.12.599\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n\n\n\n# 2023.5.1.0\n\n[已完成]simple系统2023.5.1.0\n|---[优化][simple-base-param]优化记录历史配置\n|---[功能][simple-base-param]增加查询历史参数配置接口\n|---[优化][simple-starter-web]全局异常拦截移除运行时异常处理\n|---[优化][simple-starter-web]响应实体增加抛出异常方法\n|---[优化][simple-starter-web]增加响应异常\n|---[优化][simple-base-generator]服务实现类重命名\n|---[功能][simple-base-s3]重构服务，拆分服务端及客户端\n|---[优化][simple-starter-datasource]指明基础接口实现\n|---[优化][simple-base-generator]优化接口地址\n|---[优化][simple-starter-dict]优化代码参数\n|---[优化][simple-starter-dict]增加日志记录\n|---[优化][demo-base-generator]默认关闭flyway\n|---[优化][simple-starter-dict]增加注释说明\n|---[优化][simple-base-generator]增加primary优先服务类\n|---[优化][simple-starter-dict]增加constructor\n|---[优化][simple-starter-dict]增加优先级排序及获取方式\n|---[优化][simple-starter-dict]优化方法获取\n|---[bug][simple-base-generator]修复增加服务实现类注解\n|---[功能][simpale-base-dict]增加基础字典服务类模块\n|---[优化][simple-base-param]重命名实体及调用地址\n|---[优化][simple-utils-jackson]rename package\n|---[优化][simple-starter-encrypt]完善姓名脱敏方法\n|---[优化][simple-starter-s3]默认开启\n|---[功能][simple-utils-common]增加通用工具类模块\n|---[优化][simple-utils-common]单元测试增加断言方法\n|---[版本]更新依赖  \n    |--- [spring boot] 3.1.2 -> 3.1.4\n    |--- [redisson] 3.23.3  -> 3.23.4\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n\n# 2023.5.0.0 [重构优化]\n\n[已完成]simple系统2023.5.0.0\n|---[优化]增加服务接口地址前缀\n|---[优化][simple-starter-cloud]优化依赖使用\n|---[优化][simple-base-param]优化paraminit配置\n|---[优化][simple-base-param]移除未使用到的引入\n|---[功能][simple-base-param]重构服务，拆分服务端及客户端\n|---[优化][simple-base-param]优化初始化异常跳过当前处理、及告警日志输出\n|---[优化][simple-starter-datasource]移除自定义类型处理器\n|---[优化][simple-starter-dict]优化异常时只跳过当前字段的处理\n|---[优化][simple-utils-jackson]增加json字符串反序列化为对象方法\n|---[优化][simple-starter-grpc]优化迭代使用entryset()遍历，减少查找开销\n|---[优化][simple-starter-web]增加时间戳转换localdatetime的deserializer\n|---[优化][simple-starter-web]对应simple-starter-datasource增加通用crudoperations接口\n|---[功能][simple-starter-gateway]增加网关聚合文档兼容性，支持网关配置过滤器为->将请求的路径前缀去除\n|---[优化][simple-starter-web]避免重定向文档地址时的异常问题\n|---[功能][simple-base-generator]重构服务，拆分服务端及客户端。增加项目生成功能\n|---[优化][simple-base-generator]避免重新分配变量值\n|---[优化][simple-base-param]优化命名\n|---[功能][simple-base-generator]支持多表生成\n|---[优化][simple-base-generator]优化springboot版本号配置项\n|---[功能][simple-starter-cloud]增加feign配置日志打印项\n|---[优化][simple-base-param]优化启用配置项参数\n|---[优化][simple-base-generator]优化初始化项目启用配置项参数\n|---[版本]更新依赖  \n    |--- [dynamic datasource] 4.1.1 -> 4.1.2\n    |--- [redisson] 3.23.0 -> 3.23.1\n\t|--- [knife4j] 4.1.0 -> 4.3.0\n\t|--- [spring-cloud-alibaba] 2022.0.0.0-rc2 -> 2022.0.0.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# 2023.4\n\n\n# 2023.4.1.0\n\n[已完成]simple系统2023.4.1.0\n|---[功能][simple-starter-redisson]创建cachemanager并配置cacheable注解常用配置及自定义cachename对应配置\n|---[优化][simple-starter-redisson]简化循环遍历和集合操作\n|---[功能][simple-starter-gateway]增加微服务网关基础模块\n|---[功能][simple-demo-gateway]增加微服务网关基础模块示例\n|---[优化][simple-starter-web]使用knife4j增强依赖关系\n|---[优化][simple-base-param]简化代码且明确指定依赖关系\n|---[优化][simple-starter-socket]优化代码提升简洁性，避免重新分配参数\n|---[优化][pom.xml]移除未使用到的依赖管理\n|---[优化][simple-demo-socket]优化接口请求示例\n|---[优化][simple-starter-socket]优化连接事件\n|---[优化][simple-starter-web]序列化增加默认将long类型转换为字符串，避免精度丢失\n|---[优化][simple-demo-redisson]优化日志输出\n|---[功能]增加postman接口测试列表及断言\n|---[优化][simple-starter-datasource]优化mapper-locations配置\n|---[功能]增加postman接口测试列表及断言\n|---[功能]增加jmeter接口并发测试及断言\n|---[优化][simple-starter-datasource]简化循环和条件判断\n|---[优化][simple-starter-grpc]优化\"field is never assigned\"提示\n|---[功能][simple-starter-redisson]分布式幂等增加若干时间内防重复提交功能\n|---[功能]增加postman接口:分布式幂等-等待expiretime过期后自动解锁\n|---[优化][simple-starter-dict]优化从本地文件读取字典项列表代码\n|---[优化][simple-starter-grpc]优化获取请求头代码\n|---[版本]增加部署包  \n    |---[redis] 7.0.11\n    |---[seaweedfs] 3.53\n|---[版本]更新依赖  \n    |--- [spring boot] 3.1.1 -> 3.1.2\n    |--- [netty-socketio] 2.0.2 -> 2.0.3\n    |--- [dynamic-datasource] 3.6.1 -> 4.1.1\n    |--- [io-grpc] 1.56.0 -> 1.56.1\n    |--- [redisson]  3.22.1 -> 3.23.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n\n\n\n# 2023.4.0.0 [增加版本模块]\n\n[已完成]simple系统2023.4.0.0\n|---[功能][simple-dependencies]添加用于管理依赖组件版本模块\n|---[优化][simple-starter-encrypt]抛出更详细的异常类型\n|---[优化][simple-starter-grpc]优化代码格式以提高可读性\n|---[功能][simple-base-generator]将依赖项管理内容添加到pom.xml\n|---[优化][simple-base-param]增加工具类方法\n|---[优化][simple-starter-web]优化异常处理器\n|---[优化][simple-starter-redisson]优化异常处理\n|---[优化][simple-starter-redisson]简化缓存key;优化日志输出;优化代码\n|---[优化][simple-base-param]优化参数配置接口\n|---[优化][simple-starter-email]优化依赖项\n|---[优化][simple-starter-dict]优化使用静态变量避免重复创建对象\n|---[优化][simple-starter-dict]独立字典项获取逻辑方法\n|---[优化][simple-starter-grpc]独立获取超时时间、获取请求头方法\n|---[优化][simple-base-param]重命名实体以更好地符合其实际用途\n|---[优化][pom.xml]优化依赖关系版本管理\n|---[版本]更新部署包   \n    |---[nacos] 2.2.2 -> 2.2.3  \n|---[版本]更新依赖   \n    |--- [io-grpc] 1.55.1 -> 1.56.0\n    |--- [spring boot] 3.1.0 -> 3.1.1\n    |--- [redisson] 3.21.3 -> 3.22.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2023.3\n\n\n# 2023.3.5.2\n\n[已完成]simple系统2023.3.5.2发布 \n|---[优化][simple-base-generator]增加默认服务启动端口\n|---[功能][simple-base-generator]增加数据库版本管理脚本基线文件创建\n|---[功能][simple-base-generator]增加springboot自动配置元数据文件，便于服务集成\n|---[bug][simple-base-generator]修复代码生成配置扫描及包名导入\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2023.3.5.0\n\n[已完成]simple系统2023.3.5.0发布 \n|---[优化]更新readme.md文件及一些community standards\n|---[优化][simple-starter-redisson]replace 'config' with a local variable\n|---[bug][simple-starter-grpc]修复clientcallstartheaders实现类为空时异常\n|---[优化][simple-starter-dict]更换使用reflectionutils\n|---[优化][simple-starter-encrypt]更换使用reflectionutils\n|---[优化][simple-base-param]移除未使用到的类\n|---[优化][demo-base-param]优化示例逻辑\n|---[优化][simple-starter-encrypt]优化异常抛出，调整为日志异常记录\n|---[优化][simple-base-param]工具类增加常用字段定义\n|---[优化][simple-starter-datasource]优化避免重新分配参数\n|---[优化][simple-starter-datasource]优化通过实现mapperlocationsprovider接口获取配置值支持和配置文件中的mapperlocations属性值同时生效，默认开启\n|---[优化][demo-base-param]优化精简工具类依赖\n|---[优化][simple-base-param]独立运行flyway实例，库表语句不再需要手动增加\n|---[优化][simple-demo-datasource]独立运行flyway实例，增加mapperlocationsprovider实现类\n|---[优化][simple-base-param]优化配置文件结构\n|---[优化][simple-base-generator]代码生成增加配置文件等\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 2023.3.4.0\n\n[已完成]simple系统2023.3.4.0发布 \n|---[功能][simple-starter-email]增加推送邮件模块\n|---[功能][simple-demo-email]增加推送邮件模块使用示例\n|---[优化][simple-starter-email] 重构服务：简化方法、增加自定义发件人邮件配置参数方法\n|---[优化][simple-starter-datasource]使用更简洁的条件判断boolean;使用try-with-resources自动调用close()方法关闭资源;优化方法调用\n|---[功能][simple-starter-grpc]客户端增加设置请求头参数接口，服务端增加获取请求头参数接口\n|---[优化][simple-starter-grpc]优化客户端设置请求头参数接口 支持多个实现类，优化增加header后避免多次注解导致重复bean使用\n|---[功能][simple-demo-grpc-client]客户端增加设置请求头参数接口实现示例\n|---[功能][simple-demo-grpc-server]服务端增加获取请求头参数接口实现示例\n|---[优化][simple-starter-grpc]优化避免重复的异常抛出\n|---[优化][simple-starter-socket]移除自定义netty异常处理器\n|---[优化][simple-starter-socket]移除多余变量\n|---[bug][simple-demo-datasource]修复配置文件关闭自动创建库表未生效\n|---[优化][simple-starter-socket]优化日志输出信息\n|---[优化]优化readme.md文件\n|---[版本]更新部署包   \n    |---[nacos] 2.2.0 -> 2.2.2  \n|---[版本]更新依赖   \n    |--- [spring boot] 3.0.6 -> 3.1.0\n    |--- [spring cloud] 2022.0.2 -> 2022.0.3\n    |--- [redisson] 3.20.1 -> 3.21.3\n    |--- [netty-socketio] 1.7.25 -> 2.0.2\n    |--- [aws-java-sdk-s3] 1.12.446-> 1.12.469\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2023.3.3.0\n\n[已完成]simple系统2023.3.3.0发布 \n|---[优化][simple-starter-grpc] 使用concurrenthashmap存储，避免多次注解同一个stub导致重复bean使用\n|---[优化][simple-starter-encrypt]  重命名simple-starter-encode模块为simple-starter-encrypt 更符合其实际目的\n|---[功能][simple-starter-datasource] 新增通过实现mapperlocationsprovider接口获取配置值，自动配置mybatisplus的mapper-locations属性\n|---[优化]格式化代码\n|---[版本]更新依赖   \n    |---[io-grpc] 1.54.0 -> 1.55.1  \n    |---[spring-cloud-alibaba] 2022.0.0.0-rc1 -> 2022.0.0.0-rc2  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2023.3.2.1\n\n[已完成]simple系统2023.3.2.1发布 \n|---[功能][simple-starter-redisson] 新增 redissoncacheservice 类，用于封装 redisson 对象缓存的常用操作\n|---[优化][simple-starter-redisson]  redissonservice 类重命名为 redissonlockservice，以便更好地表达它的作用和用途\n|---[优化][simple-starter-socket] 更新使用redissonmanager获取客户端\n|---[功能][simple-starter-encode] 增加时间戳校验功能，默认关闭 默认校验时间戳的差值为5秒\n|---[功能][simple-starter-encode] 对接口的请求参数解密增加支持getmapping的url查询参数解密\n|---[优化][simple-base-param]优化接口文档示例\n|---[功能][simple-utils] 新增工具类模块项\n|---[功能][simple-utils-jackson] 新增jackson工具类模块\n|---[优化][simple-starter-web] 优化移除jackson-databind依赖\n|---[优化][simple-starter-datasource] 增加依赖simple-utils-jackson使用\n|---[优化][simple-starter-encode] 增加依赖simple-utils-jackson使用\n|---[性能][simple-starter-dict] 优化字典翻译性能，在同一个目标对象数据开启临时缓存，避免重复请求。测试1w条数据原耗时 2686 ms，优化后耗时258 ms\n|---[功能][simple-starter-grpc] 增加拦截设置grpc客户端调用服务端超时时间\n|---[版本]更新依赖   \n    |---[spring boot] 3.0.5 -> 3.0.6  \n    |---[netty-socketio] 1.7.23 -> 1.7.25 \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 2023.3.1.0\n\n[已完成]simple系统2023.3.1.0发布 \n|---[优化][simple-starter-web] 将objectmapper封装为私有静态变量并提供两个公共静态方法将对象转换为 class 或 typereference 来简化代码并提高其可维护性\n|---[优化][simple-starter-web] 重命名json工具类并提供注释\n|---[功能][simple-starter-dict] 增加注解字段进行字典翻译功能模块 \n|---[优化][simple-starter-dict] 优化切面核心方法:字典实现类（指定优先级 注解>配置项，均为空则使用默认实现方法）;默认字典实现类:优化从本地字典文件读取\n|---[优化][simple-starter-dict] 调用远程接口实现类接口地址拆分，可统一读取配置项\n|---[优化][simple-starter-dict] 可通过配置文件来自定义本地字典文件目录\n|---[功能][simple-demo-dict] 增加注解字段字典翻译使用示例 \n|---[功能][simple-demo-dict] 增加自定义实现获取指定类型的字典项列表\n|---[优化][simple-base-param] 优化paraminitutil注释\n|---[优化][demo-base-param] 优化注释\n|---[优化][simple-starter-socket] 优化注释\n|---[功能][simple-starter-encode] 增加自定义注解：接口请求参数或返回参数rsa加密解密\n|---[优化][simple-starter-encode] 优化optional.of(null)异常抛出\n|---[优化][simple-starter-encode] 变量名称格式化\n|---[优化]移除使用@requestparam注解\n|---[优化][pom.xml] 增加-parameters编译参数:提高代码可读性和反射支持\n|---[版本]更新依赖   \n    |---[spring cloud] 2022.0.1 -> 2022.0.2 \n    |---[io-grpc] 1.53.0 -> 1.54.0\n    |---[redisson] 3.20.0 -> 3.20.1\n    |---[aws-java-sdk-s3] 1.12.430 -> 1.12.446\n    |---[springdoc-openapi-starter] 2.0.4 -> 2.1.0 \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2023.3.0.0 [重构优化]\n\n[已完成]simple系统2023.3.0.0发布  \n|---[优化][simple-starter-web] 优化序列化代码\n|---[优化][simple-starter-web] 优化openapiautoconfiguration\n|---[优化][simple-starter-s3] 优化代码返回逻辑\n|---[优化][simple-starter-s3] 重构代码提供提供基础服务方法\n|---[优化][simple-starter-grpc] 重构代码\n|---[优化][simple-starter-encode] 优化代码使用函数式接口等\n|---[优化][simple-starter-redisson] 重构注解解析器\n|---[优化][simple-starter-redisson] 双重检查锁改为静态内部类的单例模式：线程安全\n|---[优化][simple-starter-datasource] 优化校验配置参数 \n|---[优化][simple-starter-datasource] 优化使用uri解析器来提取数据库名称\n|---[优化][simple-starter-datasource] 映射转换类优化 避免重复代码及判空\n|---[优化][simple-starter-datasource] 重构模块，增加通用curd控制层，使用mybatis-plus依赖\n|---[优化][simple-base-param] 优化paraminitutil工具类\n|---[优化][simple-base-param] 优化适配新版datasource\n|---[优化][simple-base-generator] 优化mybatisgenerator提升易读性\n|---[优化][simple-base-generator] 优化适配新版datasource\n|---[优化][simple-base-generator] 优化custom_file_prefix支持macos\n|---[功能][simple-base-s3] 增加提供文件管理服务及接口\n|---[优化][simple-demo-datasource] 优化适配新版datasource\n|---[版本]更新依赖   \n    |---[spring boot] 3.0.4 -> 3.0.5  \n    |---[springdoc-openapi-starter] 2.0.2 -> 2.0.4 \n    |---[aws-java-sdk-s3] 1.12.416 -> 1.12.430\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 2023.2\n\n\n# 2023.2.3.1\n\n[已完成]simple系统2023.2.3.1发布  \n|---[功能][simple-starter-encode] 自定义项支持两侧保留明文或两侧密文 \n|---[优化][simple-starter-encode] 两侧保留明文方法优化   \n\n\n1\n2\n3\n\n\n\n# 2023.2.3.0\n\n[已完成]simple系统2023.2.3.0发布  \n|---[文档][readme.md] 优化文档说明\n|---[优化][simple-base-param] 优化代码，规范使用参数文档  \n|---[优化][simple-starter-web]优化依赖，使用knife4j-openapi3-ui  \n|---[功能][simple-starter-encode] 增加注解字段进行加密脱敏功能模块 \n|---[优化][simple-starter-encode] 支持对list列表进行脱敏加密   \n|---[优化][simple-starter-encode] 支持对实体嵌套进行脱敏加密\n|---[优化][simple-base-generator] 优化代码、模板升级  spring-boot-starter-parent版本  \n|---[版本]更新依赖  \n    |---[spring boot] 3.0.3 -> 3.0.4  \n    |---[springdoc-openapi-starter] 2.0.0 -> 2.0.2  \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 2023.2.2.1\n\n[已完成]simple系统2023.2.2.1发布  \n|---[bug][simple-starter-web]添加validation依赖解决构建native:compile异常  \n\n\n1\n2\n\n\n\n# 2023.2.2.0\n\n[已完成]simple系统2023.2.2.0发布\n|---[优化][simple-demo]优化maven构建参数  \n|---[优化][simple-demo-cloud]优化配置参数  \n|---[优化][simple-demo-grpc-proto]优化依赖  \n|---[优化][demo-base-param]优化create table语句 \n|---[bug][simple-base-param]修复relative示例独立引用时componentscan失效问题  \n|---[功能][simple-demo-relative][demo-single-collection]新增单体集合各模块测试类  \n|---[版本]更新依赖  \n    |---[spring boot] 3.0.2 -> 3.0.3 \n    |---[maven-deploy-plugin] 3.0.0->3.1.0 \n    |---[maven-javadoc-plugin] 3.0.0->3.5.0  \n    |---[aws-java-sdk-s3] 1.12.362 -> 1.12.416   \n    |---[maven-compiler-plugin] 3.10.1->3.11.0   \n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 2023.2.1.0\n\n[已完成]simple系统2023.2.1.0发布\n|---[功能][simple-base]增加simple-base基础模块 \n    |---[功能][simple-base-param]增加simple-base-param基础参数配置模块\n    |---[功能][demo-base-param]增加demo-base-param基础参数配置模块使用示例\n    |---[功能][demo-base-generator]增加demo-base-generator代码生成模块使用示例\n    |---[功能][simple-base-generator]增加simple-base-generator代码生成配置模块\n|---[功能][simple-demo-relative]新增simple独立示例模块（独立git）  \n|---[版本]更新依赖  \n    |---[io-grpc] 1.51.1 -> 1.53.0\n    |---[redisson] 3.19.0 -> 3.19.3\n    |---[spring boot] 3.0.1 -> 3.0.2\n    |---[netty-socketio] 1.7.22 -> 1.7.23\n    |---[spring cloud] 2022.0.0 -> 2022.0.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 2023.2.0.0 [同步2022.2.0.0版本]\n\n[已完成]simple系统2023.2.0.0发布\n|---[优化][simple-demo]精简simple-demo依赖\n|---[优化][simple-system]统一格式启动类名称\n|---[优化][simple-starter]精简simple-starter依赖\n|---[功能][simple-starter-web]增加全局异常处理器\n|---[功能][simple-starter-web]支持graalvm native\n|---[功能][simple-starter-web]使用knife4j增强功能依赖\n|---[bug][simple-starter-socket]修复socketio.html测试页\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 2023.1\n\n\n# 2023.1.0.0\n\n[已完成]simple系统2023.1.0.0发布\n|---[功能]发布maven中央仓库\n|---[功能]常用starter模块支持jdk17、spring boot 3.0.1\n|---[功能]发布simple-starter-web集成springboot web、接口文档\n|---[功能]发布simple-starter-redisson自定义注解简化使用：分布式锁、分布式幂等\n|---[功能]发布simple-starter-s3简化文件存储管理导入配置参数，封装管理接口\n|---[功能]发布simple-starter-socket长链接通讯及集群\n|---[功能]发布simple-starter-grpc自定义注解grpc简化使用：客户端、服务端\n|---[功能]发布simple-starter-datasource集成数据库连接\n|---[功能]发布simple-starter-freemarker集成模板引擎应用\n|---[功能]发布simple-starter-cloud常用微服务依赖集成：服务发现、远程配置中心等\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 2022-不再维护\n\n\n# 2022.5\n\n\n# 2022.5.0.0\n\n[已完成]simple系统2022.5.0.0\n|---[优化]增加服务接口地址前缀\n|---[优化][simple-starter-cloud]优化依赖使用\n|---[优化][simple-base-param]优化paraminit配置\n|---[优化][simple-base-param]移除未使用到的引入\n|---[功能][simple-base-param]重构服务，拆分服务端及客户端\n|---[优化][simple-base-param]优化初始化异常跳过当前处理、及告警日志输出\n|---[优化][simple-starter-datasource]移除自定义类型处理器\n|---[优化][simple-starter-dict]优化异常时只跳过当前字段的处理\n|---[优化][simple-utils-jackson]增加json字符串反序列化为对象方法\n|---[优化][simple-starter-grpc]优化迭代使用entryset()遍历，减少查找开销\n|---[优化][simple-starter-web]增加时间戳转换localdatetime的deserializer\n|---[优化][simple-starter-web]对应simple-starter-datasource增加通用crudoperations接口\n|---[功能][simple-starter-gateway]增加网关聚合文档兼容性，支持网关配置过滤器为->将请求的路径前缀去除\n|---[优化][simple-starter-web]避免重定向文档地址时的异常问题\n|---[功能][simple-base-generator]重构服务，拆分服务端及客户端。增加项目生成功能\n|---[优化][simple-base-generator]避免重新分配变量值\n|---[优化][simple-base-param]优化命名\n|---[功能][simple-base-generator]支持多表生成\n|---[版本]更新依赖  \n    |--- [dynamic datasource] 4.1.1 -> 4.1.2\n    |--- [redisson] 3.23.0 -> 3.23.1\n\t|--- [knife4j] 4.1.0 -> 4.3.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# 2022.4\n\n\n# 2022.4.1.0\n\n[已完成]simple系统2022.4.1.0\n|---[功能][simple-starter-redisson]创建cachemanager并配置cacheable注解常用配置及自定义cachename对应配置\n|---[优化][simple-starter-redisson]简化循环遍历和集合操作\n|---[功能][simple-starter-gateway]增加微服务网关基础模块\n|---[功能][simple-demo-gateway]增加微服务网关基础模块示例\n|---[优化][simple-starter-web]使用knife4j增强依赖关系\n|---[优化][simple-base-param]简化代码且明确指定依赖关系\n|---[优化][simple-starter-socket]优化代码提升简洁性，避免重新分配参数\n|---[优化][pom.xml]移除未使用到的依赖管理\n|---[优化][simple-demo-socket]优化接口请求示例\n|---[优化][simple-starter-socket]优化连接事件\n|---[优化][simple-starter-web]序列化增加默认将long类型转换为字符串，避免精度丢失\n|---[优化][simple-demo-redisson]优化日志输出\n|---[功能]增加postman接口测试列表及断言\n|---[优化][simple-starter-datasource]优化mapper-locations配置\n|---[功能]增加postman接口测试列表及断言\n|---[功能]增加jmeter接口并发测试及断言\n|---[优化][simple-starter-datasource]简化循环和条件判断\n|---[优化][simple-starter-grpc]优化\"field is never assigned\"提示\n|---[功能][simple-starter-redisson]分布式幂等增加若干时间内防重复提交功能\n|---[功能]增加postman接口:分布式幂等-等待expiretime过期后自动解锁\n|---[优化][simple-starter-dict]优化从本地文件读取字典项列表代码\n|---[优化][simple-starter-grpc]优化获取请求头代码\n|---[版本]增加部署包  \n    |---[redis] 7.0.11\n    |---[seaweedfs] 3.53\n|---[版本]更新依赖   \n    |--- [spring boot] 2.7.13 -> 2.7.14\n    |--- [spring cloud] 2021.0.7 -> 2021.0.8\n    |--- [spring cloud alibaba] 2021.0.4.0 -> 2021.0.5.0\n    |--- [netty-socketio] 2.0.2 -> 2.0.3\n    |--- [dynamic-datasource] 3.6.1 -> 4.1.1\n    |--- [io-grpc] 1.56.0 -> 1.56.1\n    |--- [redisson]  3.22.1 -> 3.23.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n\n\n\n# 2022.4.0.0\n\n[已完成]simple系统2022.4.0.0\n|---[功能][simple-dependencies]添加用于管理依赖组件版本模块\n|---[优化][simple-starter-encrypt]抛出更详细的异常类型\n|---[优化][simple-starter-grpc]优化代码格式以提高可读性\n|---[功能][simple-base-generator]将依赖项管理内容添加到pom.xml\n|---[优化][simple-base-param]增加工具类方法\n|---[优化][simple-starter-web]优化异常处理器\n|---[优化][simple-starter-redisson]优化异常处理\n|---[优化][simple-starter-redisson]简化缓存key;优化日志输出;优化代码\n|---[优化][simple-base-param]优化参数配置接口\n|---[优化][simple-starter-email]优化依赖项\n|---[优化][simple-starter-dict]优化使用静态变量避免重复创建对象\n|---[优化][simple-starter-dict]独立字典项获取逻辑方法\n|---[优化][simple-starter-grpc]独立获取超时时间、获取请求头方法\n|---[优化][simple-base-param]重命名实体以更好地符合其实际用途\n|---[优化][pom.xml]优化依赖关系版本管理\n|---[版本]更新部署包   \n    |---[nacos] 2.2.2 -> 2.2.3 \n|---[版本]更新依赖   \n    |--- [io-grpc] 1.55.1 -> 1.56.0\n    |--- [spring boot] 2.7.12 -> 2.7.13\n    |--- [redisson] 3.21.3 -> 3.22.1\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2022.3\n\n\n# 2022.3.5.2\n\n[已完成]simple系统2022.3.5.2发布 \n|---[优化][simple-base-generator]增加默认服务启动端口\n|---[功能][simple-base-generator]增加数据库版本管理脚本基线文件创建\n|---[功能][simple-base-generator]增加springboot自动配置元数据文件，便于服务集成\n|---[bug][simple-base-generator]修复代码生成配置扫描及包名导入\n\n\n1\n2\n3\n4\n5\n\n\n\n# 2022.3.5.0\n\n[已完成]simple系统2022.3.5.0发布 \n|---[优化]更新readme.md文件及一些community standards\n|---[优化][simple-starter-redisson]replace 'config' with a local variable\n|---[bug][simple-starter-grpc]修复clientcallstartheaders实现类为空时异常\n|---[优化][simple-starter-dict]更换使用reflectionutils\n|---[优化][simple-starter-encrypt]更换使用reflectionutils\n|---[优化][simple-base-param]移除未使用到的类\n|---[优化][demo-base-param]优化示例逻辑\n|---[优化][simple-starter-encrypt]优化异常抛出，调整为日志异常记录\n|---[优化][simple-base-param]工具类增加常用字段定义\n|---[优化][simple-starter-datasource]优化避免重新分配参数\n|---[优化][simple-starter-datasource]优化通过实现mapperlocationsprovider接口获取配置值支持和配置文件中的mapperlocations属性值同时生效，默认开启\n|---[优化][demo-base-param]优化精简工具类依赖\n|---[优化][simple-base-param]独立运行flyway实例，库表语句不再需要手动增加\n|---[优化][simple-demo-datasource]独立运行flyway实例，增加mapperlocationsprovider实现类\n|---[优化][simple-base-param]优化配置文件结构\n|---[优化][simple-base-generator]代码生成增加配置文件等\n|---[适配][demo-base-param] 创建list方法-适配jdk8\n|---[适配][simple-starter-datasource] 创建list方法-适配jdk8\n|---[适配][simple-base-generator]创建list方法-适配jdk8\n|---[适配][simple-base-generator]pom依赖-适配jdk8\n|---[适配][simple-starter-email] smtp邮件推送适配jdk8\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 2022.3.4.0\n\n[已完成]simple系统2023.3.4.0发布 \n|---[功能][simple-starter-email]增加推送邮件模块\n|---[功能][simple-demo-email]增加推送邮件模块使用示例\n|---[优化][simple-starter-email] 重构服务：简化方法、增加自定义发件人邮件配置参数方法\n|---[优化][simple-starter-datasource]使用更简洁的条件判断boolean;使用try-with-resources自动调用close()方法关闭资源;优化方法调用\n|---[功能][simple-starter-grpc]客户端增加设置请求头参数接口，服务端增加获取请求头参数接口\n|---[优化][simple-starter-grpc]优化客户端设置请求头参数接口 支持多个实现类，优化增加header后避免多次注解导致重复bean使用\n|---[功能][simple-demo-grpc-client]客户端增加设置请求头参数接口实现示例\n|---[功能][simple-demo-grpc-server]服务端增加获取请求头参数接口实现示例\n|---[优化][simple-starter-grpc]优化避免重复的异常抛出\n|---[优化][simple-starter-socket]移除自定义netty异常处理器\n|---[优化][simple-starter-socket]移除多余变量\n|---[bug][simple-demo-datasource]修复配置文件关闭自动创建库表未生效\n|---[优化][simple-starter-socket]优化日志输出信息\n|---[优化]优化readme.md文件\n|---[版本]更新部署包   \n    |---[nacos] 2.2.0 -> 2.2.2\n|---[版本]更新依赖   \n    |--- [redisson] 3.20.1 -> 3.21.3\n    |--- [netty-socketio] 1.7.25 -> 2.0.2\n    |--- [aws-java-sdk-s3] 1.12.446-> 1.12.469\n|---[适配][simple-starter-grpc] 请求头参数接口适配jdk8修改\n|---[适配][simple-starter-email] 推送邮件模块适配jdk8修改\n|---[适配]依赖\n    |---[spring-boot] 2.7.11 -> 2.7.12\n    |---[spring-cloud]2021.0.6 -> 2021.0.7\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n\n\n\n# 2022.3.3.0\n\n[已完成]simple系统2023.3.3.0发布\n|---[功能]同步2023.3.3.0所有功能模块到2022.3.3.0 适配jdk8及相关依赖\n|---[优化][simple-starter-grpc] 使用concurrenthashmap存储，避免多次注解同一个stub导致重复bean使用\n|---[优化][simple-starter-encrypt]  重命名simple-starter-encode模块为simple-starter-encrypt 更符合其实际目的\n|---[功能][simple-starter-datasource] 新增通过实现mapperlocationsprovider接口获取配置值，自动配置mybatisplus的mapper-locations属性\n|---[优化]格式化代码\n|---[版本]更新依赖   \n    |---[io-grpc] 1.54.0 -> 1.55.1  \n|---[适配][simple-base-generator]map.of适配jdk8修改\n|---[适配][simple-starter-datasource]parameterobject参数适配jdk8修改\n|---[适配][simple-starter-encrypt]switch case适配jdk8修改\n|---[适配][simple-starter-grpc]类型record适配jdk8修改 field.isaccessible()方法适配\n|---[适配][simple-starter-redisson]switch case适配jdk8修改\n|---[适配]依赖\n    |---[spring-boot]2.7.11\n    |---[spring-cloud]2021.0.6\n    |---[spring-cloud-alibaba]2021.0.4.0\n    |---[springdoc-openapi]1.7.0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 2022.3.2.0\n\n错误版本号，命名时标注错误，已修正为：2023.3.2.1\n\n\n# 2022.2\n\n\n# 2022.2.0.0\n\n[已完成]simple系统2022.2.0.0发布\n|---[simple-demo]精简simple-demo依赖\n|---[simple-demo]统一格式启动类名称\n|---[simple-starter]精简simple-starter依赖\n|---[simple-starter-web]增加全局异常处理器\n|---[simple-starter-socket]修复socketio.html测试页\n|---[simple-starter-datasource]增加集成分页插件\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 2022.1\n\n\n# 2022.1.2.0\n\n[已完成]simple系统2022.1.2.0发布\n|---[功能]常用starter模块支持jdk1.8\n|---[功能]发布simple-starter-web集成springboot web、接口文档\n|---[功能]发布simple-starter-redisson自定义注解简化使用：分布式锁、分布式幂等\n|---[功能]发布simple-starter-s3简化文件存储管理导入配置参数，封装管理接口\n|---[功能]发布simple-starter-socket长链接通讯及集群\n|---[功能]发布simple-starter-grpc自定义注解grpc简化使用：客户端、服务端\n|---[功能]发布simple-starter-datasource集成数据库连接\n|---[功能]发布simple-starter-freemarker集成模板引擎应用\n|---[功能]发布simple-starter-cloud常用微服务依赖集成：服务发现、远程配置中心等\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"贡献清单",frontmatter:{title:"贡献清单",date:"2023-03-14T14:00:06.000Z",permalink:"/pages/bf6444/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/02.%E8%B4%A1%E7%8C%AE%E6%B8%85%E5%8D%95.html",relativePath:"05.OpenSource/02.贡献清单.md",key:"v-691d6731",path:"/pages/bf6444/",headers:[{level:2,title:"贡献开源项目列表",slug:"贡献开源项目列表",normalizedTitle:"贡献开源项目列表",charIndex:2},{level:3,title:"若依 / RuoYi-Cloud",slug:"若依-ruoyi-cloud",normalizedTitle:"若依 / ruoyi-cloud",charIndex:15},{level:3,title:"baomidou / mybatis-plus",slug:"baomidou-mybatis-plus",normalizedTitle:"baomidou / mybatis-plus",charIndex:187},{level:3,title:"springdoc / springdoc-openapi",slug:"springdoc-springdoc-openapi",normalizedTitle:"springdoc / springdoc-openapi",charIndex:320},{level:2,title:"鸣谢",slug:"鸣谢",normalizedTitle:"鸣谢",charIndex:442}],headersStr:"贡献开源项目列表 若依 / RuoYi-Cloud baomidou / mybatis-plus springdoc / springdoc-openapi 鸣谢",content:'# 贡献开源项目列表\n\n\n# 若依 / RuoYi-Cloud\n\n参与贡献\n\n * WebSecurityConfigurerAdapter 在Spring Security 5.7过时   PR-Merged   PR-Merged-Plus\n * 升级spring-boot到最新版本2.7.5，更新MySQL Connector/J Maven坐标   PR\n\n\n# baomidou / mybatis-plus\n\n参与贡献\n\n * 修复在选择springdoc文档注释时entity描述异常问题   PR-Merged\n * 不支持promethus的HikariDataSource数据收集   issues   起因\n\n\n# springdoc / springdoc-openapi\n\n参与贡献\n\n * When I added a GetMapping for "/v3/api-docs", it caused an exception   issues\n\n\n# 鸣谢\n\n感谢 JetBrains OpenSourceSupport 所提供的支持\n\n',normalizedContent:'# 贡献开源项目列表\n\n\n# 若依 / ruoyi-cloud\n\n参与贡献\n\n * websecurityconfigureradapter 在spring security 5.7过时   pr-merged   pr-merged-plus\n * 升级spring-boot到最新版本2.7.5，更新mysql connector/j maven坐标   pr\n\n\n# baomidou / mybatis-plus\n\n参与贡献\n\n * 修复在选择springdoc文档注释时entity描述异常问题   pr-merged\n * 不支持promethus的hikaridatasource数据收集   issues   起因\n\n\n# springdoc / springdoc-openapi\n\n参与贡献\n\n * when i added a getmapping for "/v3/api-docs", it caused an exception   issues\n\n\n# 鸣谢\n\n感谢 jetbrains opensourcesupport 所提供的支持\n\n',charsets:{cjk:!0},lastUpdated:"2023/12/29, 08:56:40",lastUpdatedTimestamp:17038402e5},{title:"Simple-Starter概述",frontmatter:{title:"Simple-Starter概述",date:"2023-03-13T16:01:02.000Z",permalink:"/pages/8e9dc3p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/01.Simple-Starter%E6%A6%82%E8%BF%B0.html",relativePath:"05.OpenSource/03.2024.1.1.1/01.Simple-Starter概述.md",key:"v-7ea07f46",path:"/pages/8e9dc3p24111/",headers:[{level:2,title:"核心依赖",slug:"核心依赖",normalizedTitle:"核心依赖",charIndex:55},{level:2,title:"Starter自动装配模块",slug:"starter自动装配模块",normalizedTitle:"starter自动装配模块",charIndex:246},{level:2,title:"Base服务类模块",slug:"base服务类模块",normalizedTitle:"base服务类模块",charIndex:1374},{level:2,title:"Utils工具类模块",slug:"utils工具类模块",normalizedTitle:"utils工具类模块",charIndex:1935},{level:2,title:"基础配置模块",slug:"基础配置模块",normalizedTitle:"基础配置模块",charIndex:2085},{level:2,title:"仓库地址",slug:"仓库地址",normalizedTitle:"仓库地址",charIndex:2300},{level:2,title:"依赖关系",slug:"依赖关系",normalizedTitle:"依赖关系",charIndex:2585},{level:2,title:"Base服务端",slug:"base服务端",normalizedTitle:"base服务端",charIndex:2596},{level:2,title:"Demo示例",slug:"demo示例",normalizedTitle:"demo示例",charIndex:2902},{level:2,title:"Simple支持配置项",slug:"simple支持配置项",normalizedTitle:"simple支持配置项",charIndex:4267},{level:2,title:"启动Service需修改的配置",slug:"启动service需修改的配置",normalizedTitle:"启动service需修改的配置",charIndex:9562},{level:3,title:"BaseConfigSpringbootApplication",slug:"baseconfigspringbootapplication",normalizedTitle:"baseconfigspringbootapplication",charIndex:9601},{level:3,title:"BaseS3ServiceApplication",slug:"bases3serviceapplication",normalizedTitle:"bases3serviceapplication",charIndex:10267},{level:3,title:"BaseDictServiceApplication",slug:"basedictserviceapplication",normalizedTitle:"basedictserviceapplication",charIndex:10736},{level:2,title:"启动Demo需修改的配置",slug:"启动demo需修改的配置",normalizedTitle:"启动demo需修改的配置",charIndex:11451}],headersStr:"核心依赖 Starter自动装配模块 Base服务类模块 Utils工具类模块 基础配置模块 仓库地址 依赖关系 Base服务端 Demo示例 Simple支持配置项 启动Service需修改的配置 BaseConfigSpringbootApplication BaseS3ServiceApplication BaseDictServiceApplication 启动Demo需修改的配置",content:"github: https://github.com/ok1996/ok-system-simple\n\n\n# 核心依赖\n\n依赖                     版本\nJava                   17\nSpring Boot            3.2.2\nSpring Cloud           2023.0.0\nSpring Cloud Alibaba   2022.0.0.0\nOk System Simple       2024.1.1.1\n\n\n# Starter自动装配模块\n\n模块名称                        使用场景       说明\nsimple-starter-web          Web应用      SpringBoot Web、集成接口文档、序列化格式转换、\n                                       响应信息主体、全局异常处理器、Jackson工具类\nsimple-starter-redisson     锁及缓存       注解使用：分布式锁、分布式幂等、分布式限流器;\n                                       Cacheable注解常用配置及自定义CacheName过期时间\nsimple-starter-s3           文件管理客户端    初始化客户端、提供基础服务方法\nsimple-starter-socket       长链接通讯及集群   集群使用redis订阅及广播机制，无redis自动单机\nsimple-starter-grpc         远程调用协议接口   自定义注解Grpc简化使用：客户端、服务端\nsimple-starter-datasource   数据库连接应用    HikariCP、P6spy、自动创建数据库表、通用CURD控制层\nsimple-starter-freemarker   模板引擎应用     简化导入配置参数\nsimple-starter-cloud        微服务应用      微服务常用依赖集成：服务发现、远程配置中心等\nsimple-starter-gateway      微服务网关      微服务接口网关：集成微服务文档网关\nsimple-starter-encrypt      加密         注解：加密脱敏（加密规则有通用模板、或自定义）\n                                       注解：接口请求参数或返回参数Rsa加密解密\nsimple-starter-dict         字典         注解字典翻译（字典支持文件json、调用接口或自定义实现）\n                                       （服务类返回参数支持单体字段、列表、实体嵌套）\nsimple-starter-email        邮件         Smtp邮件推送\nsimple-starter-package      构建打包       自定义Maven构建打包逻辑，将常用脚本及可执行文件统一打包\n\n\n# Base服务类模块\n\n模块名称                            使用场景         说明\nsimple-base-config-api          基础配置-客户端     启动自动初始化配置、可选覆盖生成的依赖客户端\nsimple-base-config-service      基础配置-服务端     启动自动初始化配置、可选覆盖生成的依赖服务端\nsimple-base-s3-api              文件存储服务-客户端   提供文件管理服务及接口客户端\nsimple-base-s3-service          文件存储服务-服务端   提供文件管理服务及接口服务端\nsimple-base-dict-api            字典服务-客户端     提供字典服务管理客户端\nsimple-base-dict-service        字典服务-服务端     提供字典服务管理服务端\nsimple-base-generator-api       代码生成-客户端     提供数据库表代码生成工具类及实体对象\nsimple-base-generator-service   代码生成-服务端     提供根据参数初始化项目代码生成服务端\n\n\n# Utils工具类模块\n\n模块名称                   使用场景     说明\nsimple-utils-jackson   Json工具   提供 Json 序列化和反序列化功能的工具类\nsimple-utils-common    通用工具     提供常用及通用的工具类\n\n\n# 基础配置模块\n\n模块名称                  使用场景     说明\nsimple-parent         项目父级管理   可用于管理项目的通用配置和依赖版本。统一管理项目的构建配置、依赖版本和插件版本\nsimple-dependencies   项目依赖管理   可用于集中管理项目中所有模块的依赖版本。定义了各个模块所需的依赖版本，并通过dependencyManagement标签进行统一管理\n\n\n# 仓库地址\n\n例 simple-starter-web\n最新版本号 2024.1.1.1\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-web</artifactId>\n            <version>2024.1.1.1</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 依赖关系\n\n\n\n\n# Base服务端\n\n服务                              HTTP端口号   端口号   说明\nsimple-base-config-service      9010            服务类-基础配置服务端\nsimple-base-s3-service          9020            服务类-文件管理服务端\nsimple-base-dict-service        9030            服务类-字典管理服务端\nsimple-base-generator-service   9040            服务类-工程代码生成服务端\n\n\n# Demo示例\n\n服务                        HTTP端口号   端口号            说明\nsimple-demo-boot          11010                    自动装配类-空项目启动示例\nsimple-demo-redisson      11020                    自动装配类-锁使用示例\nsimple-demo-s3            11030                    自动装配类-文件管理客户端基础使用示例\nsimple-demo-socket-one    11040     SOCKET:12010   自动装配类-长连接通讯（单体/集群）1使用示例\nsimple-demo-socket-two    11050     SOCKET:12020   自动装配类-长连接通讯（单体/集群）2使用示例\nsimple-demo-grpc-server   11060     GRPC:12030     自动装配类-Grpc服务端启动示例\nsimple-demo-grpc-client   11070                    自动装配类-Grpc客户端使用示例\nsimple-demo-datasource    11080                    自动装配类-数据库连接查询使用示例\nsimple-demo-freemarker    11090                    自动装配类-freemarker页面使用示例\nsimple-demo-cloud         11100                    自动装配类-微服务注册中心及配置中心使用示例\nsimple-demo-gateway       11000                    自动装配类-微服务网关使用示例\nsimple-demo-encrypt       11110                    自动装配类-注解字段加密脱敏使用示例\nsimple-demo-dict          11120                    自动装配类-注解字段字典翻译使用示例\nsimple-demo-email         11130                    自动装配类-邮件发送使用示例\nsimple-demo-package       11140                    自动装配类-构建打包使用示例\ndemo-base-config          13010                    服务类-基础参数使用示例\ndemo-base-generator       13020                    服务类-代码生成使用示例\ndemo-base-s3              13030                    服务类-文件管理使用示例\ndemo-base-dict            13040                    服务类-字典管理使用示例\n\n\n# Simple支持配置项\n\nsimple:\n  ## simple-starter-web\n  openApi:\n    title: 接口文档示例\n    description: 接口文档示例描述\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: git@ok96.cn\n  handler:\n    exception:\n      #全局异常处理器 缺省项为true \n      enabled: true\n  jackson:\n    serialize:\n      # 序列化格式转换 缺省项为true \n      enabled: true\n  ## simple-starter-redisson\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterSlave:\n        masterAddress: redis://127.0.0.1:6379\n        slaveAddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelMasterName: myMaster\n        sentinelAddresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusterAddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n    #Cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cacheName及过期时间\n        cacheExpiresAfterFiveMinutes:\n          ttl: 300000\n          maxIdleTime: 300000\n        cacheExpiresAfterTenSecond:\n          ttl: 10000\n          maxIdleTime: 10000\n  ## simple-starter-socket\n  socket:\n    #长链接通讯及集群 缺省项为false\n    enabled: true\n    port: 12010\n    upgradeTimeout: 1000000\n    pingTimeout: 6000000\n    pingInterval: 25000\n  ## simple-starter-s3\n  s3:\n    #文件存储管理 缺省项为true\n    enabled: true\n    accessKey: 3sZWX1PLuCYNqzMw\n    secretKey: vuLhQbT9iK1EunaLGETtytMBjJTxoHpw\n    endpoint: 127.0.0.1:9000\n  ## simple-starter-grpc\n  grpc:\n    client:\n      #Grpc客户端 缺省项为false \n      enabled: true\n      #设置Grpc调用超时时间 缺省项为5000毫秒\n      timeout: 5000\n      channel:\n        local-grpc-server:\n          address: '127.0.0.1:12030'\n    server:\n      #Grpc服务端 缺省项为false \n      enabled: true\n      port: 12030\n  ## simple-starter-datasource\n  datasource:\n    #自动创建数据库 缺省项为true \n    autoCreateDatabase: true\n    locations:\n      ## 实现接口追加配置文件中mapper-locations属性 缺省项为true\n      enabled: true\n  ## simple-starter-freemarker\n  freemarker:  \n    resourceVoList:  \n        # resourceHandler：访问的前缀 resourceLocations：真实路径\n      - resourceHandler:  /layui/**\n        resourceLocations:  classpath:/plugin/layui/\n      - resourceHandler:  /Users/**\n        resourceLocations:  file:/Users/\n  ## simple-starter-encrypt\n  encrypt:\n    desensitized:\n      ##脱敏 缺省项为true\n      enabled: true\n    rsa:\n      ## 接口加密\n      secureParams:\n        ## 接口请求参数或返回参数Rsa加密解密 缺省项为true\n        enabled: true\n        ## URL查询参数的请求字段 例：https://ok96.cn/api?encryptedData=xxxxxxx\n        urlField: encryptedData\n\t\t## 默认关闭全局使用Mapping注解接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: false\n      ## 时间戳校验\n      timestampValidation:\n        ## 默认关闭校验校验时间戳 缺省项为false\n        enabled: true\n        ## 校验时间戳的差值 毫秒 默认5秒\n        expiryMillis: 60000\n      ## 公钥 \n      publicKey: |\n        MIIBIjAN....\n        wQIDAQAB\n      ## 私钥 \n      privateKey: |\n        MIIEvgIBAD...\n        s3pFfsfHFj\n  ## simple-starter-dist\n  dict:\n    ##字典 缺省项为true\n    enabled: false\n    ## 调用远程接口获取字典项列表实现类请求接口地址前缀（若为空则注解填写需要完整接口路径）\n    remoteBaseUrl: http://127.0.0.1:11120\n    ## localDictServiceImpl实现类的本地字典文件目录，默认/dict.json。注：resource资源下\n    resourceDictFileDir: /dict.json\n  ## simple-starter-email\n  email:\n    config:\n      ##SMTP服务器host\n      smtpHost:\n      ##SMTP服务器端口号\n      smtpPort:\n      ##发件人邮箱用户名\n      username:\n      ##发件人邮箱密码\n      password:\n      ##发件人邮箱地址\n      fromEmail:\n  base:\n    #simple-base-generator\n    generator:\n      project:\n        # 初始化压缩包地址\n        initProjectZipUrl: /temp/initProject.zip\n        # 解压覆盖生成项目压缩包操作的临时目录\n        newProjectAndZipTempPath: /temp/simple/new\n  feign:\n    # 开启日志记录，缺省默认开启\n\t# simple-starter-cloud\n    logger:\n      enabled: true\n    base:\n\t  ## simple-base-config-service\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9010\n\t  ## simple-base-s3-service\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9020\n\t  ## simple-base-dict-service\n      dict:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9030\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n\t## simple-base-config-service simple-base-s3-service simple-base-dict-service\n    service:\n      enabled: false\nlogging:\n  level:\n    # 声明包位置的Feign日志级别为debug，打印日志详情\n    cn:\n      iosd: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n\n\n\n# 启动Service需修改的配置\n\n * Add VM options\n\n\n# BaseConfigSpringbootApplication\n\n必填\n\n-Dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n可选\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# BaseS3ServiceApplication\n\nBaseS3ServiceApplication-必填\n\n-Dsimple.s3.accessKey= \n-Dsimple.s3.secretKey= \n-Dsimple.s3.endpoint= \n\n\n1\n2\n3\n\n\nBaseS3ServiceApplication-可选\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# BaseDictServiceApplication\n\nBaseDictServiceApplication-必填\n\n-Dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nBaseDictServiceApplication-可选\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 启动Demo需修改的配置\n\n * Add VM options\n\nDemoCloudApplication\n\n-Dspring.cloud.nacos.server-addr=\n-Dspring.cloud.nacos.username=nacos\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\nDemoGatewayApplication\n\n-Dspring.cloud.nacos.server-addr=\n-Dspring.cloud.nacos.username=nacos\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\nDemoDatasourceApplication\n\n-Dspring.datasource.dynamic.datasource.master.url=\n-Dspring.datasource.dynamic.datasource.master.username=root\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nDemoRedissonApplication\n\n-Dsimple.redisson.config.standalone.address=\n-Dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\nDemoS3Application\n\n-Dsimple.s3.accessKey=\n-Dsimple.s3.secretKey=\n-Dsimple.s3.endpoint=\n\n\n1\n2\n3\n\n\nDemoSocketOneApplication\n\n-Dsimple.redisson.config.standalone.address=\n-Dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\nDemoSocketTwoApplication\n\n-Dsimple.redisson.config.standalone.address=\n-Dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\nDemoEmailApplication\n\n-Dsimple.email.smtpHost=\n-Dsimple.email.smtpPort=\n-Dsimple.email.username=\n-Dsimple.email.password=\n-Dsimple.email.fromEmail=\n\n\n1\n2\n3\n4\n5\n\n\nBaseConfigApplication\n\n-Dspring.datasource.dynamic.datasource.master.url=\n-Dspring.datasource.dynamic.datasource.master.username=root\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nBaseGeneratorApplication\n\n-Dspring.datasource.dynamic.datasource.master.url=\n-Dspring.datasource.dynamic.datasource.master.username=root\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nBaseGeneratorTestApplication -修改代码\n\nMybatisGeneratorVo.setDataBaseUrl()\nMybatisGeneratorVo.setDataBaseUserName()\nMybatisGeneratorVo.setDataBasePassword()\n\n\n1\n2\n3\n\n\nBaseS3Application\n\n-Dsimple.s3.accessKey=\n-Dsimple.s3.secretKey=\n-Dsimple.s3.endpoint=\n\n\n1\n2\n3\n\n\nBaseDictApplication\n\n-Dspring.datasource.dynamic.datasource.master.url=\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n",normalizedContent:"github: https://github.com/ok1996/ok-system-simple\n\n\n# 核心依赖\n\n依赖                     版本\njava                   17\nspring boot            3.2.2\nspring cloud           2023.0.0\nspring cloud alibaba   2022.0.0.0\nok system simple       2024.1.1.1\n\n\n# starter自动装配模块\n\n模块名称                        使用场景       说明\nsimple-starter-web          web应用      springboot web、集成接口文档、序列化格式转换、\n                                       响应信息主体、全局异常处理器、jackson工具类\nsimple-starter-redisson     锁及缓存       注解使用：分布式锁、分布式幂等、分布式限流器;\n                                       cacheable注解常用配置及自定义cachename过期时间\nsimple-starter-s3           文件管理客户端    初始化客户端、提供基础服务方法\nsimple-starter-socket       长链接通讯及集群   集群使用redis订阅及广播机制，无redis自动单机\nsimple-starter-grpc         远程调用协议接口   自定义注解grpc简化使用：客户端、服务端\nsimple-starter-datasource   数据库连接应用    hikaricp、p6spy、自动创建数据库表、通用curd控制层\nsimple-starter-freemarker   模板引擎应用     简化导入配置参数\nsimple-starter-cloud        微服务应用      微服务常用依赖集成：服务发现、远程配置中心等\nsimple-starter-gateway      微服务网关      微服务接口网关：集成微服务文档网关\nsimple-starter-encrypt      加密         注解：加密脱敏（加密规则有通用模板、或自定义）\n                                       注解：接口请求参数或返回参数rsa加密解密\nsimple-starter-dict         字典         注解字典翻译（字典支持文件json、调用接口或自定义实现）\n                                       （服务类返回参数支持单体字段、列表、实体嵌套）\nsimple-starter-email        邮件         smtp邮件推送\nsimple-starter-package      构建打包       自定义maven构建打包逻辑，将常用脚本及可执行文件统一打包\n\n\n# base服务类模块\n\n模块名称                            使用场景         说明\nsimple-base-config-api          基础配置-客户端     启动自动初始化配置、可选覆盖生成的依赖客户端\nsimple-base-config-service      基础配置-服务端     启动自动初始化配置、可选覆盖生成的依赖服务端\nsimple-base-s3-api              文件存储服务-客户端   提供文件管理服务及接口客户端\nsimple-base-s3-service          文件存储服务-服务端   提供文件管理服务及接口服务端\nsimple-base-dict-api            字典服务-客户端     提供字典服务管理客户端\nsimple-base-dict-service        字典服务-服务端     提供字典服务管理服务端\nsimple-base-generator-api       代码生成-客户端     提供数据库表代码生成工具类及实体对象\nsimple-base-generator-service   代码生成-服务端     提供根据参数初始化项目代码生成服务端\n\n\n# utils工具类模块\n\n模块名称                   使用场景     说明\nsimple-utils-jackson   json工具   提供 json 序列化和反序列化功能的工具类\nsimple-utils-common    通用工具     提供常用及通用的工具类\n\n\n# 基础配置模块\n\n模块名称                  使用场景     说明\nsimple-parent         项目父级管理   可用于管理项目的通用配置和依赖版本。统一管理项目的构建配置、依赖版本和插件版本\nsimple-dependencies   项目依赖管理   可用于集中管理项目中所有模块的依赖版本。定义了各个模块所需的依赖版本，并通过dependencymanagement标签进行统一管理\n\n\n# 仓库地址\n\n例 simple-starter-web\n最新版本号 2024.1.1.1\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-web</artifactid>\n            <version>2024.1.1.1</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 依赖关系\n\n\n\n\n# base服务端\n\n服务                              http端口号   端口号   说明\nsimple-base-config-service      9010            服务类-基础配置服务端\nsimple-base-s3-service          9020            服务类-文件管理服务端\nsimple-base-dict-service        9030            服务类-字典管理服务端\nsimple-base-generator-service   9040            服务类-工程代码生成服务端\n\n\n# demo示例\n\n服务                        http端口号   端口号            说明\nsimple-demo-boot          11010                    自动装配类-空项目启动示例\nsimple-demo-redisson      11020                    自动装配类-锁使用示例\nsimple-demo-s3            11030                    自动装配类-文件管理客户端基础使用示例\nsimple-demo-socket-one    11040     socket:12010   自动装配类-长连接通讯（单体/集群）1使用示例\nsimple-demo-socket-two    11050     socket:12020   自动装配类-长连接通讯（单体/集群）2使用示例\nsimple-demo-grpc-server   11060     grpc:12030     自动装配类-grpc服务端启动示例\nsimple-demo-grpc-client   11070                    自动装配类-grpc客户端使用示例\nsimple-demo-datasource    11080                    自动装配类-数据库连接查询使用示例\nsimple-demo-freemarker    11090                    自动装配类-freemarker页面使用示例\nsimple-demo-cloud         11100                    自动装配类-微服务注册中心及配置中心使用示例\nsimple-demo-gateway       11000                    自动装配类-微服务网关使用示例\nsimple-demo-encrypt       11110                    自动装配类-注解字段加密脱敏使用示例\nsimple-demo-dict          11120                    自动装配类-注解字段字典翻译使用示例\nsimple-demo-email         11130                    自动装配类-邮件发送使用示例\nsimple-demo-package       11140                    自动装配类-构建打包使用示例\ndemo-base-config          13010                    服务类-基础参数使用示例\ndemo-base-generator       13020                    服务类-代码生成使用示例\ndemo-base-s3              13030                    服务类-文件管理使用示例\ndemo-base-dict            13040                    服务类-字典管理使用示例\n\n\n# simple支持配置项\n\nsimple:\n  ## simple-starter-web\n  openapi:\n    title: 接口文档示例\n    description: 接口文档示例描述\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: git@ok96.cn\n  handler:\n    exception:\n      #全局异常处理器 缺省项为true \n      enabled: true\n  jackson:\n    serialize:\n      # 序列化格式转换 缺省项为true \n      enabled: true\n  ## simple-starter-redisson\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterslave:\n        masteraddress: redis://127.0.0.1:6379\n        slaveaddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelmastername: mymaster\n        sentineladdresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusteraddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n    #cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cachename及过期时间\n        cacheexpiresafterfiveminutes:\n          ttl: 300000\n          maxidletime: 300000\n        cacheexpiresaftertensecond:\n          ttl: 10000\n          maxidletime: 10000\n  ## simple-starter-socket\n  socket:\n    #长链接通讯及集群 缺省项为false\n    enabled: true\n    port: 12010\n    upgradetimeout: 1000000\n    pingtimeout: 6000000\n    pinginterval: 25000\n  ## simple-starter-s3\n  s3:\n    #文件存储管理 缺省项为true\n    enabled: true\n    accesskey: 3szwx1plucynqzmw\n    secretkey: vulhqbt9ik1eunalgettytmbjjtxohpw\n    endpoint: 127.0.0.1:9000\n  ## simple-starter-grpc\n  grpc:\n    client:\n      #grpc客户端 缺省项为false \n      enabled: true\n      #设置grpc调用超时时间 缺省项为5000毫秒\n      timeout: 5000\n      channel:\n        local-grpc-server:\n          address: '127.0.0.1:12030'\n    server:\n      #grpc服务端 缺省项为false \n      enabled: true\n      port: 12030\n  ## simple-starter-datasource\n  datasource:\n    #自动创建数据库 缺省项为true \n    autocreatedatabase: true\n    locations:\n      ## 实现接口追加配置文件中mapper-locations属性 缺省项为true\n      enabled: true\n  ## simple-starter-freemarker\n  freemarker:  \n    resourcevolist:  \n        # resourcehandler：访问的前缀 resourcelocations：真实路径\n      - resourcehandler:  /layui/**\n        resourcelocations:  classpath:/plugin/layui/\n      - resourcehandler:  /users/**\n        resourcelocations:  file:/users/\n  ## simple-starter-encrypt\n  encrypt:\n    desensitized:\n      ##脱敏 缺省项为true\n      enabled: true\n    rsa:\n      ## 接口加密\n      secureparams:\n        ## 接口请求参数或返回参数rsa加密解密 缺省项为true\n        enabled: true\n        ## url查询参数的请求字段 例：https://ok96.cn/api?encrypteddata=xxxxxxx\n        urlfield: encrypteddata\n\t\t## 默认关闭全局使用mapping注解接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: false\n      ## 时间戳校验\n      timestampvalidation:\n        ## 默认关闭校验校验时间戳 缺省项为false\n        enabled: true\n        ## 校验时间戳的差值 毫秒 默认5秒\n        expirymillis: 60000\n      ## 公钥 \n      publickey: |\n        miibijan....\n        wqidaqab\n      ## 私钥 \n      privatekey: |\n        miievgibad...\n        s3pffsfhfj\n  ## simple-starter-dist\n  dict:\n    ##字典 缺省项为true\n    enabled: false\n    ## 调用远程接口获取字典项列表实现类请求接口地址前缀（若为空则注解填写需要完整接口路径）\n    remotebaseurl: http://127.0.0.1:11120\n    ## localdictserviceimpl实现类的本地字典文件目录，默认/dict.json。注：resource资源下\n    resourcedictfiledir: /dict.json\n  ## simple-starter-email\n  email:\n    config:\n      ##smtp服务器host\n      smtphost:\n      ##smtp服务器端口号\n      smtpport:\n      ##发件人邮箱用户名\n      username:\n      ##发件人邮箱密码\n      password:\n      ##发件人邮箱地址\n      fromemail:\n  base:\n    #simple-base-generator\n    generator:\n      project:\n        # 初始化压缩包地址\n        initprojectzipurl: /temp/initproject.zip\n        # 解压覆盖生成项目压缩包操作的临时目录\n        newprojectandziptemppath: /temp/simple/new\n  feign:\n    # 开启日志记录，缺省默认开启\n\t# simple-starter-cloud\n    logger:\n      enabled: true\n    base:\n\t  ## simple-base-config-service\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9010\n\t  ## simple-base-s3-service\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9020\n\t  ## simple-base-dict-service\n      dict:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9030\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n\t## simple-base-config-service simple-base-s3-service simple-base-dict-service\n    service:\n      enabled: false\nlogging:\n  level:\n    # 声明包位置的feign日志级别为debug，打印日志详情\n    cn:\n      iosd: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n\n\n\n# 启动service需修改的配置\n\n * add vm options\n\n\n# baseconfigspringbootapplication\n\n必填\n\n-dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true&servertimezone=gmt%2b8\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n可选\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# bases3serviceapplication\n\nbases3serviceapplication-必填\n\n-dsimple.s3.accesskey= \n-dsimple.s3.secretkey= \n-dsimple.s3.endpoint= \n\n\n1\n2\n3\n\n\nbases3serviceapplication-可选\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# basedictserviceapplication\n\nbasedictserviceapplication-必填\n\n-dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true&servertimezone=gmt%2b8\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nbasedictserviceapplication-可选\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 启动demo需修改的配置\n\n * add vm options\n\ndemocloudapplication\n\n-dspring.cloud.nacos.server-addr=\n-dspring.cloud.nacos.username=nacos\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\ndemogatewayapplication\n\n-dspring.cloud.nacos.server-addr=\n-dspring.cloud.nacos.username=nacos\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\ndemodatasourceapplication\n\n-dspring.datasource.dynamic.datasource.master.url=\n-dspring.datasource.dynamic.datasource.master.username=root\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\ndemoredissonapplication\n\n-dsimple.redisson.config.standalone.address=\n-dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\ndemos3application\n\n-dsimple.s3.accesskey=\n-dsimple.s3.secretkey=\n-dsimple.s3.endpoint=\n\n\n1\n2\n3\n\n\ndemosocketoneapplication\n\n-dsimple.redisson.config.standalone.address=\n-dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\ndemosockettwoapplication\n\n-dsimple.redisson.config.standalone.address=\n-dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\ndemoemailapplication\n\n-dsimple.email.smtphost=\n-dsimple.email.smtpport=\n-dsimple.email.username=\n-dsimple.email.password=\n-dsimple.email.fromemail=\n\n\n1\n2\n3\n4\n5\n\n\nbaseconfigapplication\n\n-dspring.datasource.dynamic.datasource.master.url=\n-dspring.datasource.dynamic.datasource.master.username=root\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nbasegeneratorapplication\n\n-dspring.datasource.dynamic.datasource.master.url=\n-dspring.datasource.dynamic.datasource.master.username=root\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nbasegeneratortestapplication -修改代码\n\nmybatisgeneratorvo.setdatabaseurl()\nmybatisgeneratorvo.setdatabaseusername()\nmybatisgeneratorvo.setdatabasepassword()\n\n\n1\n2\n3\n\n\nbases3application\n\n-dsimple.s3.accesskey=\n-dsimple.s3.secretkey=\n-dsimple.s3.endpoint=\n\n\n1\n2\n3\n\n\nbasedictapplication\n\n-dspring.datasource.dynamic.datasource.master.url=\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n",charsets:{cjk:!0},lastUpdated:"2024/02/20, 02:13:45",lastUpdatedTimestamp:1708395225e3},{title:"simple-starter-web",frontmatter:{title:"simple-starter-web",date:"2023-03-31T15:09:48.000Z",permalink:"/pages/e96f70p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/01.simple-starter-web.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/01.simple-starter-web.md",key:"v-732ec28a",path:"/pages/e96f70p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:76},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:319},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:709},{level:3,title:"全局异常处理器",slug:"全局异常处理器",normalizedTitle:"全局异常处理器",charIndex:53},{level:3,title:"序列化格式转换",slug:"序列化格式转换",normalizedTitle:"序列化格式转换",charIndex:33},{level:3,title:"通用响应信息主体",slug:"通用响应信息主体",normalizedTitle:"通用响应信息主体",charIndex:915},{level:3,title:"接口文档",slug:"接口文档",normalizedTitle:"接口文档",charIndex:23},{level:4,title:"访问路径",slug:"访问路径",normalizedTitle:"访问路径",charIndex:1044},{level:4,title:"关闭SwaggerUi",slug:"关闭swaggerui",normalizedTitle:"关闭swaggerui",charIndex:1110},{level:4,title:"关闭 /v3/api-docs endpoint",slug:"关闭-v3-api-docs-endpoint",normalizedTitle:"关闭 /v3/api-docs endpoint",charIndex:1179},{level:4,title:"SpringDoc文档",slug:"springdoc文档",normalizedTitle:"springdoc文档",charIndex:1258}],headersStr:"简介 引入依赖 配置项 功能项 全局异常处理器 序列化格式转换 通用响应信息主体 接口文档 访问路径 关闭SwaggerUi 关闭 /v3/api-docs endpoint SpringDoc文档",content:'# 简介\n\n集成SpringBoot Web和接口文档、时间类型的序列化格式转换\n定义通用的响应信息主体、全局异常处理器、Jackson工具类\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-web</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-web\n  openApi:\n    title: 接口文档示例\n    description: 接口文档示例描述\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: git@ok96.cn\n  handler:\n    exception:\n      #全局异常处理器 缺省项为true \n      enabled: true\n  jackson:\n    serialize:\n      # 序列化格式转换 缺省项为true \n      enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 功能项\n\n\n# 全局异常处理器\n\n拦截列表\n\n * Exception.class\n * RuntimeException.class\n * HttpRequestMethodNotSupportedException.class\n\n\n# 序列化格式转换\n\n * 将LocalTime类型转换为Long\n * 将LocalDate类型转换为Long\n * 将LocalDateTime类型转换为Long\n\n\n# 通用响应信息主体\n\n实体类名称：Response 返回格式：\n\n{\n\t"code": 0,\n\t"msg": "",\n\t"data": {\n\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 接口文档\n\n依赖：Springdoc+knife4j ui\n\n# 访问路径\n\n * host:port/swagger-ui/index.html\n * host:port/doc.html\n\n# 关闭SwaggerUi\n\nspringdoc:\n  swagger-ui:\n    enabled: false\n\n\n1\n2\n3\n\n\n# 关闭 /v3/api-docs endpoint\n\nspringdoc:\n  apiDocs:\n    enabled: false\n\n\n1\n2\n3\n\n\n# SpringDoc文档\n\nSpringdoc',normalizedContent:'# 简介\n\n集成springboot web和接口文档、时间类型的序列化格式转换\n定义通用的响应信息主体、全局异常处理器、jackson工具类\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-web</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-web\n  openapi:\n    title: 接口文档示例\n    description: 接口文档示例描述\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: git@ok96.cn\n  handler:\n    exception:\n      #全局异常处理器 缺省项为true \n      enabled: true\n  jackson:\n    serialize:\n      # 序列化格式转换 缺省项为true \n      enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 功能项\n\n\n# 全局异常处理器\n\n拦截列表\n\n * exception.class\n * runtimeexception.class\n * httprequestmethodnotsupportedexception.class\n\n\n# 序列化格式转换\n\n * 将localtime类型转换为long\n * 将localdate类型转换为long\n * 将localdatetime类型转换为long\n\n\n# 通用响应信息主体\n\n实体类名称：response 返回格式：\n\n{\n\t"code": 0,\n\t"msg": "",\n\t"data": {\n\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 接口文档\n\n依赖：springdoc+knife4j ui\n\n# 访问路径\n\n * host:port/swagger-ui/index.html\n * host:port/doc.html\n\n# 关闭swaggerui\n\nspringdoc:\n  swagger-ui:\n    enabled: false\n\n\n1\n2\n3\n\n\n# 关闭 /v3/api-docs endpoint\n\nspringdoc:\n  apidocs:\n    enabled: false\n\n\n1\n2\n3\n\n\n# springdoc文档\n\nspringdoc',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-redisson",frontmatter:{title:"simple-starter-redisson",date:"2023-03-31T16:53:15.000Z",permalink:"/pages/abc4e3p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/02.simple-starter-redisson.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/02.simple-starter-redisson.md",key:"v-377bca40",path:"/pages/abc4e3p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"分布式幂等和锁的主要区别",slug:"分布式幂等和锁的主要区别",normalizedTitle:"分布式幂等和锁的主要区别",charIndex:124},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:279},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:527},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:1744},{level:3,title:"注解",slug:"注解",normalizedTitle:"注解",charIndex:9},{level:4,title:"分布式幂等",slug:"分布式幂等",normalizedTitle:"分布式幂等",charIndex:21},{level:5,title:"使用示例",slug:"使用示例",normalizedTitle:"使用示例",charIndex:1795},{level:5,title:"各字段说明",slug:"各字段说明",normalizedTitle:"各字段说明",charIndex:2131},{level:5,title:"key说明",slug:"key说明",normalizedTitle:"key说明",charIndex:2457},{level:5,title:"MD5说明",slug:"md5说明",normalizedTitle:"md5说明",charIndex:2758},{level:5,title:"解锁说明",slug:"解锁说明",normalizedTitle:"解锁说明",charIndex:3113},{level:5,title:"使用说明",slug:"使用说明",normalizedTitle:"使用说明",charIndex:3234},{level:4,title:"分布式锁",slug:"分布式锁",normalizedTitle:"分布式锁",charIndex:16},{level:5,title:"使用示例",slug:"使用示例-2",normalizedTitle:"使用示例",charIndex:1795},{level:5,title:"各字段说明",slug:"各字段说明-2",normalizedTitle:"各字段说明",charIndex:2131},{level:5,title:"key说明",slug:"key说明-2",normalizedTitle:"key说明",charIndex:2457},{level:5,title:"MD5说明",slug:"md5说明-2",normalizedTitle:"md5说明",charIndex:2758},{level:5,title:"解锁说明",slug:"解锁说明-2",normalizedTitle:"解锁说明",charIndex:3113},{level:4,title:"分布式限流器",slug:"分布式限流器",normalizedTitle:"分布式限流器",charIndex:27},{level:5,title:"使用示例",slug:"使用示例-3",normalizedTitle:"使用示例",charIndex:1795},{level:5,title:"各字段说明",slug:"各字段说明-3",normalizedTitle:"各字段说明",charIndex:2131},{level:5,title:"key说明",slug:"key说明-3",normalizedTitle:"key说明",charIndex:2457},{level:5,title:"MD5说明",slug:"md5说明-3",normalizedTitle:"md5说明",charIndex:2758},{level:5,title:"限流类型",slug:"限流类型",normalizedTitle:"限流类型",charIndex:4978},{level:3,title:"服务类",slug:"服务类",normalizedTitle:"服务类",charIndex:46},{level:4,title:"分布式锁服务类",slug:"分布式锁服务类",normalizedTitle:"分布式锁服务类",charIndex:5287},{level:4,title:"缓存服务类",slug:"缓存服务类",normalizedTitle:"缓存服务类",charIndex:5933},{level:3,title:"获取Redisson客户端",slug:"获取redisson客户端",normalizedTitle:"获取redisson客户端",charIndex:7825},{level:3,title:"redisson连接类型",slug:"redisson连接类型",normalizedTitle:"redisson连接类型",charIndex:7980},{level:3,title:"使用注解Cacheable",slug:"使用注解cacheable",normalizedTitle:"使用注解cacheable",charIndex:8889}],headersStr:"简介 分布式幂等和锁的主要区别 引入依赖 配置项 功能项 注解 分布式幂等 使用示例 各字段说明 key说明 MD5说明 解锁说明 使用说明 分布式锁 使用示例 各字段说明 key说明 MD5说明 解锁说明 分布式限流器 使用示例 各字段说明 key说明 MD5说明 限流类型 服务类 分布式锁服务类 缓存服务类 获取Redisson客户端 redisson连接类型 使用注解Cacheable",content:'# 简介\n\n提供 注解简化使用：分布式锁、分布式幂等、分布式限流器\n提供 分布式加锁、解锁等服务类\n提供 常用的对象缓存的常用操作服务类\n提供 CacheManager并配置Cacheable注解常用配置及自定义CacheName对应配置\n\n\n# 分布式幂等和锁的主要区别\n\n-    锁                     分布式幂等\n目的   保护资源完整性，防止多线程导致数据竞争   用于保证操作的一致性，防止重复请求影响系统状态\n范围   同步机制，用于控制对共享资源的并发访问   分布式系统设计理念，用于处理分布式系统中的重复请求\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-redisson</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterSlave:\n        masterAddress: redis://127.0.0.1:6379\n        slaveAddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelMasterName: myMaster\n        sentinelAddresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusterAddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n    #Cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cacheName及过期时间\n        cacheExpiresAfterFiveMinutes:\n          ttl: 300000\n          maxIdleTime: 300000\n        cacheExpiresAfterTenSecond:\n          ttl: 10000\n          maxIdleTime: 10000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# 功能项\n\n\n# 注解\n\n# 分布式幂等\n\n注解： @DistributedIdempotent\n\n# 使用示例\n\n@DistributedIdempotent\n\n@DistributedIdempotent(value = "drp", message = "请求重复！", expireTime = 5)\n\n@DistributedIdempotent(param = "#keyName", includePointMd5 = false, message = "请求重复！", expireTime = 5, executionFinishedUnlock = false)\npublic Response<?> decrement(String keyName) {\n   return Response.ok();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：DV）\n * includePointMd5：key后缀，是否拼接MD5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * message：失败的提示信息\n * acquireTimeout：获取锁的最长等待时间 默认0\n * expireTime：获取后持有锁的最长时间 默认10\n * unit：时间单位 默认秒\n * executionFinishedUnlock：是否在业务执行结束后解锁,默认true(false：若干时间内防重复提交功能 true：业务逻辑执行期间内防重复提交功能)\n\n# key说明\n\nincludePointMd5为true：前缀+固定值+动态参数值+md5.get()\nincludePointMd5为true且param不传：前缀+固定值+md5.get()\n\nincludePointMd5为false：前缀+固定值+动态参数值\nincludePointMd5为false且param不传：前缀+固定值\neg:\n\n前缀为 SimpleRI:\n\nSimpleRI:固定值:动态参数值:c5a2e....4a0\nSimpleRI:固定值:c5a2e....4a0\n\nSimpleRI:固定值:动态参数值\nSimpleRI:固定值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# MD5说明\n\n从切点获取方法参数和实例字符串生成对象，转为md5\n生成对象：MethodContext\n\nMethodContext[argMap={keyName=cda6666}, name=public cn.iosd.starter.web.domain.Response<?> cn.iosd.demo.redisson.controller.AnnotationIdempotentController.decrementReqPara(java.lang.String)]\n\n\n1\n\n\n生成md5:\n\n Supplier<String> md5 = () -> DigestUtils.md5DigestAsHex(context.toString().getBytes());\n\n\n1\n\n\n# 解锁说明\n\nexecutionFinishedUnlock\n\n等于true时： 业务执行结束后解锁：业务逻辑执行期间内防重复提交功能  \n等于false时：业务执行结束后不解锁，等待自动过期：若干时间内防重复提交功能  \n\n\n1\n2\n\n\n# 使用说明\n\n直接使用注解无需为各字段赋值即可保证分布式幂等：\n\n    主要原因：默认开启了md5，md5由切点获取方法参数和实例字符串生成 \nkey为 \tSimpleRI:IC:c5a2e****\n\n\n1\n2\n\n\n入参为实体，为实体对象的单个参数（前提参数值不为空，否则生成的key可能重复）保证分布式幂等： 注解字段使用param，并且关闭md5\n\n    /**\n     * key动态参数值，支持el表达式\n     *\n     * <pre>\n     *  1.获取方法参数中的某个值\n     *      void test(String id)  => #id\n     *  2.获取对象参数中的某个值\n     *      void test(Vo vo)  => #vo.id\n     *  3.参数值获取不到，默认为：DV\n     *      void test(String id)  => #im\n     *  4.默认空，不拼接到key中\n     * </pre>\n     */\n    String param() default "";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n入参为实体，为实体对象的单个参数（参数值可能为空）保证分布式幂等： 注解字段使用value，param，并且关闭md5\n\nvalue：key固定值 自定义取值全局唯一\n\n\n1\n\n\n# 分布式锁\n\n注解： @DistributedLock\n\n# 使用示例\n\n@DistributedLock\n\n@DistributedLock(value = "demo", param = "#keyName", leaseTime = 105)\n\n\n\n1\n2\n3\n4\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：DV）\n * includePointMd5：key后缀，是否拼接MD5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * leaseTime：锁的有效时间-秒\n\n# key说明\n\nincludePointMd5为true：前缀+固定值+动态参数值+md5.get()\nincludePointMd5为true且param不传：前缀+固定值+md5.get()\n\nincludePointMd5为false：前缀+固定值+动态参数值\nincludePointMd5为false且param不传：前缀+固定值\neg:\n\n前缀为 SimpleRL:\n\nSimpleRL:固定值:动态参数值:c5a2e....4a0\nSimpleRL:固定值:c5a2e....4a0\n\nSimpleRL:固定值:动态参数值\nSimpleRL:固定值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# MD5说明\n\n如上\n\n# 解锁说明\n\nleaseTime\n\n在获取到锁之后，该锁会在指定的leaseTime时间后自动释放，即锁的持有时间。\n如果在这个时间内业务执行完毕，那么在finally块中的lock.unlock()会手动释放锁，如果在这个时间内业务没有执行完毕，锁也会自动释放\n\n\n1\n2\n\n\n# 分布式限流器\n\n注解：@DistributedRateLimiter\n\n# 使用示例\n\n@DistributedRateLimiter\n\n@DistributedRateLimiter(type = RateType.PER_CLIENT)\n\n\n\n1\n2\n3\n4\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：DV）\n * includePointMd5：key后缀，是否拼接MD5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * rate：速率(即：在有效时间单位内通过的数量)\n * rateTime：有效时间 默认1\n * timeUnit：时间单位 默认秒\n * message：失败提示信息\n * type：限流类型 默认全局\n\n# key说明\n\nincludePointMd5为true：前缀+固定值+动态参数值+md5.get()\nincludePointMd5为true且param不传：前缀+固定值+md5.get()\n\nincludePointMd5为false：前缀+固定值+动态参数值\nincludePointMd5为false且param不传：前缀+固定值\neg:\n\n前缀\n单客户端  SimpleRRC: \n全局      SimpleRRG:\n\n\n1\n2\n3\n\n\n# MD5说明\n\n如上\n\n# 限流类型\n\n使用org.redisson.api.RateType 区分为单客户端、全局\n\n\n# 服务类\n\n# 分布式锁服务类\n\n注入使用\n\n    @Autowired(required = false)\n    private RedissonLockService redissonLockService;\n\n\n1\n2\n\n\n加锁操作\n\n    /**\n     * 加锁操作 （设置锁的有效时间）\n     *\n     * @param lockName  锁名称\n     * @param leaseTime 锁有效时间-秒\n     */\n     redissonLockService.lock(lockName, leaseTime);\n\n    /**\n     * 加锁操作(tryLock锁，有等待时间）\n     *\n     * @param lockName  锁名称\n     * @param leaseTime 锁有效时间\n     * @param waitTime  等待时间\n     */\n     redissonLockService.tryLock(lockName, leaseTime, waitTime)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n解锁操作\n\n    /**\n     * 解锁\n     *\n     * @param lockName 锁名称\n     */\n     redissonLockService.unlock(lockName);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 缓存服务类\n\n注入使用\n\n    @Autowired(required = false)\n    private RedissonCacheService redissonCacheService;\n\n\n1\n2\n\n\n常用示例代码\n\n  @Operation(summary = "Object-获取")\n    @GetMapping("/object/{key}")\n    public Response<PersonVo> getObject(@PathVariable String key) {\n        return Response.ok(redissonCacheService.getObject(key));\n    }\n\n    @Operation(summary = "Object-保存")\n    @PostMapping("/object/{key}")\n    public Response<?> setObject(@PathVariable String key, @RequestBody PersonVo value) {\n        redissonCacheService.setObject(key, value);\n        return Response.ok();\n    }\n\n    @Operation(summary = "List-获取")\n    @GetMapping("/list/{key}")\n    public Response<List<PersonVo>> getList(@PathVariable String key) {\n        return Response.ok(redissonCacheService.getList(key));\n    }\n\n    @Operation(summary = "List-保存")\n    @PostMapping("/list/{key}")\n    public Response<?> setList(@PathVariable String key, @RequestBody List<PersonVo> value) {\n        redissonCacheService.setList(key, value);\n        return Response.ok();\n    }\n\n    @Operation(summary = "Map-获取")\n    @GetMapping("/map/{key}")\n    public Response<Map<String, PersonVo>> getMap(@PathVariable String key) {\n        return Response.ok(redissonCacheService.getMap(key));\n    }\n\n    @Operation(summary = "Map-保存")\n    @PostMapping("/map/{key}")\n    public Response<?> setMap(@PathVariable String key, @RequestBody PersonVo value) {\n        Map save = new HashMap(2);\n        save.put(key, value);\n        redissonCacheService.setMap(key, save);\n        return Response.ok();\n    }\n\n    @Operation(summary = "删除")\n    @DeleteMapping("/{key}")\n    public Response<?> delete(@PathVariable("key") String key) {\n        redissonCacheService.delete(key);\n        return Response.ok();\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# 获取Redisson客户端\n\n注入\n\n    @Autowired(required = false)\n    private RedissonManager redissonManager;\n\n\n1\n2\n\n\n获取客户端\n\n    redissonManager.getRedisson()\n\n\n1\n\n\n\n# redisson连接类型\n\n支持：standalone、sentinel、cluster、masterSlave\n\nsimple:\n  redisson:\n    #缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterSlave:\n        masterAddress: redis://127.0.0.1:6379\n        slaveAddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelMasterName: myMaster\n        sentinelAddresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusterAddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 使用注解Cacheable\n\n已提供的cacheName及对应过期时间配置\n\ncacheExpiresAfterTenMinutes:缓存时间10分钟\ncacheExpiresAfterOneHour:缓存时间60分钟\ncacheNeverExpires:未设置缓存失效时间\n\n\n1\n2\n3\n\n\n可在配置文件中设置自定义cacheName及对应过期时间配置\n如下自定义cacheExpiresAfterFiveMinutes：缓存时间5分钟\n自定义cacheExpiresAfterTenSecond：缓存时间10秒\n例：\n\nsimple:\n  redisson:\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n    #Cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cacheName及过期时间\n        cacheExpiresAfterFiveMinutes:\n          ttl: 300000\n          maxIdleTime: 300000\n        cacheExpiresAfterTenSecond:\n          ttl: 10000\n          maxIdleTime: 10000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n在服务层中使用示例：\n\n    @Cacheable(key = "#keyName + \'FiveMinutes\'", cacheNames = "cacheExpiresAfterFiveMinutes", condition = "#keyName.length()>2")\n    public String annotateTestCacheNameFiveMinutes(String keyName) {\n        log.info("cacheExpiresAfterFiveMinutes:{}", keyName);\n        return keyName;\n    }\n\n    @Cacheable(key = "#keyName + \'TenSecond\'", cacheNames = "cacheExpiresAfterTenSecond", condition = "#keyName.length()>2")\n    public String annotateTestCacheNameTenSecond(String keyName) {\n        log.info("cacheExpiresAfterTenSecond:{}", keyName);\n        return keyName;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',normalizedContent:'# 简介\n\n提供 注解简化使用：分布式锁、分布式幂等、分布式限流器\n提供 分布式加锁、解锁等服务类\n提供 常用的对象缓存的常用操作服务类\n提供 cachemanager并配置cacheable注解常用配置及自定义cachename对应配置\n\n\n# 分布式幂等和锁的主要区别\n\n-    锁                     分布式幂等\n目的   保护资源完整性，防止多线程导致数据竞争   用于保证操作的一致性，防止重复请求影响系统状态\n范围   同步机制，用于控制对共享资源的并发访问   分布式系统设计理念，用于处理分布式系统中的重复请求\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-redisson</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterslave:\n        masteraddress: redis://127.0.0.1:6379\n        slaveaddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelmastername: mymaster\n        sentineladdresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusteraddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n    #cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cachename及过期时间\n        cacheexpiresafterfiveminutes:\n          ttl: 300000\n          maxidletime: 300000\n        cacheexpiresaftertensecond:\n          ttl: 10000\n          maxidletime: 10000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# 功能项\n\n\n# 注解\n\n# 分布式幂等\n\n注解： @distributedidempotent\n\n# 使用示例\n\n@distributedidempotent\n\n@distributedidempotent(value = "drp", message = "请求重复！", expiretime = 5)\n\n@distributedidempotent(param = "#keyname", includepointmd5 = false, message = "请求重复！", expiretime = 5, executionfinishedunlock = false)\npublic response<?> decrement(string keyname) {\n   return response.ok();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：dv）\n * includepointmd5：key后缀，是否拼接md5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * message：失败的提示信息\n * acquiretimeout：获取锁的最长等待时间 默认0\n * expiretime：获取后持有锁的最长时间 默认10\n * unit：时间单位 默认秒\n * executionfinishedunlock：是否在业务执行结束后解锁,默认true(false：若干时间内防重复提交功能 true：业务逻辑执行期间内防重复提交功能)\n\n# key说明\n\nincludepointmd5为true：前缀+固定值+动态参数值+md5.get()\nincludepointmd5为true且param不传：前缀+固定值+md5.get()\n\nincludepointmd5为false：前缀+固定值+动态参数值\nincludepointmd5为false且param不传：前缀+固定值\neg:\n\n前缀为 simpleri:\n\nsimpleri:固定值:动态参数值:c5a2e....4a0\nsimpleri:固定值:c5a2e....4a0\n\nsimpleri:固定值:动态参数值\nsimpleri:固定值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# md5说明\n\n从切点获取方法参数和实例字符串生成对象，转为md5\n生成对象：methodcontext\n\nmethodcontext[argmap={keyname=cda6666}, name=public cn.iosd.starter.web.domain.response<?> cn.iosd.demo.redisson.controller.annotationidempotentcontroller.decrementreqpara(java.lang.string)]\n\n\n1\n\n\n生成md5:\n\n supplier<string> md5 = () -> digestutils.md5digestashex(context.tostring().getbytes());\n\n\n1\n\n\n# 解锁说明\n\nexecutionfinishedunlock\n\n等于true时： 业务执行结束后解锁：业务逻辑执行期间内防重复提交功能  \n等于false时：业务执行结束后不解锁，等待自动过期：若干时间内防重复提交功能  \n\n\n1\n2\n\n\n# 使用说明\n\n直接使用注解无需为各字段赋值即可保证分布式幂等：\n\n    主要原因：默认开启了md5，md5由切点获取方法参数和实例字符串生成 \nkey为 \tsimpleri:ic:c5a2e****\n\n\n1\n2\n\n\n入参为实体，为实体对象的单个参数（前提参数值不为空，否则生成的key可能重复）保证分布式幂等： 注解字段使用param，并且关闭md5\n\n    /**\n     * key动态参数值，支持el表达式\n     *\n     * <pre>\n     *  1.获取方法参数中的某个值\n     *      void test(string id)  => #id\n     *  2.获取对象参数中的某个值\n     *      void test(vo vo)  => #vo.id\n     *  3.参数值获取不到，默认为：dv\n     *      void test(string id)  => #im\n     *  4.默认空，不拼接到key中\n     * </pre>\n     */\n    string param() default "";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n入参为实体，为实体对象的单个参数（参数值可能为空）保证分布式幂等： 注解字段使用value，param，并且关闭md5\n\nvalue：key固定值 自定义取值全局唯一\n\n\n1\n\n\n# 分布式锁\n\n注解： @distributedlock\n\n# 使用示例\n\n@distributedlock\n\n@distributedlock(value = "demo", param = "#keyname", leasetime = 105)\n\n\n\n1\n2\n3\n4\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：dv）\n * includepointmd5：key后缀，是否拼接md5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * leasetime：锁的有效时间-秒\n\n# key说明\n\nincludepointmd5为true：前缀+固定值+动态参数值+md5.get()\nincludepointmd5为true且param不传：前缀+固定值+md5.get()\n\nincludepointmd5为false：前缀+固定值+动态参数值\nincludepointmd5为false且param不传：前缀+固定值\neg:\n\n前缀为 simplerl:\n\nsimplerl:固定值:动态参数值:c5a2e....4a0\nsimplerl:固定值:c5a2e....4a0\n\nsimplerl:固定值:动态参数值\nsimplerl:固定值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# md5说明\n\n如上\n\n# 解锁说明\n\nleasetime\n\n在获取到锁之后，该锁会在指定的leasetime时间后自动释放，即锁的持有时间。\n如果在这个时间内业务执行完毕，那么在finally块中的lock.unlock()会手动释放锁，如果在这个时间内业务没有执行完毕，锁也会自动释放\n\n\n1\n2\n\n\n# 分布式限流器\n\n注解：@distributedratelimiter\n\n# 使用示例\n\n@distributedratelimiter\n\n@distributedratelimiter(type = ratetype.per_client)\n\n\n\n1\n2\n3\n4\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：dv）\n * includepointmd5：key后缀，是否拼接md5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * rate：速率(即：在有效时间单位内通过的数量)\n * ratetime：有效时间 默认1\n * timeunit：时间单位 默认秒\n * message：失败提示信息\n * type：限流类型 默认全局\n\n# key说明\n\nincludepointmd5为true：前缀+固定值+动态参数值+md5.get()\nincludepointmd5为true且param不传：前缀+固定值+md5.get()\n\nincludepointmd5为false：前缀+固定值+动态参数值\nincludepointmd5为false且param不传：前缀+固定值\neg:\n\n前缀\n单客户端  simplerrc: \n全局      simplerrg:\n\n\n1\n2\n3\n\n\n# md5说明\n\n如上\n\n# 限流类型\n\n使用org.redisson.api.ratetype 区分为单客户端、全局\n\n\n# 服务类\n\n# 分布式锁服务类\n\n注入使用\n\n    @autowired(required = false)\n    private redissonlockservice redissonlockservice;\n\n\n1\n2\n\n\n加锁操作\n\n    /**\n     * 加锁操作 （设置锁的有效时间）\n     *\n     * @param lockname  锁名称\n     * @param leasetime 锁有效时间-秒\n     */\n     redissonlockservice.lock(lockname, leasetime);\n\n    /**\n     * 加锁操作(trylock锁，有等待时间）\n     *\n     * @param lockname  锁名称\n     * @param leasetime 锁有效时间\n     * @param waittime  等待时间\n     */\n     redissonlockservice.trylock(lockname, leasetime, waittime)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n解锁操作\n\n    /**\n     * 解锁\n     *\n     * @param lockname 锁名称\n     */\n     redissonlockservice.unlock(lockname);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 缓存服务类\n\n注入使用\n\n    @autowired(required = false)\n    private redissoncacheservice redissoncacheservice;\n\n\n1\n2\n\n\n常用示例代码\n\n  @operation(summary = "object-获取")\n    @getmapping("/object/{key}")\n    public response<personvo> getobject(@pathvariable string key) {\n        return response.ok(redissoncacheservice.getobject(key));\n    }\n\n    @operation(summary = "object-保存")\n    @postmapping("/object/{key}")\n    public response<?> setobject(@pathvariable string key, @requestbody personvo value) {\n        redissoncacheservice.setobject(key, value);\n        return response.ok();\n    }\n\n    @operation(summary = "list-获取")\n    @getmapping("/list/{key}")\n    public response<list<personvo>> getlist(@pathvariable string key) {\n        return response.ok(redissoncacheservice.getlist(key));\n    }\n\n    @operation(summary = "list-保存")\n    @postmapping("/list/{key}")\n    public response<?> setlist(@pathvariable string key, @requestbody list<personvo> value) {\n        redissoncacheservice.setlist(key, value);\n        return response.ok();\n    }\n\n    @operation(summary = "map-获取")\n    @getmapping("/map/{key}")\n    public response<map<string, personvo>> getmap(@pathvariable string key) {\n        return response.ok(redissoncacheservice.getmap(key));\n    }\n\n    @operation(summary = "map-保存")\n    @postmapping("/map/{key}")\n    public response<?> setmap(@pathvariable string key, @requestbody personvo value) {\n        map save = new hashmap(2);\n        save.put(key, value);\n        redissoncacheservice.setmap(key, save);\n        return response.ok();\n    }\n\n    @operation(summary = "删除")\n    @deletemapping("/{key}")\n    public response<?> delete(@pathvariable("key") string key) {\n        redissoncacheservice.delete(key);\n        return response.ok();\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# 获取redisson客户端\n\n注入\n\n    @autowired(required = false)\n    private redissonmanager redissonmanager;\n\n\n1\n2\n\n\n获取客户端\n\n    redissonmanager.getredisson()\n\n\n1\n\n\n\n# redisson连接类型\n\n支持：standalone、sentinel、cluster、masterslave\n\nsimple:\n  redisson:\n    #缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterslave:\n        masteraddress: redis://127.0.0.1:6379\n        slaveaddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelmastername: mymaster\n        sentineladdresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusteraddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 使用注解cacheable\n\n已提供的cachename及对应过期时间配置\n\ncacheexpiresaftertenminutes:缓存时间10分钟\ncacheexpiresafteronehour:缓存时间60分钟\ncacheneverexpires:未设置缓存失效时间\n\n\n1\n2\n3\n\n\n可在配置文件中设置自定义cachename及对应过期时间配置\n如下自定义cacheexpiresafterfiveminutes：缓存时间5分钟\n自定义cacheexpiresaftertensecond：缓存时间10秒\n例：\n\nsimple:\n  redisson:\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n    #cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cachename及过期时间\n        cacheexpiresafterfiveminutes:\n          ttl: 300000\n          maxidletime: 300000\n        cacheexpiresaftertensecond:\n          ttl: 10000\n          maxidletime: 10000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n在服务层中使用示例：\n\n    @cacheable(key = "#keyname + \'fiveminutes\'", cachenames = "cacheexpiresafterfiveminutes", condition = "#keyname.length()>2")\n    public string annotatetestcachenamefiveminutes(string keyname) {\n        log.info("cacheexpiresafterfiveminutes:{}", keyname);\n        return keyname;\n    }\n\n    @cacheable(key = "#keyname + \'tensecond\'", cachenames = "cacheexpiresaftertensecond", condition = "#keyname.length()>2")\n    public string annotatetestcachenametensecond(string keyname) {\n        log.info("cacheexpiresaftertensecond:{}", keyname);\n        return keyname;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-s3",frontmatter:{title:"simple-starter-s3",date:"2023-03-31T17:20:04.000Z",permalink:"/pages/ea099ap24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/03.simple-starter-s3.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/03.simple-starter-s3.md",key:"v-932c3b68",path:"/pages/ea099ap24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:45},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:287},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:476},{level:3,title:"文件操作",slug:"文件操作",normalizedTitle:"文件操作",charIndex:29}],headersStr:"简介 引入依赖 配置项 功能项 文件操作",content:"# 简介\n\n启动工程初始化AmazonS3客户端、提供S3文件操作的基础服务方法\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-s3</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  s3:\n    #文件存储管理 缺省项为false\n    enabled: true\n    accessKey: 3sZWX1PLuCYNqzMw\n    secretKey: vuLhQbT9iK1EunaLGETtytMBjJTxoHpw\n    endpoint: 127.0.0.1:9000\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 功能项\n\n\n# 文件操作\n\n注入使用\n\n    @Autowired(required = false)\n    private AmazonS3Service amazonS3Service;\n\n\n1\n2\n\n\n各方法查看源码均提供注释说明",normalizedContent:"# 简介\n\n启动工程初始化amazons3客户端、提供s3文件操作的基础服务方法\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-s3</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  s3:\n    #文件存储管理 缺省项为false\n    enabled: true\n    accesskey: 3szwx1plucynqzmw\n    secretkey: vulhqbt9ik1eunalgettytmbjjtxohpw\n    endpoint: 127.0.0.1:9000\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 功能项\n\n\n# 文件操作\n\n注入使用\n\n    @autowired(required = false)\n    private amazons3service amazons3service;\n\n\n1\n2\n\n\n各方法查看源码均提供注释说明",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-grpc",frontmatter:{title:"simple-starter-grpc",date:"2023-04-03T10:11:39.000Z",permalink:"/pages/198071p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/05.simple-starter-grpc.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/05.simple-starter-grpc.md",key:"v-9c5d01e8",path:"/pages/198071p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:36},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:280},{level:2,title:"概念图",slug:"概念图",normalizedTitle:"概念图",charIndex:633},{level:2,title:"介绍及使用",slug:"介绍及使用",normalizedTitle:"介绍及使用",charIndex:643},{level:3,title:"Grpc服务端",slug:"grpc服务端",normalizedTitle:"grpc服务端",charIndex:24},{level:4,title:"基础使用",slug:"基础使用",normalizedTitle:"基础使用",charIndex:1199},{level:4,title:"增加请求头获取",slug:"增加请求头获取",normalizedTitle:"增加请求头获取",charIndex:1776},{level:3,title:"Grpc客户端",slug:"grpc客户端",normalizedTitle:"grpc客户端",charIndex:15},{level:4,title:"基础使用",slug:"基础使用-2",normalizedTitle:"基础使用",charIndex:1199},{level:4,title:"增加单独设置调用超时时间",slug:"增加单独设置调用超时时间",normalizedTitle:"增加单独设置调用超时时间",charIndex:2919},{level:4,title:"增加请求头参数设置",slug:"增加请求头参数设置",normalizedTitle:"增加请求头参数设置",charIndex:3425},{level:5,title:"只有一个请求头参数设置时",slug:"只有一个请求头参数设置时",normalizedTitle:"只有一个请求头参数设置时",charIndex:3438},{level:5,title:"有多个请求头参数设置时",slug:"有多个请求头参数设置时",normalizedTitle:"有多个请求头参数设置时",charIndex:3864}],headersStr:"简介 引入依赖 配置项 概念图 介绍及使用 Grpc服务端 基础使用 增加请求头获取 Grpc客户端 基础使用 增加单独设置调用超时时间 增加请求头参数设置 只有一个请求头参数设置时 有多个请求头参数设置时",content:'# 简介\n\n提供注解简化使用：Grpc客户端、 Grpc服务端\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-grpc</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-grpc\n  grpc:\n    client:\n      #Grpc客户端 缺省项为false \n      enabled: true\n      #设置Grpc调用超时时间 缺省项为5000毫秒\n      timeout: 5000\n      channel:\n        local-grpc-server:\n          address: \'127.0.0.1:12030\'\n    server:\n      #Grpc服务端 缺省项为false \n      enabled: true\n      port: 12030\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 概念图\n\n\n\n\n# 介绍及使用\n\n由helloworld.proto生成以下文件\n\n文件名称                    介绍\nHelloReply              包含了 HelloReply 消息的定义，消息包含一个名为 message 的字符串字段。\nHelloReplyOrBuilder     用于构建 HelloReply 消息，提供了 message 字段的 getter 和 setter 方法。\nHelloRequest            包含了 HelloRequest 消息的定义，消息包含一个名为 name 的字符串字段。\nHelloRequestOrBuilder   用于构建 HelloRequest 消息，提供了 name 字段的 getter 和 setter 方法。\nHelloWorldProto         包含了 Simple 服务和其中的方法 SayHello 的定义，可以在客户端和服务器端使用。\nSimpleGrpc              包含了客户端和服务器端用于实现 Simple 服务的方法，包括 SayHello 方法的实现。通过 gRPC\n                        调用远程服务的接口。\n\n\n# Grpc服务端\n\n# 基础使用\n\n通过继承 SimpleGrpc.SimpleImplBase 类并重写 SayHello 方法来实现服务器端的 Simple 服务。\n同时，你需要在当前类上添加 @GrpcService 注解来表明这是一个 gRPC 服务端。客户端可以通过 gRPC 调用 SayHello 方法来与该服务端进行通信。\n\n示例：\n\n@GrpcService\npublic class GrpcHelloService extends SimpleGrpc.SimpleImplBase {\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n        HelloReply reply = HelloReply.newBuilder().setMessage("GrpcHelloService Hello ==> " + req.getName()).build();\n        responseObserver.onNext(reply);\n        responseObserver.onCompleted();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 增加请求头获取\n\n实现ServiceCallStartHeaders接口，统一拦截获取请求头并返回校验结果\n\n示例：\n\n@Component\npublic class GrpcServiceCallStartHeaders implements ServiceCallStartHeaders {\n    @Override\n    public Status verifyHeaders(Metadata headers) {\n        String value = headers.get(Metadata.Key.of("token", Metadata.ASCII_STRING_MARSHALLER));\n        if (StringUtils.isEmpty(value)) {\n            return Status.UNAUTHENTICATED.withDescription("请求头参数token值为空");\n        }\n        return Status.OK;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Grpc客户端\n\n# 基础使用\n\n在你的服务层类中使用 SimpleGrpc.SimpleBlockingStub 类，该类用于调用 gRPC 服务的方法。\n同时，你需要在当前类上添加 @GrpcClient(value = "grpc-server-hello") 注解来表明这是一个 gRPC 客户端\nvalue 值为 simple.grpc.client.channel.{value}.address 配置项的名称。\n这样，你就可以通过注入的 Stub 对象发起调用并与远程服务通信。\n\n示例：\n\n@Service\npublic class GrpcDemoClientService {\n    @GrpcClient(value = "grpc-server-hello")\n    private SimpleGrpc.SimpleBlockingStub simpleStub;\n\n    public String sendHelloMessage(final String name) {\n        final HelloReply response = this.simpleStub.sayHello(HelloRequest.newBuilder().setName(name).build());\n        return response.getMessage();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 增加单独设置调用超时时间\n\ntimeout 值为 设置Grpc调用超时时间-单位毫秒，默认5000毫秒 等同于配置文件配置项 simple.grpc.client.timeout 但优先级较高\n\n示例：\n\n@Service\npublic class GrpcDemoClientService {\n    @GrpcClient(value = "grpc-server-hello", timeout = 10000)\n    private SimpleGrpc.SimpleBlockingStub simpleStub;\n\n    public String sendHelloMessage(final String name) {\n        final HelloReply response = this.simpleStub.sayHello(HelloRequest.newBuilder().setName(name).build());\n        return response.getMessage();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 增加请求头参数设置\n\n# 只有一个请求头参数设置时\n\n实现ClientCallStartHeaders接口，统一设置请求头参数值，所有请求将都会进入此方法\n\n示例-实现类：\n\n@Component\npublic class GrpcClientCallStartHeaders implements ClientCallStartHeaders {\n    @Override\n    public Map<String, String> headers() {\n        return Collections.singletonMap("token", "ces1");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注解无需指定实现类名称：\n\n    @GrpcClient(value = "grpc-server-hello")\n    private SimpleGrpc.SimpleBlockingStub simpleStub;\n\n\n1\n2\n\n\n# 有多个请求头参数设置时\n\n实现ClientCallStartHeaders接口，设置请求头参数值，注解需指定实现类名称才进入对应方法。\n\n示例-实现类：\n\n@Component\npublic class GrpcClientCallStartHeaders implements ClientCallStartHeaders {\n    @Override\n    public Map<String, String> headers() {\n        return Collections.singletonMap("token", "ces1");\n    }\n}\n\n@Component\npublic class GrpcSencondClientCallStartHeaders implements ClientCallStartHeaders {\n    @Override\n    public Map<String, String> headers() {\n        return Collections.singletonMap("token", "ces2");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n注解指定实现类名称，注 多个请求头拦截时需要增加注解值 headerBeanName ：\n\n    @GrpcClient(value = "grpc-server-hello",headerBeanName = "grpcSecondClientCallStartHeaders")\n    private SimpleGrpc.SimpleBlockingStub simpleStub;\n\n\n1\n2\n',normalizedContent:'# 简介\n\n提供注解简化使用：grpc客户端、 grpc服务端\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-grpc</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-grpc\n  grpc:\n    client:\n      #grpc客户端 缺省项为false \n      enabled: true\n      #设置grpc调用超时时间 缺省项为5000毫秒\n      timeout: 5000\n      channel:\n        local-grpc-server:\n          address: \'127.0.0.1:12030\'\n    server:\n      #grpc服务端 缺省项为false \n      enabled: true\n      port: 12030\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 概念图\n\n\n\n\n# 介绍及使用\n\n由helloworld.proto生成以下文件\n\n文件名称                    介绍\nhelloreply              包含了 helloreply 消息的定义，消息包含一个名为 message 的字符串字段。\nhelloreplyorbuilder     用于构建 helloreply 消息，提供了 message 字段的 getter 和 setter 方法。\nhellorequest            包含了 hellorequest 消息的定义，消息包含一个名为 name 的字符串字段。\nhellorequestorbuilder   用于构建 hellorequest 消息，提供了 name 字段的 getter 和 setter 方法。\nhelloworldproto         包含了 simple 服务和其中的方法 sayhello 的定义，可以在客户端和服务器端使用。\nsimplegrpc              包含了客户端和服务器端用于实现 simple 服务的方法，包括 sayhello 方法的实现。通过 grpc\n                        调用远程服务的接口。\n\n\n# grpc服务端\n\n# 基础使用\n\n通过继承 simplegrpc.simpleimplbase 类并重写 sayhello 方法来实现服务器端的 simple 服务。\n同时，你需要在当前类上添加 @grpcservice 注解来表明这是一个 grpc 服务端。客户端可以通过 grpc 调用 sayhello 方法来与该服务端进行通信。\n\n示例：\n\n@grpcservice\npublic class grpchelloservice extends simplegrpc.simpleimplbase {\n    @override\n    public void sayhello(hellorequest req, streamobserver<helloreply> responseobserver) {\n        helloreply reply = helloreply.newbuilder().setmessage("grpchelloservice hello ==> " + req.getname()).build();\n        responseobserver.onnext(reply);\n        responseobserver.oncompleted();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 增加请求头获取\n\n实现servicecallstartheaders接口，统一拦截获取请求头并返回校验结果\n\n示例：\n\n@component\npublic class grpcservicecallstartheaders implements servicecallstartheaders {\n    @override\n    public status verifyheaders(metadata headers) {\n        string value = headers.get(metadata.key.of("token", metadata.ascii_string_marshaller));\n        if (stringutils.isempty(value)) {\n            return status.unauthenticated.withdescription("请求头参数token值为空");\n        }\n        return status.ok;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# grpc客户端\n\n# 基础使用\n\n在你的服务层类中使用 simplegrpc.simpleblockingstub 类，该类用于调用 grpc 服务的方法。\n同时，你需要在当前类上添加 @grpcclient(value = "grpc-server-hello") 注解来表明这是一个 grpc 客户端\nvalue 值为 simple.grpc.client.channel.{value}.address 配置项的名称。\n这样，你就可以通过注入的 stub 对象发起调用并与远程服务通信。\n\n示例：\n\n@service\npublic class grpcdemoclientservice {\n    @grpcclient(value = "grpc-server-hello")\n    private simplegrpc.simpleblockingstub simplestub;\n\n    public string sendhellomessage(final string name) {\n        final helloreply response = this.simplestub.sayhello(hellorequest.newbuilder().setname(name).build());\n        return response.getmessage();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 增加单独设置调用超时时间\n\ntimeout 值为 设置grpc调用超时时间-单位毫秒，默认5000毫秒 等同于配置文件配置项 simple.grpc.client.timeout 但优先级较高\n\n示例：\n\n@service\npublic class grpcdemoclientservice {\n    @grpcclient(value = "grpc-server-hello", timeout = 10000)\n    private simplegrpc.simpleblockingstub simplestub;\n\n    public string sendhellomessage(final string name) {\n        final helloreply response = this.simplestub.sayhello(hellorequest.newbuilder().setname(name).build());\n        return response.getmessage();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 增加请求头参数设置\n\n# 只有一个请求头参数设置时\n\n实现clientcallstartheaders接口，统一设置请求头参数值，所有请求将都会进入此方法\n\n示例-实现类：\n\n@component\npublic class grpcclientcallstartheaders implements clientcallstartheaders {\n    @override\n    public map<string, string> headers() {\n        return collections.singletonmap("token", "ces1");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注解无需指定实现类名称：\n\n    @grpcclient(value = "grpc-server-hello")\n    private simplegrpc.simpleblockingstub simplestub;\n\n\n1\n2\n\n\n# 有多个请求头参数设置时\n\n实现clientcallstartheaders接口，设置请求头参数值，注解需指定实现类名称才进入对应方法。\n\n示例-实现类：\n\n@component\npublic class grpcclientcallstartheaders implements clientcallstartheaders {\n    @override\n    public map<string, string> headers() {\n        return collections.singletonmap("token", "ces1");\n    }\n}\n\n@component\npublic class grpcsencondclientcallstartheaders implements clientcallstartheaders {\n    @override\n    public map<string, string> headers() {\n        return collections.singletonmap("token", "ces2");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n注解指定实现类名称，注 多个请求头拦截时需要增加注解值 headerbeanname ：\n\n    @grpcclient(value = "grpc-server-hello",headerbeanname = "grpcsecondclientcallstartheaders")\n    private simplegrpc.simpleblockingstub simplestub;\n\n\n1\n2\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-freemarker",frontmatter:{title:"simple-starter-freemarker",date:"2023-04-04T16:17:29.000Z",permalink:"/pages/7ef54ap24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/07.simple-starter-freemarker.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/07.simple-starter-freemarker.md",key:"v-375cf838",path:"/pages/7ef54ap24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:55},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:42},{level:2,title:"功能",slug:"功能",normalizedTitle:"功能",charIndex:994},{level:3,title:"格式化",slug:"格式化",normalizedTitle:"格式化",charIndex:1001},{level:3,title:"配置项",slug:"配置项-2",normalizedTitle:"配置项",charIndex:42},{level:3,title:"自定义Freemarker视图",slug:"自定义freemarker视图",normalizedTitle:"自定义freemarker视图",charIndex:1322}],headersStr:"简介 引入依赖 配置项 功能 格式化 配置项 自定义Freemarker视图",content:'# 简介\n\n用于模板引擎应用，使用配置参数简化 资源路径映射到指定的处理器，将常用的配置项默认封装。\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-freemarker</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nFreemarker基础配置项示例：\n\nspring:\n  application:\n    name: simple-demo-freemarker\n  freemarker:\n    allow-request-override: false\n    cache: true\n    charset: UTF-8\n    check-template-location: true\n    content-type: text/html\n    expose-request-attributes: false\n    expose-session-attributes: false\n    expose-spring-macro-helpers: false\n    settings:\n      number_format: 0.##\n    suffix: .ftl\n    template-loader-path: classpath:/templates/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nsimple配置：\n\nsimple:\n  freemarker:\n    resourceVoList:\n      # resourceHandler：访问的前缀 resourceLocations：真实路径\n      - resourceHandler:  /Users/**\n        resourceLocations:  file:/Users/\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 功能\n\n\n# 格式化\n\n类：FreemarkerConfig\n默认设置Freemarker模板引擎的格式化选项，使用“#”号作为数字格式的分隔符\n\n\n# 配置项\n\n类：HttpConverterConfig\n从配置文件读取，将指定的资源路径映射到指定的处理器上\n访问地址前缀->真实路径\n配置文件例：\n\n      - resourceHandler:  /ok/**\n        resourceLocations:  classpath:/plugin/ok/\n\n\n1\n2\n\n\n则页面访问\n\nhttp://127.0.0.1/ok/xxx.js\n\n\n1\n\n\n将获取本工程目录classpath资源下，/plugin/ok/xxx.js文件\n\n\n# 自定义Freemarker视图\n\n类：MyFreemarkerView CustomFreemarker MyFreemarkerView中添加base路径辅助方法，获取访问地址再返回页面，便于静态资源地址使用\n例：\n\n<script src="${base}/xxx/xxx.js"><\/script>\n\n\n1\n',normalizedContent:'# 简介\n\n用于模板引擎应用，使用配置参数简化 资源路径映射到指定的处理器，将常用的配置项默认封装。\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-freemarker</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nfreemarker基础配置项示例：\n\nspring:\n  application:\n    name: simple-demo-freemarker\n  freemarker:\n    allow-request-override: false\n    cache: true\n    charset: utf-8\n    check-template-location: true\n    content-type: text/html\n    expose-request-attributes: false\n    expose-session-attributes: false\n    expose-spring-macro-helpers: false\n    settings:\n      number_format: 0.##\n    suffix: .ftl\n    template-loader-path: classpath:/templates/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nsimple配置：\n\nsimple:\n  freemarker:\n    resourcevolist:\n      # resourcehandler：访问的前缀 resourcelocations：真实路径\n      - resourcehandler:  /users/**\n        resourcelocations:  file:/users/\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 功能\n\n\n# 格式化\n\n类：freemarkerconfig\n默认设置freemarker模板引擎的格式化选项，使用“#”号作为数字格式的分隔符\n\n\n# 配置项\n\n类：httpconverterconfig\n从配置文件读取，将指定的资源路径映射到指定的处理器上\n访问地址前缀->真实路径\n配置文件例：\n\n      - resourcehandler:  /ok/**\n        resourcelocations:  classpath:/plugin/ok/\n\n\n1\n2\n\n\n则页面访问\n\nhttp://127.0.0.1/ok/xxx.js\n\n\n1\n\n\n将获取本工程目录classpath资源下，/plugin/ok/xxx.js文件\n\n\n# 自定义freemarker视图\n\n类：myfreemarkerview customfreemarker myfreemarkerview中添加base路径辅助方法，获取访问地址再返回页面，便于静态资源地址使用\n例：\n\n<script src="${base}/xxx/xxx.js"><\/script>\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-cloud",frontmatter:{title:"simple-starter-cloud",date:"2023-04-04T16:30:42.000Z",permalink:"/pages/8df481p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/08.simple-starter-cloud.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/08.simple-starter-cloud.md",key:"v-0c47adec",path:"/pages/8df481p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:43},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:288},{level:3,title:"Nacos远程配置中心",slug:"nacos远程配置中心",normalizedTitle:"nacos远程配置中心",charIndex:296},{level:3,title:"本地工程配置",slug:"本地工程配置",normalizedTitle:"本地工程配置",charIndex:536},{level:3,title:"开启Feign日志打印",slug:"开启feign日志打印",normalizedTitle:"开启feign日志打印",charIndex:1013}],headersStr:"简介 引入依赖 配置项 Nacos远程配置中心 本地工程配置 开启Feign日志打印",content:"# 简介\n\n将常用微服务应用的依赖集成，便于使用\n增加日志配置对象，便于开启\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-cloud</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\n\n# Nacos远程配置中心\n\n示例：application.yml 公共-通用配置\n\nsimple:\n  openApi:\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: ku29@qq.com\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例：simple-demo-cloud.yml\n\nserver:\n  port: 11100\n\n\n1\n2\n\n\n\n# 本地工程配置\n\napplication.yml\n\nspring:\n  application:\n    name: simple-demo-cloud\n  cloud:\n    nacos:\n      server-addr: http://127.0.0.1:8848\n      username:\n      password:\n      discovery:\n        registerEnabled: true\n        namespace:\n      config:\n        namespace:\n        file-extension: yml\n  config:\n    import:\n      - nacos:application.yml\n      - nacos:simple-demo-cloud.yml?group=DEFAULT_GROUP&refreshEnabled=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 开启Feign日志打印\n\n配置项\n\nsimple:\n  feign:\n    # 开启日志记录，缺省默认开启\n    logger:\n      enabled: true\nlogging:\n  level:\n    # 声明包位置的Feign日志级别为debug，打印日志详情\n    cn:\n      iosd: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",normalizedContent:"# 简介\n\n将常用微服务应用的依赖集成，便于使用\n增加日志配置对象，便于开启\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-cloud</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\n\n# nacos远程配置中心\n\n示例：application.yml 公共-通用配置\n\nsimple:\n  openapi:\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: ku29@qq.com\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例：simple-demo-cloud.yml\n\nserver:\n  port: 11100\n\n\n1\n2\n\n\n\n# 本地工程配置\n\napplication.yml\n\nspring:\n  application:\n    name: simple-demo-cloud\n  cloud:\n    nacos:\n      server-addr: http://127.0.0.1:8848\n      username:\n      password:\n      discovery:\n        registerenabled: true\n        namespace:\n      config:\n        namespace:\n        file-extension: yml\n  config:\n    import:\n      - nacos:application.yml\n      - nacos:simple-demo-cloud.yml?group=default_group&refreshenabled=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 开启feign日志打印\n\n配置项\n\nsimple:\n  feign:\n    # 开启日志记录，缺省默认开启\n    logger:\n      enabled: true\nlogging:\n  level:\n    # 声明包位置的feign日志级别为debug，打印日志详情\n    cn:\n      iosd: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-dict",frontmatter:{title:"simple-starter-dict",date:"2023-04-04T17:23:42.000Z",permalink:"/pages/9b689cp24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/10.simple-starter-dict.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/10.simple-starter-dict.md",key:"v-39315c28",path:"/pages/9b689cp24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:86},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:330},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:605},{level:3,title:"本地文件json字典翻译",slug:"本地文件json字典翻译",normalizedTitle:"本地文件json字典翻译",charIndex:613},{level:4,title:"文件",slug:"文件",normalizedTitle:"文件",charIndex:28},{level:4,title:"示例1",slug:"示例1",normalizedTitle:"示例1",charIndex:789},{level:3,title:"远程接口字典翻译",slug:"远程接口字典翻译",normalizedTitle:"远程接口字典翻译",charIndex:1025},{level:4,title:"示例1",slug:"示例1-2",normalizedTitle:"示例1",charIndex:789},{level:4,title:"示例2",slug:"示例2",normalizedTitle:"示例2",charIndex:1344},{level:3,title:"自定义实现",slug:"自定义实现",normalizedTitle:"自定义实现",charIndex:52},{level:4,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:789},{level:4,title:"自定义实现类",slug:"自定义实现类",normalizedTitle:"自定义实现类",charIndex:1969}],headersStr:"简介 引入依赖 配置项 功能项 本地文件json字典翻译 文件 示例1 远程接口字典翻译 示例1 示例2 自定义实现 示例 自定义实现类",content:'# 简介\n\n提供注解简化使用：字典翻译\n字典服务提供本地文件json使用（默认）、提供接口调用使用、扩展自定义实现使用\n服务类返回参数支持单体字段、列表、实体嵌套\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-dict</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  dict:\n    ##字典 缺省项为true\n    enabled: true\n    ## 调用远程接口获取字典项列表实现类请求接口地址前缀（若为空则注解填写需要完整接口路径）\n    remoteBaseUrl: http://127.0.0.1:11120\n    ## localDictServiceImpl实现类的本地字典文件目录，默认/dict.json。注：resource资源下\n    resourceDictFileDir: /dict.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 功能项\n\n\n# 本地文件json字典翻译\n\n# 文件\n\nresources/dict.json\n\n{"leader":[{"value":"1","label":"领导"},{"value":"2","label":"苦工"}],"sex":[{"value":"1","label":"女"},{"value":"2","label":"男"}]}\n\n\n1\n\n\n# 示例1\n\n    @Schema(description = "性别-默认实现类的json文件调用字典")\n    @DictField(dictionaryParams = "sex", dictImplClass = LocalDictServiceImpl.class, relatedField = "sexText")\n    private Integer sex;\n\n    private String sexText;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 远程接口字典翻译\n\n# 示例1\n\n    @Schema(description = "隐藏身份-默认远程调用接口实现类字典")\n    @DictField(dictionaryParams = "http://127.0.0.1:11120/dict/remote/hideIdentity", dictImplClass = RemoteDictServiceImpl.class , relatedField = "hideIdentityText")\n    private Integer hideIdentity;\n\n    private String hideIdentityText;\n\n\n1\n2\n3\n4\n5\n\n\n# 示例2\n\n配置文件：\n\nsimple:\n  dict:\n    remoteBaseUrl: http://127.0.0.1:11120\n\n\n1\n2\n3\n\n\n使用：\n\n    @Schema(description = "隐藏身份-默认远程调用接口实现类字典")\n    @DictField(dictionaryParams = "/dict/remote/hideIdentity", dictImplClass = RemoteDictServiceImpl.class, relatedField = "hideIdentityText")\n    private Integer hideIdentity;\n    \n    private String hideIdentityText;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 自定义实现\n\n# 示例\n\n    @Schema(description = "身份标识-自定义远程调用接口实现类字典")\n    @DictField(dictionaryParams = "idCard", dictImplClass = CustomDictServiceImpl.class, relatedField = "idCardText")\n    private Integer idCard;\n\n    private String idCardText;\n\n\n1\n2\n3\n4\n5\n\n\n# 自定义实现类\n\n示例代码：customDictServiceImpl 需继承DictService\n\n@Service\npublic class CustomDictServiceImpl implements DictService {\n\n    private RestTemplate restTemplate = new RestTemplate();\n\n    @Override\n    public List<DictItem> getDictItemList(String dictionaryParams) {\n        String path = "http://127.0.0.1:11120/simple-demo-dict/dict/custom/" + dictionaryParams;\n        ResponseEntity<Response<List<DictItem>>> responseEntity = restTemplate.exchange(path, HttpMethod.GET, null, new ParameterizedTypeReference<Response<List<DictItem>>>() {\n        });\n        return responseEntity.getBody().getData();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',normalizedContent:'# 简介\n\n提供注解简化使用：字典翻译\n字典服务提供本地文件json使用（默认）、提供接口调用使用、扩展自定义实现使用\n服务类返回参数支持单体字段、列表、实体嵌套\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-dict</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  dict:\n    ##字典 缺省项为true\n    enabled: true\n    ## 调用远程接口获取字典项列表实现类请求接口地址前缀（若为空则注解填写需要完整接口路径）\n    remotebaseurl: http://127.0.0.1:11120\n    ## localdictserviceimpl实现类的本地字典文件目录，默认/dict.json。注：resource资源下\n    resourcedictfiledir: /dict.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 功能项\n\n\n# 本地文件json字典翻译\n\n# 文件\n\nresources/dict.json\n\n{"leader":[{"value":"1","label":"领导"},{"value":"2","label":"苦工"}],"sex":[{"value":"1","label":"女"},{"value":"2","label":"男"}]}\n\n\n1\n\n\n# 示例1\n\n    @schema(description = "性别-默认实现类的json文件调用字典")\n    @dictfield(dictionaryparams = "sex", dictimplclass = localdictserviceimpl.class, relatedfield = "sextext")\n    private integer sex;\n\n    private string sextext;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 远程接口字典翻译\n\n# 示例1\n\n    @schema(description = "隐藏身份-默认远程调用接口实现类字典")\n    @dictfield(dictionaryparams = "http://127.0.0.1:11120/dict/remote/hideidentity", dictimplclass = remotedictserviceimpl.class , relatedfield = "hideidentitytext")\n    private integer hideidentity;\n\n    private string hideidentitytext;\n\n\n1\n2\n3\n4\n5\n\n\n# 示例2\n\n配置文件：\n\nsimple:\n  dict:\n    remotebaseurl: http://127.0.0.1:11120\n\n\n1\n2\n3\n\n\n使用：\n\n    @schema(description = "隐藏身份-默认远程调用接口实现类字典")\n    @dictfield(dictionaryparams = "/dict/remote/hideidentity", dictimplclass = remotedictserviceimpl.class, relatedfield = "hideidentitytext")\n    private integer hideidentity;\n    \n    private string hideidentitytext;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 自定义实现\n\n# 示例\n\n    @schema(description = "身份标识-自定义远程调用接口实现类字典")\n    @dictfield(dictionaryparams = "idcard", dictimplclass = customdictserviceimpl.class, relatedfield = "idcardtext")\n    private integer idcard;\n\n    private string idcardtext;\n\n\n1\n2\n3\n4\n5\n\n\n# 自定义实现类\n\n示例代码：customdictserviceimpl 需继承dictservice\n\n@service\npublic class customdictserviceimpl implements dictservice {\n\n    private resttemplate resttemplate = new resttemplate();\n\n    @override\n    public list<dictitem> getdictitemlist(string dictionaryparams) {\n        string path = "http://127.0.0.1:11120/simple-demo-dict/dict/custom/" + dictionaryparams;\n        responseentity<response<list<dictitem>>> responseentity = resttemplate.exchange(path, httpmethod.get, null, new parameterizedtypereference<response<list<dictitem>>>() {\n        });\n        return responseentity.getbody().getdata();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-socket",frontmatter:{title:"simple-starter-socket",date:"2023-03-31T17:24:39.000Z",permalink:"/pages/09cd4bp24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/04.simple-starter-socket.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/04.simple-starter-socket.md",key:"v-76d740a4",path:"/pages/09cd4bp24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:54},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:300},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:691},{level:3,title:"权限认证",slug:"权限认证",normalizedTitle:"权限认证",charIndex:699},{level:3,title:"测试页面",slug:"测试页面",normalizedTitle:"测试页面",charIndex:1458},{level:3,title:"发送消息方法",slug:"发送消息方法",normalizedTitle:"发送消息方法",charIndex:1790},{level:3,title:"集群示例",slug:"集群示例",normalizedTitle:"集群示例",charIndex:2084},{level:4,title:"测试room及token",slug:"测试room及token",normalizedTitle:"测试room及token",charIndex:2092},{level:4,title:"测试多群聊Room",slug:"测试多群聊room",normalizedTitle:"测试多群聊room",charIndex:2591},{level:4,title:"测试带指定微服务连接的客户端",slug:"测试带指定微服务连接的客户端",normalizedTitle:"测试带指定微服务连接的客户端",charIndex:3202}],headersStr:"简介 引入依赖 配置项 功能项 权限认证 测试页面 发送消息方法 集群示例 测试room及token 测试多群聊Room 测试带指定微服务连接的客户端",content:'# 简介\n\n长链接通讯自动装配类，集群使用redis订阅及广播机制，若无redis配置则自动单机化\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-socket</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## 若无redisson配置则自动单机化\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    address: 127.0.0.1\n    password: password\n    database: 0\n  ## simple-starter-socket\n  socket:\n    #长链接通讯及集群 缺省项为false\n    enabled: true\n    port: 12010\n    upgradeTimeout: 1000000\n    pingTimeout: 6000000\n    pingInterval: 25000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 功能项\n\n\n# 权限认证\n\n实现AuthorizationListener\n示例\n\n@Slf4j\n@Configuration\npublic class SocketAuthorization implements AuthorizationListener {\n\n    /**\n     * 连接Url：http://localhost:12010?room=1003&token=1003\n     *\n     * @param data\n     * @return\n     */\n    @Override\n    public boolean isAuthorized(HandshakeData data) {\n        String token = data.getSingleUrlParam("token");\n        String room = data.getSingleUrlParam("room");\n        log.info("socket认证参数: token={}, room={}", token, room);\n        if (StringUtils.isEmpty(token) || StringUtils.isEmpty(room)) {\n            log.error("socket认证失败, 参数不符合要求: token={}, room={}", token, room);\n            return false;\n        }\n        return true;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 测试页面\n\n源码路径：\n\nsrc/main/resources/static/socketio.html\n\n\n1\n\n\n连接示例：\n\nhttp://localhost:12010\n\n\n1\n\n\n带群聊Room\n\nhttp://localhost:12010?room=101\n\n\n1\n\n\n带权限\n\nhttp://localhost:12010?room=101&token=101\n\n\n1\n\n\n多群聊Room\n\nhttp://localhost:12010?room=101,102&token=101,102\n\n\n1\n\n\n指定微服务\n\nhttp://localhost:12010?applicationName=pure-demo-socket\n\n\n1\n\n\n\n# 发送消息方法\n\n注入使用\n\n    @Autowired\n    private SocketIOServer socketIoServer;\n\n\n1\n2\n\n\n广播所有连接客户端\n\nSocketMessageServer.sendBroadcast\n\n\n1\n\n\n仅发送带群聊Room连接的客户端\n\nSocketMessageServer.sendRoom\n\n\n1\n\n\n发送带指定微服务连接的客户端\n（注：会往连接applicationName参数为空的客户端发送msg）\n可自动获取微服务名称并发送消息\n\nSocketMessageServer.sendService\n\n\n1\n\n\n\n# 集群示例\n\n# 测试room及token\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001\n页面2连接工程2的socket ：http://localhost:12020?room=1002\n\n接口调用工程1 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1001\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1002\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面1 页面2接收到数据\n\nhttp://localhost:11040/message/broadcast?message=123\n\n\n1\n\n\n# 测试多群聊Room\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001\n页面2连接工程2的socket ：http://localhost:12020?room=1002,1003\n\n接口调用工程1 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1001\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1002\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1003\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面1 页面2接收到数据\n\nhttp://localhost:11040/message/broadcast?message=123\n\n\n1\n\n\n# 测试带指定微服务连接的客户端\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001&applicationName=simple-demo-socket-two\n页面2连接工程2的socket ：http://localhost:12020?applicationName=simple-demo-socket-one\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/service?message=23\n\n\n1\n\n\n接口调用工程2 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11050/message/service?message=2131\n\n\n1\n',normalizedContent:'# 简介\n\n长链接通讯自动装配类，集群使用redis订阅及广播机制，若无redis配置则自动单机化\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-socket</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## 若无redisson配置则自动单机化\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    address: 127.0.0.1\n    password: password\n    database: 0\n  ## simple-starter-socket\n  socket:\n    #长链接通讯及集群 缺省项为false\n    enabled: true\n    port: 12010\n    upgradetimeout: 1000000\n    pingtimeout: 6000000\n    pinginterval: 25000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 功能项\n\n\n# 权限认证\n\n实现authorizationlistener\n示例\n\n@slf4j\n@configuration\npublic class socketauthorization implements authorizationlistener {\n\n    /**\n     * 连接url：http://localhost:12010?room=1003&token=1003\n     *\n     * @param data\n     * @return\n     */\n    @override\n    public boolean isauthorized(handshakedata data) {\n        string token = data.getsingleurlparam("token");\n        string room = data.getsingleurlparam("room");\n        log.info("socket认证参数: token={}, room={}", token, room);\n        if (stringutils.isempty(token) || stringutils.isempty(room)) {\n            log.error("socket认证失败, 参数不符合要求: token={}, room={}", token, room);\n            return false;\n        }\n        return true;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 测试页面\n\n源码路径：\n\nsrc/main/resources/static/socketio.html\n\n\n1\n\n\n连接示例：\n\nhttp://localhost:12010\n\n\n1\n\n\n带群聊room\n\nhttp://localhost:12010?room=101\n\n\n1\n\n\n带权限\n\nhttp://localhost:12010?room=101&token=101\n\n\n1\n\n\n多群聊room\n\nhttp://localhost:12010?room=101,102&token=101,102\n\n\n1\n\n\n指定微服务\n\nhttp://localhost:12010?applicationname=pure-demo-socket\n\n\n1\n\n\n\n# 发送消息方法\n\n注入使用\n\n    @autowired\n    private socketioserver socketioserver;\n\n\n1\n2\n\n\n广播所有连接客户端\n\nsocketmessageserver.sendbroadcast\n\n\n1\n\n\n仅发送带群聊room连接的客户端\n\nsocketmessageserver.sendroom\n\n\n1\n\n\n发送带指定微服务连接的客户端\n（注：会往连接applicationname参数为空的客户端发送msg）\n可自动获取微服务名称并发送消息\n\nsocketmessageserver.sendservice\n\n\n1\n\n\n\n# 集群示例\n\n# 测试room及token\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001\n页面2连接工程2的socket ：http://localhost:12020?room=1002\n\n接口调用工程1 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1001\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1002\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面1 页面2接收到数据\n\nhttp://localhost:11040/message/broadcast?message=123\n\n\n1\n\n\n# 测试多群聊room\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001\n页面2连接工程2的socket ：http://localhost:12020?room=1002,1003\n\n接口调用工程1 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1001\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1002\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1003\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面1 页面2接收到数据\n\nhttp://localhost:11040/message/broadcast?message=123\n\n\n1\n\n\n# 测试带指定微服务连接的客户端\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001&applicationname=simple-demo-socket-two\n页面2连接工程2的socket ：http://localhost:12020?applicationname=simple-demo-socket-one\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/service?message=23\n\n\n1\n\n\n接口调用工程2 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11050/message/service?message=2131\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-encrypt",frontmatter:{title:"simple-starter-encrypt",date:"2023-04-04T16:37:39.000Z",permalink:"/pages/3e32b3p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/09.simple-starter-encrypt.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/09.simple-starter-encrypt.md",key:"v-83f6c6ac",path:"/pages/3e32b3p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:3,title:"数据脱敏",slug:"数据脱敏",normalizedTitle:"数据脱敏",charIndex:15},{level:3,title:"接口请求参数或返回参数Rsa加密解密",slug:"接口请求参数或返回参数rsa加密解密",normalizedTitle:"接口请求参数或返回参数rsa加密解密",charIndex:21},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:285},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:532},{level:2,title:"功能项-脱敏",slug:"功能项-脱敏",normalizedTitle:"功能项-脱敏",charIndex:1342},{level:3,title:"方法上启用脱敏",slug:"方法上启用脱敏",normalizedTitle:"方法上启用脱敏",charIndex:1353},{level:3,title:"字段脱敏",slug:"字段脱敏",normalizedTitle:"字段脱敏",charIndex:1643},{level:4,title:"已有脱敏模板",slug:"已有脱敏模板",normalizedTitle:"已有脱敏模板",charIndex:1651},{level:4,title:"自定义脱敏规则",slug:"自定义脱敏规则",normalizedTitle:"自定义脱敏规则",charIndex:2004},{level:5,title:"两侧保留明文",slug:"两侧保留明文",normalizedTitle:"两侧保留明文",charIndex:2015},{level:5,title:"两侧密文",slug:"两侧密文",normalizedTitle:"两侧密文",charIndex:2363},{level:3,title:"嵌套实体脱敏",slug:"嵌套实体脱敏",normalizedTitle:"嵌套实体脱敏",charIndex:2713},{level:2,title:"功能项-接口加解密",slug:"功能项-接口加解密",normalizedTitle:"功能项-接口加解密",charIndex:3108},{level:3,title:"接口请求参数解密",slug:"接口请求参数解密",normalizedTitle:"接口请求参数解密",charIndex:133},{level:4,title:"RequestBody类型",slug:"requestbody类型",normalizedTitle:"requestbody类型",charIndex:3162},{level:4,title:"URL查询参数类型",slug:"url查询参数类型",normalizedTitle:"url查询参数类型",charIndex:4388},{level:3,title:"接口返回参数加密",slug:"接口返回参数加密",normalizedTitle:"接口返回参数加密",charIndex:145},{level:3,title:"复合式注解",slug:"复合式注解",normalizedTitle:"复合式注解",charIndex:5913},{level:3,title:"开启全局所有接口加解密",slug:"开启全局所有接口加解密",normalizedTitle:"开启全局所有接口加解密",charIndex:113},{level:4,title:"UnEncrypted注解",slug:"unencrypted注解",normalizedTitle:"unencrypted注解",charIndex:6576}],headersStr:"简介 数据脱敏 接口请求参数或返回参数Rsa加密解密 引入依赖 配置项 功能项-脱敏 方法上启用脱敏 字段脱敏 已有脱敏模板 自定义脱敏规则 两侧保留明文 两侧密文 嵌套实体脱敏 功能项-接口加解密 接口请求参数解密 RequestBody类型 URL查询参数类型 接口返回参数加密 复合式注解 开启全局所有接口加解密 UnEncrypted注解",content:'# 简介\n\n提供注解简化使用：数据脱敏 、接口请求参数或返回参数Rsa加密解密\n\n\n# 数据脱敏\n\n加密规则有通用模板、或自定义\n服务类返回参数支持单体字段、列表、实体嵌套\n\n\n# 接口请求参数或返回参数Rsa加密解密\n\n支持开启全局所有接口加解密\n支持单独注解 对接口请求参数解密 或 对接口返回参数加密\n支持复合注解 对接口请求参数解密 及 对接口返回参数加密\n支持对请求参数增时间戳校验功能 默认关闭 默认校验时间戳的差值为5秒\n对接口请求参数解密 支持如PostMapping的@RequestBody传参解密 支持GetMapping的Url传参解密\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-encrypt</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-encrypt\n  encrypt:\n    desensitized:\n      ##脱敏 缺省项为true\n      enabled: true\n    rsa:\n      ## 接口加密\n      secureParams:\n        ## 接口请求参数或返回参数Rsa加密解密 缺省项为true\n        enabled: true\n        ## URL查询参数的请求字段 例：https://ok96.cn/api?encryptedData=xxxxxxx\n        urlField: encryptedData\n\t\t## 默认关闭全局使用Mapping注解接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: false\n      ## 时间戳校验\n      timestampValidation:\n        ## 默认关闭校验校验时间戳 缺省项为false\n        enabled: true\n        ## 校验时间戳的差值 毫秒 默认5秒\n        expiryMillis: 60000\n      ## 公钥 \n      publicKey: |\n        MIIBIjAN....\n        wQIDAQAB\n      ## 私钥 \n      privateKey: |\n        MIIEvgIBAD...\n        s3pFfsfHFj\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 功能项-脱敏\n\n\n# 方法上启用脱敏\n\n在方法上标注注解：@Desensitized\n例：\n\n    @Desensitized\n    public PersonVo getPerson() {\n        return PersonVo.builder().name("张三").idCard("350061323543513135").address("离开省和你市好多天县谢谢谢谢谢奥所多").phone("15151115112").remark("我是备注奥术大师大所多").normalField("艾维奇重新阿萨德若").build();\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 字段脱敏\n\n# 已有脱敏模板\n\n模板列表：\n\nSensitiveRule.CHINESE_NAME\nSensitiveRule.ID_CARD\nSensitiveRule.FIXED_PHONE\nSensitiveRule.MOBILE_PHONE\nSensitiveRule.ADDRESS\nSensitiveRule.EMAIL\nSensitiveRule.BANK_CARD\nSensitiveRule.PASSWORD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n示例：\n\n    @Schema(description = "地址")\n    @SensitiveField(rule = SensitiveRule.ADDRESS)\n    private String address;\n\n\n1\n2\n3\n\n\n# 自定义脱敏规则\n\n# 两侧保留明文\n\n注解：@SensitiveField(rule = SensitiveRule.CUSTOM_BROADSIDE_CLEAR_TEXT, prefixLen = int, suffixLen = int)\nprefixLen:自定义规则-左侧几位字段进行操作\nsuffixLen:自定义规则-右侧几位字段进行操作\n示例：\n\n    @Schema(description = "备注-两侧保留明文")\n    @SensitiveField(rule = SensitiveRule.CUSTOM_BROADSIDE_CLEAR_TEXT, prefixLen = 2, suffixLen = 2)\n    private String remark;\n\n\n1\n2\n3\n\n\n# 两侧密文\n\n注解：@SensitiveField(rule = SensitiveRule.CUSTOM_BROADSIDE_MASK_TEXT, prefixLen = int, suffixLen = int)\nprefixLen:自定义规则-左侧几位字段进行操作\nsuffixLen:自定义规则-右侧几位字段进行操作\n示例：\n\n    @Schema(description = "普通字段-两侧密文")\n    @SensitiveField(rule = SensitiveRule.CUSTOM_BROADSIDE_MASK_TEXT, prefixLen = 2, suffixLen = 2)\n    private String normalField;\n\n\n1\n2\n3\n\n\n\n# 嵌套实体脱敏\n\n注解：@SensitiveEntity 示例：\n\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SuperPersonVo {\n\n    @SensitiveEntity\n    private PersonVo personVo;\n\n    @Schema(description = "昵称")\n    @SensitiveField(rule = SensitiveRule.CHINESE_NAME)\n    private String nickname;\n\n    @Schema(description = "功能")\n    private String specificFunction;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 功能项-接口加解密\n\n\n# 接口请求参数解密\n\n使用注解 @DecryptRequestParams\n\n# RequestBody类型\n\n例代码：\n\n    @Operation(summary = "注解测试-请求参数解密-POST")\n    @DecryptRequestParams\n    @PostMapping(value = "/decryptRequestParams")\n    public Response<PersonVo> decryptRequestParams(@RequestBody PersonVo vo) {\n        return Response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在调用接口请求参数，直接传参为加密后的数据，例-直接传参数：\n\nG0JIO0kZgZpJ68MV91CTgadZqpUvlKTZbiC8CB4IKcjFYUjHur8PF5N5YT7APwNzr28887h5FRjJHMP+PDkAZcXhRecdouFUcaPxTBTgIvUawKsk95c6rJdS7K6VwJAGlKTMS//kkStsGcGlyjGdo/XTeQds7SCuv9Tk2umUKoFXcbWYJbXmtV5u/6iG22aEH48LhoVF0OpABSFMemFuZ5AMNeEd0YUGhg18gqmopTw7V8bHtvI22xdASg87lsThCBY6aoUC8MkxALwOsptlllOTgZkdOoXrHoHyiYFbEI7fNmXLEvaDfBYmlzDyvE18SGCrWA9bJmByPU5xxF+dpD7ITYZmNS3JNRSMSdpcMbFmzrVkfUjKCBe2IOe4dLhfNDjWAXXtLqiq3rVuGp6L/ODMBF7y5RY4yy/6GXRHd9jN82x0kkSi9a5jRNYWB7w4xsOt4vJvYDYGWnmTcSu2UZWsJFXbgbkTuTJO/h8RJ+eaMbKC33uraYX02XtHwBKRdDMSdNF5IXEHoE7XpbYYBau9SDieiJHRT/ybzRxmwedqezw6DxbSi928GCCJQmgrrewHKwhKrSsrObuyKjzgc8RMxQev5PC3OXL3WzyD4juuGmnJnW9OSNSiB08rw3tYU0yxSrLv8nWx+mF4isRmKetmVp51854G2GrjQrc/8lg=\n\n\n1\n\n\n则 后端接收后将解析解密为对应 PersonVo 实体\n\n{\n    "name":"张三",\n    "phone":"15151115112",\n    "address":"离开省和你市好多天县谢谢谢谢谢奥所多",\n    "remark":"我是备注奥术大师大所多",\n    "idCard":"350061323543513135",\n    "normalField":"艾维奇重新阿萨德若"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# URL查询参数类型\n\n例代码：\n\n    @Operation(summary = "注解测试-请求参数解密-GET")\n    @DecryptRequestParams\n    @GetMapping(value = "/decryptRequestParams")\n    public Response<PersonVo> decryptRequestParamsGet(PersonVo vo) {\n        return Response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在调用接口请求参数，接口传参示例地址为：\n\nhttp://localhost:11110/rsa/decryptRequestParams?encryptedData=lxP7pSLwIuXSpDLqSZ3V.....\n\n\n1\n\n\n若想统一修改请求参数字段encryptedData，则修改如下配置文件\n\nsimple.encrypt.rsa.secureParams.urlField=encryptedData\n\n\n1\n\n\n\n# 接口返回参数加密\n\n使用注解 @EncryptResponseParams\n例代码：\n\n    @Operation(summary = "注解测试-返回参数加密")\n    @GetMapping(value = "/encryptResponse")\n    @EncryptResponseParams\n    public Response<String> encryptResponse(String reqString) {\n        return Response.ok(reqString);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在接口返回数据时，例 原返回数据\n\n{"code":200,"msg":"操作成功","data":"s"}\n\n\n1\n\n\n则会将此数据进行加密返回\n\nHWerZn2f5LP38JeUNUTcjTRVWbY530VvcpxtGkKZKz5pdPT5GU62xPHgcztc38eqGtk3HznDBDBFtC9Hbu/4o0XVveLXxZDyXHcD6K6pGt24bywJf0dvrZpYFVcgt39qaZ+MwNCGOnphOgK57kxoc8jzHjvylwMSeIsj+qmhMI1j9igRWq2IP/9/KaVnlBkt6Q5O/4kRztkRtnr2Bu04uwpyGFYYhu6szrVfhEVNrHnCq5hHGJIR40FHN3vN+IsiAKL6+7b7YU9RjcbH5NzGIacbJcnLveOF4zUfKpNMvspBxhEhV1lcNcbZoMqHw6NchBD6IdWAvORRQLOcmQbgRlwPDsE/miHfqp1/5x6C5+EYSnw0i/I6WxsclJ9nSCcLtTQdjiS1ERTMHENAYWrh+LR5xtK7gBV+z1N1pBkPW0VlIRO7Fo70sQRQ1pYQTBSEz+oRFFSt146V9z9TlsNUqes5k1SMsr5Of+XCYIAcXP+1pefhYHkj0u4HX5KOuxWSSUFqkkaXxWWVC0Jy9+LB+0q5qAqDWK1uHLYfH5Eij1aVbK6kgr0YzTA/hlUNG3rFxF4e5dsQqsDNtcpT4ryxeFvGge6ezzQga2irdBb4yjb+FcwqiGNFT+1MXBW9YGvFYMFj1tyM5gUqei82qk6zibcYC3yPHC5d+2K4g6YNPyo=\n\n\n1\n\n\n\n# 复合式注解\n\n此注解集成 接口请求参数解密 和 接口返回参数加密 ：@SecureParams\n代码示例：\n\n    @Operation(summary = "注解测试-请求参数解密及返回参数加密")\n    @SecureParams\n    @PostMapping(value = "/decryptAndEncrypt")\n    public Response<PersonVo> decryptAndEncrypt(@RequestBody PersonVo vo) {\n        return Response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 开启全局所有接口加解密\n\n配置参数开启\n\nsimple:\n  encrypt:\n    rsa:\n      secureParams:\n        enabled: true\n        urlField: encryptedData\n        #是否启用将所有使用Mapping注解的接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n等价于所有使用@RequestMapping、@GetMapping、@PostMapping、@PutMapping、@DeleteMapping的接口上均增加使用注解@SecureParams\n\n# UnEncrypted注解\n\n若需在开启全局加解密功能时，对特定接口无需加解密，在接口上使用@UnEncrypted即可\n\n    @Operation(summary = "测试单体")\n    @GetMapping(value = "/person")\n    @UnEncrypted\n    public Response<PersonVo> person() {\n        return Response.ok(service.getPerson());\n    }\n\n\n1\n2\n3\n4\n5\n6\n',normalizedContent:'# 简介\n\n提供注解简化使用：数据脱敏 、接口请求参数或返回参数rsa加密解密\n\n\n# 数据脱敏\n\n加密规则有通用模板、或自定义\n服务类返回参数支持单体字段、列表、实体嵌套\n\n\n# 接口请求参数或返回参数rsa加密解密\n\n支持开启全局所有接口加解密\n支持单独注解 对接口请求参数解密 或 对接口返回参数加密\n支持复合注解 对接口请求参数解密 及 对接口返回参数加密\n支持对请求参数增时间戳校验功能 默认关闭 默认校验时间戳的差值为5秒\n对接口请求参数解密 支持如postmapping的@requestbody传参解密 支持getmapping的url传参解密\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-encrypt</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-encrypt\n  encrypt:\n    desensitized:\n      ##脱敏 缺省项为true\n      enabled: true\n    rsa:\n      ## 接口加密\n      secureparams:\n        ## 接口请求参数或返回参数rsa加密解密 缺省项为true\n        enabled: true\n        ## url查询参数的请求字段 例：https://ok96.cn/api?encrypteddata=xxxxxxx\n        urlfield: encrypteddata\n\t\t## 默认关闭全局使用mapping注解接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: false\n      ## 时间戳校验\n      timestampvalidation:\n        ## 默认关闭校验校验时间戳 缺省项为false\n        enabled: true\n        ## 校验时间戳的差值 毫秒 默认5秒\n        expirymillis: 60000\n      ## 公钥 \n      publickey: |\n        miibijan....\n        wqidaqab\n      ## 私钥 \n      privatekey: |\n        miievgibad...\n        s3pffsfhfj\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 功能项-脱敏\n\n\n# 方法上启用脱敏\n\n在方法上标注注解：@desensitized\n例：\n\n    @desensitized\n    public personvo getperson() {\n        return personvo.builder().name("张三").idcard("350061323543513135").address("离开省和你市好多天县谢谢谢谢谢奥所多").phone("15151115112").remark("我是备注奥术大师大所多").normalfield("艾维奇重新阿萨德若").build();\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 字段脱敏\n\n# 已有脱敏模板\n\n模板列表：\n\nsensitiverule.chinese_name\nsensitiverule.id_card\nsensitiverule.fixed_phone\nsensitiverule.mobile_phone\nsensitiverule.address\nsensitiverule.email\nsensitiverule.bank_card\nsensitiverule.password\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n示例：\n\n    @schema(description = "地址")\n    @sensitivefield(rule = sensitiverule.address)\n    private string address;\n\n\n1\n2\n3\n\n\n# 自定义脱敏规则\n\n# 两侧保留明文\n\n注解：@sensitivefield(rule = sensitiverule.custom_broadside_clear_text, prefixlen = int, suffixlen = int)\nprefixlen:自定义规则-左侧几位字段进行操作\nsuffixlen:自定义规则-右侧几位字段进行操作\n示例：\n\n    @schema(description = "备注-两侧保留明文")\n    @sensitivefield(rule = sensitiverule.custom_broadside_clear_text, prefixlen = 2, suffixlen = 2)\n    private string remark;\n\n\n1\n2\n3\n\n\n# 两侧密文\n\n注解：@sensitivefield(rule = sensitiverule.custom_broadside_mask_text, prefixlen = int, suffixlen = int)\nprefixlen:自定义规则-左侧几位字段进行操作\nsuffixlen:自定义规则-右侧几位字段进行操作\n示例：\n\n    @schema(description = "普通字段-两侧密文")\n    @sensitivefield(rule = sensitiverule.custom_broadside_mask_text, prefixlen = 2, suffixlen = 2)\n    private string normalfield;\n\n\n1\n2\n3\n\n\n\n# 嵌套实体脱敏\n\n注解：@sensitiveentity 示例：\n\n@builder\n@noargsconstructor\n@allargsconstructor\npublic class superpersonvo {\n\n    @sensitiveentity\n    private personvo personvo;\n\n    @schema(description = "昵称")\n    @sensitivefield(rule = sensitiverule.chinese_name)\n    private string nickname;\n\n    @schema(description = "功能")\n    private string specificfunction;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 功能项-接口加解密\n\n\n# 接口请求参数解密\n\n使用注解 @decryptrequestparams\n\n# requestbody类型\n\n例代码：\n\n    @operation(summary = "注解测试-请求参数解密-post")\n    @decryptrequestparams\n    @postmapping(value = "/decryptrequestparams")\n    public response<personvo> decryptrequestparams(@requestbody personvo vo) {\n        return response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在调用接口请求参数，直接传参为加密后的数据，例-直接传参数：\n\ng0jio0kzgzpj68mv91ctgadzqpuvlktzbic8cb4ikcjfyujhur8pf5n5yt7apwnzr28887h5frjjhmp+pdkazcxhrecdoufucapxtbtgivuawksk95c6rjds7k6vwjaglktms//kkstsgcglyjgdo/xteqds7scuv9tk2umukofxcbwyjbxmtv5u/6ig22aeh48lhovf0opabsfmemfuz5amneed0yughg18gqmoptw7v8bhtvi22xdasg87lsthcby6aouc8mkxalwosptlllotgzkdooxrhohyiyfbei7fnmxlevadfbymlzdyve18sgcrwa9bjmbypu5xxf+dpd7ityzmns3jnrsmsdpcmbfmzrvkfujkcbe2ioe4dlhfndjwaxxtlqiq3rvugp6l/odmbf7y5ry4yy/6gxrhd9jn82x0kksi9a5jrnywb7w4xsot4vjvydygwnmtcsu2uzwsjfxbgbktutjo/h8rj+eambkc33urayx02xthwbkrddmsdnf5ixehoe7xpbyybau9sdieijhrt/ybzrxmwedqezw6dxbsi928gccjqmgrrewhkwhkrssrobuykjzgc8rmxqev5pc3oxl3wzyd4juugmnjnw9osnsib08rw3tyu0yxsrlv8nwx+mf4isrmketmvp51854g2grjqrc/8lg=\n\n\n1\n\n\n则 后端接收后将解析解密为对应 personvo 实体\n\n{\n    "name":"张三",\n    "phone":"15151115112",\n    "address":"离开省和你市好多天县谢谢谢谢谢奥所多",\n    "remark":"我是备注奥术大师大所多",\n    "idcard":"350061323543513135",\n    "normalfield":"艾维奇重新阿萨德若"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# url查询参数类型\n\n例代码：\n\n    @operation(summary = "注解测试-请求参数解密-get")\n    @decryptrequestparams\n    @getmapping(value = "/decryptrequestparams")\n    public response<personvo> decryptrequestparamsget(personvo vo) {\n        return response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在调用接口请求参数，接口传参示例地址为：\n\nhttp://localhost:11110/rsa/decryptrequestparams?encrypteddata=lxp7pslwiuxspdlqsz3v.....\n\n\n1\n\n\n若想统一修改请求参数字段encrypteddata，则修改如下配置文件\n\nsimple.encrypt.rsa.secureparams.urlfield=encrypteddata\n\n\n1\n\n\n\n# 接口返回参数加密\n\n使用注解 @encryptresponseparams\n例代码：\n\n    @operation(summary = "注解测试-返回参数加密")\n    @getmapping(value = "/encryptresponse")\n    @encryptresponseparams\n    public response<string> encryptresponse(string reqstring) {\n        return response.ok(reqstring);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在接口返回数据时，例 原返回数据\n\n{"code":200,"msg":"操作成功","data":"s"}\n\n\n1\n\n\n则会将此数据进行加密返回\n\nhwerzn2f5lp38jeunutcjtrvwby530vvcpxtgkkzkz5pdpt5gu62xphgcztc38eqgtk3hzndbdbftc9hbu/4o0xvvelxxzdyxhcd6k6pgt24bywjf0dvrzpyfvcgt39qaz+mwncgonphogk57kxoc8jzhjvylwmseisj+qmhmi1j9igrwq2ip/9/kavnlbkt6q5o/4krztkrtnr2bu04uwpygfyyhu6szrvfhevnrhncq5hhgjir40fhn3vn+isiakl6+7b7yu9rjcbh5nzgiacbjcnlveof4zufkpnmvspbxhehv1lcncbzomqhw6nchbd6idwavorrqlocmqbgrlwpdse/mihfqp1/5x6c5+eysnw0i/i6wxsclj9nscclttqdjis1ertmhenaywrh+lr5xtk7gbv+z1n1pbkpw0vliro7fo70sqrq1pyqtbsez+orffst146v9z9tlsnuqes5k1smsr5of+xcyiacxp+1pefhyhkj0u4hx5kouxwssufqkkaxxwwvc0jy9+lb+0q5qaqdwk1uhlyfh5eij1avbk6kgr0yzta/hlung3rfxf4e5dsqqsdntcpt4ryxefvgge6ezzqga2irdbb4yjb+fcwqignft+1mxbw9ygvfymfj1tym5guqei82qk6zibcyc3yphc5d+2k4g6ynpyo=\n\n\n1\n\n\n\n# 复合式注解\n\n此注解集成 接口请求参数解密 和 接口返回参数加密 ：@secureparams\n代码示例：\n\n    @operation(summary = "注解测试-请求参数解密及返回参数加密")\n    @secureparams\n    @postmapping(value = "/decryptandencrypt")\n    public response<personvo> decryptandencrypt(@requestbody personvo vo) {\n        return response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 开启全局所有接口加解密\n\n配置参数开启\n\nsimple:\n  encrypt:\n    rsa:\n      secureparams:\n        enabled: true\n        urlfield: encrypteddata\n        #是否启用将所有使用mapping注解的接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n等价于所有使用@requestmapping、@getmapping、@postmapping、@putmapping、@deletemapping的接口上均增加使用注解@secureparams\n\n# unencrypted注解\n\n若需在开启全局加解密功能时，对特定接口无需加解密，在接口上使用@unencrypted即可\n\n    @operation(summary = "测试单体")\n    @getmapping(value = "/person")\n    @unencrypted\n    public response<personvo> person() {\n        return response.ok(service.getperson());\n    }\n\n\n1\n2\n3\n4\n5\n6\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-email",frontmatter:{title:"simple-starter-email",date:"2023-05-29T14:36:54.000Z",permalink:"/pages/6c8e05p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/11.simple-starter-email.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/11.simple-starter-email.md",key:"v-3f884dac",path:"/pages/6c8e05p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:19},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:264},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:504},{level:3,title:"使用示例",slug:"使用示例",normalizedTitle:"使用示例",charIndex:512},{level:4,title:"基础使用-工程配置项",slug:"基础使用-工程配置项",normalizedTitle:"基础使用-工程配置项",charIndex:520},{level:4,title:"配置使用",slug:"配置使用",normalizedTitle:"配置使用",charIndex:1910}],headersStr:"简介 引入依赖 配置项 功能项 使用示例 基础使用-工程配置项 配置使用",content:'# 简介\n\n提供发送邮件使用\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-email</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  email:\n    config:\n      ##SMTP服务器host\n      smtpHost:\n      ##SMTP服务器端口号\n      smtpPort:\n      ##发件人邮箱用户名\n      username:\n      ##发件人邮箱密码\n      password:\n      ##发件人邮箱地址\n      fromEmail:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 功能项\n\n\n# 使用示例\n\n# 基础使用-工程配置项\n\n注入服务类\n\n    @Autowired\n    private EmailService emailService;\n\n\n1\n2\n\n\n发送电子邮件\n\n    @Operation(summary = "发送电子邮件")\n    @GetMapping(value = "/sendEmail")\n    public Response<?> sendEmailSinglePerson(@ParameterObject SendEmailVo vo) throws MessagingException, IOException {\n        emailService.sendEmail(vo.getToEmails(), vo.getCcEmails(), vo.getBccEmails(), vo.getSubject(), vo.getContent(), vo.getIsHtml(), vo.getAttachments(), vo.getInlineImages());\n        return Response.ok();\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n发送参数\n\n@Data\npublic class SendEmailVo {\n    @Schema(description = "收件人的电子邮件地址", example = "testxxx@qq.com,testxxx@foxmail.com")\n    private List<String> toEmails;\n    @Schema(description = "抄送人的电子邮件地址列表", example = "testyyy@qq.com,testyyy@foxmail.com")\n    private List<String> ccEmails;\n    @Schema(description = "附件文件的路径列表", example = "E:\\\\temp\\\\新建文本文档.txt")\n    private List<String> attachments;\n    @Schema(description = "邮件主题")\n    private String subject;\n    @Schema(description = "邮件内容")\n    private String content;\n    @Schema(description = "指示邮件内容是否为HTML格式", defaultValue = "false")\n    private Boolean isHtml;\n    @Schema(description = "密送人的电子邮件地址列表", example = "testzzz@qq.com")\n    private List<String> bccEmails;\n    @Schema(description = "内联图片的路径和CID映射", hidden = true)\n    Map<String, String> inlineImages;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n# 配置使用\n\n指：发送邮件时配置发件人邮件配置参数\n\nEmailService使用下列方法\n\n\n    /**\n     * 发送电子邮件方法\n     *\n     * @param toEmails      收件人的电子邮件地址列表\n     * @param ccEmails      抄送人的电子邮件地址列表\n     * @param bccEmails     密送人的电子邮件地址列表\n     * @param subject       邮件主题\n     * @param content       邮件内容\n     * @param isHtml        指示邮件内容是否为HTML格式\n     * @param attachments   附件文件的路径列表\n     * @param inlineImages  内联图片的路径和CID映射\n     * @param emailConfigVo 发件人邮件配置参数\n     * @throws MessagingException 发送邮件时可能抛出的异常\n     * @throws IOException        读取附件文件时可能抛出的异常\n     */\n    public void sendEmail(List<String> toEmails, List<String> ccEmails, List<String> bccEmails, String subject, String content, boolean isHtml, List<String> attachments, Map<String, String> inlineImages, EmailConfigVo emailConfigVo)\n            throws MessagingException, IOException {\n        Session session = createSession(emailConfigVo);\n        Message message = createMessage(session, toEmails, ccEmails, bccEmails, subject, content, isHtml, attachments, inlineImages, emailConfigVo.getFromEmail());\n        Transport.send(message);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n',normalizedContent:'# 简介\n\n提供发送邮件使用\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-email</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  email:\n    config:\n      ##smtp服务器host\n      smtphost:\n      ##smtp服务器端口号\n      smtpport:\n      ##发件人邮箱用户名\n      username:\n      ##发件人邮箱密码\n      password:\n      ##发件人邮箱地址\n      fromemail:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 功能项\n\n\n# 使用示例\n\n# 基础使用-工程配置项\n\n注入服务类\n\n    @autowired\n    private emailservice emailservice;\n\n\n1\n2\n\n\n发送电子邮件\n\n    @operation(summary = "发送电子邮件")\n    @getmapping(value = "/sendemail")\n    public response<?> sendemailsingleperson(@parameterobject sendemailvo vo) throws messagingexception, ioexception {\n        emailservice.sendemail(vo.gettoemails(), vo.getccemails(), vo.getbccemails(), vo.getsubject(), vo.getcontent(), vo.getishtml(), vo.getattachments(), vo.getinlineimages());\n        return response.ok();\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n发送参数\n\n@data\npublic class sendemailvo {\n    @schema(description = "收件人的电子邮件地址", example = "testxxx@qq.com,testxxx@foxmail.com")\n    private list<string> toemails;\n    @schema(description = "抄送人的电子邮件地址列表", example = "testyyy@qq.com,testyyy@foxmail.com")\n    private list<string> ccemails;\n    @schema(description = "附件文件的路径列表", example = "e:\\\\temp\\\\新建文本文档.txt")\n    private list<string> attachments;\n    @schema(description = "邮件主题")\n    private string subject;\n    @schema(description = "邮件内容")\n    private string content;\n    @schema(description = "指示邮件内容是否为html格式", defaultvalue = "false")\n    private boolean ishtml;\n    @schema(description = "密送人的电子邮件地址列表", example = "testzzz@qq.com")\n    private list<string> bccemails;\n    @schema(description = "内联图片的路径和cid映射", hidden = true)\n    map<string, string> inlineimages;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n# 配置使用\n\n指：发送邮件时配置发件人邮件配置参数\n\nemailservice使用下列方法\n\n\n    /**\n     * 发送电子邮件方法\n     *\n     * @param toemails      收件人的电子邮件地址列表\n     * @param ccemails      抄送人的电子邮件地址列表\n     * @param bccemails     密送人的电子邮件地址列表\n     * @param subject       邮件主题\n     * @param content       邮件内容\n     * @param ishtml        指示邮件内容是否为html格式\n     * @param attachments   附件文件的路径列表\n     * @param inlineimages  内联图片的路径和cid映射\n     * @param emailconfigvo 发件人邮件配置参数\n     * @throws messagingexception 发送邮件时可能抛出的异常\n     * @throws ioexception        读取附件文件时可能抛出的异常\n     */\n    public void sendemail(list<string> toemails, list<string> ccemails, list<string> bccemails, string subject, string content, boolean ishtml, list<string> attachments, map<string, string> inlineimages, emailconfigvo emailconfigvo)\n            throws messagingexception, ioexception {\n        session session = createsession(emailconfigvo);\n        message message = createmessage(session, toemails, ccemails, bccemails, subject, content, ishtml, attachments, inlineimages, emailconfigvo.getfromemail());\n        transport.send(message);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-gateway",frontmatter:{title:"simple-starter-gateway",date:"2023-07-07T10:22:52.000Z",permalink:"/pages/b688b7p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/12.simple-starter-gateway.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/12.simple-starter-gateway.md",key:"v-7ce56fec",path:"/pages/b688b7p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"网关聚合文档效果",slug:"网关聚合文档效果",normalizedTitle:"网关聚合文档效果",charIndex:64},{level:3,title:"支持网关配置过滤器为->将请求的路径前缀去除",slug:"支持网关配置过滤器为-将请求的路径前缀去除",normalizedTitle:"支持网关配置过滤器为-&gt;将请求的路径前缀去除",charIndex:null},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:1275},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:1522},{level:3,title:"Nacos远程配置中心",slug:"nacos远程配置中心",normalizedTitle:"nacos远程配置中心",charIndex:1530},{level:3,title:"本地工程配置",slug:"本地工程配置",normalizedTitle:"本地工程配置",charIndex:1714},{level:3,title:"Add VM options",slug:"add-vm-options",normalizedTitle:"add vm options",charIndex:2444},{level:3,title:"效果图",slug:"效果图",normalizedTitle:"效果图",charIndex:2659},{level:4,title:"网关聚合微服务列表",slug:"网关聚合微服务列表",normalizedTitle:"网关聚合微服务列表",charIndex:2666},{level:4,title:"网关聚合微服务接口",slug:"网关聚合微服务接口",normalizedTitle:"网关聚合微服务接口",charIndex:2681}],headersStr:"简介 网关聚合文档效果 支持网关配置过滤器为->将请求的路径前缀去除 引入依赖 配置项 Nacos远程配置中心 本地工程配置 Add VM options 效果图 网关聚合微服务列表 网关聚合微服务接口",content:'# 简介\n\n将常用微服务网关的依赖集成，便于使用\n增加网关聚合文档兼容性，支持网关配置过滤器为->将请求的路径前缀去除\n\n\n# 网关聚合文档效果\n\n\n# 支持网关配置过滤器为->将请求的路径前缀去除\n\n网关效果如下：\n\n单体服务 接口地址 访问http://localhost:11100/simple-demo-cloud/hello/world\n通过网关 接口地址 访问http://localhost:11000/simple-demo-cloud/hello/world\n\n\n1\n2\n\n\n网关配置\n\nspring:\n  application:\n    name: simple-demo-gateway\n  cloud:\n    nacos:\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          lowerCaseServiceId: true\n          enabled: true\n          # 配置过滤器为->将请求的路径前缀去除\n          filters:\n            - name: StripPrefix\n              args:\n                parts: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n聚合文档兼容效果：\n打开网关接口文档地址： http://localhost:11000/doc.html\n展示接口地址内容与微服务文档地址内容一致：http://localhost:11100/doc.html\n\n注：微服务接口代码，Mapping中需包含微服务名称，网关才能正确转发：\n\n@RestController\n@RequestMapping("/simple-demo-cloud/hello")\n@Tag(name = "你好")\npublic class HelloController {\n\n    @Operation(summary = "世界")\n    @GetMapping(value = "/world")\n    public String world() {\n        return "simple-demo-cloud: hello world";\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n不在配置文件中写 server.servlet.context-path=simple-demo-cloud 的原因为:\n\n当所有微服务融合为单体工程时，接口地址将发生根本性改变，从而增加修改调用接口地址的工作量。\n\n微服务是否需要融合为单体工程，可视服务器资源情况决定\n\n兼容该功能涉及代码\n\nsimple-starter-web\n\nsimple-starter-gateway\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-gateway</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\n\n# Nacos远程配置中心\n\n示例：application.yml 公共-通用配置\n\nsimple:\n  openApi:\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: ku29@qq.com\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 本地工程配置\n\napplication.yml\n\nserver:\n  port: 11000\nspring:\n  application:\n    name: simple-demo-gateway\n  cloud:\n    nacos:\n      server-addr: http://127.0.0.1:8848\n      username:\n      password:\n      discovery:\n        registerEnabled: true\n        namespace:\n      config:\n        namespace:\n        file-extension: yml\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          lowerCaseServiceId: true\n          enabled: true\n  config:\n    import:\n      - nacos:application.yml\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      enabled: true\n      version: openapi3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# Add VM options\n\n-Dspring.cloud.nacos.server-addr=\n-Dspring.cloud.nacos.username=nacos\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\n\n# 效果图\n\n# 网关聚合微服务列表\n\n\n\n# 网关聚合微服务接口\n\n网关页面调用接口-端口11000 单体服务调用接口-端口11010',normalizedContent:'# 简介\n\n将常用微服务网关的依赖集成，便于使用\n增加网关聚合文档兼容性，支持网关配置过滤器为->将请求的路径前缀去除\n\n\n# 网关聚合文档效果\n\n\n# 支持网关配置过滤器为->将请求的路径前缀去除\n\n网关效果如下：\n\n单体服务 接口地址 访问http://localhost:11100/simple-demo-cloud/hello/world\n通过网关 接口地址 访问http://localhost:11000/simple-demo-cloud/hello/world\n\n\n1\n2\n\n\n网关配置\n\nspring:\n  application:\n    name: simple-demo-gateway\n  cloud:\n    nacos:\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          lowercaseserviceid: true\n          enabled: true\n          # 配置过滤器为->将请求的路径前缀去除\n          filters:\n            - name: stripprefix\n              args:\n                parts: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n聚合文档兼容效果：\n打开网关接口文档地址： http://localhost:11000/doc.html\n展示接口地址内容与微服务文档地址内容一致：http://localhost:11100/doc.html\n\n注：微服务接口代码，mapping中需包含微服务名称，网关才能正确转发：\n\n@restcontroller\n@requestmapping("/simple-demo-cloud/hello")\n@tag(name = "你好")\npublic class hellocontroller {\n\n    @operation(summary = "世界")\n    @getmapping(value = "/world")\n    public string world() {\n        return "simple-demo-cloud: hello world";\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n不在配置文件中写 server.servlet.context-path=simple-demo-cloud 的原因为:\n\n当所有微服务融合为单体工程时，接口地址将发生根本性改变，从而增加修改调用接口地址的工作量。\n\n微服务是否需要融合为单体工程，可视服务器资源情况决定\n\n兼容该功能涉及代码\n\nsimple-starter-web\n\nsimple-starter-gateway\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-gateway</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\n\n# nacos远程配置中心\n\n示例：application.yml 公共-通用配置\n\nsimple:\n  openapi:\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: ku29@qq.com\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 本地工程配置\n\napplication.yml\n\nserver:\n  port: 11000\nspring:\n  application:\n    name: simple-demo-gateway\n  cloud:\n    nacos:\n      server-addr: http://127.0.0.1:8848\n      username:\n      password:\n      discovery:\n        registerenabled: true\n        namespace:\n      config:\n        namespace:\n        file-extension: yml\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          lowercaseserviceid: true\n          enabled: true\n  config:\n    import:\n      - nacos:application.yml\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      enabled: true\n      version: openapi3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# add vm options\n\n-dspring.cloud.nacos.server-addr=\n-dspring.cloud.nacos.username=nacos\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\n\n# 效果图\n\n# 网关聚合微服务列表\n\n\n\n# 网关聚合微服务接口\n\n网关页面调用接口-端口11000 单体服务调用接口-端口11010',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-base-config",frontmatter:{title:"simple-base-config",date:"2023-03-31T15:15:18.000Z",permalink:"/pages/0f3b13p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/03.%E6%9C%8D%E5%8A%A1%E7%B1%BB%E6%A8%A1%E5%9D%97/01.simple-base-config.html",relativePath:"05.OpenSource/03.2024.1.1.1/03.服务类模块/01.simple-base-config.md",key:"v-4326dec4",path:"/pages/0f3b13p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"拆分客户端及服务端使用",slug:"拆分客户端及服务端使用",normalizedTitle:"拆分客户端及服务端使用",charIndex:248},{level:3,title:"启动服务端",slug:"启动服务端",normalizedTitle:"启动服务端",charIndex:75},{level:3,title:"引入客户端",slug:"引入客户端",normalizedTitle:"引入客户端",charIndex:68},{level:4,title:"引入依赖-方式1",slug:"引入依赖-方式1",normalizedTitle:"引入依赖-方式1",charIndex:1041},{level:4,title:"引入依赖-方式2",slug:"引入依赖-方式2",normalizedTitle:"引入依赖-方式2",charIndex:1308},{level:4,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:1616},{level:4,title:"存储数据",slug:"存储数据",normalizedTitle:"存储数据",charIndex:2413},{level:4,title:"获取数据",slug:"获取数据",normalizedTitle:"获取数据",charIndex:4393},{level:4,title:"工具类 ConfigUtils",slug:"工具类-configutils",normalizedTitle:"工具类 configutils",charIndex:5237},{level:2,title:"融合客户端和服务端使用",slug:"融合客户端和服务端使用",normalizedTitle:"融合客户端和服务端使用",charIndex:5273},{level:4,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:183},{level:4,title:"查看服务端接口",slug:"查看服务端接口",normalizedTitle:"查看服务端接口",charIndex:5565}],headersStr:"简介 拆分客户端及服务端使用 启动服务端 引入客户端 引入依赖-方式1 引入依赖-方式2 配置项 存储数据 获取数据 工具类 ConfigUtils 融合客户端和服务端使用 引入依赖 查看服务端接口",content:'# 简介\n\n可作用于系统基础配置参数\n\n模块\n\nsimple-base-config-api 参数配置服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：启动自动初始化配置值到数据库中、可选覆盖数据\nsimple-base-config-service 参数配置服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：数据表结构将自动创建、开放基础调用接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动BaseConfigServiceApplication的vm配置--无需连接Nacos\n\n-Dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n若要连接Nacos则再增加配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-config-api</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-config-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接Nacos则再增加vm配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-config-api\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9010\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n# 存储数据\n\n启动自动初始化数据\n\n示例：\n\n/**\n * 初始化数据\n * <p>\n * 创建初始化对象，提供一些常量和方法实现\n *\n * @author ok1996\n */\n@Component\npublic class DemoTestConfigInit {\n    /**\n     * 一班参数key\n     */\n    public static final String STUDENT_KEY_ONE = "student-key-test-one";\n\n    /**\n     * 二班参数key\n     */\n    public static final String STUDENT_KEY_TWO = "student-key-test-two";\n\n    @Bean\n    public ConfigInit studentTestOneInit() {\n        ConfigInit configInit = new ConfigInit(STUDENT_KEY_ONE, "一班同学列表", false, List.of("模块分类1", "分类1-1"));\n        configInit.setCodeValues(List.of(\n                new CodeValue<Boolean>().setCode(ConfigUtils.OPEN_SIMULATION_CODE).setValue(true),\n                new CodeValue<ClassmateVo>().setCode(ConfigUtils.CONTENT_DATA_CODE)\n                        .setValue(ClassmateVo.builder().personList(List.of(\n                                        ClassmateVo.Person.builder().age(12).name("小库").build(),\n                                        ClassmateVo.Person.builder().age(14).name("小明").build()))\n                                .build())\n        ));\n        return configInit;\n    }\n\n    @Bean\n    public ConfigInit studentTestTwoInit() {\n        ConfigInit configInit = new ConfigInit(STUDENT_KEY_TWO, "二班同学列表", false, List.of("模块分类1", "分类1-2"));\n        configInit.setCodeValues(List.of(\n                new CodeValue<Boolean>().setCode(ConfigUtils.OPEN_SIMULATION_CODE).setValue(true),\n                new CodeValue<ClassmateVo>().setCode(ConfigUtils.CONTENT_DATA_CODE)\n                        .setValue(ClassmateVo.builder().personList(List.of(\n                                        ClassmateVo.Person.builder().age(14).name("小雪").build(),\n                                        ClassmateVo.Person.builder().age(15).name("小楚").build()))\n                                .build())\n        ));\n        return configInit;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n# 获取数据\n\n示例-获取key-test数据：\n\n    @Autowired(required = false)\n    private IBaseConfigService configService;\n\n    /**\n     * 获取同学列表信息\n     *\n     * @return 返回同学列表信息的ClassmateVo对象\n     */\n    public ClassmateVo classmateList() {\n        if (configService == null) {\n            return null;\n        }\n        // 从基础参数服务中获取基础参数码值对象的列表\n        List<CodeValue<?>> simulation = configService.selectValueListByKey(DemoTestConfigInit.STUDENT_KEY_ONE);\n        // 判断是否开启模拟数据\n        if (!ConfigUtils.findFirstByCode(simulation, ConfigUtils.OPEN_SIMULATION_CODE, false)) {\n            log.info("获取其他来源途径的数据");\n            return null;\n        }\n        // 获取存储的模拟数据，并将其转换为对应的实体类\n        return ConfigUtils.findFirstByCode(simulation, ConfigUtils.CONTENT_DATA_CODE, ClassmateVo.class,null);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n# 工具类 ConfigUtils\n\n各方法查看源码均提供注释说明\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-config-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\n例：可访问接口地址查看 http://127.0.0.1:9010/doc.html',normalizedContent:'# 简介\n\n可作用于系统基础配置参数\n\n模块\n\nsimple-base-config-api 参数配置服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：启动自动初始化配置值到数据库中、可选覆盖数据\nsimple-base-config-service 参数配置服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：数据表结构将自动创建、开放基础调用接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动baseconfigserviceapplication的vm配置--无需连接nacos\n\n-dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true&servertimezone=gmt%2b8\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n若要连接nacos则再增加配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-config-api</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-config-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接nacos则再增加vm配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-config-api\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9010\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n# 存储数据\n\n启动自动初始化数据\n\n示例：\n\n/**\n * 初始化数据\n * <p>\n * 创建初始化对象，提供一些常量和方法实现\n *\n * @author ok1996\n */\n@component\npublic class demotestconfiginit {\n    /**\n     * 一班参数key\n     */\n    public static final string student_key_one = "student-key-test-one";\n\n    /**\n     * 二班参数key\n     */\n    public static final string student_key_two = "student-key-test-two";\n\n    @bean\n    public configinit studenttestoneinit() {\n        configinit configinit = new configinit(student_key_one, "一班同学列表", false, list.of("模块分类1", "分类1-1"));\n        configinit.setcodevalues(list.of(\n                new codevalue<boolean>().setcode(configutils.open_simulation_code).setvalue(true),\n                new codevalue<classmatevo>().setcode(configutils.content_data_code)\n                        .setvalue(classmatevo.builder().personlist(list.of(\n                                        classmatevo.person.builder().age(12).name("小库").build(),\n                                        classmatevo.person.builder().age(14).name("小明").build()))\n                                .build())\n        ));\n        return configinit;\n    }\n\n    @bean\n    public configinit studenttesttwoinit() {\n        configinit configinit = new configinit(student_key_two, "二班同学列表", false, list.of("模块分类1", "分类1-2"));\n        configinit.setcodevalues(list.of(\n                new codevalue<boolean>().setcode(configutils.open_simulation_code).setvalue(true),\n                new codevalue<classmatevo>().setcode(configutils.content_data_code)\n                        .setvalue(classmatevo.builder().personlist(list.of(\n                                        classmatevo.person.builder().age(14).name("小雪").build(),\n                                        classmatevo.person.builder().age(15).name("小楚").build()))\n                                .build())\n        ));\n        return configinit;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n# 获取数据\n\n示例-获取key-test数据：\n\n    @autowired(required = false)\n    private ibaseconfigservice configservice;\n\n    /**\n     * 获取同学列表信息\n     *\n     * @return 返回同学列表信息的classmatevo对象\n     */\n    public classmatevo classmatelist() {\n        if (configservice == null) {\n            return null;\n        }\n        // 从基础参数服务中获取基础参数码值对象的列表\n        list<codevalue<?>> simulation = configservice.selectvaluelistbykey(demotestconfiginit.student_key_one);\n        // 判断是否开启模拟数据\n        if (!configutils.findfirstbycode(simulation, configutils.open_simulation_code, false)) {\n            log.info("获取其他来源途径的数据");\n            return null;\n        }\n        // 获取存储的模拟数据，并将其转换为对应的实体类\n        return configutils.findfirstbycode(simulation, configutils.content_data_code, classmatevo.class,null);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n# 工具类 configutils\n\n各方法查看源码均提供注释说明\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-config-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\n例：可访问接口地址查看 http://127.0.0.1:9010/doc.html',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-package",frontmatter:{title:"simple-starter-package",date:"2023-10-12T10:22:52.000Z",permalink:"/pages/b666q2p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/13.simple-starter-package.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/13.simple-starter-package.md",key:"v-7d058daa",path:"/pages/b666q2p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"模板源码",slug:"模板源码",normalizedTitle:"模板源码",charIndex:689},{level:2,title:"使用说明",slug:"使用说明",normalizedTitle:"使用说明",charIndex:725},{level:3,title:"Pom.xml文件",slug:"pom-xml文件",normalizedTitle:"pom.xml文件",charIndex:734},{level:4,title:"父类",slug:"父类",normalizedTitle:"父类",charIndex:747},{level:4,title:"版本标识",slug:"版本标识",normalizedTitle:"版本标识",charIndex:1018},{level:4,title:"依赖引入",slug:"依赖引入",normalizedTitle:"依赖引入",charIndex:1130},{level:4,title:"依赖声明",slug:"依赖声明",normalizedTitle:"依赖声明",charIndex:1906},{level:4,title:"构建配置-必填",slug:"构建配置-必填",normalizedTitle:"构建配置-必填",charIndex:2420},{level:4,title:"构建配置-可选",slug:"构建配置-可选",normalizedTitle:"构建配置-可选",charIndex:5374},{level:3,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:110},{level:3,title:"效果如下",slug:"效果如下",normalizedTitle:"效果如下",charIndex:6835}],headersStr:"简介 模板源码 使用说明 Pom.xml文件 父类 版本标识 依赖引入 依赖声明 构建配置-必填 构建配置-可选 配置文件 效果如下",content:"# 简介\n\n自定义Maven构建打包逻辑，将常用脚本及可执行文件统一打包\n在执行mvn package或mvn install时打包出 xxx--deploy.zip部署压缩包\n压缩包包含：服务启动脚本、可执行Jar包、配置文件、git版本文件（可选）\n\n文件名                   功能             说明\napplication.yml       配置文件           工程源码中的配置文件\nconfig                配置文件夹(可选)      工程配置源码中的文件夹-目录下为子配置文件\ndocker-compose.yml    Docker编排文件     网络模式为Host，将配置文件映射进容器中\nDockerfile            Docker镜像构建文件   基于openjdk:17-oracle\ngit.properties        git版本文件(可选)    输出构建时的Git版本信息\nReadme.md             操作说明           各脚本使用方式说明\nshell_java_start.sh   Shell启动脚本      使用原生Java命令启动\nshell_java_stop.sh    Shell关闭脚本      根据运行Pid进行关闭进程\nxxx-exec.jar          Jar源文件         可执行Jar包\nwin_java_start.bat    Windows启动脚本    使用原生Java命令启动\n\n\n# 模板源码\n\n参考模块：\nsimple-demo-package\n\n\n# 使用说明\n\n\n# Pom.xml文件\n\n# 父类\n\n方式一：\n需要继承spring-boot-starter-parent\n原因：resources资源文件下的启动脚本中使用 Pom.xml变量 \"@xx@\"\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>xxxx</version>\n    </parent>\n\n\n1\n2\n3\n4\n5\n\n\n# 版本标识\n\n需要声明本工程版本号\n原因：docker启动脚本中构建容器版本需使用变量@project.version@\n\n    <version>2023.5.2.0-SNAPSHOT</version>\n\n\n1\n\n\n# 依赖引入\n\n需要引入simple-starter-package依赖\n原因：使用依赖中的resources文件夹下的资源文件\n\n文件名                   功能                          说明\ndocker-compose.yml    Docker编排文件（引用Pom.xml变量）     首次启动将自动构建镜像，若在版本不变下需要更新镜像需先移除镜像\nDockerfile            Docker镜像构建文件（引用Pom.xml变量）   基于openjdk:17-oracle，将可执行Jar包复制进镜像中运行\nlogback-spring.xml    日志配置                        配置按照每天生成日志文件\nReadme.md             操作说明（引用Pom.xml变量）           各脚本使用方式说明\nshell_java_start.sh   Shell启动脚本（引用Pom.xml变量）      使用原生Java命令启动，运行可执行Jar包\nshell_java_stop.sh    Shell关闭脚本（引用Pom.xml变量）      根据运行Pid进行关闭进程\nwin_java_start.bat    Windows启动脚本（引用Pom.xml变量）    使用原生Java命令启动，运行可执行Jar包\n\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-package</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n# 依赖声明\n\n使用依赖声明，可减免依赖引入时都需要配置版本号\n\n    \x3c!-- 依赖声明 --\x3e\n    <dependencyManagement>\n        <dependencies>\n            \x3c!-- SimpleDependencies 依赖配置 --\x3e\n            <dependency>\n                <groupId>cn.iosd</groupId>\n                <artifactId>simple-dependencies</artifactId>\n                <version>${ok-simple.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# 构建配置-必填\n\n指定finalName：原因为各脚本有将构建出的可执行jar进行操作\n指定classifier为exec：原因为各脚本有将构建出的可执行jar（包含后缀exec）进行操作\n插件maven-assembly-plugin：引入自定义压缩包逻辑文件\n插件声明pluginManagement：指定使用自定义压缩包逻辑文件-此声明可放置在一级Pom中，子工程便不需要再写\n\n    <build>\n        <finalName>${project.artifactId}</finalName>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <includeSystemScope>true</includeSystemScope>\n                    \x3c!-- SpringBoot多模块打包:spring-boot工程打包编译时，会生成两种jar包，一种是普通的jar，另一种是可执行jar--\x3e\n                    <classifier>exec</classifier>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <dependencies>\n                    \x3c!-- 包含simple-assembly文件，自定义压缩包逻辑 --\x3e\n                    <dependency>\n                        <groupId>cn.iosd</groupId>\n                        <artifactId>simple-starter-package</artifactId>\n                        <version>${ok-simple.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n\n        <pluginManagement>\n            <plugins>\n\t\t\t    \x3c!-- 插件声明 可放在首层 指定使用simple-assembly --\x3e\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-assembly-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>deploy</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>single</goal>\n                            </goals>\n                            <configuration>\n                                <finalName>${project.artifactId}</finalName>\n                                <descriptorRefs>\n                                    <descriptorRef>simple-assembly</descriptorRef>\n                                </descriptorRefs>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n\n\n# 构建配置-可选\n\n可选构建时增加输出增加git版本文件\n\n            \x3c!-- 构建输出增加git版本文件 --\x3e\n            <plugin>\n                <groupId>io.github.git-commit-id</groupId>\n                <artifactId>git-commit-id-maven-plugin</artifactId>\n            </plugin>\n\n\n1\n2\n3\n4\n5\n\n\n若父类不是继承 spring-boot-starter-parent 则需要在 插件声明中添加\n\n                \x3c!-- 插件声明 可放在首层 打包时生成git.properties（可选） --\x3e\n                <plugin>\n                    <groupId>io.github.git-commit-id</groupId>\n                    <artifactId>git-commit-id-maven-plugin</artifactId>\n                    <version>5.0.1</version>\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>revision</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                    <configuration>\n                        <verbose>true</verbose>\n                        <dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>\n                        <generateGitPropertiesFile>true</generateGitPropertiesFile>\n                        <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>\n                    </configuration>\n                </plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 配置文件\n\n把项目配置文件复制到压缩包中，resources资源夹列表如下\n\nresources\n|--application.yml 配置文件\n|--config          配置文件夹下所有文件\n   |--*.*           \n\n\n1\n2\n3\n4\n\n\n\n# 效果如下\n\n执行 mvn install后在target目录下生成xxx-deploy.zip部署包",normalizedContent:"# 简介\n\n自定义maven构建打包逻辑，将常用脚本及可执行文件统一打包\n在执行mvn package或mvn install时打包出 xxx--deploy.zip部署压缩包\n压缩包包含：服务启动脚本、可执行jar包、配置文件、git版本文件（可选）\n\n文件名                   功能             说明\napplication.yml       配置文件           工程源码中的配置文件\nconfig                配置文件夹(可选)      工程配置源码中的文件夹-目录下为子配置文件\ndocker-compose.yml    docker编排文件     网络模式为host，将配置文件映射进容器中\ndockerfile            docker镜像构建文件   基于openjdk:17-oracle\ngit.properties        git版本文件(可选)    输出构建时的git版本信息\nreadme.md             操作说明           各脚本使用方式说明\nshell_java_start.sh   shell启动脚本      使用原生java命令启动\nshell_java_stop.sh    shell关闭脚本      根据运行pid进行关闭进程\nxxx-exec.jar          jar源文件         可执行jar包\nwin_java_start.bat    windows启动脚本    使用原生java命令启动\n\n\n# 模板源码\n\n参考模块：\nsimple-demo-package\n\n\n# 使用说明\n\n\n# pom.xml文件\n\n# 父类\n\n方式一：\n需要继承spring-boot-starter-parent\n原因：resources资源文件下的启动脚本中使用 pom.xml变量 \"@xx@\"\n\n    <parent>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-parent</artifactid>\n        <version>xxxx</version>\n    </parent>\n\n\n1\n2\n3\n4\n5\n\n\n# 版本标识\n\n需要声明本工程版本号\n原因：docker启动脚本中构建容器版本需使用变量@project.version@\n\n    <version>2023.5.2.0-snapshot</version>\n\n\n1\n\n\n# 依赖引入\n\n需要引入simple-starter-package依赖\n原因：使用依赖中的resources文件夹下的资源文件\n\n文件名                   功能                          说明\ndocker-compose.yml    docker编排文件（引用pom.xml变量）     首次启动将自动构建镜像，若在版本不变下需要更新镜像需先移除镜像\ndockerfile            docker镜像构建文件（引用pom.xml变量）   基于openjdk:17-oracle，将可执行jar包复制进镜像中运行\nlogback-spring.xml    日志配置                        配置按照每天生成日志文件\nreadme.md             操作说明（引用pom.xml变量）           各脚本使用方式说明\nshell_java_start.sh   shell启动脚本（引用pom.xml变量）      使用原生java命令启动，运行可执行jar包\nshell_java_stop.sh    shell关闭脚本（引用pom.xml变量）      根据运行pid进行关闭进程\nwin_java_start.bat    windows启动脚本（引用pom.xml变量）    使用原生java命令启动，运行可执行jar包\n\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-package</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n# 依赖声明\n\n使用依赖声明，可减免依赖引入时都需要配置版本号\n\n    \x3c!-- 依赖声明 --\x3e\n    <dependencymanagement>\n        <dependencies>\n            \x3c!-- simpledependencies 依赖配置 --\x3e\n            <dependency>\n                <groupid>cn.iosd</groupid>\n                <artifactid>simple-dependencies</artifactid>\n                <version>${ok-simple.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencymanagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# 构建配置-必填\n\n指定finalname：原因为各脚本有将构建出的可执行jar进行操作\n指定classifier为exec：原因为各脚本有将构建出的可执行jar（包含后缀exec）进行操作\n插件maven-assembly-plugin：引入自定义压缩包逻辑文件\n插件声明pluginmanagement：指定使用自定义压缩包逻辑文件-此声明可放置在一级pom中，子工程便不需要再写\n\n    <build>\n        <finalname>${project.artifactid}</finalname>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-maven-plugin</artifactid>\n                <configuration>\n                    <includesystemscope>true</includesystemscope>\n                    \x3c!-- springboot多模块打包:spring-boot工程打包编译时，会生成两种jar包，一种是普通的jar，另一种是可执行jar--\x3e\n                    <classifier>exec</classifier>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupid>org.apache.maven.plugins</groupid>\n                <artifactid>maven-assembly-plugin</artifactid>\n                <dependencies>\n                    \x3c!-- 包含simple-assembly文件，自定义压缩包逻辑 --\x3e\n                    <dependency>\n                        <groupid>cn.iosd</groupid>\n                        <artifactid>simple-starter-package</artifactid>\n                        <version>${ok-simple.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n\n        <pluginmanagement>\n            <plugins>\n\t\t\t    \x3c!-- 插件声明 可放在首层 指定使用simple-assembly --\x3e\n                <plugin>\n                    <groupid>org.apache.maven.plugins</groupid>\n                    <artifactid>maven-assembly-plugin</artifactid>\n                    <executions>\n                        <execution>\n                            <id>deploy</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>single</goal>\n                            </goals>\n                            <configuration>\n                                <finalname>${project.artifactid}</finalname>\n                                <descriptorrefs>\n                                    <descriptorref>simple-assembly</descriptorref>\n                                </descriptorrefs>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginmanagement>\n    </build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n\n\n# 构建配置-可选\n\n可选构建时增加输出增加git版本文件\n\n            \x3c!-- 构建输出增加git版本文件 --\x3e\n            <plugin>\n                <groupid>io.github.git-commit-id</groupid>\n                <artifactid>git-commit-id-maven-plugin</artifactid>\n            </plugin>\n\n\n1\n2\n3\n4\n5\n\n\n若父类不是继承 spring-boot-starter-parent 则需要在 插件声明中添加\n\n                \x3c!-- 插件声明 可放在首层 打包时生成git.properties（可选） --\x3e\n                <plugin>\n                    <groupid>io.github.git-commit-id</groupid>\n                    <artifactid>git-commit-id-maven-plugin</artifactid>\n                    <version>5.0.1</version>\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>revision</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                    <configuration>\n                        <verbose>true</verbose>\n                        <dateformat>yyyy-mm-dd't'hh:mm:ssz</dateformat>\n                        <generategitpropertiesfile>true</generategitpropertiesfile>\n                        <generategitpropertiesfilename>${project.build.outputdirectory}/git.properties</generategitpropertiesfilename>\n                    </configuration>\n                </plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 配置文件\n\n把项目配置文件复制到压缩包中，resources资源夹列表如下\n\nresources\n|--application.yml 配置文件\n|--config          配置文件夹下所有文件\n   |--*.*           \n\n\n1\n2\n3\n4\n\n\n\n# 效果如下\n\n执行 mvn install后在target目录下生成xxx-deploy.zip部署包",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-base-generator",frontmatter:{title:"simple-base-generator",date:"2023-08-16T16:38:59.000Z",permalink:"/pages/0e22dbp24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/03.%E6%9C%8D%E5%8A%A1%E7%B1%BB%E6%A8%A1%E5%9D%97/03.simple-base-generator.html",relativePath:"05.OpenSource/03.2024.1.1.1/03.服务类模块/03.simple-base-generator.md",key:"v-73a4ce36",path:"/pages/0e22dbp24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"使用流程",slug:"使用流程",normalizedTitle:"使用流程",charIndex:25},{level:2,title:"框架设计",slug:"框架设计",normalizedTitle:"框架设计",charIndex:36},{level:2,title:"代码解析",slug:"代码解析",normalizedTitle:"代码解析",charIndex:47},{level:2,title:"使用示例",slug:"使用示例",normalizedTitle:"使用示例",charIndex:214},{level:3,title:"生成工程",slug:"生成工程",normalizedTitle:"生成工程",charIndex:223},{level:3,title:"生成Mybatis代码",slug:"生成mybatis代码",normalizedTitle:"生成mybatis代码",charIndex:393}],headersStr:"简介 使用流程 框架设计 代码解析 使用示例 生成工程 生成Mybatis代码",content:'# 简介\n\n提供工程、代码生成服务及接口\n\n\n# 使用流程\n\n\n\n\n# 框架设计\n\n\n\n\n# 代码解析\n\n主要设计思路\n\n   使用一个接口类，在单独启动工程时默认使用走向mybatis的实现类；\n   在其他工程使用依赖引入时默认优先走向Feign的接口调用实现类，远程调用单独启动的微服务；\n   在其他工程使用依赖引入时可选走向mybatis的实现类，使用配置文件某个值作为开关，默认关闭；\n\n\n1\n2\n3\n\n\n\n\n\n# 使用示例\n\n\n# 生成工程\n\n启动依赖工程\n调用接口地址：\n\n..../simple-base-generator-service/generator/projectGen?projectName=simple-service-generator&packageName=cn.iosd.demo&moduleName=generator\n\n\n1\n\n\n\n# 生成Mybatis代码\n\nmain方法调用示例:\n\n    public static void main(String[] args) {\n        DatabaseGenVo vo = new DatabaseGenVo();\n        vo.setAuthorName("ok1996");\n        vo.setDataBaseUrl("jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true");\n        vo.setDataBaseUserName("root");\n        vo.setDataBasePassword("123456");\n        vo.setPackageName("cn.iosd.demo");\n        vo.setProjectName("simple-service-generator");\n        vo.setModuleName("generator");\n        vo.setTableNames(Collections.singletonList("demo_article"));\n        vo.setTablePrefix(Collections.singletonList("demo"));\n        DatabaseGenUtils.generate(vo);\n        log.info("文件生成目录：" + new File("target/generator").getAbsolutePath());\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',normalizedContent:'# 简介\n\n提供工程、代码生成服务及接口\n\n\n# 使用流程\n\n\n\n\n# 框架设计\n\n\n\n\n# 代码解析\n\n主要设计思路\n\n   使用一个接口类，在单独启动工程时默认使用走向mybatis的实现类；\n   在其他工程使用依赖引入时默认优先走向feign的接口调用实现类，远程调用单独启动的微服务；\n   在其他工程使用依赖引入时可选走向mybatis的实现类，使用配置文件某个值作为开关，默认关闭；\n\n\n1\n2\n3\n\n\n\n\n\n# 使用示例\n\n\n# 生成工程\n\n启动依赖工程\n调用接口地址：\n\n..../simple-base-generator-service/generator/projectgen?projectname=simple-service-generator&packagename=cn.iosd.demo&modulename=generator\n\n\n1\n\n\n\n# 生成mybatis代码\n\nmain方法调用示例:\n\n    public static void main(string[] args) {\n        databasegenvo vo = new databasegenvo();\n        vo.setauthorname("ok1996");\n        vo.setdatabaseurl("jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true");\n        vo.setdatabaseusername("root");\n        vo.setdatabasepassword("123456");\n        vo.setpackagename("cn.iosd.demo");\n        vo.setprojectname("simple-service-generator");\n        vo.setmodulename("generator");\n        vo.settablenames(collections.singletonlist("demo_article"));\n        vo.settableprefix(collections.singletonlist("demo"));\n        databasegenutils.generate(vo);\n        log.info("文件生成目录：" + new file("target/generator").getabsolutepath());\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-base-dict",frontmatter:{title:"simple-base-dict",date:"2023-09-15T15:15:18.000Z",permalink:"/pages/0a2b14p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/03.%E6%9C%8D%E5%8A%A1%E7%B1%BB%E6%A8%A1%E5%9D%97/04.simple-base-dict.html",relativePath:"05.OpenSource/03.2024.1.1.1/03.服务类模块/04.simple-base-dict.md",key:"v-38d8d3a2",path:"/pages/0a2b14p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"依赖关系及代码分析",slug:"依赖关系及代码分析",normalizedTitle:"依赖关系及代码分析",charIndex:233},{level:2,title:"拆分客户端及服务端使用",slug:"拆分客户端及服务端使用",normalizedTitle:"拆分客户端及服务端使用",charIndex:249},{level:3,title:"启动服务端",slug:"启动服务端",normalizedTitle:"启动服务端",charIndex:74},{level:3,title:"引入客户端",slug:"引入客户端",normalizedTitle:"引入客户端",charIndex:67},{level:4,title:"引入依赖-方式1",slug:"引入依赖-方式1",normalizedTitle:"引入依赖-方式1",charIndex:1040},{level:4,title:"引入依赖-方式2",slug:"引入依赖-方式2",normalizedTitle:"引入依赖-方式2",charIndex:1305},{level:4,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:1611},{level:4,title:"使用字典翻译",slug:"使用字典翻译",normalizedTitle:"使用字典翻译",charIndex:2403},{level:5,title:"步骤1",slug:"步骤1",normalizedTitle:"步骤1",charIndex:2413},{level:5,title:"步骤2",slug:"步骤2",normalizedTitle:"步骤2",charIndex:3173},{level:2,title:"融合客户端和服务端使用",slug:"融合客户端和服务端使用",normalizedTitle:"融合客户端和服务端使用",charIndex:3377},{level:4,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:168},{level:4,title:"查看服务端接口",slug:"查看服务端接口",normalizedTitle:"查看服务端接口",charIndex:3667}],headersStr:"简介 依赖关系及代码分析 拆分客户端及服务端使用 启动服务端 引入客户端 引入依赖-方式1 引入依赖-方式2 配置项 使用字典翻译 步骤1 步骤2 融合客户端和服务端使用 引入依赖 查看服务端接口",content:'# 简介\n\n可作用于字典服务及数据管理\n\n模块\n\nsimple-base-dict-api 字典翻译服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：用于实现翻译逻辑调用\nsimple-base-dict-service 字典翻译服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：数据表结构将自动创建、开放基础调用接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 依赖关系及代码分析\n\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动BaseDictServiceApplication的vm配置--无需连接Nacos\n\n-Dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n若要连接Nacos则再增加配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-dict-api</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-dict-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接Nacos则再增加vm配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-dict-api\n      param:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9030\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      dict:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n# 使用字典翻译\n\n# 步骤1\n\n实体类增加注解 @DictField\n若实体类内还有嵌套实体类需要翻译则使用 @DictEntity 如：\n\n@Data\npublic class PersonRemoteVo {\n    @Schema(description = "姓名")\n    private String name;\n\n    @Schema(description = "性别")\n    @DictField(dictionaryParams = "sex", relatedField = "sexText")\n    private Integer sex;\n    \n    private String sexText;\n    \n    @DictEntity\n    private PersonVo personVo;\n}\n\n@Data\npublic class PersonVo {\n    @Schema(description = "姓名")\n    private String name;\n\n    @Schema(description = "性别-默认实现类的json文件调用字典")\n    @DictField(dictionaryParams = "leader", dictImplBeanName = "localDictServiceImpl", relatedField = "leaderText")\n    private Integer leader;\n\n    private String leaderText;\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n# 步骤2\n\n在方法上增加注解 @Dict\n标注该方法调用后返回是翻译后的数据\n\n    @Dict\n    public PersonRemoteVo getPersonRemoteVo() {\n        return PersonRemoteVo.builder().name("吴小").idCard(1).hideIdentity(1).build();\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-dict-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\n例：可访问接口地址查看 http://127.0.0.1:9030/doc.html',normalizedContent:'# 简介\n\n可作用于字典服务及数据管理\n\n模块\n\nsimple-base-dict-api 字典翻译服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：用于实现翻译逻辑调用\nsimple-base-dict-service 字典翻译服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：数据表结构将自动创建、开放基础调用接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 依赖关系及代码分析\n\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动basedictserviceapplication的vm配置--无需连接nacos\n\n-dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true&servertimezone=gmt%2b8\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n若要连接nacos则再增加配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-dict-api</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-dict-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接nacos则再增加vm配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-dict-api\n      param:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9030\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      dict:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n# 使用字典翻译\n\n# 步骤1\n\n实体类增加注解 @dictfield\n若实体类内还有嵌套实体类需要翻译则使用 @dictentity 如：\n\n@data\npublic class personremotevo {\n    @schema(description = "姓名")\n    private string name;\n\n    @schema(description = "性别")\n    @dictfield(dictionaryparams = "sex", relatedfield = "sextext")\n    private integer sex;\n    \n    private string sextext;\n    \n    @dictentity\n    private personvo personvo;\n}\n\n@data\npublic class personvo {\n    @schema(description = "姓名")\n    private string name;\n\n    @schema(description = "性别-默认实现类的json文件调用字典")\n    @dictfield(dictionaryparams = "leader", dictimplbeanname = "localdictserviceimpl", relatedfield = "leadertext")\n    private integer leader;\n\n    private string leadertext;\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n# 步骤2\n\n在方法上增加注解 @dict\n标注该方法调用后返回是翻译后的数据\n\n    @dict\n    public personremotevo getpersonremotevo() {\n        return personremotevo.builder().name("吴小").idcard(1).hideidentity(1).build();\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-dict-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\n例：可访问接口地址查看 http://127.0.0.1:9030/doc.html',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-base-s3",frontmatter:{title:"simple-base-s3",date:"2023-04-10T09:55:19.000Z",permalink:"/pages/e7cd28p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/03.%E6%9C%8D%E5%8A%A1%E7%B1%BB%E6%A8%A1%E5%9D%97/02.simple-base-s3.html",relativePath:"05.OpenSource/03.2024.1.1.1/03.服务类模块/02.simple-base-s3.md",key:"v-277d4a4a",path:"/pages/e7cd28p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"依赖关系",slug:"依赖关系",normalizedTitle:"依赖关系",charIndex:217},{level:2,title:"拆分客户端及服务端使用",slug:"拆分客户端及服务端使用",normalizedTitle:"拆分客户端及服务端使用",charIndex:228},{level:3,title:"启动服务端",slug:"启动服务端",normalizedTitle:"启动服务端",charIndex:70},{level:3,title:"引入客户端",slug:"引入客户端",normalizedTitle:"引入客户端",charIndex:63},{level:4,title:"引入依赖-方式1",slug:"引入依赖-方式1",normalizedTitle:"引入依赖-方式1",charIndex:777},{level:4,title:"引入依赖-方式2",slug:"引入依赖-方式2",normalizedTitle:"引入依赖-方式2",charIndex:1040},{level:4,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:1344},{level:2,title:"融合客户端和服务端使用",slug:"融合客户端和服务端使用",normalizedTitle:"融合客户端和服务端使用",charIndex:2130},{level:4,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:161},{level:4,title:"查看服务端接口",slug:"查看服务端接口",normalizedTitle:"查看服务端接口",charIndex:2418}],headersStr:"简介 依赖关系 拆分客户端及服务端使用 启动服务端 引入客户端 引入依赖-方式1 引入依赖-方式2 配置项 融合客户端和服务端使用 引入依赖 查看服务端接口",content:"# 简介\n\n提供文件管理服务及接口\n\n模块\n\nsimple-base-s3-api 文件管理服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：提供调用服务端接口\nsimple-base-s3-service 文件管理服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：提供文件管理服务接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 依赖关系\n\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动BaseS3ServiceApplication的vm配置--无需连接Nacos\n\n-Dsimple.s3.accessKey= \n-Dsimple.s3.secretKey= \n-Dsimple.s3.endpoint= \n\n\n1\n2\n3\n\n\n若要连接Nacos则再增加配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-s3-api</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-s3-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接Nacos则再增加vm配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-s3-api\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9020\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-s3-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\nPOST  获取文件列表-首页\nDELETE  删除文件\nPOST  上传文件-返回文件key\nPOST  获取文件列表-下一页\nGET 生成带有预签名的URL，用于私有S3对象的访问\nGET 创建存储桶\nDELETE  删除存储桶\nGET 获取存储桶列表\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# 简介\n\n提供文件管理服务及接口\n\n模块\n\nsimple-base-s3-api 文件管理服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：提供调用服务端接口\nsimple-base-s3-service 文件管理服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：提供文件管理服务接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 依赖关系\n\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动bases3serviceapplication的vm配置--无需连接nacos\n\n-dsimple.s3.accesskey= \n-dsimple.s3.secretkey= \n-dsimple.s3.endpoint= \n\n\n1\n2\n3\n\n\n若要连接nacos则再增加配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-s3-api</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-s3-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接nacos则再增加vm配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-s3-api\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9020\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-s3-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\npost  获取文件列表-首页\ndelete  删除文件\npost  上传文件-返回文件key\npost  获取文件列表-下一页\nget 生成带有预签名的url，用于私有s3对象的访问\nget 创建存储桶\ndelete  删除存储桶\nget 获取存储桶列表\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-utils-common",frontmatter:{title:"simple-utils-common",date:"2024-02-10T09:55:19.000Z",permalink:"/pages/e023q8p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/04.%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%A8%A1%E5%9D%97/01.simple-utils-common.html",relativePath:"05.OpenSource/03.2024.1.1.1/04.工具类模块/01.simple-utils-common.md",key:"v-5706f25f",path:"/pages/e023q8p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:3,title:"将列表转换为树形结构工具类",slug:"将列表转换为树形结构工具类",normalizedTitle:"将列表转换为树形结构工具类",charIndex:22},{level:4,title:"TreeListUtils",slug:"treelistutils",normalizedTitle:"treelistutils",charIndex:39},{level:3,title:"唯一主键工厂及默认实现",slug:"唯一主键工厂及默认实现",normalizedTitle:"唯一主键工厂及默认实现",charIndex:1311},{level:4,title:"IdFactory",slug:"idfactory",normalizedTitle:"idfactory",charIndex:1326}],headersStr:"简介 将列表转换为树形结构工具类 TreeListUtils 唯一主键工厂及默认实现 IdFactory",content:'# 简介\n\n提供常用及通用的工具类\n\n\n# 将列表转换为树形结构工具类\n\n# TreeListUtils\n\n将原始列表转换为树形结构\n\n    /**\n     * 调用转换树型结构测试方法\n     *\n     * @param list 原始数据\n\t * @return 树形结构数据\n     */\n    private List<Demo> performConversionTest(List<Demo> list) {\n        String childrenFieldName = "children";\n        Predicate<Integer> isRootPredicate = parentId -> parentId == null || -1 == parentId;\n        return TreeListUtils.convert(list, childrenFieldName, isRootPredicate,  Demo::getId, Demo::getPid);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n将原始列表转换为树形结构-并将关联对象添加进去树形结构\n\n    /**\n     * 调用转换树型结构测试方法-并将关联对象添加进去树形结构\n     *\n     * @param list 原始数据\n\t * @return 树形结构数据\n     */\n    private List<Demo> performConversionTest(List<Demo> list) {\n\t    Map<Integer, Data> idData = new HashMap<>();\n        idData.put(0, new Data(0, "ce0"));\n        idData.put(1, new Data(1, "ce1"));\n        idData.put(10, new Data(10, "ce10"));\n        idData.put(20, new Data(20, "ce20"));\n\t\t\n        String childrenFieldName = "children";\n        Predicate<Integer> isRootPredicate = parentId -> parentId == null || parentId == -1;\n        String dataFieldName = "data";\n\t\t\n        return TreeListUtils.convert(list, childrenFieldName, isRootPredicate, Demo::getId, Demo::getPid, idData, dataFieldName, Demo::getId);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 唯一主键工厂及默认实现\n\n# IdFactory\n\n默认的 IdGenerate 实现类 获取主键\n\n    @Test\n    public void testGenerate() {\n        Long generatedId = IdFactory.generate();\n        log.info("IdFactory.generate():{}", generatedId);\n        assertNotNull(generatedId);\n\n        String generatedIdStr = IdFactory.generateStr();\n        log.info("IdFactory.generateStr():{}", generatedIdStr);\n        assertNotNull(generatedIdStr);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n自定义实现IdGenerate，初始化工厂使用; 完成后清除自定义实现，重新调用默认实现\n注：在IdFactory.initialize前若已经使用初始化工厂应先清除IdFactory.clear()\n\npublic class IdGenerateCustomImpl implements IdGenerate {\n    @Override\n    public Long generate() {\n        return 1L;\n    }\n\n    @Override\n    public String generateStr() {\n        return "test";\n    }\n}\n\n    @Test\n    public void testGenerateCustomImpl() {\n        Supplier<IdGenerate> impl = IdGenerateCustomImpl::new;\n        IdFactory.initialize(impl);\n        assertEquals(IdFactory.generateStr(), "test");\n        assertEquals(IdFactory.generate(), 1L);\n\n        IdFactory.clear();\n        testGenerate();\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n',normalizedContent:'# 简介\n\n提供常用及通用的工具类\n\n\n# 将列表转换为树形结构工具类\n\n# treelistutils\n\n将原始列表转换为树形结构\n\n    /**\n     * 调用转换树型结构测试方法\n     *\n     * @param list 原始数据\n\t * @return 树形结构数据\n     */\n    private list<demo> performconversiontest(list<demo> list) {\n        string childrenfieldname = "children";\n        predicate<integer> isrootpredicate = parentid -> parentid == null || -1 == parentid;\n        return treelistutils.convert(list, childrenfieldname, isrootpredicate,  demo::getid, demo::getpid);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n将原始列表转换为树形结构-并将关联对象添加进去树形结构\n\n    /**\n     * 调用转换树型结构测试方法-并将关联对象添加进去树形结构\n     *\n     * @param list 原始数据\n\t * @return 树形结构数据\n     */\n    private list<demo> performconversiontest(list<demo> list) {\n\t    map<integer, data> iddata = new hashmap<>();\n        iddata.put(0, new data(0, "ce0"));\n        iddata.put(1, new data(1, "ce1"));\n        iddata.put(10, new data(10, "ce10"));\n        iddata.put(20, new data(20, "ce20"));\n\t\t\n        string childrenfieldname = "children";\n        predicate<integer> isrootpredicate = parentid -> parentid == null || parentid == -1;\n        string datafieldname = "data";\n\t\t\n        return treelistutils.convert(list, childrenfieldname, isrootpredicate, demo::getid, demo::getpid, iddata, datafieldname, demo::getid);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 唯一主键工厂及默认实现\n\n# idfactory\n\n默认的 idgenerate 实现类 获取主键\n\n    @test\n    public void testgenerate() {\n        long generatedid = idfactory.generate();\n        log.info("idfactory.generate():{}", generatedid);\n        assertnotnull(generatedid);\n\n        string generatedidstr = idfactory.generatestr();\n        log.info("idfactory.generatestr():{}", generatedidstr);\n        assertnotnull(generatedidstr);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n自定义实现idgenerate，初始化工厂使用; 完成后清除自定义实现，重新调用默认实现\n注：在idfactory.initialize前若已经使用初始化工厂应先清除idfactory.clear()\n\npublic class idgeneratecustomimpl implements idgenerate {\n    @override\n    public long generate() {\n        return 1l;\n    }\n\n    @override\n    public string generatestr() {\n        return "test";\n    }\n}\n\n    @test\n    public void testgeneratecustomimpl() {\n        supplier<idgenerate> impl = idgeneratecustomimpl::new;\n        idfactory.initialize(impl);\n        assertequals(idfactory.generatestr(), "test");\n        assertequals(idfactory.generate(), 1l);\n\n        idfactory.clear();\n        testgenerate();\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 07:47:23",lastUpdatedTimestamp:1708328843e3},{title:"simple-utils-jackson",frontmatter:{title:"simple-utils-jackson",date:"2024-02-10T09:55:19.000Z",permalink:"/pages/e01328p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/04.%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%A8%A1%E5%9D%97/02.simple-utils-jackson.html",relativePath:"05.OpenSource/03.2024.1.1.1/04.工具类模块/02.simple-utils-jackson.md",key:"v-4fbe3236",path:"/pages/e01328p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:3,title:"JsonMapper",slug:"jsonmapper",normalizedTitle:"jsonmapper",charIndex:33},{level:4,title:"convertObject()",slug:"convertobject",normalizedTitle:"convertobject()",charIndex:88},{level:4,title:"readValue()",slug:"readvalue",normalizedTitle:"readvalue()",charIndex:265},{level:3,title:"JsonMapperThreadLocal",slug:"jsonmapperthreadlocal",normalizedTitle:"jsonmapperthreadlocal",charIndex:441}],headersStr:"简介 JsonMapper convertObject() readValue() JsonMapperThreadLocal",content:"# 简介\n\n提供 Json 序列化和反序列化功能的工具类\n\n\n# JsonMapper\n\n静态化 ObjectMapper 对象，用于实现 Json 的序列化和反序列化\n\n# convertObject()\n\n将对象转换为指定类型的对象\n\n JsonMapper.convertObject( Object obj , Class<T> valueType)\n\n\n1\n\n\n JsonMapper.convertObject( Object obj , TypeReference<T> valueTypeRef)\n\n\n1\n\n\n# readValue()\n\n将JSON字符串反序列化为指定类的Java对象\n\n JsonMapper.readValue( String obj , Class<T> valueType)\n\n\n1\n\n\n JsonMapper.readValue( String obj , TypeReference<T> valueTypeRef)\n\n\n1\n\n\n\n# JsonMapperThreadLocal\n\n线程安全 静态化 ObjectMapper 对象，用于实现 Json 的序列化和反序列化",normalizedContent:"# 简介\n\n提供 json 序列化和反序列化功能的工具类\n\n\n# jsonmapper\n\n静态化 objectmapper 对象，用于实现 json 的序列化和反序列化\n\n# convertobject()\n\n将对象转换为指定类型的对象\n\n jsonmapper.convertobject( object obj , class<t> valuetype)\n\n\n1\n\n\n jsonmapper.convertobject( object obj , typereference<t> valuetyperef)\n\n\n1\n\n\n# readvalue()\n\n将json字符串反序列化为指定类的java对象\n\n jsonmapper.readvalue( string obj , class<t> valuetype)\n\n\n1\n\n\n jsonmapper.readvalue( string obj , typereference<t> valuetyperef)\n\n\n1\n\n\n\n# jsonmapperthreadlocal\n\n线程安全 静态化 objectmapper 对象，用于实现 json 的序列化和反序列化",charsets:{cjk:!0},lastUpdated:"2024/02/19, 07:47:23",lastUpdatedTimestamp:1708328843e3},{title:"Simple-Starter概述",frontmatter:{title:"Simple-Starter概述",date:"2023-03-13T16:01:02.000Z",permalink:"/pages/8e9dc3p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/01.Simple-Starter%E6%A6%82%E8%BF%B0.html",relativePath:"05.OpenSource/04.2024.1.1.0/01.Simple-Starter概述.md",key:"v-eb7d4dc6",path:"/pages/8e9dc3p24110/",headers:[{level:2,title:"核心依赖",slug:"核心依赖",normalizedTitle:"核心依赖",charIndex:55},{level:2,title:"Starter自动装配模块",slug:"starter自动装配模块",normalizedTitle:"starter自动装配模块",charIndex:246},{level:2,title:"Base服务类模块",slug:"base服务类模块",normalizedTitle:"base服务类模块",charIndex:1374},{level:2,title:"Utils工具类模块",slug:"utils工具类模块",normalizedTitle:"utils工具类模块",charIndex:1935},{level:2,title:"基础配置模块",slug:"基础配置模块",normalizedTitle:"基础配置模块",charIndex:2085},{level:2,title:"仓库地址",slug:"仓库地址",normalizedTitle:"仓库地址",charIndex:2300},{level:2,title:"依赖关系",slug:"依赖关系",normalizedTitle:"依赖关系",charIndex:2585},{level:2,title:"Base服务端",slug:"base服务端",normalizedTitle:"base服务端",charIndex:2596},{level:2,title:"Demo示例",slug:"demo示例",normalizedTitle:"demo示例",charIndex:2902},{level:2,title:"Simple支持配置项",slug:"simple支持配置项",normalizedTitle:"simple支持配置项",charIndex:4267},{level:2,title:"启动Service需修改的配置",slug:"启动service需修改的配置",normalizedTitle:"启动service需修改的配置",charIndex:9562},{level:3,title:"BaseConfigSpringbootApplication",slug:"baseconfigspringbootapplication",normalizedTitle:"baseconfigspringbootapplication",charIndex:9601},{level:3,title:"BaseS3ServiceApplication",slug:"bases3serviceapplication",normalizedTitle:"bases3serviceapplication",charIndex:10267},{level:3,title:"BaseDictServiceApplication",slug:"basedictserviceapplication",normalizedTitle:"basedictserviceapplication",charIndex:10736},{level:2,title:"启动Demo需修改的配置",slug:"启动demo需修改的配置",normalizedTitle:"启动demo需修改的配置",charIndex:11451}],headersStr:"核心依赖 Starter自动装配模块 Base服务类模块 Utils工具类模块 基础配置模块 仓库地址 依赖关系 Base服务端 Demo示例 Simple支持配置项 启动Service需修改的配置 BaseConfigSpringbootApplication BaseS3ServiceApplication BaseDictServiceApplication 启动Demo需修改的配置",content:"github: https://github.com/ok1996/ok-system-simple\n\n\n# 核心依赖\n\n依赖                     版本\nJava                   17\nSpring Boot            3.2.2\nSpring Cloud           2023.0.0\nSpring Cloud Alibaba   2022.0.0.0\nOk System Simple       2024.1.1.0\n\n\n# Starter自动装配模块\n\n模块名称                        使用场景       说明\nsimple-starter-web          Web应用      SpringBoot Web、集成接口文档、序列化格式转换、\n                                       响应信息主体、全局异常处理器、Jackson工具类\nsimple-starter-redisson     锁及缓存       注解使用：分布式锁、分布式幂等、分布式限流器;\n                                       Cacheable注解常用配置及自定义CacheName过期时间\nsimple-starter-s3           文件管理客户端    初始化客户端、提供基础服务方法\nsimple-starter-socket       长链接通讯及集群   集群使用redis订阅及广播机制，无redis自动单机\nsimple-starter-grpc         远程调用协议接口   自定义注解Grpc简化使用：客户端、服务端\nsimple-starter-datasource   数据库连接应用    HikariCP、P6spy、自动创建数据库表、通用CURD控制层\nsimple-starter-freemarker   模板引擎应用     简化导入配置参数\nsimple-starter-cloud        微服务应用      微服务常用依赖集成：服务发现、远程配置中心等\nsimple-starter-gateway      微服务网关      微服务接口网关：集成微服务文档网关\nsimple-starter-encrypt      加密         注解：加密脱敏（加密规则有通用模板、或自定义）\n                                       注解：接口请求参数或返回参数Rsa加密解密\nsimple-starter-dict         字典         注解字典翻译（字典支持文件json、调用接口或自定义实现）\n                                       （服务类返回参数支持单体字段、列表、实体嵌套）\nsimple-starter-email        邮件         Smtp邮件推送\nsimple-starter-package      构建打包       自定义Maven构建打包逻辑，将常用脚本及可执行文件统一打包\n\n\n# Base服务类模块\n\n模块名称                            使用场景         说明\nsimple-base-config-api          基础配置-客户端     启动自动初始化配置、可选覆盖生成的依赖客户端\nsimple-base-config-service      基础配置-服务端     启动自动初始化配置、可选覆盖生成的依赖服务端\nsimple-base-s3-api              文件存储服务-客户端   提供文件管理服务及接口客户端\nsimple-base-s3-service          文件存储服务-服务端   提供文件管理服务及接口服务端\nsimple-base-dict-api            字典服务-客户端     提供字典服务管理客户端\nsimple-base-dict-service        字典服务-服务端     提供字典服务管理服务端\nsimple-base-generator-api       代码生成-客户端     提供数据库表代码生成工具类及实体对象\nsimple-base-generator-service   代码生成-服务端     提供根据参数初始化项目代码生成服务端\n\n\n# Utils工具类模块\n\n模块名称                   使用场景     说明\nsimple-utils-jackson   Json工具   提供 Json 序列化和反序列化功能的工具类\nsimple-utils-common    通用工具     提供常用及通用的工具类\n\n\n# 基础配置模块\n\n模块名称                  使用场景     说明\nsimple-parent         项目父级管理   可用于管理项目的通用配置和依赖版本。统一管理项目的构建配置、依赖版本和插件版本\nsimple-dependencies   项目依赖管理   可用于集中管理项目中所有模块的依赖版本。定义了各个模块所需的依赖版本，并通过dependencyManagement标签进行统一管理\n\n\n# 仓库地址\n\n例 simple-starter-web\n最新版本号 2024.1.1.0\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-web</artifactId>\n            <version>2024.1.1.0</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 依赖关系\n\n\n\n\n# Base服务端\n\n服务                              HTTP端口号   端口号   说明\nsimple-base-config-service      9010            服务类-基础配置服务端\nsimple-base-s3-service          9020            服务类-文件管理服务端\nsimple-base-dict-service        9030            服务类-字典管理服务端\nsimple-base-generator-service   9040            服务类-工程代码生成服务端\n\n\n# Demo示例\n\n服务                        HTTP端口号   端口号            说明\nsimple-demo-boot          11010                    自动装配类-空项目启动示例\nsimple-demo-redisson      11020                    自动装配类-锁使用示例\nsimple-demo-s3            11030                    自动装配类-文件管理客户端基础使用示例\nsimple-demo-socket-one    11040     SOCKET:12010   自动装配类-长连接通讯（单体/集群）1使用示例\nsimple-demo-socket-two    11050     SOCKET:12020   自动装配类-长连接通讯（单体/集群）2使用示例\nsimple-demo-grpc-server   11060     GRPC:12030     自动装配类-Grpc服务端启动示例\nsimple-demo-grpc-client   11070                    自动装配类-Grpc客户端使用示例\nsimple-demo-datasource    11080                    自动装配类-数据库连接查询使用示例\nsimple-demo-freemarker    11090                    自动装配类-freemarker页面使用示例\nsimple-demo-cloud         11100                    自动装配类-微服务注册中心及配置中心使用示例\nsimple-demo-gateway       11000                    自动装配类-微服务网关使用示例\nsimple-demo-encrypt       11110                    自动装配类-注解字段加密脱敏使用示例\nsimple-demo-dict          11120                    自动装配类-注解字段字典翻译使用示例\nsimple-demo-email         11130                    自动装配类-邮件发送使用示例\nsimple-demo-package       11140                    自动装配类-构建打包使用示例\ndemo-base-config          13010                    服务类-基础参数使用示例\ndemo-base-generator       13020                    服务类-代码生成使用示例\ndemo-base-s3              13030                    服务类-文件管理使用示例\ndemo-base-dict            13040                    服务类-字典管理使用示例\n\n\n# Simple支持配置项\n\nsimple:\n  ## simple-starter-web\n  openApi:\n    title: 接口文档示例\n    description: 接口文档示例描述\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: git@ok96.cn\n  handler:\n    exception:\n      #全局异常处理器 缺省项为true \n      enabled: true\n  jackson:\n    serialize:\n      # 序列化格式转换 缺省项为true \n      enabled: true\n  ## simple-starter-redisson\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterSlave:\n        masterAddress: redis://127.0.0.1:6379\n        slaveAddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelMasterName: myMaster\n        sentinelAddresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusterAddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n    #Cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cacheName及过期时间\n        cacheExpiresAfterFiveMinutes:\n          ttl: 300000\n          maxIdleTime: 300000\n        cacheExpiresAfterTenSecond:\n          ttl: 10000\n          maxIdleTime: 10000\n  ## simple-starter-socket\n  socket:\n    #长链接通讯及集群 缺省项为false\n    enabled: true\n    port: 12010\n    upgradeTimeout: 1000000\n    pingTimeout: 6000000\n    pingInterval: 25000\n  ## simple-starter-s3\n  s3:\n    #文件存储管理 缺省项为true\n    enabled: true\n    accessKey: 3sZWX1PLuCYNqzMw\n    secretKey: vuLhQbT9iK1EunaLGETtytMBjJTxoHpw\n    endpoint: 127.0.0.1:9000\n  ## simple-starter-grpc\n  grpc:\n    client:\n      #Grpc客户端 缺省项为false \n      enabled: true\n      #设置Grpc调用超时时间 缺省项为5000毫秒\n      timeout: 5000\n      channel:\n        local-grpc-server:\n          address: '127.0.0.1:12030'\n    server:\n      #Grpc服务端 缺省项为false \n      enabled: true\n      port: 12030\n  ## simple-starter-datasource\n  datasource:\n    #自动创建数据库 缺省项为true \n    autoCreateDatabase: true\n    locations:\n      ## 实现接口追加配置文件中mapper-locations属性 缺省项为true\n      enabled: true\n  ## simple-starter-freemarker\n  freemarker:  \n    resourceVoList:  \n        # resourceHandler：访问的前缀 resourceLocations：真实路径\n      - resourceHandler:  /layui/**\n        resourceLocations:  classpath:/plugin/layui/\n      - resourceHandler:  /Users/**\n        resourceLocations:  file:/Users/\n  ## simple-starter-encrypt\n  encrypt:\n    desensitized:\n      ##脱敏 缺省项为true\n      enabled: true\n    rsa:\n      ## 接口加密\n      secureParams:\n        ## 接口请求参数或返回参数Rsa加密解密 缺省项为true\n        enabled: true\n        ## URL查询参数的请求字段 例：https://ok96.cn/api?encryptedData=xxxxxxx\n        urlField: encryptedData\n\t\t## 默认关闭全局使用Mapping注解接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: false\n      ## 时间戳校验\n      timestampValidation:\n        ## 默认关闭校验校验时间戳 缺省项为false\n        enabled: true\n        ## 校验时间戳的差值 毫秒 默认5秒\n        expiryMillis: 60000\n      ## 公钥 \n      publicKey: |\n        MIIBIjAN....\n        wQIDAQAB\n      ## 私钥 \n      privateKey: |\n        MIIEvgIBAD...\n        s3pFfsfHFj\n  ## simple-starter-dist\n  dict:\n    ##字典 缺省项为true\n    enabled: false\n    ## 调用远程接口获取字典项列表实现类请求接口地址前缀（若为空则注解填写需要完整接口路径）\n    remoteBaseUrl: http://127.0.0.1:11120\n    ## localDictServiceImpl实现类的本地字典文件目录，默认/dict.json。注：resource资源下\n    resourceDictFileDir: /dict.json\n  ## simple-starter-email\n  email:\n    config:\n      ##SMTP服务器host\n      smtpHost:\n      ##SMTP服务器端口号\n      smtpPort:\n      ##发件人邮箱用户名\n      username:\n      ##发件人邮箱密码\n      password:\n      ##发件人邮箱地址\n      fromEmail:\n  base:\n    #simple-base-generator\n    generator:\n      project:\n        # 初始化压缩包地址\n        initProjectZipUrl: /temp/initProject.zip\n        # 解压覆盖生成项目压缩包操作的临时目录\n        newProjectAndZipTempPath: /temp/simple/new\n  feign:\n    # 开启日志记录，缺省默认开启\n\t# simple-starter-cloud\n    logger:\n      enabled: true\n    base:\n\t  ## simple-base-config-service\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9010\n\t  ## simple-base-s3-service\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9020\n\t  ## simple-base-dict-service\n      dict:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9030\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n\t## simple-base-config-service simple-base-s3-service simple-base-dict-service\n    service:\n      enabled: false\nlogging:\n  level:\n    # 声明包位置的Feign日志级别为debug，打印日志详情\n    cn:\n      iosd: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n\n\n\n# 启动Service需修改的配置\n\n * Add VM options\n\n\n# BaseConfigSpringbootApplication\n\n必填\n\n-Dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n可选\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# BaseS3ServiceApplication\n\nBaseS3ServiceApplication-必填\n\n-Dsimple.s3.accessKey= \n-Dsimple.s3.secretKey= \n-Dsimple.s3.endpoint= \n\n\n1\n2\n3\n\n\nBaseS3ServiceApplication-可选\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# BaseDictServiceApplication\n\nBaseDictServiceApplication-必填\n\n-Dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nBaseDictServiceApplication-可选\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 启动Demo需修改的配置\n\n * Add VM options\n\nDemoCloudApplication\n\n-Dspring.cloud.nacos.server-addr=\n-Dspring.cloud.nacos.username=nacos\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\nDemoGatewayApplication\n\n-Dspring.cloud.nacos.server-addr=\n-Dspring.cloud.nacos.username=nacos\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\nDemoDatasourceApplication\n\n-Dspring.datasource.dynamic.datasource.master.url=\n-Dspring.datasource.dynamic.datasource.master.username=root\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nDemoRedissonApplication\n\n-Dsimple.redisson.config.standalone.address=\n-Dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\nDemoS3Application\n\n-Dsimple.s3.accessKey=\n-Dsimple.s3.secretKey=\n-Dsimple.s3.endpoint=\n\n\n1\n2\n3\n\n\nDemoSocketOneApplication\n\n-Dsimple.redisson.config.standalone.address=\n-Dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\nDemoSocketTwoApplication\n\n-Dsimple.redisson.config.standalone.address=\n-Dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\nDemoEmailApplication\n\n-Dsimple.email.smtpHost=\n-Dsimple.email.smtpPort=\n-Dsimple.email.username=\n-Dsimple.email.password=\n-Dsimple.email.fromEmail=\n\n\n1\n2\n3\n4\n5\n\n\nBaseConfigApplication\n\n-Dspring.datasource.dynamic.datasource.master.url=\n-Dspring.datasource.dynamic.datasource.master.username=root\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nBaseGeneratorApplication\n\n-Dspring.datasource.dynamic.datasource.master.url=\n-Dspring.datasource.dynamic.datasource.master.username=root\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nBaseGeneratorTestApplication -修改代码\n\nMybatisGeneratorVo.setDataBaseUrl()\nMybatisGeneratorVo.setDataBaseUserName()\nMybatisGeneratorVo.setDataBasePassword()\n\n\n1\n2\n3\n\n\nBaseS3Application\n\n-Dsimple.s3.accessKey=\n-Dsimple.s3.secretKey=\n-Dsimple.s3.endpoint=\n\n\n1\n2\n3\n\n\nBaseDictApplication\n\n-Dspring.datasource.dynamic.datasource.master.url=\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n",normalizedContent:"github: https://github.com/ok1996/ok-system-simple\n\n\n# 核心依赖\n\n依赖                     版本\njava                   17\nspring boot            3.2.2\nspring cloud           2023.0.0\nspring cloud alibaba   2022.0.0.0\nok system simple       2024.1.1.0\n\n\n# starter自动装配模块\n\n模块名称                        使用场景       说明\nsimple-starter-web          web应用      springboot web、集成接口文档、序列化格式转换、\n                                       响应信息主体、全局异常处理器、jackson工具类\nsimple-starter-redisson     锁及缓存       注解使用：分布式锁、分布式幂等、分布式限流器;\n                                       cacheable注解常用配置及自定义cachename过期时间\nsimple-starter-s3           文件管理客户端    初始化客户端、提供基础服务方法\nsimple-starter-socket       长链接通讯及集群   集群使用redis订阅及广播机制，无redis自动单机\nsimple-starter-grpc         远程调用协议接口   自定义注解grpc简化使用：客户端、服务端\nsimple-starter-datasource   数据库连接应用    hikaricp、p6spy、自动创建数据库表、通用curd控制层\nsimple-starter-freemarker   模板引擎应用     简化导入配置参数\nsimple-starter-cloud        微服务应用      微服务常用依赖集成：服务发现、远程配置中心等\nsimple-starter-gateway      微服务网关      微服务接口网关：集成微服务文档网关\nsimple-starter-encrypt      加密         注解：加密脱敏（加密规则有通用模板、或自定义）\n                                       注解：接口请求参数或返回参数rsa加密解密\nsimple-starter-dict         字典         注解字典翻译（字典支持文件json、调用接口或自定义实现）\n                                       （服务类返回参数支持单体字段、列表、实体嵌套）\nsimple-starter-email        邮件         smtp邮件推送\nsimple-starter-package      构建打包       自定义maven构建打包逻辑，将常用脚本及可执行文件统一打包\n\n\n# base服务类模块\n\n模块名称                            使用场景         说明\nsimple-base-config-api          基础配置-客户端     启动自动初始化配置、可选覆盖生成的依赖客户端\nsimple-base-config-service      基础配置-服务端     启动自动初始化配置、可选覆盖生成的依赖服务端\nsimple-base-s3-api              文件存储服务-客户端   提供文件管理服务及接口客户端\nsimple-base-s3-service          文件存储服务-服务端   提供文件管理服务及接口服务端\nsimple-base-dict-api            字典服务-客户端     提供字典服务管理客户端\nsimple-base-dict-service        字典服务-服务端     提供字典服务管理服务端\nsimple-base-generator-api       代码生成-客户端     提供数据库表代码生成工具类及实体对象\nsimple-base-generator-service   代码生成-服务端     提供根据参数初始化项目代码生成服务端\n\n\n# utils工具类模块\n\n模块名称                   使用场景     说明\nsimple-utils-jackson   json工具   提供 json 序列化和反序列化功能的工具类\nsimple-utils-common    通用工具     提供常用及通用的工具类\n\n\n# 基础配置模块\n\n模块名称                  使用场景     说明\nsimple-parent         项目父级管理   可用于管理项目的通用配置和依赖版本。统一管理项目的构建配置、依赖版本和插件版本\nsimple-dependencies   项目依赖管理   可用于集中管理项目中所有模块的依赖版本。定义了各个模块所需的依赖版本，并通过dependencymanagement标签进行统一管理\n\n\n# 仓库地址\n\n例 simple-starter-web\n最新版本号 2024.1.1.0\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-web</artifactid>\n            <version>2024.1.1.0</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 依赖关系\n\n\n\n\n# base服务端\n\n服务                              http端口号   端口号   说明\nsimple-base-config-service      9010            服务类-基础配置服务端\nsimple-base-s3-service          9020            服务类-文件管理服务端\nsimple-base-dict-service        9030            服务类-字典管理服务端\nsimple-base-generator-service   9040            服务类-工程代码生成服务端\n\n\n# demo示例\n\n服务                        http端口号   端口号            说明\nsimple-demo-boot          11010                    自动装配类-空项目启动示例\nsimple-demo-redisson      11020                    自动装配类-锁使用示例\nsimple-demo-s3            11030                    自动装配类-文件管理客户端基础使用示例\nsimple-demo-socket-one    11040     socket:12010   自动装配类-长连接通讯（单体/集群）1使用示例\nsimple-demo-socket-two    11050     socket:12020   自动装配类-长连接通讯（单体/集群）2使用示例\nsimple-demo-grpc-server   11060     grpc:12030     自动装配类-grpc服务端启动示例\nsimple-demo-grpc-client   11070                    自动装配类-grpc客户端使用示例\nsimple-demo-datasource    11080                    自动装配类-数据库连接查询使用示例\nsimple-demo-freemarker    11090                    自动装配类-freemarker页面使用示例\nsimple-demo-cloud         11100                    自动装配类-微服务注册中心及配置中心使用示例\nsimple-demo-gateway       11000                    自动装配类-微服务网关使用示例\nsimple-demo-encrypt       11110                    自动装配类-注解字段加密脱敏使用示例\nsimple-demo-dict          11120                    自动装配类-注解字段字典翻译使用示例\nsimple-demo-email         11130                    自动装配类-邮件发送使用示例\nsimple-demo-package       11140                    自动装配类-构建打包使用示例\ndemo-base-config          13010                    服务类-基础参数使用示例\ndemo-base-generator       13020                    服务类-代码生成使用示例\ndemo-base-s3              13030                    服务类-文件管理使用示例\ndemo-base-dict            13040                    服务类-字典管理使用示例\n\n\n# simple支持配置项\n\nsimple:\n  ## simple-starter-web\n  openapi:\n    title: 接口文档示例\n    description: 接口文档示例描述\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: git@ok96.cn\n  handler:\n    exception:\n      #全局异常处理器 缺省项为true \n      enabled: true\n  jackson:\n    serialize:\n      # 序列化格式转换 缺省项为true \n      enabled: true\n  ## simple-starter-redisson\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterslave:\n        masteraddress: redis://127.0.0.1:6379\n        slaveaddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelmastername: mymaster\n        sentineladdresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusteraddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n    #cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cachename及过期时间\n        cacheexpiresafterfiveminutes:\n          ttl: 300000\n          maxidletime: 300000\n        cacheexpiresaftertensecond:\n          ttl: 10000\n          maxidletime: 10000\n  ## simple-starter-socket\n  socket:\n    #长链接通讯及集群 缺省项为false\n    enabled: true\n    port: 12010\n    upgradetimeout: 1000000\n    pingtimeout: 6000000\n    pinginterval: 25000\n  ## simple-starter-s3\n  s3:\n    #文件存储管理 缺省项为true\n    enabled: true\n    accesskey: 3szwx1plucynqzmw\n    secretkey: vulhqbt9ik1eunalgettytmbjjtxohpw\n    endpoint: 127.0.0.1:9000\n  ## simple-starter-grpc\n  grpc:\n    client:\n      #grpc客户端 缺省项为false \n      enabled: true\n      #设置grpc调用超时时间 缺省项为5000毫秒\n      timeout: 5000\n      channel:\n        local-grpc-server:\n          address: '127.0.0.1:12030'\n    server:\n      #grpc服务端 缺省项为false \n      enabled: true\n      port: 12030\n  ## simple-starter-datasource\n  datasource:\n    #自动创建数据库 缺省项为true \n    autocreatedatabase: true\n    locations:\n      ## 实现接口追加配置文件中mapper-locations属性 缺省项为true\n      enabled: true\n  ## simple-starter-freemarker\n  freemarker:  \n    resourcevolist:  \n        # resourcehandler：访问的前缀 resourcelocations：真实路径\n      - resourcehandler:  /layui/**\n        resourcelocations:  classpath:/plugin/layui/\n      - resourcehandler:  /users/**\n        resourcelocations:  file:/users/\n  ## simple-starter-encrypt\n  encrypt:\n    desensitized:\n      ##脱敏 缺省项为true\n      enabled: true\n    rsa:\n      ## 接口加密\n      secureparams:\n        ## 接口请求参数或返回参数rsa加密解密 缺省项为true\n        enabled: true\n        ## url查询参数的请求字段 例：https://ok96.cn/api?encrypteddata=xxxxxxx\n        urlfield: encrypteddata\n\t\t## 默认关闭全局使用mapping注解接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: false\n      ## 时间戳校验\n      timestampvalidation:\n        ## 默认关闭校验校验时间戳 缺省项为false\n        enabled: true\n        ## 校验时间戳的差值 毫秒 默认5秒\n        expirymillis: 60000\n      ## 公钥 \n      publickey: |\n        miibijan....\n        wqidaqab\n      ## 私钥 \n      privatekey: |\n        miievgibad...\n        s3pffsfhfj\n  ## simple-starter-dist\n  dict:\n    ##字典 缺省项为true\n    enabled: false\n    ## 调用远程接口获取字典项列表实现类请求接口地址前缀（若为空则注解填写需要完整接口路径）\n    remotebaseurl: http://127.0.0.1:11120\n    ## localdictserviceimpl实现类的本地字典文件目录，默认/dict.json。注：resource资源下\n    resourcedictfiledir: /dict.json\n  ## simple-starter-email\n  email:\n    config:\n      ##smtp服务器host\n      smtphost:\n      ##smtp服务器端口号\n      smtpport:\n      ##发件人邮箱用户名\n      username:\n      ##发件人邮箱密码\n      password:\n      ##发件人邮箱地址\n      fromemail:\n  base:\n    #simple-base-generator\n    generator:\n      project:\n        # 初始化压缩包地址\n        initprojectzipurl: /temp/initproject.zip\n        # 解压覆盖生成项目压缩包操作的临时目录\n        newprojectandziptemppath: /temp/simple/new\n  feign:\n    # 开启日志记录，缺省默认开启\n\t# simple-starter-cloud\n    logger:\n      enabled: true\n    base:\n\t  ## simple-base-config-service\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9010\n\t  ## simple-base-s3-service\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9020\n\t  ## simple-base-dict-service\n      dict:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9030\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n\t## simple-base-config-service simple-base-s3-service simple-base-dict-service\n    service:\n      enabled: false\nlogging:\n  level:\n    # 声明包位置的feign日志级别为debug，打印日志详情\n    cn:\n      iosd: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n\n\n\n# 启动service需修改的配置\n\n * add vm options\n\n\n# baseconfigspringbootapplication\n\n必填\n\n-dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true&servertimezone=gmt%2b8\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n可选\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# bases3serviceapplication\n\nbases3serviceapplication-必填\n\n-dsimple.s3.accesskey= \n-dsimple.s3.secretkey= \n-dsimple.s3.endpoint= \n\n\n1\n2\n3\n\n\nbases3serviceapplication-可选\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# basedictserviceapplication\n\nbasedictserviceapplication-必填\n\n-dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true&servertimezone=gmt%2b8\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nbasedictserviceapplication-可选\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 启动demo需修改的配置\n\n * add vm options\n\ndemocloudapplication\n\n-dspring.cloud.nacos.server-addr=\n-dspring.cloud.nacos.username=nacos\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\ndemogatewayapplication\n\n-dspring.cloud.nacos.server-addr=\n-dspring.cloud.nacos.username=nacos\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\ndemodatasourceapplication\n\n-dspring.datasource.dynamic.datasource.master.url=\n-dspring.datasource.dynamic.datasource.master.username=root\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\ndemoredissonapplication\n\n-dsimple.redisson.config.standalone.address=\n-dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\ndemos3application\n\n-dsimple.s3.accesskey=\n-dsimple.s3.secretkey=\n-dsimple.s3.endpoint=\n\n\n1\n2\n3\n\n\ndemosocketoneapplication\n\n-dsimple.redisson.config.standalone.address=\n-dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\ndemosockettwoapplication\n\n-dsimple.redisson.config.standalone.address=\n-dsimple.redisson.config.standalone.password=\n\n\n1\n2\n\n\ndemoemailapplication\n\n-dsimple.email.smtphost=\n-dsimple.email.smtpport=\n-dsimple.email.username=\n-dsimple.email.password=\n-dsimple.email.fromemail=\n\n\n1\n2\n3\n4\n5\n\n\nbaseconfigapplication\n\n-dspring.datasource.dynamic.datasource.master.url=\n-dspring.datasource.dynamic.datasource.master.username=root\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nbasegeneratorapplication\n\n-dspring.datasource.dynamic.datasource.master.url=\n-dspring.datasource.dynamic.datasource.master.username=root\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\nbasegeneratortestapplication -修改代码\n\nmybatisgeneratorvo.setdatabaseurl()\nmybatisgeneratorvo.setdatabaseusername()\nmybatisgeneratorvo.setdatabasepassword()\n\n\n1\n2\n3\n\n\nbases3application\n\n-dsimple.s3.accesskey=\n-dsimple.s3.secretkey=\n-dsimple.s3.endpoint=\n\n\n1\n2\n3\n\n\nbasedictapplication\n\n-dspring.datasource.dynamic.datasource.master.url=\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-web",frontmatter:{title:"simple-starter-web",date:"2023-03-31T15:09:48.000Z",permalink:"/pages/e96f70p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/01.simple-starter-web.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/01.simple-starter-web.md",key:"v-3a581e4a",path:"/pages/e96f70p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:76},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:319},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:709},{level:3,title:"全局异常处理器",slug:"全局异常处理器",normalizedTitle:"全局异常处理器",charIndex:53},{level:3,title:"序列化格式转换",slug:"序列化格式转换",normalizedTitle:"序列化格式转换",charIndex:33},{level:3,title:"通用响应信息主体",slug:"通用响应信息主体",normalizedTitle:"通用响应信息主体",charIndex:915},{level:3,title:"接口文档",slug:"接口文档",normalizedTitle:"接口文档",charIndex:23},{level:4,title:"访问路径",slug:"访问路径",normalizedTitle:"访问路径",charIndex:1044},{level:4,title:"关闭SwaggerUi",slug:"关闭swaggerui",normalizedTitle:"关闭swaggerui",charIndex:1110},{level:4,title:"关闭 /v3/api-docs endpoint",slug:"关闭-v3-api-docs-endpoint",normalizedTitle:"关闭 /v3/api-docs endpoint",charIndex:1179},{level:4,title:"SpringDoc文档",slug:"springdoc文档",normalizedTitle:"springdoc文档",charIndex:1258}],headersStr:"简介 引入依赖 配置项 功能项 全局异常处理器 序列化格式转换 通用响应信息主体 接口文档 访问路径 关闭SwaggerUi 关闭 /v3/api-docs endpoint SpringDoc文档",content:'# 简介\n\n集成SpringBoot Web和接口文档、时间类型的序列化格式转换\n定义通用的响应信息主体、全局异常处理器、Jackson工具类\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-web</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-web\n  openApi:\n    title: 接口文档示例\n    description: 接口文档示例描述\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: git@ok96.cn\n  handler:\n    exception:\n      #全局异常处理器 缺省项为true \n      enabled: true\n  jackson:\n    serialize:\n      # 序列化格式转换 缺省项为true \n      enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 功能项\n\n\n# 全局异常处理器\n\n拦截列表\n\n * Exception.class\n * RuntimeException.class\n * HttpRequestMethodNotSupportedException.class\n\n\n# 序列化格式转换\n\n * 将LocalTime类型转换为Long\n * 将LocalDate类型转换为Long\n * 将LocalDateTime类型转换为Long\n\n\n# 通用响应信息主体\n\n实体类名称：Response 返回格式：\n\n{\n\t"code": 0,\n\t"msg": "",\n\t"data": {\n\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 接口文档\n\n依赖：Springdoc+knife4j ui\n\n# 访问路径\n\n * host:port/swagger-ui/index.html\n * host:port/doc.html\n\n# 关闭SwaggerUi\n\nspringdoc:\n  swagger-ui:\n    enabled: false\n\n\n1\n2\n3\n\n\n# 关闭 /v3/api-docs endpoint\n\nspringdoc:\n  apiDocs:\n    enabled: false\n\n\n1\n2\n3\n\n\n# SpringDoc文档\n\nSpringdoc',normalizedContent:'# 简介\n\n集成springboot web和接口文档、时间类型的序列化格式转换\n定义通用的响应信息主体、全局异常处理器、jackson工具类\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-web</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-web\n  openapi:\n    title: 接口文档示例\n    description: 接口文档示例描述\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: git@ok96.cn\n  handler:\n    exception:\n      #全局异常处理器 缺省项为true \n      enabled: true\n  jackson:\n    serialize:\n      # 序列化格式转换 缺省项为true \n      enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 功能项\n\n\n# 全局异常处理器\n\n拦截列表\n\n * exception.class\n * runtimeexception.class\n * httprequestmethodnotsupportedexception.class\n\n\n# 序列化格式转换\n\n * 将localtime类型转换为long\n * 将localdate类型转换为long\n * 将localdatetime类型转换为long\n\n\n# 通用响应信息主体\n\n实体类名称：response 返回格式：\n\n{\n\t"code": 0,\n\t"msg": "",\n\t"data": {\n\n\t}\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 接口文档\n\n依赖：springdoc+knife4j ui\n\n# 访问路径\n\n * host:port/swagger-ui/index.html\n * host:port/doc.html\n\n# 关闭swaggerui\n\nspringdoc:\n  swagger-ui:\n    enabled: false\n\n\n1\n2\n3\n\n\n# 关闭 /v3/api-docs endpoint\n\nspringdoc:\n  apidocs:\n    enabled: false\n\n\n1\n2\n3\n\n\n# springdoc文档\n\nspringdoc',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-redisson",frontmatter:{title:"simple-starter-redisson",date:"2023-03-31T16:53:15.000Z",permalink:"/pages/abc4e3p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/02.simple-starter-redisson.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/02.simple-starter-redisson.md",key:"v-25c6439c",path:"/pages/abc4e3p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"分布式幂等和锁的主要区别",slug:"分布式幂等和锁的主要区别",normalizedTitle:"分布式幂等和锁的主要区别",charIndex:124},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:279},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:527},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:1744},{level:3,title:"注解",slug:"注解",normalizedTitle:"注解",charIndex:9},{level:4,title:"分布式幂等",slug:"分布式幂等",normalizedTitle:"分布式幂等",charIndex:21},{level:5,title:"使用示例",slug:"使用示例",normalizedTitle:"使用示例",charIndex:1795},{level:5,title:"各字段说明",slug:"各字段说明",normalizedTitle:"各字段说明",charIndex:2131},{level:5,title:"key说明",slug:"key说明",normalizedTitle:"key说明",charIndex:2457},{level:5,title:"MD5说明",slug:"md5说明",normalizedTitle:"md5说明",charIndex:2758},{level:5,title:"解锁说明",slug:"解锁说明",normalizedTitle:"解锁说明",charIndex:3113},{level:5,title:"使用说明",slug:"使用说明",normalizedTitle:"使用说明",charIndex:3234},{level:4,title:"分布式锁",slug:"分布式锁",normalizedTitle:"分布式锁",charIndex:16},{level:5,title:"使用示例",slug:"使用示例-2",normalizedTitle:"使用示例",charIndex:1795},{level:5,title:"各字段说明",slug:"各字段说明-2",normalizedTitle:"各字段说明",charIndex:2131},{level:5,title:"key说明",slug:"key说明-2",normalizedTitle:"key说明",charIndex:2457},{level:5,title:"MD5说明",slug:"md5说明-2",normalizedTitle:"md5说明",charIndex:2758},{level:5,title:"解锁说明",slug:"解锁说明-2",normalizedTitle:"解锁说明",charIndex:3113},{level:4,title:"分布式限流器",slug:"分布式限流器",normalizedTitle:"分布式限流器",charIndex:27},{level:5,title:"使用示例",slug:"使用示例-3",normalizedTitle:"使用示例",charIndex:1795},{level:5,title:"各字段说明",slug:"各字段说明-3",normalizedTitle:"各字段说明",charIndex:2131},{level:5,title:"key说明",slug:"key说明-3",normalizedTitle:"key说明",charIndex:2457},{level:5,title:"MD5说明",slug:"md5说明-3",normalizedTitle:"md5说明",charIndex:2758},{level:5,title:"限流类型",slug:"限流类型",normalizedTitle:"限流类型",charIndex:4978},{level:3,title:"服务类",slug:"服务类",normalizedTitle:"服务类",charIndex:46},{level:4,title:"分布式锁服务类",slug:"分布式锁服务类",normalizedTitle:"分布式锁服务类",charIndex:5287},{level:4,title:"缓存服务类",slug:"缓存服务类",normalizedTitle:"缓存服务类",charIndex:5933},{level:3,title:"获取Redisson客户端",slug:"获取redisson客户端",normalizedTitle:"获取redisson客户端",charIndex:7825},{level:3,title:"redisson连接类型",slug:"redisson连接类型",normalizedTitle:"redisson连接类型",charIndex:7980},{level:3,title:"使用注解Cacheable",slug:"使用注解cacheable",normalizedTitle:"使用注解cacheable",charIndex:8889}],headersStr:"简介 分布式幂等和锁的主要区别 引入依赖 配置项 功能项 注解 分布式幂等 使用示例 各字段说明 key说明 MD5说明 解锁说明 使用说明 分布式锁 使用示例 各字段说明 key说明 MD5说明 解锁说明 分布式限流器 使用示例 各字段说明 key说明 MD5说明 限流类型 服务类 分布式锁服务类 缓存服务类 获取Redisson客户端 redisson连接类型 使用注解Cacheable",content:'# 简介\n\n提供 注解简化使用：分布式锁、分布式幂等、分布式限流器\n提供 分布式加锁、解锁等服务类\n提供 常用的对象缓存的常用操作服务类\n提供 CacheManager并配置Cacheable注解常用配置及自定义CacheName对应配置\n\n\n# 分布式幂等和锁的主要区别\n\n-    锁                     分布式幂等\n目的   保护资源完整性，防止多线程导致数据竞争   用于保证操作的一致性，防止重复请求影响系统状态\n范围   同步机制，用于控制对共享资源的并发访问   分布式系统设计理念，用于处理分布式系统中的重复请求\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-redisson</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterSlave:\n        masterAddress: redis://127.0.0.1:6379\n        slaveAddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelMasterName: myMaster\n        sentinelAddresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusterAddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n    #Cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cacheName及过期时间\n        cacheExpiresAfterFiveMinutes:\n          ttl: 300000\n          maxIdleTime: 300000\n        cacheExpiresAfterTenSecond:\n          ttl: 10000\n          maxIdleTime: 10000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# 功能项\n\n\n# 注解\n\n# 分布式幂等\n\n注解： @DistributedIdempotent\n\n# 使用示例\n\n@DistributedIdempotent\n\n@DistributedIdempotent(value = "drp", message = "请求重复！", expireTime = 5)\n\n@DistributedIdempotent(param = "#keyName", includePointMd5 = false, message = "请求重复！", expireTime = 5, executionFinishedUnlock = false)\npublic Response<?> decrement(String keyName) {\n   return Response.ok();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：DV）\n * includePointMd5：key后缀，是否拼接MD5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * message：失败的提示信息\n * acquireTimeout：获取锁的最长等待时间 默认0\n * expireTime：获取后持有锁的最长时间 默认10\n * unit：时间单位 默认秒\n * executionFinishedUnlock：是否在业务执行结束后解锁,默认true(false：若干时间内防重复提交功能 true：业务逻辑执行期间内防重复提交功能)\n\n# key说明\n\nincludePointMd5为true：前缀+固定值+动态参数值+md5.get()\nincludePointMd5为true且param不传：前缀+固定值+md5.get()\n\nincludePointMd5为false：前缀+固定值+动态参数值\nincludePointMd5为false且param不传：前缀+固定值\neg:\n\n前缀为 SimpleRI:\n\nSimpleRI:固定值:动态参数值:c5a2e....4a0\nSimpleRI:固定值:c5a2e....4a0\n\nSimpleRI:固定值:动态参数值\nSimpleRI:固定值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# MD5说明\n\n从切点获取方法参数和实例字符串生成对象，转为md5\n生成对象：MethodContext\n\nMethodContext[argMap={keyName=cda6666}, name=public cn.iosd.starter.web.domain.Response<?> cn.iosd.demo.redisson.controller.AnnotationIdempotentController.decrementReqPara(java.lang.String)]\n\n\n1\n\n\n生成md5:\n\n Supplier<String> md5 = () -> DigestUtils.md5DigestAsHex(context.toString().getBytes());\n\n\n1\n\n\n# 解锁说明\n\nexecutionFinishedUnlock\n\n等于true时： 业务执行结束后解锁：业务逻辑执行期间内防重复提交功能  \n等于false时：业务执行结束后不解锁，等待自动过期：若干时间内防重复提交功能  \n\n\n1\n2\n\n\n# 使用说明\n\n直接使用注解无需为各字段赋值即可保证分布式幂等：\n\n    主要原因：默认开启了md5，md5由切点获取方法参数和实例字符串生成 \nkey为 \tSimpleRI:IC:c5a2e****\n\n\n1\n2\n\n\n入参为实体，为实体对象的单个参数（前提参数值不为空，否则生成的key可能重复）保证分布式幂等： 注解字段使用param，并且关闭md5\n\n    /**\n     * key动态参数值，支持el表达式\n     *\n     * <pre>\n     *  1.获取方法参数中的某个值\n     *      void test(String id)  => #id\n     *  2.获取对象参数中的某个值\n     *      void test(Vo vo)  => #vo.id\n     *  3.参数值获取不到，默认为：DV\n     *      void test(String id)  => #im\n     *  4.默认空，不拼接到key中\n     * </pre>\n     */\n    String param() default "";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n入参为实体，为实体对象的单个参数（参数值可能为空）保证分布式幂等： 注解字段使用value，param，并且关闭md5\n\nvalue：key固定值 自定义取值全局唯一\n\n\n1\n\n\n# 分布式锁\n\n注解： @DistributedLock\n\n# 使用示例\n\n@DistributedLock\n\n@DistributedLock(value = "demo", param = "#keyName", leaseTime = 105)\n\n\n\n1\n2\n3\n4\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：DV）\n * includePointMd5：key后缀，是否拼接MD5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * leaseTime：锁的有效时间-秒\n\n# key说明\n\nincludePointMd5为true：前缀+固定值+动态参数值+md5.get()\nincludePointMd5为true且param不传：前缀+固定值+md5.get()\n\nincludePointMd5为false：前缀+固定值+动态参数值\nincludePointMd5为false且param不传：前缀+固定值\neg:\n\n前缀为 SimpleRL:\n\nSimpleRL:固定值:动态参数值:c5a2e....4a0\nSimpleRL:固定值:c5a2e....4a0\n\nSimpleRL:固定值:动态参数值\nSimpleRL:固定值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# MD5说明\n\n如上\n\n# 解锁说明\n\nleaseTime\n\n在获取到锁之后，该锁会在指定的leaseTime时间后自动释放，即锁的持有时间。\n如果在这个时间内业务执行完毕，那么在finally块中的lock.unlock()会手动释放锁，如果在这个时间内业务没有执行完毕，锁也会自动释放\n\n\n1\n2\n\n\n# 分布式限流器\n\n注解：@DistributedRateLimiter\n\n# 使用示例\n\n@DistributedRateLimiter\n\n@DistributedRateLimiter(type = RateType.PER_CLIENT)\n\n\n\n1\n2\n3\n4\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：DV）\n * includePointMd5：key后缀，是否拼接MD5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * rate：速率(即：在有效时间单位内通过的数量)\n * rateTime：有效时间 默认1\n * timeUnit：时间单位 默认秒\n * message：失败提示信息\n * type：限流类型 默认全局\n\n# key说明\n\nincludePointMd5为true：前缀+固定值+动态参数值+md5.get()\nincludePointMd5为true且param不传：前缀+固定值+md5.get()\n\nincludePointMd5为false：前缀+固定值+动态参数值\nincludePointMd5为false且param不传：前缀+固定值\neg:\n\n前缀\n单客户端  SimpleRRC: \n全局      SimpleRRG:\n\n\n1\n2\n3\n\n\n# MD5说明\n\n如上\n\n# 限流类型\n\n使用org.redisson.api.RateType 区分为单客户端、全局\n\n\n# 服务类\n\n# 分布式锁服务类\n\n注入使用\n\n    @Autowired(required = false)\n    private RedissonLockService redissonLockService;\n\n\n1\n2\n\n\n加锁操作\n\n    /**\n     * 加锁操作 （设置锁的有效时间）\n     *\n     * @param lockName  锁名称\n     * @param leaseTime 锁有效时间-秒\n     */\n     redissonLockService.lock(lockName, leaseTime);\n\n    /**\n     * 加锁操作(tryLock锁，有等待时间）\n     *\n     * @param lockName  锁名称\n     * @param leaseTime 锁有效时间\n     * @param waitTime  等待时间\n     */\n     redissonLockService.tryLock(lockName, leaseTime, waitTime)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n解锁操作\n\n    /**\n     * 解锁\n     *\n     * @param lockName 锁名称\n     */\n     redissonLockService.unlock(lockName);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 缓存服务类\n\n注入使用\n\n    @Autowired(required = false)\n    private RedissonCacheService redissonCacheService;\n\n\n1\n2\n\n\n常用示例代码\n\n  @Operation(summary = "Object-获取")\n    @GetMapping("/object/{key}")\n    public Response<PersonVo> getObject(@PathVariable String key) {\n        return Response.ok(redissonCacheService.getObject(key));\n    }\n\n    @Operation(summary = "Object-保存")\n    @PostMapping("/object/{key}")\n    public Response<?> setObject(@PathVariable String key, @RequestBody PersonVo value) {\n        redissonCacheService.setObject(key, value);\n        return Response.ok();\n    }\n\n    @Operation(summary = "List-获取")\n    @GetMapping("/list/{key}")\n    public Response<List<PersonVo>> getList(@PathVariable String key) {\n        return Response.ok(redissonCacheService.getList(key));\n    }\n\n    @Operation(summary = "List-保存")\n    @PostMapping("/list/{key}")\n    public Response<?> setList(@PathVariable String key, @RequestBody List<PersonVo> value) {\n        redissonCacheService.setList(key, value);\n        return Response.ok();\n    }\n\n    @Operation(summary = "Map-获取")\n    @GetMapping("/map/{key}")\n    public Response<Map<String, PersonVo>> getMap(@PathVariable String key) {\n        return Response.ok(redissonCacheService.getMap(key));\n    }\n\n    @Operation(summary = "Map-保存")\n    @PostMapping("/map/{key}")\n    public Response<?> setMap(@PathVariable String key, @RequestBody PersonVo value) {\n        Map save = new HashMap(2);\n        save.put(key, value);\n        redissonCacheService.setMap(key, save);\n        return Response.ok();\n    }\n\n    @Operation(summary = "删除")\n    @DeleteMapping("/{key}")\n    public Response<?> delete(@PathVariable("key") String key) {\n        redissonCacheService.delete(key);\n        return Response.ok();\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# 获取Redisson客户端\n\n注入\n\n    @Autowired(required = false)\n    private RedissonManager redissonManager;\n\n\n1\n2\n\n\n获取客户端\n\n    redissonManager.getRedisson()\n\n\n1\n\n\n\n# redisson连接类型\n\n支持：standalone、sentinel、cluster、masterSlave\n\nsimple:\n  redisson:\n    #缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterSlave:\n        masterAddress: redis://127.0.0.1:6379\n        slaveAddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelMasterName: myMaster\n        sentinelAddresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusterAddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 使用注解Cacheable\n\n已提供的cacheName及对应过期时间配置\n\ncacheExpiresAfterTenMinutes:缓存时间10分钟\ncacheExpiresAfterOneHour:缓存时间60分钟\ncacheNeverExpires:未设置缓存失效时间\n\n\n1\n2\n3\n\n\n可在配置文件中设置自定义cacheName及对应过期时间配置\n如下自定义cacheExpiresAfterFiveMinutes：缓存时间5分钟\n自定义cacheExpiresAfterTenSecond：缓存时间10秒\n例：\n\nsimple:\n  redisson:\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n    #Cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cacheName及过期时间\n        cacheExpiresAfterFiveMinutes:\n          ttl: 300000\n          maxIdleTime: 300000\n        cacheExpiresAfterTenSecond:\n          ttl: 10000\n          maxIdleTime: 10000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n在服务层中使用示例：\n\n    @Cacheable(key = "#keyName + \'FiveMinutes\'", cacheNames = "cacheExpiresAfterFiveMinutes", condition = "#keyName.length()>2")\n    public String annotateTestCacheNameFiveMinutes(String keyName) {\n        log.info("cacheExpiresAfterFiveMinutes:{}", keyName);\n        return keyName;\n    }\n\n    @Cacheable(key = "#keyName + \'TenSecond\'", cacheNames = "cacheExpiresAfterTenSecond", condition = "#keyName.length()>2")\n    public String annotateTestCacheNameTenSecond(String keyName) {\n        log.info("cacheExpiresAfterTenSecond:{}", keyName);\n        return keyName;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',normalizedContent:'# 简介\n\n提供 注解简化使用：分布式锁、分布式幂等、分布式限流器\n提供 分布式加锁、解锁等服务类\n提供 常用的对象缓存的常用操作服务类\n提供 cachemanager并配置cacheable注解常用配置及自定义cachename对应配置\n\n\n# 分布式幂等和锁的主要区别\n\n-    锁                     分布式幂等\n目的   保护资源完整性，防止多线程导致数据竞争   用于保证操作的一致性，防止重复请求影响系统状态\n范围   同步机制，用于控制对共享资源的并发访问   分布式系统设计理念，用于处理分布式系统中的重复请求\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-redisson</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterslave:\n        masteraddress: redis://127.0.0.1:6379\n        slaveaddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelmastername: mymaster\n        sentineladdresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusteraddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n    #cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cachename及过期时间\n        cacheexpiresafterfiveminutes:\n          ttl: 300000\n          maxidletime: 300000\n        cacheexpiresaftertensecond:\n          ttl: 10000\n          maxidletime: 10000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# 功能项\n\n\n# 注解\n\n# 分布式幂等\n\n注解： @distributedidempotent\n\n# 使用示例\n\n@distributedidempotent\n\n@distributedidempotent(value = "drp", message = "请求重复！", expiretime = 5)\n\n@distributedidempotent(param = "#keyname", includepointmd5 = false, message = "请求重复！", expiretime = 5, executionfinishedunlock = false)\npublic response<?> decrement(string keyname) {\n   return response.ok();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：dv）\n * includepointmd5：key后缀，是否拼接md5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * message：失败的提示信息\n * acquiretimeout：获取锁的最长等待时间 默认0\n * expiretime：获取后持有锁的最长时间 默认10\n * unit：时间单位 默认秒\n * executionfinishedunlock：是否在业务执行结束后解锁,默认true(false：若干时间内防重复提交功能 true：业务逻辑执行期间内防重复提交功能)\n\n# key说明\n\nincludepointmd5为true：前缀+固定值+动态参数值+md5.get()\nincludepointmd5为true且param不传：前缀+固定值+md5.get()\n\nincludepointmd5为false：前缀+固定值+动态参数值\nincludepointmd5为false且param不传：前缀+固定值\neg:\n\n前缀为 simpleri:\n\nsimpleri:固定值:动态参数值:c5a2e....4a0\nsimpleri:固定值:c5a2e....4a0\n\nsimpleri:固定值:动态参数值\nsimpleri:固定值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# md5说明\n\n从切点获取方法参数和实例字符串生成对象，转为md5\n生成对象：methodcontext\n\nmethodcontext[argmap={keyname=cda6666}, name=public cn.iosd.starter.web.domain.response<?> cn.iosd.demo.redisson.controller.annotationidempotentcontroller.decrementreqpara(java.lang.string)]\n\n\n1\n\n\n生成md5:\n\n supplier<string> md5 = () -> digestutils.md5digestashex(context.tostring().getbytes());\n\n\n1\n\n\n# 解锁说明\n\nexecutionfinishedunlock\n\n等于true时： 业务执行结束后解锁：业务逻辑执行期间内防重复提交功能  \n等于false时：业务执行结束后不解锁，等待自动过期：若干时间内防重复提交功能  \n\n\n1\n2\n\n\n# 使用说明\n\n直接使用注解无需为各字段赋值即可保证分布式幂等：\n\n    主要原因：默认开启了md5，md5由切点获取方法参数和实例字符串生成 \nkey为 \tsimpleri:ic:c5a2e****\n\n\n1\n2\n\n\n入参为实体，为实体对象的单个参数（前提参数值不为空，否则生成的key可能重复）保证分布式幂等： 注解字段使用param，并且关闭md5\n\n    /**\n     * key动态参数值，支持el表达式\n     *\n     * <pre>\n     *  1.获取方法参数中的某个值\n     *      void test(string id)  => #id\n     *  2.获取对象参数中的某个值\n     *      void test(vo vo)  => #vo.id\n     *  3.参数值获取不到，默认为：dv\n     *      void test(string id)  => #im\n     *  4.默认空，不拼接到key中\n     * </pre>\n     */\n    string param() default "";\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n入参为实体，为实体对象的单个参数（参数值可能为空）保证分布式幂等： 注解字段使用value，param，并且关闭md5\n\nvalue：key固定值 自定义取值全局唯一\n\n\n1\n\n\n# 分布式锁\n\n注解： @distributedlock\n\n# 使用示例\n\n@distributedlock\n\n@distributedlock(value = "demo", param = "#keyname", leasetime = 105)\n\n\n\n1\n2\n3\n4\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：dv）\n * includepointmd5：key后缀，是否拼接md5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * leasetime：锁的有效时间-秒\n\n# key说明\n\nincludepointmd5为true：前缀+固定值+动态参数值+md5.get()\nincludepointmd5为true且param不传：前缀+固定值+md5.get()\n\nincludepointmd5为false：前缀+固定值+动态参数值\nincludepointmd5为false且param不传：前缀+固定值\neg:\n\n前缀为 simplerl:\n\nsimplerl:固定值:动态参数值:c5a2e....4a0\nsimplerl:固定值:c5a2e....4a0\n\nsimplerl:固定值:动态参数值\nsimplerl:固定值\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# md5说明\n\n如上\n\n# 解锁说明\n\nleasetime\n\n在获取到锁之后，该锁会在指定的leasetime时间后自动释放，即锁的持有时间。\n如果在这个时间内业务执行完毕，那么在finally块中的lock.unlock()会手动释放锁，如果在这个时间内业务没有执行完毕，锁也会自动释放\n\n\n1\n2\n\n\n# 分布式限流器\n\n注解：@distributedratelimiter\n\n# 使用示例\n\n@distributedratelimiter\n\n@distributedratelimiter(type = ratetype.per_client)\n\n\n\n1\n2\n3\n4\n\n\n# 各字段说明\n\n * value：key固定值\n * param：key动态参数值，支持el表达式，默认为空不拼接（若el获取不到对应值默认：dv）\n * includepointmd5：key后缀，是否拼接md5（从切点获取方法参数和实例字符串生成对象，转为md5）\n * rate：速率(即：在有效时间单位内通过的数量)\n * ratetime：有效时间 默认1\n * timeunit：时间单位 默认秒\n * message：失败提示信息\n * type：限流类型 默认全局\n\n# key说明\n\nincludepointmd5为true：前缀+固定值+动态参数值+md5.get()\nincludepointmd5为true且param不传：前缀+固定值+md5.get()\n\nincludepointmd5为false：前缀+固定值+动态参数值\nincludepointmd5为false且param不传：前缀+固定值\neg:\n\n前缀\n单客户端  simplerrc: \n全局      simplerrg:\n\n\n1\n2\n3\n\n\n# md5说明\n\n如上\n\n# 限流类型\n\n使用org.redisson.api.ratetype 区分为单客户端、全局\n\n\n# 服务类\n\n# 分布式锁服务类\n\n注入使用\n\n    @autowired(required = false)\n    private redissonlockservice redissonlockservice;\n\n\n1\n2\n\n\n加锁操作\n\n    /**\n     * 加锁操作 （设置锁的有效时间）\n     *\n     * @param lockname  锁名称\n     * @param leasetime 锁有效时间-秒\n     */\n     redissonlockservice.lock(lockname, leasetime);\n\n    /**\n     * 加锁操作(trylock锁，有等待时间）\n     *\n     * @param lockname  锁名称\n     * @param leasetime 锁有效时间\n     * @param waittime  等待时间\n     */\n     redissonlockservice.trylock(lockname, leasetime, waittime)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n解锁操作\n\n    /**\n     * 解锁\n     *\n     * @param lockname 锁名称\n     */\n     redissonlockservice.unlock(lockname);\n\n\n1\n2\n3\n4\n5\n6\n\n\n# 缓存服务类\n\n注入使用\n\n    @autowired(required = false)\n    private redissoncacheservice redissoncacheservice;\n\n\n1\n2\n\n\n常用示例代码\n\n  @operation(summary = "object-获取")\n    @getmapping("/object/{key}")\n    public response<personvo> getobject(@pathvariable string key) {\n        return response.ok(redissoncacheservice.getobject(key));\n    }\n\n    @operation(summary = "object-保存")\n    @postmapping("/object/{key}")\n    public response<?> setobject(@pathvariable string key, @requestbody personvo value) {\n        redissoncacheservice.setobject(key, value);\n        return response.ok();\n    }\n\n    @operation(summary = "list-获取")\n    @getmapping("/list/{key}")\n    public response<list<personvo>> getlist(@pathvariable string key) {\n        return response.ok(redissoncacheservice.getlist(key));\n    }\n\n    @operation(summary = "list-保存")\n    @postmapping("/list/{key}")\n    public response<?> setlist(@pathvariable string key, @requestbody list<personvo> value) {\n        redissoncacheservice.setlist(key, value);\n        return response.ok();\n    }\n\n    @operation(summary = "map-获取")\n    @getmapping("/map/{key}")\n    public response<map<string, personvo>> getmap(@pathvariable string key) {\n        return response.ok(redissoncacheservice.getmap(key));\n    }\n\n    @operation(summary = "map-保存")\n    @postmapping("/map/{key}")\n    public response<?> setmap(@pathvariable string key, @requestbody personvo value) {\n        map save = new hashmap(2);\n        save.put(key, value);\n        redissoncacheservice.setmap(key, save);\n        return response.ok();\n    }\n\n    @operation(summary = "删除")\n    @deletemapping("/{key}")\n    public response<?> delete(@pathvariable("key") string key) {\n        redissoncacheservice.delete(key);\n        return response.ok();\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n\n# 获取redisson客户端\n\n注入\n\n    @autowired(required = false)\n    private redissonmanager redissonmanager;\n\n\n1\n2\n\n\n获取客户端\n\n    redissonmanager.getredisson()\n\n\n1\n\n\n\n# redisson连接类型\n\n支持：standalone、sentinel、cluster、masterslave\n\nsimple:\n  redisson:\n    #缺省项为false\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 主从模式\n      masterslave:\n        masteraddress: redis://127.0.0.1:6379\n        slaveaddresses:\n          - redis://127.0.0.1:6379\n        password:\n        database: 0\n      ## 哨兵配置\n      sentinel:\n        sentinelmastername: mymaster\n        sentineladdresses:\n          - redis://127.0.0.1:26379\n          - redis://127.0.0.2:26379\n        password:\n        database: 0\n      ## 集群方式\n      cluster:\n        clusteraddresses:\n          - redis://127.0.0.1:7000\n          - redis://127.0.0.1:7001\n          - redis://127.0.0.2:7000\n        password:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# 使用注解cacheable\n\n已提供的cachename及对应过期时间配置\n\ncacheexpiresaftertenminutes:缓存时间10分钟\ncacheexpiresafteronehour:缓存时间60分钟\ncacheneverexpires:未设置缓存失效时间\n\n\n1\n2\n3\n\n\n可在配置文件中设置自定义cachename及对应过期时间配置\n如下自定义cacheexpiresafterfiveminutes：缓存时间5分钟\n自定义cacheexpiresaftertensecond：缓存时间10秒\n例：\n\nsimple:\n  redisson:\n    enabled: true\n    type: standalone\n    config:\n      ## 单体模式\n      standalone:\n        address: redis://127.0.0.1:6379\n        password:\n        database: 0\n    #cacheable注解自定义配置\n    cacheable:\n      #缺省项为false,优先级小于simple.redisson.enabled\n      enabled: true\n      config:\n        #自定义cachename及过期时间\n        cacheexpiresafterfiveminutes:\n          ttl: 300000\n          maxidletime: 300000\n        cacheexpiresaftertensecond:\n          ttl: 10000\n          maxidletime: 10000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n在服务层中使用示例：\n\n    @cacheable(key = "#keyname + \'fiveminutes\'", cachenames = "cacheexpiresafterfiveminutes", condition = "#keyname.length()>2")\n    public string annotatetestcachenamefiveminutes(string keyname) {\n        log.info("cacheexpiresafterfiveminutes:{}", keyname);\n        return keyname;\n    }\n\n    @cacheable(key = "#keyname + \'tensecond\'", cachenames = "cacheexpiresaftertensecond", condition = "#keyname.length()>2")\n    public string annotatetestcachenametensecond(string keyname) {\n        log.info("cacheexpiresaftertensecond:{}", keyname);\n        return keyname;\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-s3",frontmatter:{title:"simple-starter-s3",date:"2023-03-31T17:20:04.000Z",permalink:"/pages/ea099ap24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/03.simple-starter-s3.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/03.simple-starter-s3.md",key:"v-37f4b2f0",path:"/pages/ea099ap24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:45},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:287},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:476},{level:3,title:"文件操作",slug:"文件操作",normalizedTitle:"文件操作",charIndex:29}],headersStr:"简介 引入依赖 配置项 功能项 文件操作",content:"# 简介\n\n启动工程初始化AmazonS3客户端、提供S3文件操作的基础服务方法\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-s3</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  s3:\n    #文件存储管理 缺省项为false\n    enabled: true\n    accessKey: 3sZWX1PLuCYNqzMw\n    secretKey: vuLhQbT9iK1EunaLGETtytMBjJTxoHpw\n    endpoint: 127.0.0.1:9000\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 功能项\n\n\n# 文件操作\n\n注入使用\n\n    @Autowired(required = false)\n    private AmazonS3Service amazonS3Service;\n\n\n1\n2\n\n\n各方法查看源码均提供注释说明",normalizedContent:"# 简介\n\n启动工程初始化amazons3客户端、提供s3文件操作的基础服务方法\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-s3</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  s3:\n    #文件存储管理 缺省项为false\n    enabled: true\n    accesskey: 3szwx1plucynqzmw\n    secretkey: vulhqbt9ik1eunalgettytmbjjtxohpw\n    endpoint: 127.0.0.1:9000\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 功能项\n\n\n# 文件操作\n\n注入使用\n\n    @autowired(required = false)\n    private amazons3service amazons3service;\n\n\n1\n2\n\n\n各方法查看源码均提供注释说明",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-socket",frontmatter:{title:"simple-starter-socket",date:"2023-03-31T17:24:39.000Z",permalink:"/pages/09cd4bp24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/04.simple-starter-socket.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/04.simple-starter-socket.md",key:"v-eb7c3040",path:"/pages/09cd4bp24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:54},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:300},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:691},{level:3,title:"权限认证",slug:"权限认证",normalizedTitle:"权限认证",charIndex:699},{level:3,title:"测试页面",slug:"测试页面",normalizedTitle:"测试页面",charIndex:1458},{level:3,title:"发送消息方法",slug:"发送消息方法",normalizedTitle:"发送消息方法",charIndex:1790},{level:3,title:"集群示例",slug:"集群示例",normalizedTitle:"集群示例",charIndex:2084},{level:4,title:"测试room及token",slug:"测试room及token",normalizedTitle:"测试room及token",charIndex:2092},{level:4,title:"测试多群聊Room",slug:"测试多群聊room",normalizedTitle:"测试多群聊room",charIndex:2591},{level:4,title:"测试带指定微服务连接的客户端",slug:"测试带指定微服务连接的客户端",normalizedTitle:"测试带指定微服务连接的客户端",charIndex:3202}],headersStr:"简介 引入依赖 配置项 功能项 权限认证 测试页面 发送消息方法 集群示例 测试room及token 测试多群聊Room 测试带指定微服务连接的客户端",content:'# 简介\n\n长链接通讯自动装配类，集群使用redis订阅及广播机制，若无redis配置则自动单机化\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-socket</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## 若无redisson配置则自动单机化\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    address: 127.0.0.1\n    password: password\n    database: 0\n  ## simple-starter-socket\n  socket:\n    #长链接通讯及集群 缺省项为false\n    enabled: true\n    port: 12010\n    upgradeTimeout: 1000000\n    pingTimeout: 6000000\n    pingInterval: 25000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 功能项\n\n\n# 权限认证\n\n实现AuthorizationListener\n示例\n\n@Slf4j\n@Configuration\npublic class SocketAuthorization implements AuthorizationListener {\n\n    /**\n     * 连接Url：http://localhost:12010?room=1003&token=1003\n     *\n     * @param data\n     * @return\n     */\n    @Override\n    public boolean isAuthorized(HandshakeData data) {\n        String token = data.getSingleUrlParam("token");\n        String room = data.getSingleUrlParam("room");\n        log.info("socket认证参数: token={}, room={}", token, room);\n        if (StringUtils.isEmpty(token) || StringUtils.isEmpty(room)) {\n            log.error("socket认证失败, 参数不符合要求: token={}, room={}", token, room);\n            return false;\n        }\n        return true;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 测试页面\n\n源码路径：\n\nsrc/main/resources/static/socketio.html\n\n\n1\n\n\n连接示例：\n\nhttp://localhost:12010\n\n\n1\n\n\n带群聊Room\n\nhttp://localhost:12010?room=101\n\n\n1\n\n\n带权限\n\nhttp://localhost:12010?room=101&token=101\n\n\n1\n\n\n多群聊Room\n\nhttp://localhost:12010?room=101,102&token=101,102\n\n\n1\n\n\n指定微服务\n\nhttp://localhost:12010?applicationName=pure-demo-socket\n\n\n1\n\n\n\n# 发送消息方法\n\n注入使用\n\n    @Autowired\n    private SocketIOServer socketIoServer;\n\n\n1\n2\n\n\n广播所有连接客户端\n\nSocketMessageServer.sendBroadcast\n\n\n1\n\n\n仅发送带群聊Room连接的客户端\n\nSocketMessageServer.sendRoom\n\n\n1\n\n\n发送带指定微服务连接的客户端\n（注：会往连接applicationName参数为空的客户端发送msg）\n可自动获取微服务名称并发送消息\n\nSocketMessageServer.sendService\n\n\n1\n\n\n\n# 集群示例\n\n# 测试room及token\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001\n页面2连接工程2的socket ：http://localhost:12020?room=1002\n\n接口调用工程1 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1001\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1002\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面1 页面2接收到数据\n\nhttp://localhost:11040/message/broadcast?message=123\n\n\n1\n\n\n# 测试多群聊Room\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001\n页面2连接工程2的socket ：http://localhost:12020?room=1002,1003\n\n接口调用工程1 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1001\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1002\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventName=123&room=1003\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面1 页面2接收到数据\n\nhttp://localhost:11040/message/broadcast?message=123\n\n\n1\n\n\n# 测试带指定微服务连接的客户端\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001&applicationName=simple-demo-socket-two\n页面2连接工程2的socket ：http://localhost:12020?applicationName=simple-demo-socket-one\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/service?message=23\n\n\n1\n\n\n接口调用工程2 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11050/message/service?message=2131\n\n\n1\n',normalizedContent:'# 简介\n\n长链接通讯自动装配类，集群使用redis订阅及广播机制，若无redis配置则自动单机化\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-socket</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## 若无redisson配置则自动单机化\n  redisson:\n    #分布式锁 缺省项为false\n    enabled: true\n    type: standalone\n    address: 127.0.0.1\n    password: password\n    database: 0\n  ## simple-starter-socket\n  socket:\n    #长链接通讯及集群 缺省项为false\n    enabled: true\n    port: 12010\n    upgradetimeout: 1000000\n    pingtimeout: 6000000\n    pinginterval: 25000\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 功能项\n\n\n# 权限认证\n\n实现authorizationlistener\n示例\n\n@slf4j\n@configuration\npublic class socketauthorization implements authorizationlistener {\n\n    /**\n     * 连接url：http://localhost:12010?room=1003&token=1003\n     *\n     * @param data\n     * @return\n     */\n    @override\n    public boolean isauthorized(handshakedata data) {\n        string token = data.getsingleurlparam("token");\n        string room = data.getsingleurlparam("room");\n        log.info("socket认证参数: token={}, room={}", token, room);\n        if (stringutils.isempty(token) || stringutils.isempty(room)) {\n            log.error("socket认证失败, 参数不符合要求: token={}, room={}", token, room);\n            return false;\n        }\n        return true;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n\n# 测试页面\n\n源码路径：\n\nsrc/main/resources/static/socketio.html\n\n\n1\n\n\n连接示例：\n\nhttp://localhost:12010\n\n\n1\n\n\n带群聊room\n\nhttp://localhost:12010?room=101\n\n\n1\n\n\n带权限\n\nhttp://localhost:12010?room=101&token=101\n\n\n1\n\n\n多群聊room\n\nhttp://localhost:12010?room=101,102&token=101,102\n\n\n1\n\n\n指定微服务\n\nhttp://localhost:12010?applicationname=pure-demo-socket\n\n\n1\n\n\n\n# 发送消息方法\n\n注入使用\n\n    @autowired\n    private socketioserver socketioserver;\n\n\n1\n2\n\n\n广播所有连接客户端\n\nsocketmessageserver.sendbroadcast\n\n\n1\n\n\n仅发送带群聊room连接的客户端\n\nsocketmessageserver.sendroom\n\n\n1\n\n\n发送带指定微服务连接的客户端\n（注：会往连接applicationname参数为空的客户端发送msg）\n可自动获取微服务名称并发送消息\n\nsocketmessageserver.sendservice\n\n\n1\n\n\n\n# 集群示例\n\n# 测试room及token\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001\n页面2连接工程2的socket ：http://localhost:12020?room=1002\n\n接口调用工程1 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1001\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1002\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面1 页面2接收到数据\n\nhttp://localhost:11040/message/broadcast?message=123\n\n\n1\n\n\n# 测试多群聊room\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001\n页面2连接工程2的socket ：http://localhost:12020?room=1002,1003\n\n接口调用工程1 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1001\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1002\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/room?message=test001&eventname=123&room=1003\n\n\n1\n\n\n接口调用工程1 发送消息以下消息，则页面1 页面2接收到数据\n\nhttp://localhost:11040/message/broadcast?message=123\n\n\n1\n\n\n# 测试带指定微服务连接的客户端\n\n启动 工程1：simple-demo-socket-one 和 工程2：simple-demo-socket-two\n\n页面1连接工程1的socket ：http://localhost:12010?room=1001&token=1001&applicationname=simple-demo-socket-two\n页面2连接工程2的socket ：http://localhost:12020?applicationname=simple-demo-socket-one\n\n接口调用工程1 发送消息以下消息，则页面2接收到数据\n\nhttp://localhost:11040/message/service?message=23\n\n\n1\n\n\n接口调用工程2 发送消息以下消息，则页面1接收到数据\n\nhttp://localhost:11050/message/service?message=2131\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-grpc",frontmatter:{title:"simple-starter-grpc",date:"2023-04-03T10:11:39.000Z",permalink:"/pages/198071p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/05.simple-starter-grpc.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/05.simple-starter-grpc.md",key:"v-1f47f670",path:"/pages/198071p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:36},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:280},{level:2,title:"概念图",slug:"概念图",normalizedTitle:"概念图",charIndex:633},{level:2,title:"介绍及使用",slug:"介绍及使用",normalizedTitle:"介绍及使用",charIndex:643},{level:3,title:"Grpc服务端",slug:"grpc服务端",normalizedTitle:"grpc服务端",charIndex:24},{level:4,title:"基础使用",slug:"基础使用",normalizedTitle:"基础使用",charIndex:1199},{level:4,title:"增加请求头获取",slug:"增加请求头获取",normalizedTitle:"增加请求头获取",charIndex:1776},{level:3,title:"Grpc客户端",slug:"grpc客户端",normalizedTitle:"grpc客户端",charIndex:15},{level:4,title:"基础使用",slug:"基础使用-2",normalizedTitle:"基础使用",charIndex:1199},{level:4,title:"增加单独设置调用超时时间",slug:"增加单独设置调用超时时间",normalizedTitle:"增加单独设置调用超时时间",charIndex:2919},{level:4,title:"增加请求头参数设置",slug:"增加请求头参数设置",normalizedTitle:"增加请求头参数设置",charIndex:3425},{level:5,title:"只有一个请求头参数设置时",slug:"只有一个请求头参数设置时",normalizedTitle:"只有一个请求头参数设置时",charIndex:3438},{level:5,title:"有多个请求头参数设置时",slug:"有多个请求头参数设置时",normalizedTitle:"有多个请求头参数设置时",charIndex:3864}],headersStr:"简介 引入依赖 配置项 概念图 介绍及使用 Grpc服务端 基础使用 增加请求头获取 Grpc客户端 基础使用 增加单独设置调用超时时间 增加请求头参数设置 只有一个请求头参数设置时 有多个请求头参数设置时",content:'# 简介\n\n提供注解简化使用：Grpc客户端、 Grpc服务端\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-grpc</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-grpc\n  grpc:\n    client:\n      #Grpc客户端 缺省项为false \n      enabled: true\n      #设置Grpc调用超时时间 缺省项为5000毫秒\n      timeout: 5000\n      channel:\n        local-grpc-server:\n          address: \'127.0.0.1:12030\'\n    server:\n      #Grpc服务端 缺省项为false \n      enabled: true\n      port: 12030\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 概念图\n\n\n\n\n# 介绍及使用\n\n由helloworld.proto生成以下文件\n\n文件名称                    介绍\nHelloReply              包含了 HelloReply 消息的定义，消息包含一个名为 message 的字符串字段。\nHelloReplyOrBuilder     用于构建 HelloReply 消息，提供了 message 字段的 getter 和 setter 方法。\nHelloRequest            包含了 HelloRequest 消息的定义，消息包含一个名为 name 的字符串字段。\nHelloRequestOrBuilder   用于构建 HelloRequest 消息，提供了 name 字段的 getter 和 setter 方法。\nHelloWorldProto         包含了 Simple 服务和其中的方法 SayHello 的定义，可以在客户端和服务器端使用。\nSimpleGrpc              包含了客户端和服务器端用于实现 Simple 服务的方法，包括 SayHello 方法的实现。通过 gRPC\n                        调用远程服务的接口。\n\n\n# Grpc服务端\n\n# 基础使用\n\n通过继承 SimpleGrpc.SimpleImplBase 类并重写 SayHello 方法来实现服务器端的 Simple 服务。\n同时，你需要在当前类上添加 @GrpcService 注解来表明这是一个 gRPC 服务端。客户端可以通过 gRPC 调用 SayHello 方法来与该服务端进行通信。\n\n示例：\n\n@GrpcService\npublic class GrpcHelloService extends SimpleGrpc.SimpleImplBase {\n    @Override\n    public void sayHello(HelloRequest req, StreamObserver<HelloReply> responseObserver) {\n        HelloReply reply = HelloReply.newBuilder().setMessage("GrpcHelloService Hello ==> " + req.getName()).build();\n        responseObserver.onNext(reply);\n        responseObserver.onCompleted();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 增加请求头获取\n\n实现ServiceCallStartHeaders接口，统一拦截获取请求头并返回校验结果\n\n示例：\n\n@Component\npublic class GrpcServiceCallStartHeaders implements ServiceCallStartHeaders {\n    @Override\n    public Status verifyHeaders(Metadata headers) {\n        String value = headers.get(Metadata.Key.of("token", Metadata.ASCII_STRING_MARSHALLER));\n        if (StringUtils.isEmpty(value)) {\n            return Status.UNAUTHENTICATED.withDescription("请求头参数token值为空");\n        }\n        return Status.OK;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# Grpc客户端\n\n# 基础使用\n\n在你的服务层类中使用 SimpleGrpc.SimpleBlockingStub 类，该类用于调用 gRPC 服务的方法。\n同时，你需要在当前类上添加 @GrpcClient(value = "grpc-server-hello") 注解来表明这是一个 gRPC 客户端\nvalue 值为 simple.grpc.client.channel.{value}.address 配置项的名称。\n这样，你就可以通过注入的 Stub 对象发起调用并与远程服务通信。\n\n示例：\n\n@Service\npublic class GrpcDemoClientService {\n    @GrpcClient(value = "grpc-server-hello")\n    private SimpleGrpc.SimpleBlockingStub simpleStub;\n\n    public String sendHelloMessage(final String name) {\n        final HelloReply response = this.simpleStub.sayHello(HelloRequest.newBuilder().setName(name).build());\n        return response.getMessage();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 增加单独设置调用超时时间\n\ntimeout 值为 设置Grpc调用超时时间-单位毫秒，默认5000毫秒 等同于配置文件配置项 simple.grpc.client.timeout 但优先级较高\n\n示例：\n\n@Service\npublic class GrpcDemoClientService {\n    @GrpcClient(value = "grpc-server-hello", timeout = 10000)\n    private SimpleGrpc.SimpleBlockingStub simpleStub;\n\n    public String sendHelloMessage(final String name) {\n        final HelloReply response = this.simpleStub.sayHello(HelloRequest.newBuilder().setName(name).build());\n        return response.getMessage();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 增加请求头参数设置\n\n# 只有一个请求头参数设置时\n\n实现ClientCallStartHeaders接口，统一设置请求头参数值，所有请求将都会进入此方法\n\n示例-实现类：\n\n@Component\npublic class GrpcClientCallStartHeaders implements ClientCallStartHeaders {\n    @Override\n    public Map<String, String> headers() {\n        return Collections.singletonMap("token", "ces1");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注解无需指定实现类名称：\n\n    @GrpcClient(value = "grpc-server-hello")\n    private SimpleGrpc.SimpleBlockingStub simpleStub;\n\n\n1\n2\n\n\n# 有多个请求头参数设置时\n\n实现ClientCallStartHeaders接口，设置请求头参数值，注解需指定实现类名称才进入对应方法。\n\n示例-实现类：\n\n@Component\npublic class GrpcClientCallStartHeaders implements ClientCallStartHeaders {\n    @Override\n    public Map<String, String> headers() {\n        return Collections.singletonMap("token", "ces1");\n    }\n}\n\n@Component\npublic class GrpcSencondClientCallStartHeaders implements ClientCallStartHeaders {\n    @Override\n    public Map<String, String> headers() {\n        return Collections.singletonMap("token", "ces2");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n注解指定实现类名称，注 多个请求头拦截时需要增加注解值 headerBeanName ：\n\n    @GrpcClient(value = "grpc-server-hello",headerBeanName = "grpcSecondClientCallStartHeaders")\n    private SimpleGrpc.SimpleBlockingStub simpleStub;\n\n\n1\n2\n',normalizedContent:'# 简介\n\n提供注解简化使用：grpc客户端、 grpc服务端\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-grpc</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-grpc\n  grpc:\n    client:\n      #grpc客户端 缺省项为false \n      enabled: true\n      #设置grpc调用超时时间 缺省项为5000毫秒\n      timeout: 5000\n      channel:\n        local-grpc-server:\n          address: \'127.0.0.1:12030\'\n    server:\n      #grpc服务端 缺省项为false \n      enabled: true\n      port: 12030\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 概念图\n\n\n\n\n# 介绍及使用\n\n由helloworld.proto生成以下文件\n\n文件名称                    介绍\nhelloreply              包含了 helloreply 消息的定义，消息包含一个名为 message 的字符串字段。\nhelloreplyorbuilder     用于构建 helloreply 消息，提供了 message 字段的 getter 和 setter 方法。\nhellorequest            包含了 hellorequest 消息的定义，消息包含一个名为 name 的字符串字段。\nhellorequestorbuilder   用于构建 hellorequest 消息，提供了 name 字段的 getter 和 setter 方法。\nhelloworldproto         包含了 simple 服务和其中的方法 sayhello 的定义，可以在客户端和服务器端使用。\nsimplegrpc              包含了客户端和服务器端用于实现 simple 服务的方法，包括 sayhello 方法的实现。通过 grpc\n                        调用远程服务的接口。\n\n\n# grpc服务端\n\n# 基础使用\n\n通过继承 simplegrpc.simpleimplbase 类并重写 sayhello 方法来实现服务器端的 simple 服务。\n同时，你需要在当前类上添加 @grpcservice 注解来表明这是一个 grpc 服务端。客户端可以通过 grpc 调用 sayhello 方法来与该服务端进行通信。\n\n示例：\n\n@grpcservice\npublic class grpchelloservice extends simplegrpc.simpleimplbase {\n    @override\n    public void sayhello(hellorequest req, streamobserver<helloreply> responseobserver) {\n        helloreply reply = helloreply.newbuilder().setmessage("grpchelloservice hello ==> " + req.getname()).build();\n        responseobserver.onnext(reply);\n        responseobserver.oncompleted();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n# 增加请求头获取\n\n实现servicecallstartheaders接口，统一拦截获取请求头并返回校验结果\n\n示例：\n\n@component\npublic class grpcservicecallstartheaders implements servicecallstartheaders {\n    @override\n    public status verifyheaders(metadata headers) {\n        string value = headers.get(metadata.key.of("token", metadata.ascii_string_marshaller));\n        if (stringutils.isempty(value)) {\n            return status.unauthenticated.withdescription("请求头参数token值为空");\n        }\n        return status.ok;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# grpc客户端\n\n# 基础使用\n\n在你的服务层类中使用 simplegrpc.simpleblockingstub 类，该类用于调用 grpc 服务的方法。\n同时，你需要在当前类上添加 @grpcclient(value = "grpc-server-hello") 注解来表明这是一个 grpc 客户端\nvalue 值为 simple.grpc.client.channel.{value}.address 配置项的名称。\n这样，你就可以通过注入的 stub 对象发起调用并与远程服务通信。\n\n示例：\n\n@service\npublic class grpcdemoclientservice {\n    @grpcclient(value = "grpc-server-hello")\n    private simplegrpc.simpleblockingstub simplestub;\n\n    public string sendhellomessage(final string name) {\n        final helloreply response = this.simplestub.sayhello(hellorequest.newbuilder().setname(name).build());\n        return response.getmessage();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 增加单独设置调用超时时间\n\ntimeout 值为 设置grpc调用超时时间-单位毫秒，默认5000毫秒 等同于配置文件配置项 simple.grpc.client.timeout 但优先级较高\n\n示例：\n\n@service\npublic class grpcdemoclientservice {\n    @grpcclient(value = "grpc-server-hello", timeout = 10000)\n    private simplegrpc.simpleblockingstub simplestub;\n\n    public string sendhellomessage(final string name) {\n        final helloreply response = this.simplestub.sayhello(hellorequest.newbuilder().setname(name).build());\n        return response.getmessage();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n# 增加请求头参数设置\n\n# 只有一个请求头参数设置时\n\n实现clientcallstartheaders接口，统一设置请求头参数值，所有请求将都会进入此方法\n\n示例-实现类：\n\n@component\npublic class grpcclientcallstartheaders implements clientcallstartheaders {\n    @override\n    public map<string, string> headers() {\n        return collections.singletonmap("token", "ces1");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n注解无需指定实现类名称：\n\n    @grpcclient(value = "grpc-server-hello")\n    private simplegrpc.simpleblockingstub simplestub;\n\n\n1\n2\n\n\n# 有多个请求头参数设置时\n\n实现clientcallstartheaders接口，设置请求头参数值，注解需指定实现类名称才进入对应方法。\n\n示例-实现类：\n\n@component\npublic class grpcclientcallstartheaders implements clientcallstartheaders {\n    @override\n    public map<string, string> headers() {\n        return collections.singletonmap("token", "ces1");\n    }\n}\n\n@component\npublic class grpcsencondclientcallstartheaders implements clientcallstartheaders {\n    @override\n    public map<string, string> headers() {\n        return collections.singletonmap("token", "ces2");\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n注解指定实现类名称，注 多个请求头拦截时需要增加注解值 headerbeanname ：\n\n    @grpcclient(value = "grpc-server-hello",headerbeanname = "grpcsecondclientcallstartheaders")\n    private simplegrpc.simpleblockingstub simplestub;\n\n\n1\n2\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-datasource",frontmatter:{title:"simple-starter-datasource",date:"2023-04-04T16:01:24.000Z",permalink:"/pages/646b79p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/06.simple-starter-datasource.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/06.simple-starter-datasource.md",key:"v-a6708290",path:"/pages/646b79p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:138},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:388},{level:2,title:"功能",slug:"功能",normalizedTitle:"功能",charIndex:53},{level:3,title:"自动创建库",slug:"自动创建库",normalizedTitle:"自动创建库",charIndex:613},{level:3,title:"分页插件",slug:"分页插件",normalizedTitle:"分页插件",charIndex:769},{level:3,title:"分页请求参数",slug:"分页请求参数",normalizedTitle:"分页请求参数",charIndex:827},{level:3,title:"工具类",slug:"工具类",normalizedTitle:"工具类",charIndex:901},{level:3,title:"MapperLocations",slug:"mapperlocations",normalizedTitle:"mapperlocations",charIndex:84},{level:4,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:1244},{level:4,title:"问题点",slug:"问题点",normalizedTitle:"问题点",charIndex:1407},{level:4,title:"解决示例",slug:"解决示例",normalizedTitle:"解决示例",charIndex:1835}],headersStr:"简介 引入依赖 配置项 功能 自动创建库 分页插件 分页请求参数 工具类 MapperLocations 介绍 问题点 解决示例",content:'# 简介\n\n依赖使用HikariCP、P6spy监控日志、MybatisPlus、包含通用CURD控制层\n功能：启动应用程序自动创建数据库、自动创建表\n功能：通过实例化MapperLocations获取配置值 追加配置文件中的 mapperLocations 属性值\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-datasource</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  datasource:\n    #自动创建数据库 缺省项为true \n    autoCreateDatabase: true\n    locations:\n      ## 开启实现MapperLocationsProvider接口获取配置值，实现接口追加配置文件中mapper-locations属性 缺省项为true\n      enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 功能\n\n\n# 自动创建库\n\n业务逻辑类：DatabaseInitializer\n实现了ApplicationContextInitializer接口，用于在Spring应用程序上下文初始化时初始化数据库。\n从应用程序上下文环境中获取数据库连接属性，并根据jdbcUrl解析出数据库名，然后执行创建数据库的SQL语句。\n\n\n# 分页插件\n\n启用配置类效果代码：MybatisPlusConfig\n使用：mybatis-plus分页插件\n\n\n# 分页请求参数\n\n实体类：PageRequest\n一个封装了分页请求参数的Java类，包含起始页、每页显示记录数、排序、查询条件参数等字段。\n\n\n# 工具类\n\n将自定义的分页对象PageRequest转换为mybatisPlus的分页对象Page\n使用示例：\n\n    @Operation(summary = "Api-查询-分页")\n    @PostMapping("/api/page")\n    public Response<IPage<T>> apiPage(@RequestBody PageRequest<T> req) {\n        return Response.ok(service.page(DsConvertUtil.page(req), Wrappers.lambdaQuery(req.getData())));\n    }\n\n\n1\n2\n3\n4\n5\n\n\n\n# MapperLocations\n\n# 介绍\n\n实例化MapperLocations获取配置值 覆盖配置文件中的 mapperLocations 属性值\n解决：各个模块不同mapper-locations配置能在父级模块没有配置其需要的mapper-locations时能正常使用\n注意项：当开启时，配置文件中的mapperLocations属性值可同时生效\n\n# 问题点\n\n例\n\n子模块工程所需 配置文件参数\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/base/**/*Mapper.xml\n父模块依赖子模块，而父模块的配置文件参数实际为\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/test/**/*Mapper.xml\n\n\n1\n2\n3\n4\n\n\n父模块运行时，对于子模块调用的mapper接口将会报错：\n\nInvalid bound statement (not found):\n\n\n1\n\n\n除非父模块配置包含子模块的参数，这样需要知道各个子模块所需配置，较为麻烦\n\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/test/**/*Mapper.xml,classpath*:/cn/iosd/base/**/*Mapper.xml\n\n\n1\n\n\n# 解决示例\n\n子模块实例化MapperLocations\n\n    @Bean\n    public MapperLocations paramMapperLocations() {\n        return new MapperLocations("classpath*:/cn/iosd/base/param/mapper/**/*Mapper.xml");\n    }\n\n\n1\n2\n3\n4\n\n\n父模块实现MapperLocationsProvider\n\n    @Bean\n    public MapperLocations collectionMapperLocations() {\n        return new MapperLocations("classpath*:/cn/iosd/test/**/*Mapper.xml");\n    }\n\n\n1\n2\n3\n4\n',normalizedContent:'# 简介\n\n依赖使用hikaricp、p6spy监控日志、mybatisplus、包含通用curd控制层\n功能：启动应用程序自动创建数据库、自动创建表\n功能：通过实例化mapperlocations获取配置值 追加配置文件中的 mapperlocations 属性值\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-datasource</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  datasource:\n    #自动创建数据库 缺省项为true \n    autocreatedatabase: true\n    locations:\n      ## 开启实现mapperlocationsprovider接口获取配置值，实现接口追加配置文件中mapper-locations属性 缺省项为true\n      enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 功能\n\n\n# 自动创建库\n\n业务逻辑类：databaseinitializer\n实现了applicationcontextinitializer接口，用于在spring应用程序上下文初始化时初始化数据库。\n从应用程序上下文环境中获取数据库连接属性，并根据jdbcurl解析出数据库名，然后执行创建数据库的sql语句。\n\n\n# 分页插件\n\n启用配置类效果代码：mybatisplusconfig\n使用：mybatis-plus分页插件\n\n\n# 分页请求参数\n\n实体类：pagerequest\n一个封装了分页请求参数的java类，包含起始页、每页显示记录数、排序、查询条件参数等字段。\n\n\n# 工具类\n\n将自定义的分页对象pagerequest转换为mybatisplus的分页对象page\n使用示例：\n\n    @operation(summary = "api-查询-分页")\n    @postmapping("/api/page")\n    public response<ipage<t>> apipage(@requestbody pagerequest<t> req) {\n        return response.ok(service.page(dsconvertutil.page(req), wrappers.lambdaquery(req.getdata())));\n    }\n\n\n1\n2\n3\n4\n5\n\n\n\n# mapperlocations\n\n# 介绍\n\n实例化mapperlocations获取配置值 覆盖配置文件中的 mapperlocations 属性值\n解决：各个模块不同mapper-locations配置能在父级模块没有配置其需要的mapper-locations时能正常使用\n注意项：当开启时，配置文件中的mapperlocations属性值可同时生效\n\n# 问题点\n\n例\n\n子模块工程所需 配置文件参数\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/base/**/*mapper.xml\n父模块依赖子模块，而父模块的配置文件参数实际为\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/test/**/*mapper.xml\n\n\n1\n2\n3\n4\n\n\n父模块运行时，对于子模块调用的mapper接口将会报错：\n\ninvalid bound statement (not found):\n\n\n1\n\n\n除非父模块配置包含子模块的参数，这样需要知道各个子模块所需配置，较为麻烦\n\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/test/**/*mapper.xml,classpath*:/cn/iosd/base/**/*mapper.xml\n\n\n1\n\n\n# 解决示例\n\n子模块实例化mapperlocations\n\n    @bean\n    public mapperlocations parammapperlocations() {\n        return new mapperlocations("classpath*:/cn/iosd/base/param/mapper/**/*mapper.xml");\n    }\n\n\n1\n2\n3\n4\n\n\n父模块实现mapperlocationsprovider\n\n    @bean\n    public mapperlocations collectionmapperlocations() {\n        return new mapperlocations("classpath*:/cn/iosd/test/**/*mapper.xml");\n    }\n\n\n1\n2\n3\n4\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 03:10:11",lastUpdatedTimestamp:1708312211e3},{title:"simple-starter-freemarker",frontmatter:{title:"simple-starter-freemarker",date:"2023-04-04T16:17:29.000Z",permalink:"/pages/7ef54ap24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/07.simple-starter-freemarker.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/07.simple-starter-freemarker.md",key:"v-537c0274",path:"/pages/7ef54ap24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:55},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:42},{level:2,title:"功能",slug:"功能",normalizedTitle:"功能",charIndex:994},{level:3,title:"格式化",slug:"格式化",normalizedTitle:"格式化",charIndex:1001},{level:3,title:"配置项",slug:"配置项-2",normalizedTitle:"配置项",charIndex:42},{level:3,title:"自定义Freemarker视图",slug:"自定义freemarker视图",normalizedTitle:"自定义freemarker视图",charIndex:1322}],headersStr:"简介 引入依赖 配置项 功能 格式化 配置项 自定义Freemarker视图",content:'# 简介\n\n用于模板引擎应用，使用配置参数简化 资源路径映射到指定的处理器，将常用的配置项默认封装。\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-freemarker</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nFreemarker基础配置项示例：\n\nspring:\n  application:\n    name: simple-demo-freemarker\n  freemarker:\n    allow-request-override: false\n    cache: true\n    charset: UTF-8\n    check-template-location: true\n    content-type: text/html\n    expose-request-attributes: false\n    expose-session-attributes: false\n    expose-spring-macro-helpers: false\n    settings:\n      number_format: 0.##\n    suffix: .ftl\n    template-loader-path: classpath:/templates/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nsimple配置：\n\nsimple:\n  freemarker:\n    resourceVoList:\n      # resourceHandler：访问的前缀 resourceLocations：真实路径\n      - resourceHandler:  /Users/**\n        resourceLocations:  file:/Users/\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 功能\n\n\n# 格式化\n\n类：FreemarkerConfig\n默认设置Freemarker模板引擎的格式化选项，使用“#”号作为数字格式的分隔符\n\n\n# 配置项\n\n类：HttpConverterConfig\n从配置文件读取，将指定的资源路径映射到指定的处理器上\n访问地址前缀->真实路径\n配置文件例：\n\n      - resourceHandler:  /ok/**\n        resourceLocations:  classpath:/plugin/ok/\n\n\n1\n2\n\n\n则页面访问\n\nhttp://127.0.0.1/ok/xxx.js\n\n\n1\n\n\n将获取本工程目录classpath资源下，/plugin/ok/xxx.js文件\n\n\n# 自定义Freemarker视图\n\n类：MyFreemarkerView CustomFreemarker MyFreemarkerView中添加base路径辅助方法，获取访问地址再返回页面，便于静态资源地址使用\n例：\n\n<script src="${base}/xxx/xxx.js"><\/script>\n\n\n1\n',normalizedContent:'# 简介\n\n用于模板引擎应用，使用配置参数简化 资源路径映射到指定的处理器，将常用的配置项默认封装。\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-freemarker</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nfreemarker基础配置项示例：\n\nspring:\n  application:\n    name: simple-demo-freemarker\n  freemarker:\n    allow-request-override: false\n    cache: true\n    charset: utf-8\n    check-template-location: true\n    content-type: text/html\n    expose-request-attributes: false\n    expose-session-attributes: false\n    expose-spring-macro-helpers: false\n    settings:\n      number_format: 0.##\n    suffix: .ftl\n    template-loader-path: classpath:/templates/\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\nsimple配置：\n\nsimple:\n  freemarker:\n    resourcevolist:\n      # resourcehandler：访问的前缀 resourcelocations：真实路径\n      - resourcehandler:  /users/**\n        resourcelocations:  file:/users/\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 功能\n\n\n# 格式化\n\n类：freemarkerconfig\n默认设置freemarker模板引擎的格式化选项，使用“#”号作为数字格式的分隔符\n\n\n# 配置项\n\n类：httpconverterconfig\n从配置文件读取，将指定的资源路径映射到指定的处理器上\n访问地址前缀->真实路径\n配置文件例：\n\n      - resourcehandler:  /ok/**\n        resourcelocations:  classpath:/plugin/ok/\n\n\n1\n2\n\n\n则页面访问\n\nhttp://127.0.0.1/ok/xxx.js\n\n\n1\n\n\n将获取本工程目录classpath资源下，/plugin/ok/xxx.js文件\n\n\n# 自定义freemarker视图\n\n类：myfreemarkerview customfreemarker myfreemarkerview中添加base路径辅助方法，获取访问地址再返回页面，便于静态资源地址使用\n例：\n\n<script src="${base}/xxx/xxx.js"><\/script>\n\n\n1\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-cloud",frontmatter:{title:"simple-starter-cloud",date:"2023-04-04T16:30:42.000Z",permalink:"/pages/8df481p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/08.simple-starter-cloud.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/08.simple-starter-cloud.md",key:"v-a693556c",path:"/pages/8df481p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:43},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:288},{level:3,title:"Nacos远程配置中心",slug:"nacos远程配置中心",normalizedTitle:"nacos远程配置中心",charIndex:296},{level:3,title:"本地工程配置",slug:"本地工程配置",normalizedTitle:"本地工程配置",charIndex:536},{level:3,title:"开启Feign日志打印",slug:"开启feign日志打印",normalizedTitle:"开启feign日志打印",charIndex:1013}],headersStr:"简介 引入依赖 配置项 Nacos远程配置中心 本地工程配置 开启Feign日志打印",content:"# 简介\n\n将常用微服务应用的依赖集成，便于使用\n增加日志配置对象，便于开启\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-cloud</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\n\n# Nacos远程配置中心\n\n示例：application.yml 公共-通用配置\n\nsimple:\n  openApi:\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: ku29@qq.com\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例：simple-demo-cloud.yml\n\nserver:\n  port: 11100\n\n\n1\n2\n\n\n\n# 本地工程配置\n\napplication.yml\n\nspring:\n  application:\n    name: simple-demo-cloud\n  cloud:\n    nacos:\n      server-addr: http://127.0.0.1:8848\n      username:\n      password:\n      discovery:\n        registerEnabled: true\n        namespace:\n      config:\n        namespace:\n        file-extension: yml\n  config:\n    import:\n      - nacos:application.yml\n      - nacos:simple-demo-cloud.yml?group=DEFAULT_GROUP&refreshEnabled=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 开启Feign日志打印\n\n配置项\n\nsimple:\n  feign:\n    # 开启日志记录，缺省默认开启\n    logger:\n      enabled: true\nlogging:\n  level:\n    # 声明包位置的Feign日志级别为debug，打印日志详情\n    cn:\n      iosd: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",normalizedContent:"# 简介\n\n将常用微服务应用的依赖集成，便于使用\n增加日志配置对象，便于开启\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-cloud</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\n\n# nacos远程配置中心\n\n示例：application.yml 公共-通用配置\n\nsimple:\n  openapi:\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: ku29@qq.com\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n示例：simple-demo-cloud.yml\n\nserver:\n  port: 11100\n\n\n1\n2\n\n\n\n# 本地工程配置\n\napplication.yml\n\nspring:\n  application:\n    name: simple-demo-cloud\n  cloud:\n    nacos:\n      server-addr: http://127.0.0.1:8848\n      username:\n      password:\n      discovery:\n        registerenabled: true\n        namespace:\n      config:\n        namespace:\n        file-extension: yml\n  config:\n    import:\n      - nacos:application.yml\n      - nacos:simple-demo-cloud.yml?group=default_group&refreshenabled=false\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# 开启feign日志打印\n\n配置项\n\nsimple:\n  feign:\n    # 开启日志记录，缺省默认开启\n    logger:\n      enabled: true\nlogging:\n  level:\n    # 声明包位置的feign日志级别为debug，打印日志详情\n    cn:\n      iosd: debug\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-encrypt",frontmatter:{title:"simple-starter-encrypt",date:"2023-04-04T16:37:39.000Z",permalink:"/pages/3e32b3p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/09.simple-starter-encrypt.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/09.simple-starter-encrypt.md",key:"v-7f6d8d2c",path:"/pages/3e32b3p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:3,title:"数据脱敏",slug:"数据脱敏",normalizedTitle:"数据脱敏",charIndex:15},{level:3,title:"接口请求参数或返回参数Rsa加密解密",slug:"接口请求参数或返回参数rsa加密解密",normalizedTitle:"接口请求参数或返回参数rsa加密解密",charIndex:21},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:285},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:532},{level:2,title:"功能项-脱敏",slug:"功能项-脱敏",normalizedTitle:"功能项-脱敏",charIndex:1342},{level:3,title:"方法上启用脱敏",slug:"方法上启用脱敏",normalizedTitle:"方法上启用脱敏",charIndex:1353},{level:3,title:"字段脱敏",slug:"字段脱敏",normalizedTitle:"字段脱敏",charIndex:1643},{level:4,title:"已有脱敏模板",slug:"已有脱敏模板",normalizedTitle:"已有脱敏模板",charIndex:1651},{level:4,title:"自定义脱敏规则",slug:"自定义脱敏规则",normalizedTitle:"自定义脱敏规则",charIndex:2004},{level:5,title:"两侧保留明文",slug:"两侧保留明文",normalizedTitle:"两侧保留明文",charIndex:2015},{level:5,title:"两侧密文",slug:"两侧密文",normalizedTitle:"两侧密文",charIndex:2363},{level:3,title:"嵌套实体脱敏",slug:"嵌套实体脱敏",normalizedTitle:"嵌套实体脱敏",charIndex:2713},{level:2,title:"功能项-接口加解密",slug:"功能项-接口加解密",normalizedTitle:"功能项-接口加解密",charIndex:3108},{level:3,title:"接口请求参数解密",slug:"接口请求参数解密",normalizedTitle:"接口请求参数解密",charIndex:133},{level:4,title:"RequestBody类型",slug:"requestbody类型",normalizedTitle:"requestbody类型",charIndex:3162},{level:4,title:"URL查询参数类型",slug:"url查询参数类型",normalizedTitle:"url查询参数类型",charIndex:4388},{level:3,title:"接口返回参数加密",slug:"接口返回参数加密",normalizedTitle:"接口返回参数加密",charIndex:145},{level:3,title:"复合式注解",slug:"复合式注解",normalizedTitle:"复合式注解",charIndex:5913},{level:3,title:"开启全局所有接口加解密",slug:"开启全局所有接口加解密",normalizedTitle:"开启全局所有接口加解密",charIndex:113},{level:4,title:"UnEncrypted注解",slug:"unencrypted注解",normalizedTitle:"unencrypted注解",charIndex:6576}],headersStr:"简介 数据脱敏 接口请求参数或返回参数Rsa加密解密 引入依赖 配置项 功能项-脱敏 方法上启用脱敏 字段脱敏 已有脱敏模板 自定义脱敏规则 两侧保留明文 两侧密文 嵌套实体脱敏 功能项-接口加解密 接口请求参数解密 RequestBody类型 URL查询参数类型 接口返回参数加密 复合式注解 开启全局所有接口加解密 UnEncrypted注解",content:'# 简介\n\n提供注解简化使用：数据脱敏 、接口请求参数或返回参数Rsa加密解密\n\n\n# 数据脱敏\n\n加密规则有通用模板、或自定义\n服务类返回参数支持单体字段、列表、实体嵌套\n\n\n# 接口请求参数或返回参数Rsa加密解密\n\n支持开启全局所有接口加解密\n支持单独注解 对接口请求参数解密 或 对接口返回参数加密\n支持复合注解 对接口请求参数解密 及 对接口返回参数加密\n支持对请求参数增时间戳校验功能 默认关闭 默认校验时间戳的差值为5秒\n对接口请求参数解密 支持如PostMapping的@RequestBody传参解密 支持GetMapping的Url传参解密\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-encrypt</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-encrypt\n  encrypt:\n    desensitized:\n      ##脱敏 缺省项为true\n      enabled: true\n    rsa:\n      ## 接口加密\n      secureParams:\n        ## 接口请求参数或返回参数Rsa加密解密 缺省项为true\n        enabled: true\n        ## URL查询参数的请求字段 例：https://ok96.cn/api?encryptedData=xxxxxxx\n        urlField: encryptedData\n\t\t## 默认关闭全局使用Mapping注解接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: false\n      ## 时间戳校验\n      timestampValidation:\n        ## 默认关闭校验校验时间戳 缺省项为false\n        enabled: true\n        ## 校验时间戳的差值 毫秒 默认5秒\n        expiryMillis: 60000\n      ## 公钥 \n      publicKey: |\n        MIIBIjAN....\n        wQIDAQAB\n      ## 私钥 \n      privateKey: |\n        MIIEvgIBAD...\n        s3pFfsfHFj\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 功能项-脱敏\n\n\n# 方法上启用脱敏\n\n在方法上标注注解：@Desensitized\n例：\n\n    @Desensitized\n    public PersonVo getPerson() {\n        return PersonVo.builder().name("张三").idCard("350061323543513135").address("离开省和你市好多天县谢谢谢谢谢奥所多").phone("15151115112").remark("我是备注奥术大师大所多").normalField("艾维奇重新阿萨德若").build();\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 字段脱敏\n\n# 已有脱敏模板\n\n模板列表：\n\nSensitiveRule.CHINESE_NAME\nSensitiveRule.ID_CARD\nSensitiveRule.FIXED_PHONE\nSensitiveRule.MOBILE_PHONE\nSensitiveRule.ADDRESS\nSensitiveRule.EMAIL\nSensitiveRule.BANK_CARD\nSensitiveRule.PASSWORD\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n示例：\n\n    @Schema(description = "地址")\n    @SensitiveField(rule = SensitiveRule.ADDRESS)\n    private String address;\n\n\n1\n2\n3\n\n\n# 自定义脱敏规则\n\n# 两侧保留明文\n\n注解：@SensitiveField(rule = SensitiveRule.CUSTOM_BROADSIDE_CLEAR_TEXT, prefixLen = int, suffixLen = int)\nprefixLen:自定义规则-左侧几位字段进行操作\nsuffixLen:自定义规则-右侧几位字段进行操作\n示例：\n\n    @Schema(description = "备注-两侧保留明文")\n    @SensitiveField(rule = SensitiveRule.CUSTOM_BROADSIDE_CLEAR_TEXT, prefixLen = 2, suffixLen = 2)\n    private String remark;\n\n\n1\n2\n3\n\n\n# 两侧密文\n\n注解：@SensitiveField(rule = SensitiveRule.CUSTOM_BROADSIDE_MASK_TEXT, prefixLen = int, suffixLen = int)\nprefixLen:自定义规则-左侧几位字段进行操作\nsuffixLen:自定义规则-右侧几位字段进行操作\n示例：\n\n    @Schema(description = "普通字段-两侧密文")\n    @SensitiveField(rule = SensitiveRule.CUSTOM_BROADSIDE_MASK_TEXT, prefixLen = 2, suffixLen = 2)\n    private String normalField;\n\n\n1\n2\n3\n\n\n\n# 嵌套实体脱敏\n\n注解：@SensitiveEntity 示例：\n\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class SuperPersonVo {\n\n    @SensitiveEntity\n    private PersonVo personVo;\n\n    @Schema(description = "昵称")\n    @SensitiveField(rule = SensitiveRule.CHINESE_NAME)\n    private String nickname;\n\n    @Schema(description = "功能")\n    private String specificFunction;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 功能项-接口加解密\n\n\n# 接口请求参数解密\n\n使用注解 @DecryptRequestParams\n\n# RequestBody类型\n\n例代码：\n\n    @Operation(summary = "注解测试-请求参数解密-POST")\n    @DecryptRequestParams\n    @PostMapping(value = "/decryptRequestParams")\n    public Response<PersonVo> decryptRequestParams(@RequestBody PersonVo vo) {\n        return Response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在调用接口请求参数，直接传参为加密后的数据，例-直接传参数：\n\nG0JIO0kZgZpJ68MV91CTgadZqpUvlKTZbiC8CB4IKcjFYUjHur8PF5N5YT7APwNzr28887h5FRjJHMP+PDkAZcXhRecdouFUcaPxTBTgIvUawKsk95c6rJdS7K6VwJAGlKTMS//kkStsGcGlyjGdo/XTeQds7SCuv9Tk2umUKoFXcbWYJbXmtV5u/6iG22aEH48LhoVF0OpABSFMemFuZ5AMNeEd0YUGhg18gqmopTw7V8bHtvI22xdASg87lsThCBY6aoUC8MkxALwOsptlllOTgZkdOoXrHoHyiYFbEI7fNmXLEvaDfBYmlzDyvE18SGCrWA9bJmByPU5xxF+dpD7ITYZmNS3JNRSMSdpcMbFmzrVkfUjKCBe2IOe4dLhfNDjWAXXtLqiq3rVuGp6L/ODMBF7y5RY4yy/6GXRHd9jN82x0kkSi9a5jRNYWB7w4xsOt4vJvYDYGWnmTcSu2UZWsJFXbgbkTuTJO/h8RJ+eaMbKC33uraYX02XtHwBKRdDMSdNF5IXEHoE7XpbYYBau9SDieiJHRT/ybzRxmwedqezw6DxbSi928GCCJQmgrrewHKwhKrSsrObuyKjzgc8RMxQev5PC3OXL3WzyD4juuGmnJnW9OSNSiB08rw3tYU0yxSrLv8nWx+mF4isRmKetmVp51854G2GrjQrc/8lg=\n\n\n1\n\n\n则 后端接收后将解析解密为对应 PersonVo 实体\n\n{\n    "name":"张三",\n    "phone":"15151115112",\n    "address":"离开省和你市好多天县谢谢谢谢谢奥所多",\n    "remark":"我是备注奥术大师大所多",\n    "idCard":"350061323543513135",\n    "normalField":"艾维奇重新阿萨德若"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# URL查询参数类型\n\n例代码：\n\n    @Operation(summary = "注解测试-请求参数解密-GET")\n    @DecryptRequestParams\n    @GetMapping(value = "/decryptRequestParams")\n    public Response<PersonVo> decryptRequestParamsGet(PersonVo vo) {\n        return Response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在调用接口请求参数，接口传参示例地址为：\n\nhttp://localhost:11110/rsa/decryptRequestParams?encryptedData=lxP7pSLwIuXSpDLqSZ3V.....\n\n\n1\n\n\n若想统一修改请求参数字段encryptedData，则修改如下配置文件\n\nsimple.encrypt.rsa.secureParams.urlField=encryptedData\n\n\n1\n\n\n\n# 接口返回参数加密\n\n使用注解 @EncryptResponseParams\n例代码：\n\n    @Operation(summary = "注解测试-返回参数加密")\n    @GetMapping(value = "/encryptResponse")\n    @EncryptResponseParams\n    public Response<String> encryptResponse(String reqString) {\n        return Response.ok(reqString);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在接口返回数据时，例 原返回数据\n\n{"code":200,"msg":"操作成功","data":"s"}\n\n\n1\n\n\n则会将此数据进行加密返回\n\nHWerZn2f5LP38JeUNUTcjTRVWbY530VvcpxtGkKZKz5pdPT5GU62xPHgcztc38eqGtk3HznDBDBFtC9Hbu/4o0XVveLXxZDyXHcD6K6pGt24bywJf0dvrZpYFVcgt39qaZ+MwNCGOnphOgK57kxoc8jzHjvylwMSeIsj+qmhMI1j9igRWq2IP/9/KaVnlBkt6Q5O/4kRztkRtnr2Bu04uwpyGFYYhu6szrVfhEVNrHnCq5hHGJIR40FHN3vN+IsiAKL6+7b7YU9RjcbH5NzGIacbJcnLveOF4zUfKpNMvspBxhEhV1lcNcbZoMqHw6NchBD6IdWAvORRQLOcmQbgRlwPDsE/miHfqp1/5x6C5+EYSnw0i/I6WxsclJ9nSCcLtTQdjiS1ERTMHENAYWrh+LR5xtK7gBV+z1N1pBkPW0VlIRO7Fo70sQRQ1pYQTBSEz+oRFFSt146V9z9TlsNUqes5k1SMsr5Of+XCYIAcXP+1pefhYHkj0u4HX5KOuxWSSUFqkkaXxWWVC0Jy9+LB+0q5qAqDWK1uHLYfH5Eij1aVbK6kgr0YzTA/hlUNG3rFxF4e5dsQqsDNtcpT4ryxeFvGge6ezzQga2irdBb4yjb+FcwqiGNFT+1MXBW9YGvFYMFj1tyM5gUqei82qk6zibcYC3yPHC5d+2K4g6YNPyo=\n\n\n1\n\n\n\n# 复合式注解\n\n此注解集成 接口请求参数解密 和 接口返回参数加密 ：@SecureParams\n代码示例：\n\n    @Operation(summary = "注解测试-请求参数解密及返回参数加密")\n    @SecureParams\n    @PostMapping(value = "/decryptAndEncrypt")\n    public Response<PersonVo> decryptAndEncrypt(@RequestBody PersonVo vo) {\n        return Response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 开启全局所有接口加解密\n\n配置参数开启\n\nsimple:\n  encrypt:\n    rsa:\n      secureParams:\n        enabled: true\n        urlField: encryptedData\n        #是否启用将所有使用Mapping注解的接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n等价于所有使用@RequestMapping、@GetMapping、@PostMapping、@PutMapping、@DeleteMapping的接口上均增加使用注解@SecureParams\n\n# UnEncrypted注解\n\n若需在开启全局加解密功能时，对特定接口无需加解密，在接口上使用@UnEncrypted即可\n\n    @Operation(summary = "测试单体")\n    @GetMapping(value = "/person")\n    @UnEncrypted\n    public Response<PersonVo> person() {\n        return Response.ok(service.getPerson());\n    }\n\n\n1\n2\n3\n4\n5\n6\n',normalizedContent:'# 简介\n\n提供注解简化使用：数据脱敏 、接口请求参数或返回参数rsa加密解密\n\n\n# 数据脱敏\n\n加密规则有通用模板、或自定义\n服务类返回参数支持单体字段、列表、实体嵌套\n\n\n# 接口请求参数或返回参数rsa加密解密\n\n支持开启全局所有接口加解密\n支持单独注解 对接口请求参数解密 或 对接口返回参数加密\n支持复合注解 对接口请求参数解密 及 对接口返回参数加密\n支持对请求参数增时间戳校验功能 默认关闭 默认校验时间戳的差值为5秒\n对接口请求参数解密 支持如postmapping的@requestbody传参解密 支持getmapping的url传参解密\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-encrypt</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  ## simple-starter-encrypt\n  encrypt:\n    desensitized:\n      ##脱敏 缺省项为true\n      enabled: true\n    rsa:\n      ## 接口加密\n      secureparams:\n        ## 接口请求参数或返回参数rsa加密解密 缺省项为true\n        enabled: true\n        ## url查询参数的请求字段 例：https://ok96.cn/api?encrypteddata=xxxxxxx\n        urlfield: encrypteddata\n\t\t## 默认关闭全局使用mapping注解接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: false\n      ## 时间戳校验\n      timestampvalidation:\n        ## 默认关闭校验校验时间戳 缺省项为false\n        enabled: true\n        ## 校验时间戳的差值 毫秒 默认5秒\n        expirymillis: 60000\n      ## 公钥 \n      publickey: |\n        miibijan....\n        wqidaqab\n      ## 私钥 \n      privatekey: |\n        miievgibad...\n        s3pffsfhfj\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n\n# 功能项-脱敏\n\n\n# 方法上启用脱敏\n\n在方法上标注注解：@desensitized\n例：\n\n    @desensitized\n    public personvo getperson() {\n        return personvo.builder().name("张三").idcard("350061323543513135").address("离开省和你市好多天县谢谢谢谢谢奥所多").phone("15151115112").remark("我是备注奥术大师大所多").normalfield("艾维奇重新阿萨德若").build();\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 字段脱敏\n\n# 已有脱敏模板\n\n模板列表：\n\nsensitiverule.chinese_name\nsensitiverule.id_card\nsensitiverule.fixed_phone\nsensitiverule.mobile_phone\nsensitiverule.address\nsensitiverule.email\nsensitiverule.bank_card\nsensitiverule.password\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n示例：\n\n    @schema(description = "地址")\n    @sensitivefield(rule = sensitiverule.address)\n    private string address;\n\n\n1\n2\n3\n\n\n# 自定义脱敏规则\n\n# 两侧保留明文\n\n注解：@sensitivefield(rule = sensitiverule.custom_broadside_clear_text, prefixlen = int, suffixlen = int)\nprefixlen:自定义规则-左侧几位字段进行操作\nsuffixlen:自定义规则-右侧几位字段进行操作\n示例：\n\n    @schema(description = "备注-两侧保留明文")\n    @sensitivefield(rule = sensitiverule.custom_broadside_clear_text, prefixlen = 2, suffixlen = 2)\n    private string remark;\n\n\n1\n2\n3\n\n\n# 两侧密文\n\n注解：@sensitivefield(rule = sensitiverule.custom_broadside_mask_text, prefixlen = int, suffixlen = int)\nprefixlen:自定义规则-左侧几位字段进行操作\nsuffixlen:自定义规则-右侧几位字段进行操作\n示例：\n\n    @schema(description = "普通字段-两侧密文")\n    @sensitivefield(rule = sensitiverule.custom_broadside_mask_text, prefixlen = 2, suffixlen = 2)\n    private string normalfield;\n\n\n1\n2\n3\n\n\n\n# 嵌套实体脱敏\n\n注解：@sensitiveentity 示例：\n\n@builder\n@noargsconstructor\n@allargsconstructor\npublic class superpersonvo {\n\n    @sensitiveentity\n    private personvo personvo;\n\n    @schema(description = "昵称")\n    @sensitivefield(rule = sensitiverule.chinese_name)\n    private string nickname;\n\n    @schema(description = "功能")\n    private string specificfunction;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# 功能项-接口加解密\n\n\n# 接口请求参数解密\n\n使用注解 @decryptrequestparams\n\n# requestbody类型\n\n例代码：\n\n    @operation(summary = "注解测试-请求参数解密-post")\n    @decryptrequestparams\n    @postmapping(value = "/decryptrequestparams")\n    public response<personvo> decryptrequestparams(@requestbody personvo vo) {\n        return response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在调用接口请求参数，直接传参为加密后的数据，例-直接传参数：\n\ng0jio0kzgzpj68mv91ctgadzqpuvlktzbic8cb4ikcjfyujhur8pf5n5yt7apwnzr28887h5frjjhmp+pdkazcxhrecdoufucapxtbtgivuawksk95c6rjds7k6vwjaglktms//kkstsgcglyjgdo/xteqds7scuv9tk2umukofxcbwyjbxmtv5u/6ig22aeh48lhovf0opabsfmemfuz5amneed0yughg18gqmoptw7v8bhtvi22xdasg87lsthcby6aouc8mkxalwosptlllotgzkdooxrhohyiyfbei7fnmxlevadfbymlzdyve18sgcrwa9bjmbypu5xxf+dpd7ityzmns3jnrsmsdpcmbfmzrvkfujkcbe2ioe4dlhfndjwaxxtlqiq3rvugp6l/odmbf7y5ry4yy/6gxrhd9jn82x0kksi9a5jrnywb7w4xsot4vjvydygwnmtcsu2uzwsjfxbgbktutjo/h8rj+eambkc33urayx02xthwbkrddmsdnf5ixehoe7xpbyybau9sdieijhrt/ybzrxmwedqezw6dxbsi928gccjqmgrrewhkwhkrssrobuykjzgc8rmxqev5pc3oxl3wzyd4juugmnjnw9osnsib08rw3tyu0yxsrlv8nwx+mf4isrmketmvp51854g2grjqrc/8lg=\n\n\n1\n\n\n则 后端接收后将解析解密为对应 personvo 实体\n\n{\n    "name":"张三",\n    "phone":"15151115112",\n    "address":"离开省和你市好多天县谢谢谢谢谢奥所多",\n    "remark":"我是备注奥术大师大所多",\n    "idcard":"350061323543513135",\n    "normalfield":"艾维奇重新阿萨德若"\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n# url查询参数类型\n\n例代码：\n\n    @operation(summary = "注解测试-请求参数解密-get")\n    @decryptrequestparams\n    @getmapping(value = "/decryptrequestparams")\n    public response<personvo> decryptrequestparamsget(personvo vo) {\n        return response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在调用接口请求参数，接口传参示例地址为：\n\nhttp://localhost:11110/rsa/decryptrequestparams?encrypteddata=lxp7pslwiuxspdlqsz3v.....\n\n\n1\n\n\n若想统一修改请求参数字段encrypteddata，则修改如下配置文件\n\nsimple.encrypt.rsa.secureparams.urlfield=encrypteddata\n\n\n1\n\n\n\n# 接口返回参数加密\n\n使用注解 @encryptresponseparams\n例代码：\n\n    @operation(summary = "注解测试-返回参数加密")\n    @getmapping(value = "/encryptresponse")\n    @encryptresponseparams\n    public response<string> encryptresponse(string reqstring) {\n        return response.ok(reqstring);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n在接口返回数据时，例 原返回数据\n\n{"code":200,"msg":"操作成功","data":"s"}\n\n\n1\n\n\n则会将此数据进行加密返回\n\nhwerzn2f5lp38jeunutcjtrvwby530vvcpxtgkkzkz5pdpt5gu62xphgcztc38eqgtk3hzndbdbftc9hbu/4o0xvvelxxzdyxhcd6k6pgt24bywjf0dvrzpyfvcgt39qaz+mwncgonphogk57kxoc8jzhjvylwmseisj+qmhmi1j9igrwq2ip/9/kavnlbkt6q5o/4krztkrtnr2bu04uwpygfyyhu6szrvfhevnrhncq5hhgjir40fhn3vn+isiakl6+7b7yu9rjcbh5nzgiacbjcnlveof4zufkpnmvspbxhehv1lcncbzomqhw6nchbd6idwavorrqlocmqbgrlwpdse/mihfqp1/5x6c5+eysnw0i/i6wxsclj9nscclttqdjis1ertmhenaywrh+lr5xtk7gbv+z1n1pbkpw0vliro7fo70sqrq1pyqtbsez+orffst146v9z9tlsnuqes5k1smsr5of+xcyiacxp+1pefhyhkj0u4hx5kouxwssufqkkaxxwwvc0jy9+lb+0q5qaqdwk1uhlyfh5eij1avbk6kgr0yzta/hlung3rfxf4e5dsqqsdntcpt4ryxefvgge6ezzqga2irdbb4yjb+fcwqignft+1mxbw9ygvfymfj1tym5guqei82qk6zibcyc3yphc5d+2k4g6ynpyo=\n\n\n1\n\n\n\n# 复合式注解\n\n此注解集成 接口请求参数解密 和 接口返回参数加密 ：@secureparams\n代码示例：\n\n    @operation(summary = "注解测试-请求参数解密及返回参数加密")\n    @secureparams\n    @postmapping(value = "/decryptandencrypt")\n    public response<personvo> decryptandencrypt(@requestbody personvo vo) {\n        return response.ok(vo);\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 开启全局所有接口加解密\n\n配置参数开启\n\nsimple:\n  encrypt:\n    rsa:\n      secureparams:\n        enabled: true\n        urlfield: encrypteddata\n        #是否启用将所有使用mapping注解的接口加解密 缺省项为false\n        all-controller:\n          mapping:\n            enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n等价于所有使用@requestmapping、@getmapping、@postmapping、@putmapping、@deletemapping的接口上均增加使用注解@secureparams\n\n# unencrypted注解\n\n若需在开启全局加解密功能时，对特定接口无需加解密，在接口上使用@unencrypted即可\n\n    @operation(summary = "测试单体")\n    @getmapping(value = "/person")\n    @unencrypted\n    public response<personvo> person() {\n        return response.ok(service.getperson());\n    }\n\n\n1\n2\n3\n4\n5\n6\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-dict",frontmatter:{title:"simple-starter-dict",date:"2023-04-04T17:23:42.000Z",permalink:"/pages/9b689cp24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/10.simple-starter-dict.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/10.simple-starter-dict.md",key:"v-77bbe1e4",path:"/pages/9b689cp24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:86},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:330},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:605},{level:3,title:"本地文件json字典翻译",slug:"本地文件json字典翻译",normalizedTitle:"本地文件json字典翻译",charIndex:613},{level:4,title:"文件",slug:"文件",normalizedTitle:"文件",charIndex:28},{level:4,title:"示例1",slug:"示例1",normalizedTitle:"示例1",charIndex:789},{level:3,title:"远程接口字典翻译",slug:"远程接口字典翻译",normalizedTitle:"远程接口字典翻译",charIndex:1025},{level:4,title:"示例1",slug:"示例1-2",normalizedTitle:"示例1",charIndex:789},{level:4,title:"示例2",slug:"示例2",normalizedTitle:"示例2",charIndex:1344},{level:3,title:"自定义实现",slug:"自定义实现",normalizedTitle:"自定义实现",charIndex:52},{level:4,title:"示例",slug:"示例",normalizedTitle:"示例",charIndex:789},{level:4,title:"自定义实现类",slug:"自定义实现类",normalizedTitle:"自定义实现类",charIndex:1969}],headersStr:"简介 引入依赖 配置项 功能项 本地文件json字典翻译 文件 示例1 远程接口字典翻译 示例1 示例2 自定义实现 示例 自定义实现类",content:'# 简介\n\n提供注解简化使用：字典翻译\n字典服务提供本地文件json使用（默认）、提供接口调用使用、扩展自定义实现使用\n服务类返回参数支持单体字段、列表、实体嵌套\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-dict</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  dict:\n    ##字典 缺省项为true\n    enabled: true\n    ## 调用远程接口获取字典项列表实现类请求接口地址前缀（若为空则注解填写需要完整接口路径）\n    remoteBaseUrl: http://127.0.0.1:11120\n    ## localDictServiceImpl实现类的本地字典文件目录，默认/dict.json。注：resource资源下\n    resourceDictFileDir: /dict.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 功能项\n\n\n# 本地文件json字典翻译\n\n# 文件\n\nresources/dict.json\n\n{"leader":[{"value":"1","label":"领导"},{"value":"2","label":"苦工"}],"sex":[{"value":"1","label":"女"},{"value":"2","label":"男"}]}\n\n\n1\n\n\n# 示例1\n\n    @Schema(description = "性别-默认实现类的json文件调用字典")\n    @DictField(dictionaryParams = "sex", dictImplClass = LocalDictServiceImpl.class, relatedField = "sexText")\n    private Integer sex;\n\n    private String sexText;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 远程接口字典翻译\n\n# 示例1\n\n    @Schema(description = "隐藏身份-默认远程调用接口实现类字典")\n    @DictField(dictionaryParams = "http://127.0.0.1:11120/dict/remote/hideIdentity", dictImplClass = RemoteDictServiceImpl.class , relatedField = "hideIdentityText")\n    private Integer hideIdentity;\n\n    private String hideIdentityText;\n\n\n1\n2\n3\n4\n5\n\n\n# 示例2\n\n配置文件：\n\nsimple:\n  dict:\n    remoteBaseUrl: http://127.0.0.1:11120\n\n\n1\n2\n3\n\n\n使用：\n\n    @Schema(description = "隐藏身份-默认远程调用接口实现类字典")\n    @DictField(dictionaryParams = "/dict/remote/hideIdentity", dictImplClass = RemoteDictServiceImpl.class, relatedField = "hideIdentityText")\n    private Integer hideIdentity;\n    \n    private String hideIdentityText;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 自定义实现\n\n# 示例\n\n    @Schema(description = "身份标识-自定义远程调用接口实现类字典")\n    @DictField(dictionaryParams = "idCard", dictImplClass = CustomDictServiceImpl.class, relatedField = "idCardText")\n    private Integer idCard;\n\n    private String idCardText;\n\n\n1\n2\n3\n4\n5\n\n\n# 自定义实现类\n\n示例代码：customDictServiceImpl 需继承DictService\n\n@Service\npublic class CustomDictServiceImpl implements DictService {\n\n    private RestTemplate restTemplate = new RestTemplate();\n\n    @Override\n    public List<DictItem> getDictItemList(String dictionaryParams) {\n        String path = "http://127.0.0.1:11120/simple-demo-dict/dict/custom/" + dictionaryParams;\n        ResponseEntity<Response<List<DictItem>>> responseEntity = restTemplate.exchange(path, HttpMethod.GET, null, new ParameterizedTypeReference<Response<List<DictItem>>>() {\n        });\n        return responseEntity.getBody().getData();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',normalizedContent:'# 简介\n\n提供注解简化使用：字典翻译\n字典服务提供本地文件json使用（默认）、提供接口调用使用、扩展自定义实现使用\n服务类返回参数支持单体字段、列表、实体嵌套\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-dict</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  dict:\n    ##字典 缺省项为true\n    enabled: true\n    ## 调用远程接口获取字典项列表实现类请求接口地址前缀（若为空则注解填写需要完整接口路径）\n    remotebaseurl: http://127.0.0.1:11120\n    ## localdictserviceimpl实现类的本地字典文件目录，默认/dict.json。注：resource资源下\n    resourcedictfiledir: /dict.json\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n\n# 功能项\n\n\n# 本地文件json字典翻译\n\n# 文件\n\nresources/dict.json\n\n{"leader":[{"value":"1","label":"领导"},{"value":"2","label":"苦工"}],"sex":[{"value":"1","label":"女"},{"value":"2","label":"男"}]}\n\n\n1\n\n\n# 示例1\n\n    @schema(description = "性别-默认实现类的json文件调用字典")\n    @dictfield(dictionaryparams = "sex", dictimplclass = localdictserviceimpl.class, relatedfield = "sextext")\n    private integer sex;\n\n    private string sextext;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 远程接口字典翻译\n\n# 示例1\n\n    @schema(description = "隐藏身份-默认远程调用接口实现类字典")\n    @dictfield(dictionaryparams = "http://127.0.0.1:11120/dict/remote/hideidentity", dictimplclass = remotedictserviceimpl.class , relatedfield = "hideidentitytext")\n    private integer hideidentity;\n\n    private string hideidentitytext;\n\n\n1\n2\n3\n4\n5\n\n\n# 示例2\n\n配置文件：\n\nsimple:\n  dict:\n    remotebaseurl: http://127.0.0.1:11120\n\n\n1\n2\n3\n\n\n使用：\n\n    @schema(description = "隐藏身份-默认远程调用接口实现类字典")\n    @dictfield(dictionaryparams = "/dict/remote/hideidentity", dictimplclass = remotedictserviceimpl.class, relatedfield = "hideidentitytext")\n    private integer hideidentity;\n    \n    private string hideidentitytext;\n\n\n1\n2\n3\n4\n5\n\n\n\n# 自定义实现\n\n# 示例\n\n    @schema(description = "身份标识-自定义远程调用接口实现类字典")\n    @dictfield(dictionaryparams = "idcard", dictimplclass = customdictserviceimpl.class, relatedfield = "idcardtext")\n    private integer idcard;\n\n    private string idcardtext;\n\n\n1\n2\n3\n4\n5\n\n\n# 自定义实现类\n\n示例代码：customdictserviceimpl 需继承dictservice\n\n@service\npublic class customdictserviceimpl implements dictservice {\n\n    private resttemplate resttemplate = new resttemplate();\n\n    @override\n    public list<dictitem> getdictitemlist(string dictionaryparams) {\n        string path = "http://127.0.0.1:11120/simple-demo-dict/dict/custom/" + dictionaryparams;\n        responseentity<response<list<dictitem>>> responseentity = resttemplate.exchange(path, httpmethod.get, null, new parameterizedtypereference<response<list<dictitem>>>() {\n        });\n        return responseentity.getbody().getdata();\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-email",frontmatter:{title:"simple-starter-email",date:"2023-05-29T14:36:54.000Z",permalink:"/pages/6c8e05p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/11.simple-starter-email.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/11.simple-starter-email.md",key:"v-d9d3f52c",path:"/pages/6c8e05p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:19},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:264},{level:2,title:"功能项",slug:"功能项",normalizedTitle:"功能项",charIndex:504},{level:3,title:"使用示例",slug:"使用示例",normalizedTitle:"使用示例",charIndex:512},{level:4,title:"基础使用-工程配置项",slug:"基础使用-工程配置项",normalizedTitle:"基础使用-工程配置项",charIndex:520},{level:4,title:"配置使用",slug:"配置使用",normalizedTitle:"配置使用",charIndex:1910}],headersStr:"简介 引入依赖 配置项 功能项 使用示例 基础使用-工程配置项 配置使用",content:'# 简介\n\n提供发送邮件使用\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-email</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  email:\n    config:\n      ##SMTP服务器host\n      smtpHost:\n      ##SMTP服务器端口号\n      smtpPort:\n      ##发件人邮箱用户名\n      username:\n      ##发件人邮箱密码\n      password:\n      ##发件人邮箱地址\n      fromEmail:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 功能项\n\n\n# 使用示例\n\n# 基础使用-工程配置项\n\n注入服务类\n\n    @Autowired\n    private EmailService emailService;\n\n\n1\n2\n\n\n发送电子邮件\n\n    @Operation(summary = "发送电子邮件")\n    @GetMapping(value = "/sendEmail")\n    public Response<?> sendEmailSinglePerson(@ParameterObject SendEmailVo vo) throws MessagingException, IOException {\n        emailService.sendEmail(vo.getToEmails(), vo.getCcEmails(), vo.getBccEmails(), vo.getSubject(), vo.getContent(), vo.getIsHtml(), vo.getAttachments(), vo.getInlineImages());\n        return Response.ok();\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n发送参数\n\n@Data\npublic class SendEmailVo {\n    @Schema(description = "收件人的电子邮件地址", example = "testxxx@qq.com,testxxx@foxmail.com")\n    private List<String> toEmails;\n    @Schema(description = "抄送人的电子邮件地址列表", example = "testyyy@qq.com,testyyy@foxmail.com")\n    private List<String> ccEmails;\n    @Schema(description = "附件文件的路径列表", example = "E:\\\\temp\\\\新建文本文档.txt")\n    private List<String> attachments;\n    @Schema(description = "邮件主题")\n    private String subject;\n    @Schema(description = "邮件内容")\n    private String content;\n    @Schema(description = "指示邮件内容是否为HTML格式", defaultValue = "false")\n    private Boolean isHtml;\n    @Schema(description = "密送人的电子邮件地址列表", example = "testzzz@qq.com")\n    private List<String> bccEmails;\n    @Schema(description = "内联图片的路径和CID映射", hidden = true)\n    Map<String, String> inlineImages;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n# 配置使用\n\n指：发送邮件时配置发件人邮件配置参数\n\nEmailService使用下列方法\n\n\n    /**\n     * 发送电子邮件方法\n     *\n     * @param toEmails      收件人的电子邮件地址列表\n     * @param ccEmails      抄送人的电子邮件地址列表\n     * @param bccEmails     密送人的电子邮件地址列表\n     * @param subject       邮件主题\n     * @param content       邮件内容\n     * @param isHtml        指示邮件内容是否为HTML格式\n     * @param attachments   附件文件的路径列表\n     * @param inlineImages  内联图片的路径和CID映射\n     * @param emailConfigVo 发件人邮件配置参数\n     * @throws MessagingException 发送邮件时可能抛出的异常\n     * @throws IOException        读取附件文件时可能抛出的异常\n     */\n    public void sendEmail(List<String> toEmails, List<String> ccEmails, List<String> bccEmails, String subject, String content, boolean isHtml, List<String> attachments, Map<String, String> inlineImages, EmailConfigVo emailConfigVo)\n            throws MessagingException, IOException {\n        Session session = createSession(emailConfigVo);\n        Message message = createMessage(session, toEmails, ccEmails, bccEmails, subject, content, isHtml, attachments, inlineImages, emailConfigVo.getFromEmail());\n        Transport.send(message);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n',normalizedContent:'# 简介\n\n提供发送邮件使用\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-email</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  email:\n    config:\n      ##smtp服务器host\n      smtphost:\n      ##smtp服务器端口号\n      smtpport:\n      ##发件人邮箱用户名\n      username:\n      ##发件人邮箱密码\n      password:\n      ##发件人邮箱地址\n      fromemail:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n\n# 功能项\n\n\n# 使用示例\n\n# 基础使用-工程配置项\n\n注入服务类\n\n    @autowired\n    private emailservice emailservice;\n\n\n1\n2\n\n\n发送电子邮件\n\n    @operation(summary = "发送电子邮件")\n    @getmapping(value = "/sendemail")\n    public response<?> sendemailsingleperson(@parameterobject sendemailvo vo) throws messagingexception, ioexception {\n        emailservice.sendemail(vo.gettoemails(), vo.getccemails(), vo.getbccemails(), vo.getsubject(), vo.getcontent(), vo.getishtml(), vo.getattachments(), vo.getinlineimages());\n        return response.ok();\n    }\n\n\n1\n2\n3\n4\n5\n6\n\n\n发送参数\n\n@data\npublic class sendemailvo {\n    @schema(description = "收件人的电子邮件地址", example = "testxxx@qq.com,testxxx@foxmail.com")\n    private list<string> toemails;\n    @schema(description = "抄送人的电子邮件地址列表", example = "testyyy@qq.com,testyyy@foxmail.com")\n    private list<string> ccemails;\n    @schema(description = "附件文件的路径列表", example = "e:\\\\temp\\\\新建文本文档.txt")\n    private list<string> attachments;\n    @schema(description = "邮件主题")\n    private string subject;\n    @schema(description = "邮件内容")\n    private string content;\n    @schema(description = "指示邮件内容是否为html格式", defaultvalue = "false")\n    private boolean ishtml;\n    @schema(description = "密送人的电子邮件地址列表", example = "testzzz@qq.com")\n    private list<string> bccemails;\n    @schema(description = "内联图片的路径和cid映射", hidden = true)\n    map<string, string> inlineimages;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n# 配置使用\n\n指：发送邮件时配置发件人邮件配置参数\n\nemailservice使用下列方法\n\n\n    /**\n     * 发送电子邮件方法\n     *\n     * @param toemails      收件人的电子邮件地址列表\n     * @param ccemails      抄送人的电子邮件地址列表\n     * @param bccemails     密送人的电子邮件地址列表\n     * @param subject       邮件主题\n     * @param content       邮件内容\n     * @param ishtml        指示邮件内容是否为html格式\n     * @param attachments   附件文件的路径列表\n     * @param inlineimages  内联图片的路径和cid映射\n     * @param emailconfigvo 发件人邮件配置参数\n     * @throws messagingexception 发送邮件时可能抛出的异常\n     * @throws ioexception        读取附件文件时可能抛出的异常\n     */\n    public void sendemail(list<string> toemails, list<string> ccemails, list<string> bccemails, string subject, string content, boolean ishtml, list<string> attachments, map<string, string> inlineimages, emailconfigvo emailconfigvo)\n            throws messagingexception, ioexception {\n        session session = createsession(emailconfigvo);\n        message message = createmessage(session, toemails, ccemails, bccemails, subject, content, ishtml, attachments, inlineimages, emailconfigvo.getfromemail());\n        transport.send(message);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-gateway",frontmatter:{title:"simple-starter-gateway",date:"2023-07-07T10:22:52.000Z",permalink:"/pages/b688b7p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/12.simple-starter-gateway.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/12.simple-starter-gateway.md",key:"v-785c366c",path:"/pages/b688b7p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"网关聚合文档效果",slug:"网关聚合文档效果",normalizedTitle:"网关聚合文档效果",charIndex:64},{level:3,title:"支持网关配置过滤器为->将请求的路径前缀去除",slug:"支持网关配置过滤器为-将请求的路径前缀去除",normalizedTitle:"支持网关配置过滤器为-&gt;将请求的路径前缀去除",charIndex:null},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:1275},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:1522},{level:3,title:"Nacos远程配置中心",slug:"nacos远程配置中心",normalizedTitle:"nacos远程配置中心",charIndex:1530},{level:3,title:"本地工程配置",slug:"本地工程配置",normalizedTitle:"本地工程配置",charIndex:1714},{level:3,title:"Add VM options",slug:"add-vm-options",normalizedTitle:"add vm options",charIndex:2444},{level:3,title:"效果图",slug:"效果图",normalizedTitle:"效果图",charIndex:2659},{level:4,title:"网关聚合微服务列表",slug:"网关聚合微服务列表",normalizedTitle:"网关聚合微服务列表",charIndex:2666},{level:4,title:"网关聚合微服务接口",slug:"网关聚合微服务接口",normalizedTitle:"网关聚合微服务接口",charIndex:2681}],headersStr:"简介 网关聚合文档效果 支持网关配置过滤器为->将请求的路径前缀去除 引入依赖 配置项 Nacos远程配置中心 本地工程配置 Add VM options 效果图 网关聚合微服务列表 网关聚合微服务接口",content:'# 简介\n\n将常用微服务网关的依赖集成，便于使用\n增加网关聚合文档兼容性，支持网关配置过滤器为->将请求的路径前缀去除\n\n\n# 网关聚合文档效果\n\n\n# 支持网关配置过滤器为->将请求的路径前缀去除\n\n网关效果如下：\n\n单体服务 接口地址 访问http://localhost:11100/simple-demo-cloud/hello/world\n通过网关 接口地址 访问http://localhost:11000/simple-demo-cloud/hello/world\n\n\n1\n2\n\n\n网关配置\n\nspring:\n  application:\n    name: simple-demo-gateway\n  cloud:\n    nacos:\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          lowerCaseServiceId: true\n          enabled: true\n          # 配置过滤器为->将请求的路径前缀去除\n          filters:\n            - name: StripPrefix\n              args:\n                parts: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n聚合文档兼容效果：\n打开网关接口文档地址： http://localhost:11000/doc.html\n展示接口地址内容与微服务文档地址内容一致：http://localhost:11100/doc.html\n\n注：微服务接口代码，Mapping中需包含微服务名称，网关才能正确转发：\n\n@RestController\n@RequestMapping("/simple-demo-cloud/hello")\n@Tag(name = "你好")\npublic class HelloController {\n\n    @Operation(summary = "世界")\n    @GetMapping(value = "/world")\n    public String world() {\n        return "simple-demo-cloud: hello world";\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n不在配置文件中写 server.servlet.context-path=simple-demo-cloud 的原因为:\n\n当所有微服务融合为单体工程时，接口地址将发生根本性改变，从而增加修改调用接口地址的工作量。\n\n微服务是否需要融合为单体工程，可视服务器资源情况决定\n\n兼容该功能涉及代码\n\nsimple-starter-web\n\nsimple-starter-gateway\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-gateway</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\n\n# Nacos远程配置中心\n\n示例：application.yml 公共-通用配置\n\nsimple:\n  openApi:\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: ku29@qq.com\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 本地工程配置\n\napplication.yml\n\nserver:\n  port: 11000\nspring:\n  application:\n    name: simple-demo-gateway\n  cloud:\n    nacos:\n      server-addr: http://127.0.0.1:8848\n      username:\n      password:\n      discovery:\n        registerEnabled: true\n        namespace:\n      config:\n        namespace:\n        file-extension: yml\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          lowerCaseServiceId: true\n          enabled: true\n  config:\n    import:\n      - nacos:application.yml\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      enabled: true\n      version: openapi3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# Add VM options\n\n-Dspring.cloud.nacos.server-addr=\n-Dspring.cloud.nacos.username=nacos\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\n\n# 效果图\n\n# 网关聚合微服务列表\n\n\n\n# 网关聚合微服务接口\n\n网关页面调用接口-端口11000 单体服务调用接口-端口11010',normalizedContent:'# 简介\n\n将常用微服务网关的依赖集成，便于使用\n增加网关聚合文档兼容性，支持网关配置过滤器为->将请求的路径前缀去除\n\n\n# 网关聚合文档效果\n\n\n# 支持网关配置过滤器为->将请求的路径前缀去除\n\n网关效果如下：\n\n单体服务 接口地址 访问http://localhost:11100/simple-demo-cloud/hello/world\n通过网关 接口地址 访问http://localhost:11000/simple-demo-cloud/hello/world\n\n\n1\n2\n\n\n网关配置\n\nspring:\n  application:\n    name: simple-demo-gateway\n  cloud:\n    nacos:\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          lowercaseserviceid: true\n          enabled: true\n          # 配置过滤器为->将请求的路径前缀去除\n          filters:\n            - name: stripprefix\n              args:\n                parts: 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n聚合文档兼容效果：\n打开网关接口文档地址： http://localhost:11000/doc.html\n展示接口地址内容与微服务文档地址内容一致：http://localhost:11100/doc.html\n\n注：微服务接口代码，mapping中需包含微服务名称，网关才能正确转发：\n\n@restcontroller\n@requestmapping("/simple-demo-cloud/hello")\n@tag(name = "你好")\npublic class hellocontroller {\n\n    @operation(summary = "世界")\n    @getmapping(value = "/world")\n    public string world() {\n        return "simple-demo-cloud: hello world";\n    }\n\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n\n\n不在配置文件中写 server.servlet.context-path=simple-demo-cloud 的原因为:\n\n当所有微服务融合为单体工程时，接口地址将发生根本性改变，从而增加修改调用接口地址的工作量。\n\n微服务是否需要融合为单体工程，可视服务器资源情况决定\n\n兼容该功能涉及代码\n\nsimple-starter-web\n\nsimple-starter-gateway\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-gateway</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\n\n# nacos远程配置中心\n\n示例：application.yml 公共-通用配置\n\nsimple:\n  openapi:\n    version: 1.0.0\n    contact:\n      name: ok1996\n      url: https://ok96.cn\n      email: ku29@qq.com\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 本地工程配置\n\napplication.yml\n\nserver:\n  port: 11000\nspring:\n  application:\n    name: simple-demo-gateway\n  cloud:\n    nacos:\n      server-addr: http://127.0.0.1:8848\n      username:\n      password:\n      discovery:\n        registerenabled: true\n        namespace:\n      config:\n        namespace:\n        file-extension: yml\n    # 路由网关配置\n    gateway:\n      # 启用了自动根据服务名建立路由\n      discovery:\n        locator:\n          lowercaseserviceid: true\n          enabled: true\n  config:\n    import:\n      - nacos:application.yml\nknife4j:\n  gateway:\n    enabled: true\n    strategy: discover\n    discover:\n      enabled: true\n      version: openapi3\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# add vm options\n\n-dspring.cloud.nacos.server-addr=\n-dspring.cloud.nacos.username=nacos\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n\n\n\n# 效果图\n\n# 网关聚合微服务列表\n\n\n\n# 网关聚合微服务接口\n\n网关页面调用接口-端口11000 单体服务调用接口-端口11010',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-package",frontmatter:{title:"simple-starter-package",date:"2023-10-12T10:22:52.000Z",permalink:"/pages/b666q2p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/13.simple-starter-package.html",relativePath:"05.OpenSource/04.2024.1.1.0/02.自动装配模块/13.simple-starter-package.md",key:"v-7f4a2a6a",path:"/pages/b666q2p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"模板源码",slug:"模板源码",normalizedTitle:"模板源码",charIndex:689},{level:2,title:"使用说明",slug:"使用说明",normalizedTitle:"使用说明",charIndex:725},{level:3,title:"Pom.xml文件",slug:"pom-xml文件",normalizedTitle:"pom.xml文件",charIndex:734},{level:4,title:"父类",slug:"父类",normalizedTitle:"父类",charIndex:747},{level:4,title:"版本标识",slug:"版本标识",normalizedTitle:"版本标识",charIndex:1018},{level:4,title:"依赖引入",slug:"依赖引入",normalizedTitle:"依赖引入",charIndex:1130},{level:4,title:"依赖声明",slug:"依赖声明",normalizedTitle:"依赖声明",charIndex:1906},{level:4,title:"构建配置-必填",slug:"构建配置-必填",normalizedTitle:"构建配置-必填",charIndex:2420},{level:4,title:"构建配置-可选",slug:"构建配置-可选",normalizedTitle:"构建配置-可选",charIndex:5374},{level:3,title:"配置文件",slug:"配置文件",normalizedTitle:"配置文件",charIndex:110},{level:3,title:"效果如下",slug:"效果如下",normalizedTitle:"效果如下",charIndex:6835}],headersStr:"简介 模板源码 使用说明 Pom.xml文件 父类 版本标识 依赖引入 依赖声明 构建配置-必填 构建配置-可选 配置文件 效果如下",content:"# 简介\n\n自定义Maven构建打包逻辑，将常用脚本及可执行文件统一打包\n在执行mvn package或mvn install时打包出 xxx--deploy.zip部署压缩包\n压缩包包含：服务启动脚本、可执行Jar包、配置文件、git版本文件（可选）\n\n文件名                   功能             说明\napplication.yml       配置文件           工程源码中的配置文件\nconfig                配置文件夹(可选)      工程配置源码中的文件夹-目录下为子配置文件\ndocker-compose.yml    Docker编排文件     网络模式为Host，将配置文件映射进容器中\nDockerfile            Docker镜像构建文件   基于openjdk:17-oracle\ngit.properties        git版本文件(可选)    输出构建时的Git版本信息\nReadme.md             操作说明           各脚本使用方式说明\nshell_java_start.sh   Shell启动脚本      使用原生Java命令启动\nshell_java_stop.sh    Shell关闭脚本      根据运行Pid进行关闭进程\nxxx-exec.jar          Jar源文件         可执行Jar包\nwin_java_start.bat    Windows启动脚本    使用原生Java命令启动\n\n\n# 模板源码\n\n参考模块：\nsimple-demo-package\n\n\n# 使用说明\n\n\n# Pom.xml文件\n\n# 父类\n\n方式一：\n需要继承spring-boot-starter-parent\n原因：resources资源文件下的启动脚本中使用 Pom.xml变量 \"@xx@\"\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>xxxx</version>\n    </parent>\n\n\n1\n2\n3\n4\n5\n\n\n# 版本标识\n\n需要声明本工程版本号\n原因：docker启动脚本中构建容器版本需使用变量@project.version@\n\n    <version>2023.5.2.0-SNAPSHOT</version>\n\n\n1\n\n\n# 依赖引入\n\n需要引入simple-starter-package依赖\n原因：使用依赖中的resources文件夹下的资源文件\n\n文件名                   功能                          说明\ndocker-compose.yml    Docker编排文件（引用Pom.xml变量）     首次启动将自动构建镜像，若在版本不变下需要更新镜像需先移除镜像\nDockerfile            Docker镜像构建文件（引用Pom.xml变量）   基于openjdk:17-oracle，将可执行Jar包复制进镜像中运行\nlogback-spring.xml    日志配置                        配置按照每天生成日志文件\nReadme.md             操作说明（引用Pom.xml变量）           各脚本使用方式说明\nshell_java_start.sh   Shell启动脚本（引用Pom.xml变量）      使用原生Java命令启动，运行可执行Jar包\nshell_java_stop.sh    Shell关闭脚本（引用Pom.xml变量）      根据运行Pid进行关闭进程\nwin_java_start.bat    Windows启动脚本（引用Pom.xml变量）    使用原生Java命令启动，运行可执行Jar包\n\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-package</artifactId>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n# 依赖声明\n\n使用依赖声明，可减免依赖引入时都需要配置版本号\n\n    \x3c!-- 依赖声明 --\x3e\n    <dependencyManagement>\n        <dependencies>\n            \x3c!-- SimpleDependencies 依赖配置 --\x3e\n            <dependency>\n                <groupId>cn.iosd</groupId>\n                <artifactId>simple-dependencies</artifactId>\n                <version>${ok-simple.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# 构建配置-必填\n\n指定finalName：原因为各脚本有将构建出的可执行jar进行操作\n指定classifier为exec：原因为各脚本有将构建出的可执行jar（包含后缀exec）进行操作\n插件maven-assembly-plugin：引入自定义压缩包逻辑文件\n插件声明pluginManagement：指定使用自定义压缩包逻辑文件-此声明可放置在一级Pom中，子工程便不需要再写\n\n    <build>\n        <finalName>${project.artifactId}</finalName>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <includeSystemScope>true</includeSystemScope>\n                    \x3c!-- SpringBoot多模块打包:spring-boot工程打包编译时，会生成两种jar包，一种是普通的jar，另一种是可执行jar--\x3e\n                    <classifier>exec</classifier>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <dependencies>\n                    \x3c!-- 包含simple-assembly文件，自定义压缩包逻辑 --\x3e\n                    <dependency>\n                        <groupId>cn.iosd</groupId>\n                        <artifactId>simple-starter-package</artifactId>\n                        <version>${ok-simple.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n\n        <pluginManagement>\n            <plugins>\n\t\t\t    \x3c!-- 插件声明 可放在首层 指定使用simple-assembly --\x3e\n                <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-assembly-plugin</artifactId>\n                    <executions>\n                        <execution>\n                            <id>deploy</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>single</goal>\n                            </goals>\n                            <configuration>\n                                <finalName>${project.artifactId}</finalName>\n                                <descriptorRefs>\n                                    <descriptorRef>simple-assembly</descriptorRef>\n                                </descriptorRefs>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginManagement>\n    </build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n\n\n# 构建配置-可选\n\n可选构建时增加输出增加git版本文件\n\n            \x3c!-- 构建输出增加git版本文件 --\x3e\n            <plugin>\n                <groupId>io.github.git-commit-id</groupId>\n                <artifactId>git-commit-id-maven-plugin</artifactId>\n            </plugin>\n\n\n1\n2\n3\n4\n5\n\n\n若父类不是继承 spring-boot-starter-parent 则需要在 插件声明中添加\n\n                \x3c!-- 插件声明 可放在首层 打包时生成git.properties（可选） --\x3e\n                <plugin>\n                    <groupId>io.github.git-commit-id</groupId>\n                    <artifactId>git-commit-id-maven-plugin</artifactId>\n                    <version>5.0.1</version>\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>revision</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                    <configuration>\n                        <verbose>true</verbose>\n                        <dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>\n                        <generateGitPropertiesFile>true</generateGitPropertiesFile>\n                        <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>\n                    </configuration>\n                </plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 配置文件\n\n把项目配置文件复制到压缩包中，resources资源夹列表如下\n\nresources\n|--application.yml 配置文件\n|--config          配置文件夹下所有文件\n   |--*.*           \n\n\n1\n2\n3\n4\n\n\n\n# 效果如下\n\n执行 mvn install后在target目录下生成xxx-deploy.zip部署包",normalizedContent:"# 简介\n\n自定义maven构建打包逻辑，将常用脚本及可执行文件统一打包\n在执行mvn package或mvn install时打包出 xxx--deploy.zip部署压缩包\n压缩包包含：服务启动脚本、可执行jar包、配置文件、git版本文件（可选）\n\n文件名                   功能             说明\napplication.yml       配置文件           工程源码中的配置文件\nconfig                配置文件夹(可选)      工程配置源码中的文件夹-目录下为子配置文件\ndocker-compose.yml    docker编排文件     网络模式为host，将配置文件映射进容器中\ndockerfile            docker镜像构建文件   基于openjdk:17-oracle\ngit.properties        git版本文件(可选)    输出构建时的git版本信息\nreadme.md             操作说明           各脚本使用方式说明\nshell_java_start.sh   shell启动脚本      使用原生java命令启动\nshell_java_stop.sh    shell关闭脚本      根据运行pid进行关闭进程\nxxx-exec.jar          jar源文件         可执行jar包\nwin_java_start.bat    windows启动脚本    使用原生java命令启动\n\n\n# 模板源码\n\n参考模块：\nsimple-demo-package\n\n\n# 使用说明\n\n\n# pom.xml文件\n\n# 父类\n\n方式一：\n需要继承spring-boot-starter-parent\n原因：resources资源文件下的启动脚本中使用 pom.xml变量 \"@xx@\"\n\n    <parent>\n        <groupid>org.springframework.boot</groupid>\n        <artifactid>spring-boot-starter-parent</artifactid>\n        <version>xxxx</version>\n    </parent>\n\n\n1\n2\n3\n4\n5\n\n\n# 版本标识\n\n需要声明本工程版本号\n原因：docker启动脚本中构建容器版本需使用变量@project.version@\n\n    <version>2023.5.2.0-snapshot</version>\n\n\n1\n\n\n# 依赖引入\n\n需要引入simple-starter-package依赖\n原因：使用依赖中的resources文件夹下的资源文件\n\n文件名                   功能                          说明\ndocker-compose.yml    docker编排文件（引用pom.xml变量）     首次启动将自动构建镜像，若在版本不变下需要更新镜像需先移除镜像\ndockerfile            docker镜像构建文件（引用pom.xml变量）   基于openjdk:17-oracle，将可执行jar包复制进镜像中运行\nlogback-spring.xml    日志配置                        配置按照每天生成日志文件\nreadme.md             操作说明（引用pom.xml变量）           各脚本使用方式说明\nshell_java_start.sh   shell启动脚本（引用pom.xml变量）      使用原生java命令启动，运行可执行jar包\nshell_java_stop.sh    shell关闭脚本（引用pom.xml变量）      根据运行pid进行关闭进程\nwin_java_start.bat    windows启动脚本（引用pom.xml变量）    使用原生java命令启动，运行可执行jar包\n\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-package</artifactid>\n        </dependency>\n\n\n1\n2\n3\n4\n\n\n# 依赖声明\n\n使用依赖声明，可减免依赖引入时都需要配置版本号\n\n    \x3c!-- 依赖声明 --\x3e\n    <dependencymanagement>\n        <dependencies>\n            \x3c!-- simpledependencies 依赖配置 --\x3e\n            <dependency>\n                <groupid>cn.iosd</groupid>\n                <artifactid>simple-dependencies</artifactid>\n                <version>${ok-simple.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencymanagement>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n# 构建配置-必填\n\n指定finalname：原因为各脚本有将构建出的可执行jar进行操作\n指定classifier为exec：原因为各脚本有将构建出的可执行jar（包含后缀exec）进行操作\n插件maven-assembly-plugin：引入自定义压缩包逻辑文件\n插件声明pluginmanagement：指定使用自定义压缩包逻辑文件-此声明可放置在一级pom中，子工程便不需要再写\n\n    <build>\n        <finalname>${project.artifactid}</finalname>\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <filtering>true</filtering>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupid>org.springframework.boot</groupid>\n                <artifactid>spring-boot-maven-plugin</artifactid>\n                <configuration>\n                    <includesystemscope>true</includesystemscope>\n                    \x3c!-- springboot多模块打包:spring-boot工程打包编译时，会生成两种jar包，一种是普通的jar，另一种是可执行jar--\x3e\n                    <classifier>exec</classifier>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <plugin>\n                <groupid>org.apache.maven.plugins</groupid>\n                <artifactid>maven-assembly-plugin</artifactid>\n                <dependencies>\n                    \x3c!-- 包含simple-assembly文件，自定义压缩包逻辑 --\x3e\n                    <dependency>\n                        <groupid>cn.iosd</groupid>\n                        <artifactid>simple-starter-package</artifactid>\n                        <version>${ok-simple.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n\n        <pluginmanagement>\n            <plugins>\n\t\t\t    \x3c!-- 插件声明 可放在首层 指定使用simple-assembly --\x3e\n                <plugin>\n                    <groupid>org.apache.maven.plugins</groupid>\n                    <artifactid>maven-assembly-plugin</artifactid>\n                    <executions>\n                        <execution>\n                            <id>deploy</id>\n                            <phase>package</phase>\n                            <goals>\n                                <goal>single</goal>\n                            </goals>\n                            <configuration>\n                                <finalname>${project.artifactid}</finalname>\n                                <descriptorrefs>\n                                    <descriptorref>simple-assembly</descriptorref>\n                                </descriptorrefs>\n                            </configuration>\n                        </execution>\n                    </executions>\n                </plugin>\n            </plugins>\n        </pluginmanagement>\n    </build>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n\n\n# 构建配置-可选\n\n可选构建时增加输出增加git版本文件\n\n            \x3c!-- 构建输出增加git版本文件 --\x3e\n            <plugin>\n                <groupid>io.github.git-commit-id</groupid>\n                <artifactid>git-commit-id-maven-plugin</artifactid>\n            </plugin>\n\n\n1\n2\n3\n4\n5\n\n\n若父类不是继承 spring-boot-starter-parent 则需要在 插件声明中添加\n\n                \x3c!-- 插件声明 可放在首层 打包时生成git.properties（可选） --\x3e\n                <plugin>\n                    <groupid>io.github.git-commit-id</groupid>\n                    <artifactid>git-commit-id-maven-plugin</artifactid>\n                    <version>5.0.1</version>\n                    <executions>\n                        <execution>\n                            <goals>\n                                <goal>revision</goal>\n                            </goals>\n                        </execution>\n                    </executions>\n                    <configuration>\n                        <verbose>true</verbose>\n                        <dateformat>yyyy-mm-dd't'hh:mm:ssz</dateformat>\n                        <generategitpropertiesfile>true</generategitpropertiesfile>\n                        <generategitpropertiesfilename>${project.build.outputdirectory}/git.properties</generategitpropertiesfilename>\n                    </configuration>\n                </plugin>\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n\n\n\n# 配置文件\n\n把项目配置文件复制到压缩包中，resources资源夹列表如下\n\nresources\n|--application.yml 配置文件\n|--config          配置文件夹下所有文件\n   |--*.*           \n\n\n1\n2\n3\n4\n\n\n\n# 效果如下\n\n执行 mvn install后在target目录下生成xxx-deploy.zip部署包",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-base-config",frontmatter:{title:"simple-base-config",date:"2023-03-31T15:15:18.000Z",permalink:"/pages/0f3b13p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/03.%E6%9C%8D%E5%8A%A1%E7%B1%BB%E6%A8%A1%E5%9D%97/01.simple-base-config.html",relativePath:"05.OpenSource/04.2024.1.1.0/03.服务类模块/01.simple-base-config.md",key:"v-3e789f00",path:"/pages/0f3b13p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"拆分客户端及服务端使用",slug:"拆分客户端及服务端使用",normalizedTitle:"拆分客户端及服务端使用",charIndex:248},{level:3,title:"启动服务端",slug:"启动服务端",normalizedTitle:"启动服务端",charIndex:75},{level:3,title:"引入客户端",slug:"引入客户端",normalizedTitle:"引入客户端",charIndex:68},{level:4,title:"引入依赖-方式1",slug:"引入依赖-方式1",normalizedTitle:"引入依赖-方式1",charIndex:1041},{level:4,title:"引入依赖-方式2",slug:"引入依赖-方式2",normalizedTitle:"引入依赖-方式2",charIndex:1308},{level:4,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:1616},{level:4,title:"存储数据",slug:"存储数据",normalizedTitle:"存储数据",charIndex:2413},{level:4,title:"获取数据",slug:"获取数据",normalizedTitle:"获取数据",charIndex:4393},{level:4,title:"工具类 ConfigUtils",slug:"工具类-configutils",normalizedTitle:"工具类 configutils",charIndex:5237},{level:2,title:"融合客户端和服务端使用",slug:"融合客户端和服务端使用",normalizedTitle:"融合客户端和服务端使用",charIndex:5273},{level:4,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:183},{level:4,title:"查看服务端接口",slug:"查看服务端接口",normalizedTitle:"查看服务端接口",charIndex:5565}],headersStr:"简介 拆分客户端及服务端使用 启动服务端 引入客户端 引入依赖-方式1 引入依赖-方式2 配置项 存储数据 获取数据 工具类 ConfigUtils 融合客户端和服务端使用 引入依赖 查看服务端接口",content:'# 简介\n\n可作用于系统基础配置参数\n\n模块\n\nsimple-base-config-api 参数配置服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：启动自动初始化配置值到数据库中、可选覆盖数据\nsimple-base-config-service 参数配置服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：数据表结构将自动创建、开放基础调用接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动BaseConfigServiceApplication的vm配置--无需连接Nacos\n\n-Dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n若要连接Nacos则再增加配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-config-api</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-config-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接Nacos则再增加vm配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-config-api\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9010\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n# 存储数据\n\n启动自动初始化数据\n\n示例：\n\n/**\n * 初始化数据\n * <p>\n * 创建初始化对象，提供一些常量和方法实现\n *\n * @author ok1996\n */\n@Component\npublic class DemoTestConfigInit {\n    /**\n     * 一班参数key\n     */\n    public static final String STUDENT_KEY_ONE = "student-key-test-one";\n\n    /**\n     * 二班参数key\n     */\n    public static final String STUDENT_KEY_TWO = "student-key-test-two";\n\n    @Bean\n    public ConfigInit studentTestOneInit() {\n        ConfigInit configInit = new ConfigInit(STUDENT_KEY_ONE, "一班同学列表", false, List.of("模块分类1", "分类1-1"));\n        configInit.setCodeValues(List.of(\n                new CodeValue<Boolean>().setCode(ConfigUtils.OPEN_SIMULATION_CODE).setValue(true),\n                new CodeValue<ClassmateVo>().setCode(ConfigUtils.CONTENT_DATA_CODE)\n                        .setValue(ClassmateVo.builder().personList(List.of(\n                                        ClassmateVo.Person.builder().age(12).name("小库").build(),\n                                        ClassmateVo.Person.builder().age(14).name("小明").build()))\n                                .build())\n        ));\n        return configInit;\n    }\n\n    @Bean\n    public ConfigInit studentTestTwoInit() {\n        ConfigInit configInit = new ConfigInit(STUDENT_KEY_TWO, "二班同学列表", false, List.of("模块分类1", "分类1-2"));\n        configInit.setCodeValues(List.of(\n                new CodeValue<Boolean>().setCode(ConfigUtils.OPEN_SIMULATION_CODE).setValue(true),\n                new CodeValue<ClassmateVo>().setCode(ConfigUtils.CONTENT_DATA_CODE)\n                        .setValue(ClassmateVo.builder().personList(List.of(\n                                        ClassmateVo.Person.builder().age(14).name("小雪").build(),\n                                        ClassmateVo.Person.builder().age(15).name("小楚").build()))\n                                .build())\n        ));\n        return configInit;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n# 获取数据\n\n示例-获取key-test数据：\n\n    @Autowired(required = false)\n    private IBaseConfigService configService;\n\n    /**\n     * 获取同学列表信息\n     *\n     * @return 返回同学列表信息的ClassmateVo对象\n     */\n    public ClassmateVo classmateList() {\n        if (configService == null) {\n            return null;\n        }\n        // 从基础参数服务中获取基础参数码值对象的列表\n        List<CodeValue<?>> simulation = configService.selectValueListByKey(DemoTestConfigInit.STUDENT_KEY_ONE);\n        // 判断是否开启模拟数据\n        if (!ConfigUtils.findFirstByCode(simulation, ConfigUtils.OPEN_SIMULATION_CODE, false)) {\n            log.info("获取其他来源途径的数据");\n            return null;\n        }\n        // 获取存储的模拟数据，并将其转换为对应的实体类\n        return ConfigUtils.findFirstByCode(simulation, ConfigUtils.CONTENT_DATA_CODE, ClassmateVo.class,null);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n# 工具类 ConfigUtils\n\n各方法查看源码均提供注释说明\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-config-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\n例：可访问接口地址查看 http://127.0.0.1:9010/doc.html',normalizedContent:'# 简介\n\n可作用于系统基础配置参数\n\n模块\n\nsimple-base-config-api 参数配置服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：启动自动初始化配置值到数据库中、可选覆盖数据\nsimple-base-config-service 参数配置服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：数据表结构将自动创建、开放基础调用接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动baseconfigserviceapplication的vm配置--无需连接nacos\n\n-dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true&servertimezone=gmt%2b8\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n若要连接nacos则再增加配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-config-api</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-config-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接nacos则再增加vm配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-config-api\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9010\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      config:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n# 存储数据\n\n启动自动初始化数据\n\n示例：\n\n/**\n * 初始化数据\n * <p>\n * 创建初始化对象，提供一些常量和方法实现\n *\n * @author ok1996\n */\n@component\npublic class demotestconfiginit {\n    /**\n     * 一班参数key\n     */\n    public static final string student_key_one = "student-key-test-one";\n\n    /**\n     * 二班参数key\n     */\n    public static final string student_key_two = "student-key-test-two";\n\n    @bean\n    public configinit studenttestoneinit() {\n        configinit configinit = new configinit(student_key_one, "一班同学列表", false, list.of("模块分类1", "分类1-1"));\n        configinit.setcodevalues(list.of(\n                new codevalue<boolean>().setcode(configutils.open_simulation_code).setvalue(true),\n                new codevalue<classmatevo>().setcode(configutils.content_data_code)\n                        .setvalue(classmatevo.builder().personlist(list.of(\n                                        classmatevo.person.builder().age(12).name("小库").build(),\n                                        classmatevo.person.builder().age(14).name("小明").build()))\n                                .build())\n        ));\n        return configinit;\n    }\n\n    @bean\n    public configinit studenttesttwoinit() {\n        configinit configinit = new configinit(student_key_two, "二班同学列表", false, list.of("模块分类1", "分类1-2"));\n        configinit.setcodevalues(list.of(\n                new codevalue<boolean>().setcode(configutils.open_simulation_code).setvalue(true),\n                new codevalue<classmatevo>().setcode(configutils.content_data_code)\n                        .setvalue(classmatevo.builder().personlist(list.of(\n                                        classmatevo.person.builder().age(14).name("小雪").build(),\n                                        classmatevo.person.builder().age(15).name("小楚").build()))\n                                .build())\n        ));\n        return configinit;\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n\n\n# 获取数据\n\n示例-获取key-test数据：\n\n    @autowired(required = false)\n    private ibaseconfigservice configservice;\n\n    /**\n     * 获取同学列表信息\n     *\n     * @return 返回同学列表信息的classmatevo对象\n     */\n    public classmatevo classmatelist() {\n        if (configservice == null) {\n            return null;\n        }\n        // 从基础参数服务中获取基础参数码值对象的列表\n        list<codevalue<?>> simulation = configservice.selectvaluelistbykey(demotestconfiginit.student_key_one);\n        // 判断是否开启模拟数据\n        if (!configutils.findfirstbycode(simulation, configutils.open_simulation_code, false)) {\n            log.info("获取其他来源途径的数据");\n            return null;\n        }\n        // 获取存储的模拟数据，并将其转换为对应的实体类\n        return configutils.findfirstbycode(simulation, configutils.content_data_code, classmatevo.class,null);\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\n\n# 工具类 configutils\n\n各方法查看源码均提供注释说明\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-config-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\n例：可访问接口地址查看 http://127.0.0.1:9010/doc.html',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-base-s3",frontmatter:{title:"simple-base-s3",date:"2023-04-10T09:55:19.000Z",permalink:"/pages/e7cd28p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/03.%E6%9C%8D%E5%8A%A1%E7%B1%BB%E6%A8%A1%E5%9D%97/02.simple-base-s3.html",relativePath:"05.OpenSource/04.2024.1.1.0/03.服务类模块/02.simple-base-s3.md",key:"v-2892a786",path:"/pages/e7cd28p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"依赖关系",slug:"依赖关系",normalizedTitle:"依赖关系",charIndex:217},{level:2,title:"拆分客户端及服务端使用",slug:"拆分客户端及服务端使用",normalizedTitle:"拆分客户端及服务端使用",charIndex:228},{level:3,title:"启动服务端",slug:"启动服务端",normalizedTitle:"启动服务端",charIndex:70},{level:3,title:"引入客户端",slug:"引入客户端",normalizedTitle:"引入客户端",charIndex:63},{level:4,title:"引入依赖-方式1",slug:"引入依赖-方式1",normalizedTitle:"引入依赖-方式1",charIndex:777},{level:4,title:"引入依赖-方式2",slug:"引入依赖-方式2",normalizedTitle:"引入依赖-方式2",charIndex:1040},{level:4,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:1344},{level:2,title:"融合客户端和服务端使用",slug:"融合客户端和服务端使用",normalizedTitle:"融合客户端和服务端使用",charIndex:2130},{level:4,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:161},{level:4,title:"查看服务端接口",slug:"查看服务端接口",normalizedTitle:"查看服务端接口",charIndex:2418}],headersStr:"简介 依赖关系 拆分客户端及服务端使用 启动服务端 引入客户端 引入依赖-方式1 引入依赖-方式2 配置项 融合客户端和服务端使用 引入依赖 查看服务端接口",content:"# 简介\n\n提供文件管理服务及接口\n\n模块\n\nsimple-base-s3-api 文件管理服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：提供调用服务端接口\nsimple-base-s3-service 文件管理服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：提供文件管理服务接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 依赖关系\n\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动BaseS3ServiceApplication的vm配置--无需连接Nacos\n\n-Dsimple.s3.accessKey= \n-Dsimple.s3.secretKey= \n-Dsimple.s3.endpoint= \n\n\n1\n2\n3\n\n\n若要连接Nacos则再增加配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-s3-api</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-s3-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接Nacos则再增加vm配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-s3-api\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9020\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-s3-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\nPOST  获取文件列表-首页\nDELETE  删除文件\nPOST  上传文件-返回文件key\nPOST  获取文件列表-下一页\nGET 生成带有预签名的URL，用于私有S3对象的访问\nGET 创建存储桶\nDELETE  删除存储桶\nGET 获取存储桶列表\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",normalizedContent:"# 简介\n\n提供文件管理服务及接口\n\n模块\n\nsimple-base-s3-api 文件管理服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：提供调用服务端接口\nsimple-base-s3-service 文件管理服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：提供文件管理服务接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 依赖关系\n\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动bases3serviceapplication的vm配置--无需连接nacos\n\n-dsimple.s3.accesskey= \n-dsimple.s3.secretkey= \n-dsimple.s3.endpoint= \n\n\n1\n2\n3\n\n\n若要连接nacos则再增加配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-s3-api</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-s3-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接nacos则再增加vm配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-s3-api\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9020\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      s3:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-s3-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\npost  获取文件列表-首页\ndelete  删除文件\npost  上传文件-返回文件key\npost  获取文件列表-下一页\nget 生成带有预签名的url，用于私有s3对象的访问\nget 创建存储桶\ndelete  删除存储桶\nget 获取存储桶列表\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-base-generator",frontmatter:{title:"simple-base-generator",date:"2023-08-16T16:38:59.000Z",permalink:"/pages/0e22dbp24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/03.%E6%9C%8D%E5%8A%A1%E7%B1%BB%E6%A8%A1%E5%9D%97/03.simple-base-generator.html",relativePath:"05.OpenSource/04.2024.1.1.0/03.服务类模块/03.simple-base-generator.md",key:"v-7ee18b14",path:"/pages/0e22dbp24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"使用流程",slug:"使用流程",normalizedTitle:"使用流程",charIndex:25},{level:2,title:"框架设计",slug:"框架设计",normalizedTitle:"框架设计",charIndex:36},{level:2,title:"代码解析",slug:"代码解析",normalizedTitle:"代码解析",charIndex:47},{level:2,title:"使用示例",slug:"使用示例",normalizedTitle:"使用示例",charIndex:214},{level:3,title:"生成工程",slug:"生成工程",normalizedTitle:"生成工程",charIndex:223},{level:3,title:"生成Mybatis代码",slug:"生成mybatis代码",normalizedTitle:"生成mybatis代码",charIndex:393}],headersStr:"简介 使用流程 框架设计 代码解析 使用示例 生成工程 生成Mybatis代码",content:'# 简介\n\n提供工程、代码生成服务及接口\n\n\n# 使用流程\n\n\n\n\n# 框架设计\n\n\n\n\n# 代码解析\n\n主要设计思路\n\n   使用一个接口类，在单独启动工程时默认使用走向mybatis的实现类；\n   在其他工程使用依赖引入时默认优先走向Feign的接口调用实现类，远程调用单独启动的微服务；\n   在其他工程使用依赖引入时可选走向mybatis的实现类，使用配置文件某个值作为开关，默认关闭；\n\n\n1\n2\n3\n\n\n\n\n\n# 使用示例\n\n\n# 生成工程\n\n启动依赖工程\n调用接口地址：\n\n..../simple-base-generator-service/generator/projectGen?projectName=simple-service-generator&packageName=cn.iosd.demo&moduleName=generator\n\n\n1\n\n\n\n# 生成Mybatis代码\n\nmain方法调用示例:\n\n    public static void main(String[] args) {\n        DatabaseGenVo vo = new DatabaseGenVo();\n        vo.setAuthorName("ok1996");\n        vo.setDataBaseUrl("jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true");\n        vo.setDataBaseUserName("root");\n        vo.setDataBasePassword("123456");\n        vo.setPackageName("cn.iosd.demo");\n        vo.setProjectName("simple-service-generator");\n        vo.setModuleName("generator");\n        vo.setTableNames(Collections.singletonList("demo_article"));\n        vo.setTablePrefix(Collections.singletonList("demo"));\n        DatabaseGenUtils.generate(vo);\n        log.info("文件生成目录：" + new File("target/generator").getAbsolutePath());\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',normalizedContent:'# 简介\n\n提供工程、代码生成服务及接口\n\n\n# 使用流程\n\n\n\n\n# 框架设计\n\n\n\n\n# 代码解析\n\n主要设计思路\n\n   使用一个接口类，在单独启动工程时默认使用走向mybatis的实现类；\n   在其他工程使用依赖引入时默认优先走向feign的接口调用实现类，远程调用单独启动的微服务；\n   在其他工程使用依赖引入时可选走向mybatis的实现类，使用配置文件某个值作为开关，默认关闭；\n\n\n1\n2\n3\n\n\n\n\n\n# 使用示例\n\n\n# 生成工程\n\n启动依赖工程\n调用接口地址：\n\n..../simple-base-generator-service/generator/projectgen?projectname=simple-service-generator&packagename=cn.iosd.demo&modulename=generator\n\n\n1\n\n\n\n# 生成mybatis代码\n\nmain方法调用示例:\n\n    public static void main(string[] args) {\n        databasegenvo vo = new databasegenvo();\n        vo.setauthorname("ok1996");\n        vo.setdatabaseurl("jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true");\n        vo.setdatabaseusername("root");\n        vo.setdatabasepassword("123456");\n        vo.setpackagename("cn.iosd.demo");\n        vo.setprojectname("simple-service-generator");\n        vo.setmodulename("generator");\n        vo.settablenames(collections.singletonlist("demo_article"));\n        vo.settableprefix(collections.singletonlist("demo"));\n        databasegenutils.generate(vo);\n        log.info("文件生成目录：" + new file("target/generator").getabsolutepath());\n    }\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-base-dict",frontmatter:{title:"simple-base-dict",date:"2023-09-15T15:15:18.000Z",permalink:"/pages/0a2b14p24110/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/04.2024.1.1.0/03.%E6%9C%8D%E5%8A%A1%E7%B1%BB%E6%A8%A1%E5%9D%97/04.simple-base-dict.html",relativePath:"05.OpenSource/04.2024.1.1.0/03.服务类模块/04.simple-base-dict.md",key:"v-79abb25e",path:"/pages/0a2b14p24110/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"依赖关系及代码分析",slug:"依赖关系及代码分析",normalizedTitle:"依赖关系及代码分析",charIndex:233},{level:2,title:"拆分客户端及服务端使用",slug:"拆分客户端及服务端使用",normalizedTitle:"拆分客户端及服务端使用",charIndex:249},{level:3,title:"启动服务端",slug:"启动服务端",normalizedTitle:"启动服务端",charIndex:74},{level:3,title:"引入客户端",slug:"引入客户端",normalizedTitle:"引入客户端",charIndex:67},{level:4,title:"引入依赖-方式1",slug:"引入依赖-方式1",normalizedTitle:"引入依赖-方式1",charIndex:1040},{level:4,title:"引入依赖-方式2",slug:"引入依赖-方式2",normalizedTitle:"引入依赖-方式2",charIndex:1305},{level:4,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:1611},{level:4,title:"使用字典翻译",slug:"使用字典翻译",normalizedTitle:"使用字典翻译",charIndex:2403},{level:5,title:"步骤1",slug:"步骤1",normalizedTitle:"步骤1",charIndex:2413},{level:5,title:"步骤2",slug:"步骤2",normalizedTitle:"步骤2",charIndex:3173},{level:2,title:"融合客户端和服务端使用",slug:"融合客户端和服务端使用",normalizedTitle:"融合客户端和服务端使用",charIndex:3377},{level:4,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:168},{level:4,title:"查看服务端接口",slug:"查看服务端接口",normalizedTitle:"查看服务端接口",charIndex:3667}],headersStr:"简介 依赖关系及代码分析 拆分客户端及服务端使用 启动服务端 引入客户端 引入依赖-方式1 引入依赖-方式2 配置项 使用字典翻译 步骤1 步骤2 融合客户端和服务端使用 引入依赖 查看服务端接口",content:'# 简介\n\n可作用于字典服务及数据管理\n\n模块\n\nsimple-base-dict-api 字典翻译服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：用于实现翻译逻辑调用\nsimple-base-dict-service 字典翻译服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：数据表结构将自动创建、开放基础调用接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 依赖关系及代码分析\n\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动BaseDictServiceApplication的vm配置--无需连接Nacos\n\n-Dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n-Dspring.datasource.dynamic.datasource.master.username=\n-Dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n若要连接Nacos则再增加配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-dict-api</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-dict-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接Nacos则再增加vm配置\n\n-Dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-Dspring.cloud.nacos.username=\n-Dspring.cloud.nacos.password=\n-Dspring.cloud.nacos.discovery.enabled=true\n-Dspring.cloud.nacos.discovery.namespace=\n-Dspring.cloud.nacos.config.enabled=true\n-Dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-dict-api\n      param:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9030\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      dict:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n# 使用字典翻译\n\n# 步骤1\n\n实体类增加注解 @DictField\n若实体类内还有嵌套实体类需要翻译则使用 @DictEntity 如：\n\n@Data\npublic class PersonRemoteVo {\n    @Schema(description = "姓名")\n    private String name;\n\n    @Schema(description = "性别")\n    @DictField(dictionaryParams = "sex", relatedField = "sexText")\n    private Integer sex;\n    \n    private String sexText;\n    \n    @DictEntity\n    private PersonVo personVo;\n}\n\n@Data\npublic class PersonVo {\n    @Schema(description = "姓名")\n    private String name;\n\n    @Schema(description = "性别-默认实现类的json文件调用字典")\n    @DictField(dictionaryParams = "leader", dictImplBeanName = "localDictServiceImpl", relatedField = "leaderText")\n    private Integer leader;\n\n    private String leaderText;\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n# 步骤2\n\n在方法上增加注解 @Dict\n标注该方法调用后返回是翻译后的数据\n\n    @Dict\n    public PersonRemoteVo getPersonRemoteVo() {\n        return PersonRemoteVo.builder().name("吴小").idCard(1).hideIdentity(1).build();\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-base-dict-service</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\n例：可访问接口地址查看 http://127.0.0.1:9030/doc.html',normalizedContent:'# 简介\n\n可作用于字典服务及数据管理\n\n模块\n\nsimple-base-dict-api 字典翻译服务-客户端：   \n    若只引入客户端需要启动服务端并(配置服务端调用地址 或 开启服务自动发现)  \n\t主要功能：用于实现翻译逻辑调用\nsimple-base-dict-service 字典翻译服务-服务端：  \n    可直接引入依赖，作为客户端也作为服务端  \n\t主要功能：数据表结构将自动创建、开放基础调用接口 \n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 依赖关系及代码分析\n\n\n\n\n# 拆分客户端及服务端使用\n\n\n# 启动服务端\n\n下载代码\n\ngit clone https://github.com/ok1996/ok-system-simple.git\n\n\n1\n\n\n增加启动basedictserviceapplication的vm配置--无需连接nacos\n\n-dspring.datasource.dynamic.datasource.master.url=jdbc:mysql://127.0.0.1:3306/simple_demo?useunicode=true&characterencoding=utf8&zerodatetimebehavior=converttonull&usessl=true&servertimezone=gmt%2b8\n-dspring.datasource.dynamic.datasource.master.username=\n-dspring.datasource.dynamic.datasource.master.password=\n\n\n1\n2\n3\n\n\n若要连接nacos则再增加配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 引入客户端\n\n# 引入依赖-方式1\n\n所需工程使用仅需引入客户端依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-dict-api</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 引入依赖-方式2\n\n所需工程使用，引入服务端依赖，并通过配置文件关闭服务端功能，仅使用客户端功能\n便于灵活切换启用本身作为服务端\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-dict-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n配置项-关闭服务端功能\n\nsimple:\n  scan:\n    ## 关闭service依赖中service服务端，仅使用service依赖中的api客户端\n    service:\n      enabled: false\n\n\n1\n2\n3\n4\n5\n\n\n# 配置项\n\n若要连接nacos则再增加vm配置\n\n-dspring.cloud.nacos.server-addr=http://127.0.0.1:8848\n-dspring.cloud.nacos.username=\n-dspring.cloud.nacos.password=\n-dspring.cloud.nacos.discovery.enabled=true\n-dspring.cloud.nacos.discovery.namespace=\n-dspring.cloud.nacos.config.enabled=true\n-dspring.cloud.nacos.config.namespace=\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况1：若工程 或 服务端 没有启用服务发现，则需要在客户端中配置调用服务端的调用地址\n\nsimple:\n  feign:\n    base:\n      ## simple-base-dict-api\n      param:\n        # 未开启注册中心需要指定调用地址\n        url: http://localhost:9030\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n情况2：若工程 和 服务端 均启用服务发现，则在客户端中配置调用服务端的调用地址为空即可\n\nsimple:\n  feign:\n    base:\n      dict:\n        # 未开启注册中心需要指定调用地址\n        url: \n\n\n1\n2\n3\n4\n5\n6\n\n\n# 使用字典翻译\n\n# 步骤1\n\n实体类增加注解 @dictfield\n若实体类内还有嵌套实体类需要翻译则使用 @dictentity 如：\n\n@data\npublic class personremotevo {\n    @schema(description = "姓名")\n    private string name;\n\n    @schema(description = "性别")\n    @dictfield(dictionaryparams = "sex", relatedfield = "sextext")\n    private integer sex;\n    \n    private string sextext;\n    \n    @dictentity\n    private personvo personvo;\n}\n\n@data\npublic class personvo {\n    @schema(description = "姓名")\n    private string name;\n\n    @schema(description = "性别-默认实现类的json文件调用字典")\n    @dictfield(dictionaryparams = "leader", dictimplbeanname = "localdictserviceimpl", relatedfield = "leadertext")\n    private integer leader;\n\n    private string leadertext;\n}\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n# 步骤2\n\n在方法上增加注解 @dict\n标注该方法调用后返回是翻译后的数据\n\n    @dict\n    public personremotevo getpersonremotevo() {\n        return personremotevo.builder().name("吴小").idcard(1).hideidentity(1).build();\n    }\n\n\n1\n2\n3\n4\n\n\n\n# 融合客户端和服务端使用\n\n直接引入service依赖即包含客户端和服务端功能\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-base-dict-service</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n# 查看服务端接口\n\n例：可访问接口地址查看 http://127.0.0.1:9030/doc.html',charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"关于",frontmatter:{aboutPage:!0,title:"关于",permalink:"/about/",article:!1},regularPath:"/@pages/about.html",relativePath:"@pages/about.md",key:"v-8cc8a7c4",path:"/about/",headers:[{level:2,title:"个人信息",slug:"个人信息",normalizedTitle:"个人信息",charIndex:2}],headersStr:"个人信息",content:"# 个人信息\n\n名称       信息\n现所在地     广州\n开始工作时间   2017-12\n邮箱       ku29@qq.com\n岗位       Java开发工程师",normalizedContent:"# 个人信息\n\n名称       信息\n现所在地     广州\n开始工作时间   2017-12\n邮箱       ku29@qq.com\n岗位       java开发工程师",charsets:{cjk:!0},lastUpdated:"2023/06/17, 09:00:35",lastUpdatedTimestamp:1686992435e3},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-834a75d4",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/10, 07:14:11",lastUpdatedTimestamp:1678432451e3},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-47258ff6",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/10, 07:14:11",lastUpdatedTimestamp:1678432451e3},{title:"友情链接",frontmatter:{friendsPage:!0,title:"友情链接",permalink:"/friends/",article:!1},regularPath:"/@pages/friends.html",relativePath:"@pages/friends.md",key:"v-5066100e",path:"/friends/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/12/08, 08:08:50",lastUpdatedTimestamp:170202293e4},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-35f74b96",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/03/10, 07:14:11",lastUpdatedTimestamp:1678432451e3},{title:"Home",frontmatter:{home:!0,heroText:"吴小库",tagline:"小渔村的板砖师傅",actionText:"开始使用 →",actionLink:"/pages/8e9dc3p24111/",bannerBg:"none",features:[{title:"OpenSource",details:"开源项目贡献积累"},{title:"Backstage",details:"打码与部署的日常"},{title:"Application",details:"应用与使用的操作"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-84b10022",path:"/",headers:[{level:2,title:"✉️ 联系",slug:"联系",normalizedTitle:"✉️ 联系",charIndex:2}],headersStr:"✉️ 联系",content:"# ✉️ 联系\n\nContact information\n\n * Email: ku29@qq.com\n * GitHub: https://github.com/ok1996\n",normalizedContent:"# ✉️ 联系\n\ncontact information\n\n * email: ku29@qq.com\n * github: https://github.com/ok1996\n",charsets:{cjk:!0},lastUpdated:"2024/02/19, 02:59:10",lastUpdatedTimestamp:170831155e4},{title:"simple-starter-datasource",frontmatter:{title:"simple-starter-datasource",date:"2023-04-04T16:01:24.000Z",permalink:"/pages/646b79p24111/",categories:["OpenSource"],tags:[null],author:{name:"xiaoku",link:"https://github.com/ok1996"}},regularPath:"/05.OpenSource/03.2024.1.1.1/02.%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E6%A8%A1%E5%9D%97/06.simple-starter-datasource.html",relativePath:"05.OpenSource/03.2024.1.1.1/02.自动装配模块/06.simple-starter-datasource.md",key:"v-deae9708",path:"/pages/646b79p24111/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:2,title:"引入依赖",slug:"引入依赖",normalizedTitle:"引入依赖",charIndex:138},{level:2,title:"配置项",slug:"配置项",normalizedTitle:"配置项",charIndex:388},{level:2,title:"功能",slug:"功能",normalizedTitle:"功能",charIndex:53},{level:3,title:"自动创建库",slug:"自动创建库",normalizedTitle:"自动创建库",charIndex:613},{level:3,title:"分页插件",slug:"分页插件",normalizedTitle:"分页插件",charIndex:769},{level:3,title:"分页请求参数",slug:"分页请求参数",normalizedTitle:"分页请求参数",charIndex:827},{level:3,title:"工具类",slug:"工具类",normalizedTitle:"工具类",charIndex:901},{level:3,title:"MapperLocations",slug:"mapperlocations",normalizedTitle:"mapperlocations",charIndex:84},{level:4,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:1244},{level:4,title:"问题点",slug:"问题点",normalizedTitle:"问题点",charIndex:1407},{level:4,title:"解决示例",slug:"解决示例",normalizedTitle:"解决示例",charIndex:1835}],headersStr:"简介 引入依赖 配置项 功能 自动创建库 分页插件 分页请求参数 工具类 MapperLocations 介绍 问题点 解决示例",content:'# 简介\n\n依赖使用HikariCP、P6spy监控日志、MybatisPlus、包含通用CURD控制层\n功能：启动应用程序自动创建数据库、自动创建表\n功能：通过实例化MapperLocations获取配置值 追加配置文件中的 mapperLocations 属性值\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupId>cn.iosd</groupId>\n            <artifactId>simple-starter-datasource</artifactId>\n            <version>Version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  datasource:\n    #自动创建数据库 缺省项为true \n    autoCreateDatabase: true\n    locations:\n      ## 开启实现MapperLocationsProvider接口获取配置值，实现接口追加配置文件中mapper-locations属性 缺省项为true\n      enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 功能\n\n\n# 自动创建库\n\n业务逻辑类：DatabaseInitializer\n实现了ApplicationContextInitializer接口，用于在Spring应用程序上下文初始化时初始化数据库。\n从应用程序上下文环境中获取数据库连接属性，并根据jdbcUrl解析出数据库名，然后执行创建数据库的SQL语句。\n\n\n# 分页插件\n\n启用配置类效果代码：MybatisPlusConfig\n使用：mybatis-plus分页插件\n\n\n# 分页请求参数\n\n实体类：PageRequest\n一个封装了分页请求参数的Java类，包含起始页、每页显示记录数、排序、查询条件参数等字段。\n\n\n# 工具类\n\n将自定义的分页对象PageRequest转换为mybatisPlus的分页对象Page\n使用示例：\n\n    @Operation(summary = "Api-查询-分页")\n    @PostMapping("/api/page")\n    public Response<IPage<T>> apiPage(@RequestBody PageRequest<T> req) {\n        return Response.ok(service.page(DsConvertUtil.page(req), Wrappers.lambdaQuery(req.getData())));\n    }\n\n\n1\n2\n3\n4\n5\n\n\n\n# MapperLocations\n\n# 介绍\n\n实例化MapperLocations获取配置值 覆盖配置文件中的 mapperLocations 属性值\n解决：各个模块不同mapper-locations配置能在父级模块没有配置其需要的mapper-locations时能正常使用\n注意项：当开启时，配置文件中的mapperLocations属性值可同时生效\n\n# 问题点\n\n例\n\n子模块工程所需 配置文件参数\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/base/**/*Mapper.xml\n父模块依赖子模块，而父模块的配置文件参数实际为\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/test/**/*Mapper.xml\n\n\n1\n2\n3\n4\n\n\n父模块运行时，对于子模块调用的mapper接口将会报错：\n\nInvalid bound statement (not found):\n\n\n1\n\n\n除非父模块配置包含子模块的参数，这样需要知道各个子模块所需配置，较为麻烦\n\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/test/**/*Mapper.xml,classpath*:/cn/iosd/base/**/*Mapper.xml\n\n\n1\n\n\n# 解决示例\n\n子模块实例化MapperLocations\n\n    @Bean\n    public MapperLocations paramMapperLocations() {\n        return MapperLocations.of("classpath*:/cn/iosd/base/param/mapper/**/*Mapper.xml");\n    }\n\n\n1\n2\n3\n4\n\n\n父模块实现MapperLocationsProvider\n\n    @Bean\n    public MapperLocations collectionMapperLocations() {\n        return MapperLocations.of("classpath*:/cn/iosd/test/**/*Mapper.xml");\n    }\n\n\n1\n2\n3\n4\n',normalizedContent:'# 简介\n\n依赖使用hikaricp、p6spy监控日志、mybatisplus、包含通用curd控制层\n功能：启动应用程序自动创建数据库、自动创建表\n功能：通过实例化mapperlocations获取配置值 追加配置文件中的 mapperlocations 属性值\n\n\n# 引入依赖\n\n    <dependencies>\n        <dependency>\n            <groupid>cn.iosd</groupid>\n            <artifactid>simple-starter-datasource</artifactid>\n            <version>version</version>\n        </dependency>\n    </dependencies>\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 配置项\n\nsimple:\n  datasource:\n    #自动创建数据库 缺省项为true \n    autocreatedatabase: true\n    locations:\n      ## 开启实现mapperlocationsprovider接口获取配置值，实现接口追加配置文件中mapper-locations属性 缺省项为true\n      enabled: true\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 功能\n\n\n# 自动创建库\n\n业务逻辑类：databaseinitializer\n实现了applicationcontextinitializer接口，用于在spring应用程序上下文初始化时初始化数据库。\n从应用程序上下文环境中获取数据库连接属性，并根据jdbcurl解析出数据库名，然后执行创建数据库的sql语句。\n\n\n# 分页插件\n\n启用配置类效果代码：mybatisplusconfig\n使用：mybatis-plus分页插件\n\n\n# 分页请求参数\n\n实体类：pagerequest\n一个封装了分页请求参数的java类，包含起始页、每页显示记录数、排序、查询条件参数等字段。\n\n\n# 工具类\n\n将自定义的分页对象pagerequest转换为mybatisplus的分页对象page\n使用示例：\n\n    @operation(summary = "api-查询-分页")\n    @postmapping("/api/page")\n    public response<ipage<t>> apipage(@requestbody pagerequest<t> req) {\n        return response.ok(service.page(dsconvertutil.page(req), wrappers.lambdaquery(req.getdata())));\n    }\n\n\n1\n2\n3\n4\n5\n\n\n\n# mapperlocations\n\n# 介绍\n\n实例化mapperlocations获取配置值 覆盖配置文件中的 mapperlocations 属性值\n解决：各个模块不同mapper-locations配置能在父级模块没有配置其需要的mapper-locations时能正常使用\n注意项：当开启时，配置文件中的mapperlocations属性值可同时生效\n\n# 问题点\n\n例\n\n子模块工程所需 配置文件参数\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/base/**/*mapper.xml\n父模块依赖子模块，而父模块的配置文件参数实际为\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/test/**/*mapper.xml\n\n\n1\n2\n3\n4\n\n\n父模块运行时，对于子模块调用的mapper接口将会报错：\n\ninvalid bound statement (not found):\n\n\n1\n\n\n除非父模块配置包含子模块的参数，这样需要知道各个子模块所需配置，较为麻烦\n\nmybatis-plus.mapper-locations=classpath*:/cn/iosd/test/**/*mapper.xml,classpath*:/cn/iosd/base/**/*mapper.xml\n\n\n1\n\n\n# 解决示例\n\n子模块实例化mapperlocations\n\n    @bean\n    public mapperlocations parammapperlocations() {\n        return mapperlocations.of("classpath*:/cn/iosd/base/param/mapper/**/*mapper.xml");\n    }\n\n\n1\n2\n3\n4\n\n\n父模块实现mapperlocationsprovider\n\n    @bean\n    public mapperlocations collectionmapperlocations() {\n        return mapperlocations.of("classpath*:/cn/iosd/test/**/*mapper.xml");\n    }\n\n\n1\n2\n3\n4\n',charsets:{cjk:!0},lastUpdated:"2024/02/19, 03:10:11",lastUpdatedTimestamp:1708312211e3}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"开源项目",items:[{text:"2024.1.1.0",link:"/pages/8e9dc3p24110/"},{text:"2024.1.1.1",link:"/pages/8e9dc3p24111/"}]},{text:"技术分类",items:[{text:"Java",link:"/note/java/"},{text:"Linux",link:"/note/linux/"},{text:"Deploy",link:"/note/deploy/"},{text:"Application",link:"/note/application/"}]},{text:"关于",link:"/about/"},{text:"友情链接",link:"/friends/"}],sidebarDepth:2,logo:"/img/20230310/logo.3mn8xlqm9oy0.webp",repo:"ok1996",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",editLinks:!1,editLinkText:"编辑",updateBar:{showToArticle:!1,moreArticle:"/archives"},sidebar:{"/00.目录页/":[["01.Java.md","Java","/note/java"],["02.Linux.md","Linux","/note/linux"],["03.Deploy.md","Deploy","/note/deploy"],["04.Application.md","Application","/note/application"],["05.OpenSource.md","OpenSource","/note/openSource"]],catalogue:{Java:"/note/java",Linux:"/note/linux",Deploy:"/note/deploy",Application:"/note/application",OpenSource:"/note/openSource"},"/01.Java/":[["01.Springboot集成redis.md","Springboot集成redis","/pages/cc9343/"],["02.Springboot集成mongodb.md","Springboot集成mongodb","/pages/79082f/"],["03.Springboot集成FastDFS.md","Springboot集成FastDFS","/pages/b7c561/"],["04.Springboot集成WebSocket.md","Springboot集成WebSocket","/pages/054331/"],["05.Springboot集成kafka.md","Springboot集成kafka","/pages/957251/"],["06.Springboot集成Flyway.md","Springboot集成Flyway","/pages/25bc68/"],["07.Springboot集成ScheduleTask.md","Springboot集成ScheduleTask","/pages/95e55e/"],["08.Validation数据校验规范使用.md","Validation数据校验规范使用","/pages/308d39/"],["09.常用代码.md","常用代码","/pages/84b073/"]],"/02.Linux/":[["01.Linux常用命令.md","Linux常用命令","/pages/8c2b69/"],["02.玩客云刷高版本Linux.md","玩客云刷高版本Linux","/pages/e9b41d/"],["03.端口映射.md","端口映射","/pages/0d3d62/"],["04.安装Ubuntu.md","安装Ubuntu","/pages/152f6b/"]],"/03.Deploy/":[["01.Docker一键部署.md","Docker一键部署","/pages/74ea91/"],["02.Mysql主从配置一键化.md","Mysql主从配置一键化","/pages/d04772/"],["03.Mysql新建主从同步-mysqldump.md","Mysql新建主从同步-mysqldump","/pages/b6e922/"],["04.SkyWalking部署及使用.md","SkyWalking部署及使用","/pages/3c702b/"],["05.Prometheus部署及使用.md","Prometheus部署及使用","/pages/bb3405/"],["07.K8S-CICD.md","K8S-CICD","/pages/d23db1/"],["08.K8S-在线安装 .md","K8S-在线安装","/pages/c5c5bb/"],["09.K3S-在线安装.md","K3S-在线安装","/pages/04f4f5/"],["10.K3S-CICD.md","K3S-CICD","/pages/de1358/"]],"/04.Application/":[{title:"Nginx",collapsable:!0,children:[["01.Nginx/01.常用lua命令.md","常用lua命令","/pages/076107/"],["01.Nginx/02.常用Nginx配置.md","常用Nginx配置","/pages/938c44/"]]},{title:"Git",collapsable:!0,children:[["02.Git/01.修改已提交的commit的注释.md","修改已提交的commit的注释","/pages/f062a7/"],["02.Git/02.修改已提交的用户名与邮箱.md","修改已提交的用户名与邮箱","/pages/dfef00/"],["02.Git/03.纯Git服务器搭载.md","纯Git服务器搭载","/pages/9de1e8/"]]},{title:"Docker",collapsable:!0,children:[["03.Docker/01.常用docker命令.md","常用docker命令","/pages/d6f4bc/"],["03.Docker/02.使用docker构建前端项目.md","使用docker构建前端项目","/pages/8a962d/"],["03.Docker/03.导出docker镜像脚本.md","导出docker镜像脚本","/pages/b2456e/"]]},{title:"Vue",collapsable:!0,children:[["04.Vue/01.常用Vue方法.md","常用Vue方法","/pages/182fb5/"]]},{title:"Macos",collapsable:!0,children:[["05.Macos/01.使用跳板机进行端口转发-插件版.md","使用跳板机进行端口转发-插件版","/pages/92cff2/"],["05.Macos/02.使用跳板机进行端口转发-自动化.md","使用跳板机进行端口转发-自动化","/pages/d83da9/"],["05.Macos/03.常用功能.md","常用功能","/pages/a4c46d/"]]}],"/05.OpenSource/":[["01.版本日志.md","版本日志","/pages/ae03ef/"],["02.贡献清单.md","贡献清单","/pages/bf6444/"],{title:"2024.1.1.1",collapsable:!0,children:[["03.2024.1.1.1/01.Simple-Starter概述.md","Simple-Starter概述","/pages/8e9dc3p24111/"],{title:"自动装配模块",collapsable:!0,children:[["03.2024.1.1.1/02.自动装配模块/01.simple-starter-web.md","simple-starter-web","/pages/e96f70p24111/"],["03.2024.1.1.1/02.自动装配模块/02.simple-starter-redisson.md","simple-starter-redisson","/pages/abc4e3p24111/"],["03.2024.1.1.1/02.自动装配模块/03.simple-starter-s3.md","simple-starter-s3","/pages/ea099ap24111/"],["03.2024.1.1.1/02.自动装配模块/04.simple-starter-socket.md","simple-starter-socket","/pages/09cd4bp24111/"],["03.2024.1.1.1/02.自动装配模块/05.simple-starter-grpc.md","simple-starter-grpc","/pages/198071p24111/"],["03.2024.1.1.1/02.自动装配模块/06.simple-starter-datasource.md","simple-starter-datasource","/pages/646b79p24111/"],["03.2024.1.1.1/02.自动装配模块/07.simple-starter-freemarker.md","simple-starter-freemarker","/pages/7ef54ap24111/"],["03.2024.1.1.1/02.自动装配模块/08.simple-starter-cloud.md","simple-starter-cloud","/pages/8df481p24111/"],["03.2024.1.1.1/02.自动装配模块/09.simple-starter-encrypt.md","simple-starter-encrypt","/pages/3e32b3p24111/"],["03.2024.1.1.1/02.自动装配模块/10.simple-starter-dict.md","simple-starter-dict","/pages/9b689cp24111/"],["03.2024.1.1.1/02.自动装配模块/11.simple-starter-email.md","simple-starter-email","/pages/6c8e05p24111/"],["03.2024.1.1.1/02.自动装配模块/12.simple-starter-gateway.md","simple-starter-gateway","/pages/b688b7p24111/"],["03.2024.1.1.1/02.自动装配模块/13.simple-starter-package.md","simple-starter-package","/pages/b666q2p24111/"]]},{title:"服务类模块",collapsable:!0,children:[["03.2024.1.1.1/03.服务类模块/01.simple-base-config.md","simple-base-config","/pages/0f3b13p24111/"],["03.2024.1.1.1/03.服务类模块/02.simple-base-s3.md","simple-base-s3","/pages/e7cd28p24111/"],["03.2024.1.1.1/03.服务类模块/03.simple-base-generator.md","simple-base-generator","/pages/0e22dbp24111/"],["03.2024.1.1.1/03.服务类模块/04.simple-base-dict.md","simple-base-dict","/pages/0a2b14p24111/"]]},{title:"工具类模块",collapsable:!0,children:[["03.2024.1.1.1/04.工具类模块/01.simple-utils-common.md","simple-utils-common","/pages/e023q8p24111/"],["03.2024.1.1.1/04.工具类模块/02.simple-utils-jackson.md","simple-utils-jackson","/pages/e01328p24111/"]]}]},{title:"2024.1.1.0",collapsable:!0,children:[["04.2024.1.1.0/01.Simple-Starter概述.md","Simple-Starter概述","/pages/8e9dc3p24110/"],{title:"自动装配模块",collapsable:!0,children:[["04.2024.1.1.0/02.自动装配模块/01.simple-starter-web.md","simple-starter-web","/pages/e96f70p24110/"],["04.2024.1.1.0/02.自动装配模块/02.simple-starter-redisson.md","simple-starter-redisson","/pages/abc4e3p24110/"],["04.2024.1.1.0/02.自动装配模块/03.simple-starter-s3.md","simple-starter-s3","/pages/ea099ap24110/"],["04.2024.1.1.0/02.自动装配模块/04.simple-starter-socket.md","simple-starter-socket","/pages/09cd4bp24110/"],["04.2024.1.1.0/02.自动装配模块/05.simple-starter-grpc.md","simple-starter-grpc","/pages/198071p24110/"],["04.2024.1.1.0/02.自动装配模块/06.simple-starter-datasource.md","simple-starter-datasource","/pages/646b79p24110/"],["04.2024.1.1.0/02.自动装配模块/07.simple-starter-freemarker.md","simple-starter-freemarker","/pages/7ef54ap24110/"],["04.2024.1.1.0/02.自动装配模块/08.simple-starter-cloud.md","simple-starter-cloud","/pages/8df481p24110/"],["04.2024.1.1.0/02.自动装配模块/09.simple-starter-encrypt.md","simple-starter-encrypt","/pages/3e32b3p24110/"],["04.2024.1.1.0/02.自动装配模块/10.simple-starter-dict.md","simple-starter-dict","/pages/9b689cp24110/"],["04.2024.1.1.0/02.自动装配模块/11.simple-starter-email.md","simple-starter-email","/pages/6c8e05p24110/"],["04.2024.1.1.0/02.自动装配模块/12.simple-starter-gateway.md","simple-starter-gateway","/pages/b688b7p24110/"],["04.2024.1.1.0/02.自动装配模块/13.simple-starter-package.md","simple-starter-package","/pages/b666q2p24110/"]]},{title:"服务类模块",collapsable:!0,children:[["04.2024.1.1.0/03.服务类模块/01.simple-base-config.md","simple-base-config","/pages/0f3b13p24110/"],["04.2024.1.1.0/03.服务类模块/02.simple-base-s3.md","simple-base-s3","/pages/e7cd28p24110/"],["04.2024.1.1.0/03.服务类模块/03.simple-base-generator.md","simple-base-generator","/pages/0e22dbp24110/"],["04.2024.1.1.0/03.服务类模块/04.simple-base-dict.md","simple-base-dict","/pages/0a2b14p24110/"]]}]}]},author:{name:"ok1996",link:"https://github.com/ok1996"},blogger:{avatar:"/img/20230310/logo.3mn8xlqm9oy0.webp",name:"Xiao ku",slogan:"板砖师傅"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:ku29@qq.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/ok1996"}]},footer:{createYear:2019,copyrightInfo:""},extendFrontmatter:{author:{name:"xiaoku",link:"https://github.com/ok1996"}}},locales:{"/":{lang:"zh-CN",title:"北山小库",description:"小渔村的板砖师傅",path:"/"}}};var xl=t(94),_l=t(95),wl=t(11);var Sl={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(wl.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(wl.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(wl.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,a=n.length;r<a;r++){const{frontmatter:{categories:a,tags:i}}=n[r];"array"===Object(wl.n)(a)&&a.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(wl.n)(i)&&i.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Ht.component(xl.default),Ht.component(_l.default);function Tl(n){return n.toString().padStart(2,"0")}t(243);Ht.component("Badge",()=>Promise.all([t.e(0),t.e(19)]).then(t.bind(null,710))),Ht.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,94))),Ht.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,95)));t(244);var jl=[({Vue:n,options:e,router:t,siteData:r})=>{},({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${Tl(n.getUTCMonth()+1)}-${Tl(n.getUTCDate())} ${Tl(n.getUTCHours())}:${Tl(n.getUTCMinutes())}:${Tl(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(Sl)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&function(){var n=document.createElement("script"),e=window.location.protocol.split(":")[0];n.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}()},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?503f098e7e5b3a5b5d8c5fc2938af002";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],Il=[];class zl extends class{constructor(){this.store=new Ht({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Ht.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(zl.prototype,{getPageAsyncComponent:io,getLayoutAsyncComponent:so,getAsyncComponent:oo,getVueComponent:lo});var El={install(n){const e=new zl;n.$vuepress=e,n.prototype.$vuepress=e}};function Cl(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Dl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return po("pageKey",e),Ht.component(e)||Ht.component(e,io(e)),Ht.component(e)?n(e):n("")}},Al={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Ol={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Pl=(t(245),t(246),Object(bl.a)(Ol,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Ll={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Ht.config.productionTip=!1,Ht.use($s),Ht.use(El),Ht.mixin(function(n,e,t=Ht){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),a=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),i={};return Object.keys(a).reduce((n,e)=>(e.startsWith("$")&&(n[e]=a[e].get),n),i),{computed:i}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},yl)),Ht.component("Content",Dl),Ht.component("ContentSlotsDistributor",Al),Ht.component("OutboundLink",Pl),Ht.component("ClientOnly",Ll),Ht.component("Layout",so("Layout")),Ht.component("NotFound",so("NotFound")),Ht.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.5",hash:"5b79fdb"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:yl.routerBase||yl.base,t=new $s({base:e,mode:"history",fallback:!1,routes:kl,scrollBehavior:(n,e,t)=>t||(n.hash?!Ht.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(Cl(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Cl(n,t)?r(t):r()}else r();else{const t=e.path+"/",a=e.path+".html";Cl(n,a)?r(a):Cl(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(jl.filter(n=>"function"==typeof n).map(e=>e({Vue:Ht,options:r,router:t,siteData:yl,isServer:n})))}catch(n){console.error(n)}return{app:new Ht(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},Il.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);